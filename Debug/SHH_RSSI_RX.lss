
SHH_RSSI_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003468  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001cc  20000000  00003468  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000041a0  200001cc  00003634  000201cc  2**2
                  ALLOC
  3 .stack        00002004  2000436c  000077d4  000201cc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004940f  00000000  00000000  0002024d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005a9c  00000000  00000000  0006965c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006790  00000000  00000000  0006f0f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000007d8  00000000  00000000  00075888  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000007f8  00000000  00000000  00076060  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000176a4  00000000  00000000  00076858  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000133bf  00000000  00000000  0008defc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00062d4a  00000000  00000000  000a12bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000012bc  00000000  00000000  00104008  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	70 63 00 20 71 2c 00 00 6d 2c 00 00 6d 2c 00 00     pc. q,..m,..m,..
	...
      2c:	6d 2c 00 00 00 00 00 00 00 00 00 00 6d 2c 00 00     m,..........m,..
      3c:	6d 2c 00 00 6d 2c 00 00 6d 2c 00 00 f1 07 00 00     m,..m,..m,......
      4c:	6d 2c 00 00 a1 01 00 00 6d 2c 00 00 6d 2c 00 00     m,......m,..m,..
      5c:	15 22 00 00 25 22 00 00 35 22 00 00 45 22 00 00     ."..%"..5"..E"..
      6c:	55 22 00 00 65 22 00 00 9d 03 00 00 ad 03 00 00     U"..e"..........
      7c:	bd 03 00 00 cd 03 00 00 dd 03 00 00 ed 03 00 00     ................
      8c:	fd 03 00 00 0d 04 00 00 6d 2c 00 00 6d 2c 00 00     ........m,..m,..
      9c:	6d 2c 00 00 6d 2c 00 00                             m,..m,..

000000a4 <__do_global_dtors_aux>:
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
      b0:	2b00      	cmp	r3, #0
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
      bc:	7023      	strb	r3, [r4, #0]
      be:	bd10      	pop	{r4, pc}
      c0:	200001cc 	.word	0x200001cc
      c4:	00000000 	.word	0x00000000
      c8:	00003468 	.word	0x00003468

000000cc <frame_dummy>:
      cc:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
      ce:	b510      	push	{r4, lr}
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
      d4:	4907      	ldr	r1, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4808      	ldr	r0, [pc, #32]	; (f8 <frame_dummy+0x2c>)
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
      e4:	bd10      	pop	{r4, pc}
      e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e8:	2b00      	cmp	r3, #0
      ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
      ec:	4798      	blx	r3
      ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
      f0:	00000000 	.word	0x00000000
      f4:	200001d0 	.word	0x200001d0
      f8:	00003468 	.word	0x00003468
      fc:	00003468 	.word	0x00003468
     100:	00000000 	.word	0x00000000

00000104 <watchdog_early_warning_callback>:


void watchdog_early_warning_callback(void)
{
	
}
     104:	4770      	bx	lr
	...

00000108 <configure_wdt>:

void configure_wdt(void)
{
     108:	b500      	push	{lr}
     10a:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->always_on            = false;
     10c:	2300      	movs	r3, #0
     10e:	466a      	mov	r2, sp
     110:	7013      	strb	r3, [r2, #0]
	config->enable               = true;
     112:	2201      	movs	r2, #1
     114:	4669      	mov	r1, sp
     116:	704a      	strb	r2, [r1, #1]
#if !(SAML21) && !(SAML22) && !(SAMC20) && !(SAMC21) && !(SAMR30)
	config->clock_source         = GCLK_GENERATOR_4;
     118:	3203      	adds	r2, #3
     11a:	708a      	strb	r2, [r1, #2]
#endif
	config->timeout_period       = WDT_PERIOD_16384CLK;
	config->window_period        = WDT_PERIOD_NONE;
     11c:	710b      	strb	r3, [r1, #4]
	//! [setup_3]
	config_wdt.always_on            = false;
#if !((SAML21) || (SAMC21) || (SAML22) || (SAMR30))
	config_wdt.clock_source         = GCLK_GENERATOR_4;
#endif
	config_wdt.timeout_period       = WDT_PERIOD_4096CLK;
     11e:	330a      	adds	r3, #10
     120:	70cb      	strb	r3, [r1, #3]
	config_wdt.early_warning_period = WDT_PERIOD_2048CLK;
     122:	3b01      	subs	r3, #1
     124:	714b      	strb	r3, [r1, #5]
	//! [setup_3]

	/* Initialize and enable the Watchdog with the user settings */
	//! [setup_4]
	wdt_set_config(&config_wdt);
     126:	4668      	mov	r0, sp
     128:	4b01      	ldr	r3, [pc, #4]	; (130 <configure_wdt+0x28>)
     12a:	4798      	blx	r3
	//! [setup_4]
}
     12c:	b003      	add	sp, #12
     12e:	bd00      	pop	{pc}
     130:	000006a5 	.word	0x000006a5

00000134 <configure_wdt_callbacks>:

void configure_wdt_callbacks(void)
{
     134:	b510      	push	{r4, lr}
	//! [setup_5]
	wdt_register_callback(watchdog_early_warning_callback,
     136:	2100      	movs	r1, #0
     138:	4803      	ldr	r0, [pc, #12]	; (148 <configure_wdt_callbacks+0x14>)
     13a:	4b04      	ldr	r3, [pc, #16]	; (14c <configure_wdt_callbacks+0x18>)
     13c:	4798      	blx	r3
		WDT_CALLBACK_EARLY_WARNING);
	//! [setup_5]

	//! [setup_6]
	wdt_enable_callback(WDT_CALLBACK_EARLY_WARNING);
     13e:	2000      	movs	r0, #0
     140:	4b03      	ldr	r3, [pc, #12]	; (150 <configure_wdt_callbacks+0x1c>)
     142:	4798      	blx	r3
	//! [setup_6]
}
     144:	bd10      	pop	{r4, pc}
     146:	46c0      	nop			; (mov r8, r8)
     148:	00000105 	.word	0x00000105
     14c:	000007bd 	.word	0x000007bd
     150:	000007d1 	.word	0x000007d1

00000154 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     154:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     156:	2a00      	cmp	r2, #0
     158:	d001      	beq.n	15e <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     15a:	0018      	movs	r0, r3
     15c:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
     15e:	008b      	lsls	r3, r1, #2
     160:	4a06      	ldr	r2, [pc, #24]	; (17c <extint_register_callback+0x28>)
     162:	589b      	ldr	r3, [r3, r2]
     164:	2b00      	cmp	r3, #0
     166:	d003      	beq.n	170 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
     168:	4283      	cmp	r3, r0
     16a:	d005      	beq.n	178 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
     16c:	231d      	movs	r3, #29
     16e:	e7f4      	b.n	15a <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     170:	0089      	lsls	r1, r1, #2
     172:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     174:	2300      	movs	r3, #0
     176:	e7f0      	b.n	15a <extint_register_callback+0x6>
		return STATUS_OK;
     178:	2300      	movs	r3, #0
     17a:	e7ee      	b.n	15a <extint_register_callback+0x6>
     17c:	200042f0 	.word	0x200042f0

00000180 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     180:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     182:	2900      	cmp	r1, #0
     184:	d001      	beq.n	18a <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
     186:	0018      	movs	r0, r3
     188:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     18a:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     18c:	281f      	cmp	r0, #31
     18e:	d800      	bhi.n	192 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
     190:	4a02      	ldr	r2, [pc, #8]	; (19c <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
     192:	2301      	movs	r3, #1
     194:	4083      	lsls	r3, r0
     196:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
     198:	2300      	movs	r3, #0
     19a:	e7f4      	b.n	186 <extint_chan_enable_callback+0x6>
     19c:	40001800 	.word	0x40001800

000001a0 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     1a0:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     1a2:	2200      	movs	r2, #0
     1a4:	4b10      	ldr	r3, [pc, #64]	; (1e8 <EIC_Handler+0x48>)
     1a6:	701a      	strb	r2, [r3, #0]
     1a8:	2300      	movs	r3, #0
     1aa:	4910      	ldr	r1, [pc, #64]	; (1ec <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     1ac:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     1ae:	4e10      	ldr	r6, [pc, #64]	; (1f0 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     1b0:	4c0d      	ldr	r4, [pc, #52]	; (1e8 <EIC_Handler+0x48>)
     1b2:	e00a      	b.n	1ca <EIC_Handler+0x2a>
		return eics[eic_index];
     1b4:	490d      	ldr	r1, [pc, #52]	; (1ec <EIC_Handler+0x4c>)
     1b6:	e008      	b.n	1ca <EIC_Handler+0x2a>
     1b8:	7823      	ldrb	r3, [r4, #0]
     1ba:	3301      	adds	r3, #1
     1bc:	b2db      	uxtb	r3, r3
     1be:	7023      	strb	r3, [r4, #0]
     1c0:	2b0f      	cmp	r3, #15
     1c2:	d810      	bhi.n	1e6 <EIC_Handler+0x46>
		return NULL;
     1c4:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     1c6:	2b1f      	cmp	r3, #31
     1c8:	d9f4      	bls.n	1b4 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     1ca:	0028      	movs	r0, r5
     1cc:	4018      	ands	r0, r3
     1ce:	2201      	movs	r2, #1
     1d0:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     1d2:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     1d4:	4210      	tst	r0, r2
     1d6:	d0ef      	beq.n	1b8 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     1d8:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     1da:	009b      	lsls	r3, r3, #2
     1dc:	599b      	ldr	r3, [r3, r6]
     1de:	2b00      	cmp	r3, #0
     1e0:	d0ea      	beq.n	1b8 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     1e2:	4798      	blx	r3
     1e4:	e7e8      	b.n	1b8 <EIC_Handler+0x18>
			}
		}
	}
}
     1e6:	bd70      	pop	{r4, r5, r6, pc}
     1e8:	200042ec 	.word	0x200042ec
     1ec:	40001800 	.word	0x40001800
     1f0:	200042f0 	.word	0x200042f0

000001f4 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     1f4:	4a04      	ldr	r2, [pc, #16]	; (208 <_extint_enable+0x14>)
     1f6:	7813      	ldrb	r3, [r2, #0]
     1f8:	2102      	movs	r1, #2
     1fa:	430b      	orrs	r3, r1
     1fc:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     1fe:	7853      	ldrb	r3, [r2, #1]
     200:	b25b      	sxtb	r3, r3
     202:	2b00      	cmp	r3, #0
     204:	dbfb      	blt.n	1fe <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     206:	4770      	bx	lr
     208:	40001800 	.word	0x40001800

0000020c <_system_extint_init>:
{
     20c:	b500      	push	{lr}
     20e:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     210:	4a12      	ldr	r2, [pc, #72]	; (25c <_system_extint_init+0x50>)
     212:	6993      	ldr	r3, [r2, #24]
     214:	2140      	movs	r1, #64	; 0x40
     216:	430b      	orrs	r3, r1
     218:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     21a:	a901      	add	r1, sp, #4
     21c:	2300      	movs	r3, #0
     21e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     220:	2003      	movs	r0, #3
     222:	4b0f      	ldr	r3, [pc, #60]	; (260 <_system_extint_init+0x54>)
     224:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     226:	2003      	movs	r0, #3
     228:	4b0e      	ldr	r3, [pc, #56]	; (264 <_system_extint_init+0x58>)
     22a:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     22c:	4a0e      	ldr	r2, [pc, #56]	; (268 <_system_extint_init+0x5c>)
     22e:	7813      	ldrb	r3, [r2, #0]
     230:	2101      	movs	r1, #1
     232:	430b      	orrs	r3, r1
     234:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     236:	7853      	ldrb	r3, [r2, #1]
     238:	b25b      	sxtb	r3, r3
     23a:	2b00      	cmp	r3, #0
     23c:	dbfb      	blt.n	236 <_system_extint_init+0x2a>
     23e:	4b0b      	ldr	r3, [pc, #44]	; (26c <_system_extint_init+0x60>)
     240:	0019      	movs	r1, r3
     242:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     244:	2200      	movs	r2, #0
     246:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     248:	4299      	cmp	r1, r3
     24a:	d1fc      	bne.n	246 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     24c:	2210      	movs	r2, #16
     24e:	4b08      	ldr	r3, [pc, #32]	; (270 <_system_extint_init+0x64>)
     250:	601a      	str	r2, [r3, #0]
	_extint_enable();
     252:	4b08      	ldr	r3, [pc, #32]	; (274 <_system_extint_init+0x68>)
     254:	4798      	blx	r3
}
     256:	b003      	add	sp, #12
     258:	bd00      	pop	{pc}
     25a:	46c0      	nop			; (mov r8, r8)
     25c:	40000400 	.word	0x40000400
     260:	00002ae5 	.word	0x00002ae5
     264:	00002a59 	.word	0x00002a59
     268:	40001800 	.word	0x40001800
     26c:	200042f0 	.word	0x200042f0
     270:	e000e100 	.word	0xe000e100
     274:	000001f5 	.word	0x000001f5

00000278 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     278:	2300      	movs	r3, #0
     27a:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     27c:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     27e:	2201      	movs	r2, #1
     280:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     282:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     284:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     286:	3302      	adds	r3, #2
     288:	72c3      	strb	r3, [r0, #11]
}
     28a:	4770      	bx	lr

0000028c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     28c:	b5f0      	push	{r4, r5, r6, r7, lr}
     28e:	b083      	sub	sp, #12
     290:	0005      	movs	r5, r0
     292:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     294:	a901      	add	r1, sp, #4
     296:	2300      	movs	r3, #0
     298:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     29a:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     29c:	7923      	ldrb	r3, [r4, #4]
     29e:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     2a0:	7a23      	ldrb	r3, [r4, #8]
     2a2:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     2a4:	7820      	ldrb	r0, [r4, #0]
     2a6:	4b15      	ldr	r3, [pc, #84]	; (2fc <extint_chan_set_config+0x70>)
     2a8:	4798      	blx	r3
		return NULL;
     2aa:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
     2ac:	2d1f      	cmp	r5, #31
     2ae:	d800      	bhi.n	2b2 <extint_chan_set_config+0x26>
		return eics[eic_index];
     2b0:	4813      	ldr	r0, [pc, #76]	; (300 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     2b2:	2207      	movs	r2, #7
     2b4:	402a      	ands	r2, r5
     2b6:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     2b8:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     2ba:	7aa3      	ldrb	r3, [r4, #10]
     2bc:	2b00      	cmp	r3, #0
     2be:	d001      	beq.n	2c4 <extint_chan_set_config+0x38>
     2c0:	2308      	movs	r3, #8
     2c2:	431f      	orrs	r7, r3
     2c4:	08eb      	lsrs	r3, r5, #3
     2c6:	009b      	lsls	r3, r3, #2
     2c8:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     2ca:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     2cc:	260f      	movs	r6, #15
     2ce:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     2d0:	43b1      	bics	r1, r6
			(new_config << config_pos);
     2d2:	4097      	lsls	r7, r2
     2d4:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     2d6:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     2d8:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     2da:	7a63      	ldrb	r3, [r4, #9]
     2dc:	2b00      	cmp	r3, #0
     2de:	d106      	bne.n	2ee <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     2e0:	6943      	ldr	r3, [r0, #20]
     2e2:	2201      	movs	r2, #1
     2e4:	40aa      	lsls	r2, r5
     2e6:	4393      	bics	r3, r2
     2e8:	6143      	str	r3, [r0, #20]
	}
}
     2ea:	b003      	add	sp, #12
     2ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     2ee:	6942      	ldr	r2, [r0, #20]
     2f0:	2301      	movs	r3, #1
     2f2:	40ab      	lsls	r3, r5
     2f4:	4313      	orrs	r3, r2
     2f6:	6143      	str	r3, [r0, #20]
     2f8:	e7f7      	b.n	2ea <extint_chan_set_config+0x5e>
     2fa:	46c0      	nop			; (mov r8, r8)
     2fc:	00002c0d 	.word	0x00002c0d
     300:	40001800 	.word	0x40001800

00000304 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     304:	1c93      	adds	r3, r2, #2
     306:	009b      	lsls	r3, r3, #2
     308:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
     30a:	2a02      	cmp	r2, #2
     30c:	d009      	beq.n	322 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
     30e:	2a03      	cmp	r2, #3
     310:	d00c      	beq.n	32c <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
     312:	2301      	movs	r3, #1
     314:	4093      	lsls	r3, r2
     316:	001a      	movs	r2, r3
     318:	7e03      	ldrb	r3, [r0, #24]
     31a:	4313      	orrs	r3, r2
     31c:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
     31e:	2000      	movs	r0, #0
     320:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
     322:	7e03      	ldrb	r3, [r0, #24]
     324:	2210      	movs	r2, #16
     326:	4313      	orrs	r3, r2
     328:	7603      	strb	r3, [r0, #24]
     32a:	e7f8      	b.n	31e <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
     32c:	7e03      	ldrb	r3, [r0, #24]
     32e:	2220      	movs	r2, #32
     330:	4313      	orrs	r3, r2
     332:	7603      	strb	r3, [r0, #24]
     334:	e7f3      	b.n	31e <tc_register_callback+0x1a>
	...

00000338 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     338:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     33a:	0080      	lsls	r0, r0, #2
     33c:	4b16      	ldr	r3, [pc, #88]	; (398 <_tc_interrupt_handler+0x60>)
     33e:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     340:	6823      	ldr	r3, [r4, #0]
     342:	7b9d      	ldrb	r5, [r3, #14]
     344:	7e22      	ldrb	r2, [r4, #24]
     346:	7e63      	ldrb	r3, [r4, #25]
     348:	4013      	ands	r3, r2
     34a:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     34c:	07eb      	lsls	r3, r5, #31
     34e:	d406      	bmi.n	35e <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     350:	07ab      	lsls	r3, r5, #30
     352:	d40b      	bmi.n	36c <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     354:	06eb      	lsls	r3, r5, #27
     356:	d410      	bmi.n	37a <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     358:	06ab      	lsls	r3, r5, #26
     35a:	d415      	bmi.n	388 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
     35c:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     35e:	0020      	movs	r0, r4
     360:	68a3      	ldr	r3, [r4, #8]
     362:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     364:	2301      	movs	r3, #1
     366:	6822      	ldr	r2, [r4, #0]
     368:	7393      	strb	r3, [r2, #14]
     36a:	e7f1      	b.n	350 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
     36c:	0020      	movs	r0, r4
     36e:	68e3      	ldr	r3, [r4, #12]
     370:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     372:	2302      	movs	r3, #2
     374:	6822      	ldr	r2, [r4, #0]
     376:	7393      	strb	r3, [r2, #14]
     378:	e7ec      	b.n	354 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     37a:	0020      	movs	r0, r4
     37c:	6923      	ldr	r3, [r4, #16]
     37e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     380:	2310      	movs	r3, #16
     382:	6822      	ldr	r2, [r4, #0]
     384:	7393      	strb	r3, [r2, #14]
     386:	e7e7      	b.n	358 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     388:	0020      	movs	r0, r4
     38a:	6963      	ldr	r3, [r4, #20]
     38c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     38e:	6823      	ldr	r3, [r4, #0]
     390:	2220      	movs	r2, #32
     392:	739a      	strb	r2, [r3, #14]
}
     394:	e7e2      	b.n	35c <_tc_interrupt_handler+0x24>
     396:	46c0      	nop			; (mov r8, r8)
     398:	20004330 	.word	0x20004330

0000039c <TC0_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     39c:	b510      	push	{r4, lr}
     39e:	2000      	movs	r0, #0
     3a0:	4b01      	ldr	r3, [pc, #4]	; (3a8 <TC0_Handler+0xc>)
     3a2:	4798      	blx	r3
     3a4:	bd10      	pop	{r4, pc}
     3a6:	46c0      	nop			; (mov r8, r8)
     3a8:	00000339 	.word	0x00000339

000003ac <TC1_Handler>:
     3ac:	b510      	push	{r4, lr}
     3ae:	2001      	movs	r0, #1
     3b0:	4b01      	ldr	r3, [pc, #4]	; (3b8 <TC1_Handler+0xc>)
     3b2:	4798      	blx	r3
     3b4:	bd10      	pop	{r4, pc}
     3b6:	46c0      	nop			; (mov r8, r8)
     3b8:	00000339 	.word	0x00000339

000003bc <TC2_Handler>:
     3bc:	b510      	push	{r4, lr}
     3be:	2002      	movs	r0, #2
     3c0:	4b01      	ldr	r3, [pc, #4]	; (3c8 <TC2_Handler+0xc>)
     3c2:	4798      	blx	r3
     3c4:	bd10      	pop	{r4, pc}
     3c6:	46c0      	nop			; (mov r8, r8)
     3c8:	00000339 	.word	0x00000339

000003cc <TC3_Handler>:
     3cc:	b510      	push	{r4, lr}
     3ce:	2003      	movs	r0, #3
     3d0:	4b01      	ldr	r3, [pc, #4]	; (3d8 <TC3_Handler+0xc>)
     3d2:	4798      	blx	r3
     3d4:	bd10      	pop	{r4, pc}
     3d6:	46c0      	nop			; (mov r8, r8)
     3d8:	00000339 	.word	0x00000339

000003dc <TC4_Handler>:
     3dc:	b510      	push	{r4, lr}
     3de:	2004      	movs	r0, #4
     3e0:	4b01      	ldr	r3, [pc, #4]	; (3e8 <TC4_Handler+0xc>)
     3e2:	4798      	blx	r3
     3e4:	bd10      	pop	{r4, pc}
     3e6:	46c0      	nop			; (mov r8, r8)
     3e8:	00000339 	.word	0x00000339

000003ec <TC5_Handler>:
     3ec:	b510      	push	{r4, lr}
     3ee:	2005      	movs	r0, #5
     3f0:	4b01      	ldr	r3, [pc, #4]	; (3f8 <TC5_Handler+0xc>)
     3f2:	4798      	blx	r3
     3f4:	bd10      	pop	{r4, pc}
     3f6:	46c0      	nop			; (mov r8, r8)
     3f8:	00000339 	.word	0x00000339

000003fc <TC6_Handler>:
     3fc:	b510      	push	{r4, lr}
     3fe:	2006      	movs	r0, #6
     400:	4b01      	ldr	r3, [pc, #4]	; (408 <TC6_Handler+0xc>)
     402:	4798      	blx	r3
     404:	bd10      	pop	{r4, pc}
     406:	46c0      	nop			; (mov r8, r8)
     408:	00000339 	.word	0x00000339

0000040c <TC7_Handler>:
     40c:	b510      	push	{r4, lr}
     40e:	2007      	movs	r0, #7
     410:	4b01      	ldr	r3, [pc, #4]	; (418 <TC7_Handler+0xc>)
     412:	4798      	blx	r3
     414:	bd10      	pop	{r4, pc}
     416:	46c0      	nop			; (mov r8, r8)
     418:	00000339 	.word	0x00000339

0000041c <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
     41c:	b530      	push	{r4, r5, lr}
     41e:	b089      	sub	sp, #36	; 0x24
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
     420:	4b0c      	ldr	r3, [pc, #48]	; (454 <_tc_get_inst_index+0x38>)
     422:	466a      	mov	r2, sp
     424:	cb32      	ldmia	r3!, {r1, r4, r5}
     426:	c232      	stmia	r2!, {r1, r4, r5}
     428:	cb32      	ldmia	r3!, {r1, r4, r5}
     42a:	c232      	stmia	r2!, {r1, r4, r5}
     42c:	cb12      	ldmia	r3!, {r1, r4}
     42e:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
     430:	9b00      	ldr	r3, [sp, #0]
     432:	4298      	cmp	r0, r3
     434:	d00b      	beq.n	44e <_tc_get_inst_index+0x32>
     436:	2301      	movs	r3, #1
     438:	009a      	lsls	r2, r3, #2
     43a:	4669      	mov	r1, sp
     43c:	5852      	ldr	r2, [r2, r1]
     43e:	4282      	cmp	r2, r0
     440:	d006      	beq.n	450 <_tc_get_inst_index+0x34>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     442:	3301      	adds	r3, #1
     444:	2b08      	cmp	r3, #8
     446:	d1f7      	bne.n	438 <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     448:	2000      	movs	r0, #0
}
     44a:	b009      	add	sp, #36	; 0x24
     44c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     44e:	2300      	movs	r3, #0
			return i;
     450:	b2d8      	uxtb	r0, r3
     452:	e7fa      	b.n	44a <_tc_get_inst_index+0x2e>
     454:	00003200 	.word	0x00003200

00000458 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
     458:	b5f0      	push	{r4, r5, r6, r7, lr}
     45a:	b089      	sub	sp, #36	; 0x24
     45c:	0004      	movs	r4, r0
     45e:	000d      	movs	r5, r1
     460:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
     462:	0008      	movs	r0, r1
     464:	4b87      	ldr	r3, [pc, #540]	; (684 <tc_init+0x22c>)
     466:	4798      	blx	r3
     468:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
     46a:	ab06      	add	r3, sp, #24
     46c:	2213      	movs	r2, #19
     46e:	701a      	strb	r2, [r3, #0]
     470:	705a      	strb	r2, [r3, #1]
     472:	3201      	adds	r2, #1
     474:	709a      	strb	r2, [r3, #2]
     476:	70da      	strb	r2, [r3, #3]
     478:	3201      	adds	r2, #1
     47a:	711a      	strb	r2, [r3, #4]
     47c:	715a      	strb	r2, [r3, #5]
     47e:	3201      	adds	r2, #1
     480:	719a      	strb	r2, [r3, #6]
     482:	71da      	strb	r2, [r3, #7]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
     484:	3a06      	subs	r2, #6
     486:	4980      	ldr	r1, [pc, #512]	; (688 <tc_init+0x230>)
     488:	3120      	adds	r1, #32
     48a:	a802      	add	r0, sp, #8
     48c:	4b7f      	ldr	r3, [pc, #508]	; (68c <tc_init+0x234>)
     48e:	4798      	blx	r3
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
     490:	2300      	movs	r3, #0
     492:	60a3      	str	r3, [r4, #8]
     494:	60e3      	str	r3, [r4, #12]
     496:	6123      	str	r3, [r4, #16]
     498:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
     49a:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
     49c:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
     49e:	00ba      	lsls	r2, r7, #2
     4a0:	4b7b      	ldr	r3, [pc, #492]	; (690 <tc_init+0x238>)
     4a2:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
     4a4:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     4a6:	78b3      	ldrb	r3, [r6, #2]
     4a8:	2b08      	cmp	r3, #8
     4aa:	d006      	beq.n	4ba <tc_init+0x62>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
     4ac:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     4ae:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     4b0:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     4b2:	07db      	lsls	r3, r3, #31
     4b4:	d505      	bpl.n	4c2 <tc_init+0x6a>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
     4b6:	b009      	add	sp, #36	; 0x24
     4b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
     4ba:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     4bc:	07fa      	lsls	r2, r7, #31
     4be:	d4fa      	bmi.n	4b6 <tc_init+0x5e>
     4c0:	e7f4      	b.n	4ac <tc_init+0x54>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     4c2:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
     4c4:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     4c6:	06db      	lsls	r3, r3, #27
     4c8:	d4f5      	bmi.n	4b6 <tc_init+0x5e>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
     4ca:	882b      	ldrh	r3, [r5, #0]
     4cc:	079b      	lsls	r3, r3, #30
     4ce:	d4f2      	bmi.n	4b6 <tc_init+0x5e>
	if (config->pwm_channel[0].enabled) {
     4d0:	7c33      	ldrb	r3, [r6, #16]
     4d2:	2b00      	cmp	r3, #0
     4d4:	d000      	beq.n	4d8 <tc_init+0x80>
     4d6:	e07a      	b.n	5ce <tc_init+0x176>
	if (config->pwm_channel[1].enabled) {
     4d8:	7f33      	ldrb	r3, [r6, #28]
     4da:	2b00      	cmp	r3, #0
     4dc:	d000      	beq.n	4e0 <tc_init+0x88>
     4de:	e082      	b.n	5e6 <tc_init+0x18e>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     4e0:	496c      	ldr	r1, [pc, #432]	; (694 <tc_init+0x23c>)
     4e2:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
     4e4:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     4e6:	ab02      	add	r3, sp, #8
     4e8:	5ad3      	ldrh	r3, [r2, r3]
     4ea:	4303      	orrs	r3, r0
     4ec:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
     4ee:	78b3      	ldrb	r3, [r6, #2]
     4f0:	2b08      	cmp	r3, #8
     4f2:	d100      	bne.n	4f6 <tc_init+0x9e>
     4f4:	e087      	b.n	606 <tc_init+0x1ae>
	gclk_chan_config.source_generator = config->clock_source;
     4f6:	7833      	ldrb	r3, [r6, #0]
     4f8:	466a      	mov	r2, sp
     4fa:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
     4fc:	ab06      	add	r3, sp, #24
     4fe:	5ddf      	ldrb	r7, [r3, r7]
     500:	4669      	mov	r1, sp
     502:	0038      	movs	r0, r7
     504:	4b64      	ldr	r3, [pc, #400]	; (698 <tc_init+0x240>)
     506:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
     508:	0038      	movs	r0, r7
     50a:	4b64      	ldr	r3, [pc, #400]	; (69c <tc_init+0x244>)
     50c:	4798      	blx	r3
	ctrla_tmp =
     50e:	8931      	ldrh	r1, [r6, #8]
     510:	88b3      	ldrh	r3, [r6, #4]
     512:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
     514:	78b1      	ldrb	r1, [r6, #2]
     516:	79b2      	ldrb	r2, [r6, #6]
     518:	4311      	orrs	r1, r2
	ctrla_tmp =
     51a:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
     51c:	7873      	ldrb	r3, [r6, #1]
     51e:	2b00      	cmp	r3, #0
     520:	d002      	beq.n	528 <tc_init+0xd0>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
     522:	2380      	movs	r3, #128	; 0x80
     524:	011b      	lsls	r3, r3, #4
     526:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     528:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     52a:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     52c:	b25b      	sxtb	r3, r3
     52e:	2b00      	cmp	r3, #0
     530:	dbfb      	blt.n	52a <tc_init+0xd2>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
     532:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
     534:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
     536:	1e4b      	subs	r3, r1, #1
     538:	4199      	sbcs	r1, r3
     53a:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
     53c:	7bb3      	ldrb	r3, [r6, #14]
     53e:	2b00      	cmp	r3, #0
     540:	d001      	beq.n	546 <tc_init+0xee>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
     542:	2301      	movs	r3, #1
     544:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     546:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     548:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     54a:	b25b      	sxtb	r3, r3
     54c:	2b00      	cmp	r3, #0
     54e:	dbfb      	blt.n	548 <tc_init+0xf0>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
     550:	23ff      	movs	r3, #255	; 0xff
     552:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
     554:	2900      	cmp	r1, #0
     556:	d005      	beq.n	564 <tc_init+0x10c>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     558:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     55a:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
     55c:	b25b      	sxtb	r3, r3
     55e:	2b00      	cmp	r3, #0
     560:	dbfb      	blt.n	55a <tc_init+0x102>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
     562:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
     564:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
     566:	7af3      	ldrb	r3, [r6, #11]
     568:	2b00      	cmp	r3, #0
     56a:	d001      	beq.n	570 <tc_init+0x118>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     56c:	2310      	movs	r3, #16
     56e:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
     570:	7b33      	ldrb	r3, [r6, #12]
     572:	2b00      	cmp	r3, #0
     574:	d001      	beq.n	57a <tc_init+0x122>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     576:	2320      	movs	r3, #32
     578:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     57a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     57c:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     57e:	b25b      	sxtb	r3, r3
     580:	2b00      	cmp	r3, #0
     582:	dbfb      	blt.n	57c <tc_init+0x124>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
     584:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     586:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     588:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     58a:	b25b      	sxtb	r3, r3
     58c:	2b00      	cmp	r3, #0
     58e:	dbfb      	blt.n	588 <tc_init+0x130>
	switch (module_inst->counter_size) {
     590:	7923      	ldrb	r3, [r4, #4]
     592:	2b04      	cmp	r3, #4
     594:	d03f      	beq.n	616 <tc_init+0x1be>
     596:	2b08      	cmp	r3, #8
     598:	d05e      	beq.n	658 <tc_init+0x200>
	return STATUS_ERR_INVALID_ARG;
     59a:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
     59c:	2b00      	cmp	r3, #0
     59e:	d000      	beq.n	5a2 <tc_init+0x14a>
     5a0:	e789      	b.n	4b6 <tc_init+0x5e>
     5a2:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     5a4:	b25b      	sxtb	r3, r3
     5a6:	2b00      	cmp	r3, #0
     5a8:	dbfb      	blt.n	5a2 <tc_init+0x14a>
				= config->counter_16_bit.value;
     5aa:	8d33      	ldrh	r3, [r6, #40]	; 0x28
     5ac:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     5ae:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     5b0:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     5b2:	b25b      	sxtb	r3, r3
     5b4:	2b00      	cmp	r3, #0
     5b6:	dbfb      	blt.n	5b0 <tc_init+0x158>
					config->counter_16_bit.compare_capture_channel[0];
     5b8:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
     5ba:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     5bc:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     5be:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     5c0:	b25b      	sxtb	r3, r3
     5c2:	2b00      	cmp	r3, #0
     5c4:	dbfb      	blt.n	5be <tc_init+0x166>
					config->counter_16_bit.compare_capture_channel[1];
     5c6:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
     5c8:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
     5ca:	2000      	movs	r0, #0
     5cc:	e773      	b.n	4b6 <tc_init+0x5e>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     5ce:	a901      	add	r1, sp, #4
     5d0:	2301      	movs	r3, #1
     5d2:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     5d4:	2200      	movs	r2, #0
     5d6:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
     5d8:	7e32      	ldrb	r2, [r6, #24]
     5da:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     5dc:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     5de:	7d30      	ldrb	r0, [r6, #20]
     5e0:	4b2f      	ldr	r3, [pc, #188]	; (6a0 <tc_init+0x248>)
     5e2:	4798      	blx	r3
     5e4:	e778      	b.n	4d8 <tc_init+0x80>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     5e6:	a901      	add	r1, sp, #4
     5e8:	2301      	movs	r3, #1
     5ea:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     5ec:	2200      	movs	r2, #0
     5ee:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
     5f0:	3224      	adds	r2, #36	; 0x24
     5f2:	18b2      	adds	r2, r6, r2
     5f4:	7812      	ldrb	r2, [r2, #0]
     5f6:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     5f8:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     5fa:	331f      	adds	r3, #31
     5fc:	18f3      	adds	r3, r6, r3
     5fe:	7818      	ldrb	r0, [r3, #0]
     600:	4b27      	ldr	r3, [pc, #156]	; (6a0 <tc_init+0x248>)
     602:	4798      	blx	r3
     604:	e76c      	b.n	4e0 <tc_init+0x88>
     606:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
     608:	1c7a      	adds	r2, r7, #1
     60a:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     60c:	ab02      	add	r3, sp, #8
     60e:	5ad3      	ldrh	r3, [r2, r3]
     610:	4303      	orrs	r3, r0
     612:	620b      	str	r3, [r1, #32]
     614:	e76f      	b.n	4f6 <tc_init+0x9e>
     616:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     618:	b25b      	sxtb	r3, r3
     61a:	2b00      	cmp	r3, #0
     61c:	dbfb      	blt.n	616 <tc_init+0x1be>
					config->counter_8_bit.value;
     61e:	2328      	movs	r3, #40	; 0x28
     620:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
     622:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     624:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     626:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     628:	b25b      	sxtb	r3, r3
     62a:	2b00      	cmp	r3, #0
     62c:	dbfb      	blt.n	626 <tc_init+0x1ce>
					config->counter_8_bit.period;
     62e:	2329      	movs	r3, #41	; 0x29
     630:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
     632:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     634:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     636:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     638:	b25b      	sxtb	r3, r3
     63a:	2b00      	cmp	r3, #0
     63c:	dbfb      	blt.n	636 <tc_init+0x1de>
					config->counter_8_bit.compare_capture_channel[0];
     63e:	232a      	movs	r3, #42	; 0x2a
     640:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
     642:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     644:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     646:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     648:	b25b      	sxtb	r3, r3
     64a:	2b00      	cmp	r3, #0
     64c:	dbfb      	blt.n	646 <tc_init+0x1ee>
					config->counter_8_bit.compare_capture_channel[1];
     64e:	232b      	movs	r3, #43	; 0x2b
     650:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
     652:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
     654:	2000      	movs	r0, #0
     656:	e72e      	b.n	4b6 <tc_init+0x5e>
     658:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     65a:	b25b      	sxtb	r3, r3
     65c:	2b00      	cmp	r3, #0
     65e:	dbfb      	blt.n	658 <tc_init+0x200>
				= config->counter_32_bit.value;
     660:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     662:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     664:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     666:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     668:	b25b      	sxtb	r3, r3
     66a:	2b00      	cmp	r3, #0
     66c:	dbfb      	blt.n	666 <tc_init+0x20e>
			hw->COUNT32.CC[0].reg =
     66e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
     670:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     672:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     674:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     676:	b25b      	sxtb	r3, r3
     678:	2b00      	cmp	r3, #0
     67a:	dbfb      	blt.n	674 <tc_init+0x21c>
					config->counter_32_bit.compare_capture_channel[1];
     67c:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
     67e:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
     680:	2000      	movs	r0, #0
     682:	e718      	b.n	4b6 <tc_init+0x5e>
     684:	0000041d 	.word	0x0000041d
     688:	00003200 	.word	0x00003200
     68c:	000031ed 	.word	0x000031ed
     690:	20004330 	.word	0x20004330
     694:	40000400 	.word	0x40000400
     698:	00002ae5 	.word	0x00002ae5
     69c:	00002a59 	.word	0x00002a59
     6a0:	00002c0d 	.word	0x00002c0d

000006a4 <wdt_set_config>:
	return STATUS_OK;
}
#else
enum status_code wdt_set_config(
		const struct wdt_conf *const config)
{
     6a4:	b510      	push	{r4, lr}
     6a6:	b082      	sub	sp, #8
     6a8:	0004      	movs	r4, r0
			PM->APBAMASK.reg |= mask;
     6aa:	4a39      	ldr	r2, [pc, #228]	; (790 <wdt_set_config+0xec>)
     6ac:	6993      	ldr	r3, [r2, #24]
     6ae:	2110      	movs	r1, #16
     6b0:	430b      	orrs	r3, r1
     6b2:	6193      	str	r3, [r2, #24]
	Wdt *const WDT_module = WDT;

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (WDT_module->CTRLA.reg & WDT_CTRLA_ALWAYSON);
#else
	return (WDT_module->CTRL.reg & WDT_CTRL_ALWAYSON);
     6b4:	4b37      	ldr	r3, [pc, #220]	; (794 <wdt_set_config+0xf0>)
     6b6:	781b      	ldrb	r3, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_WDT);

	/* Check of the Watchdog has been locked to be always on, if so, abort */
	if (wdt_is_locked()) {
     6b8:	b25b      	sxtb	r3, r3
		return STATUS_ERR_IO;
     6ba:	2010      	movs	r0, #16
	if (wdt_is_locked()) {
     6bc:	2b00      	cmp	r3, #0
     6be:	db03      	blt.n	6c8 <wdt_set_config+0x24>
	}

	/* Check for an invalid timeout period, abort if found */
	if (config->timeout_period == WDT_PERIOD_NONE) {
     6c0:	78e3      	ldrb	r3, [r4, #3]
		return STATUS_ERR_INVALID_ARG;
     6c2:	3007      	adds	r0, #7
	if (config->timeout_period == WDT_PERIOD_NONE) {
     6c4:	2b00      	cmp	r3, #0
     6c6:	d101      	bne.n	6cc <wdt_set_config+0x28>
	while (wdt_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}

	return STATUS_OK;
}
     6c8:	b002      	add	sp, #8
     6ca:	bd10      	pop	{r4, pc}
	if ((config->timeout_period < config->window_period) ||
     6cc:	7922      	ldrb	r2, [r4, #4]
     6ce:	429a      	cmp	r2, r3
     6d0:	d8fa      	bhi.n	6c8 <wdt_set_config+0x24>
     6d2:	7962      	ldrb	r2, [r4, #5]
     6d4:	429a      	cmp	r2, r3
     6d6:	d8f7      	bhi.n	6c8 <wdt_set_config+0x24>
	WDT_module->CTRL.reg &= ~WDT_CTRL_ENABLE;
     6d8:	4a2e      	ldr	r2, [pc, #184]	; (794 <wdt_set_config+0xf0>)
     6da:	7813      	ldrb	r3, [r2, #0]
     6dc:	390e      	subs	r1, #14
     6de:	438b      	bics	r3, r1
     6e0:	7013      	strb	r3, [r2, #0]
	if (WDT_module->STATUS.reg & WDT_STATUS_SYNCBUSY) {
     6e2:	79d3      	ldrb	r3, [r2, #7]
	while (wdt_is_syncing()) {
     6e4:	b25b      	sxtb	r3, r3
     6e6:	2b00      	cmp	r3, #0
     6e8:	dbfb      	blt.n	6e2 <wdt_set_config+0x3e>
	if(config->enable == false) {
     6ea:	7863      	ldrb	r3, [r4, #1]
		return STATUS_OK;
     6ec:	2000      	movs	r0, #0
	if(config->enable == false) {
     6ee:	2b00      	cmp	r3, #0
     6f0:	d0ea      	beq.n	6c8 <wdt_set_config+0x24>
	gclk_chan_conf.source_generator = config->clock_source;
     6f2:	a901      	add	r1, sp, #4
     6f4:	78a3      	ldrb	r3, [r4, #2]
     6f6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(WDT_GCLK_ID, &gclk_chan_conf);
     6f8:	3001      	adds	r0, #1
     6fa:	4b27      	ldr	r3, [pc, #156]	; (798 <wdt_set_config+0xf4>)
     6fc:	4798      	blx	r3
	system_gclk_chan_enable(WDT_GCLK_ID);
     6fe:	2001      	movs	r0, #1
     700:	4b26      	ldr	r3, [pc, #152]	; (79c <wdt_set_config+0xf8>)
     702:	4798      	blx	r3
	if (config->always_on) {
     704:	7823      	ldrb	r3, [r4, #0]
     706:	2b00      	cmp	r3, #0
     708:	d127      	bne.n	75a <wdt_set_config+0xb6>
	new_config |= (config->timeout_period - 1) << WDT_CONFIG_PER_Pos;
     70a:	78e3      	ldrb	r3, [r4, #3]
     70c:	3b01      	subs	r3, #1
	if (config->window_period != WDT_PERIOD_NONE) {
     70e:	7922      	ldrb	r2, [r4, #4]
     710:	2a00      	cmp	r2, #0
     712:	d026      	beq.n	762 <wdt_set_config+0xbe>
		WDT_module->CTRL.reg |= WDT_CTRL_WEN;
     714:	491f      	ldr	r1, [pc, #124]	; (794 <wdt_set_config+0xf0>)
     716:	780a      	ldrb	r2, [r1, #0]
     718:	2004      	movs	r0, #4
     71a:	4302      	orrs	r2, r0
     71c:	700a      	strb	r2, [r1, #0]
		new_config |= (config->window_period - 1) << WDT_CONFIG_WINDOW_Pos;
     71e:	7922      	ldrb	r2, [r4, #4]
     720:	3a01      	subs	r2, #1
     722:	4082      	lsls	r2, r0
     724:	4313      	orrs	r3, r2
     726:	491b      	ldr	r1, [pc, #108]	; (794 <wdt_set_config+0xf0>)
     728:	79ca      	ldrb	r2, [r1, #7]
	while (wdt_is_syncing()) {
     72a:	b252      	sxtb	r2, r2
     72c:	2a00      	cmp	r2, #0
     72e:	dbfb      	blt.n	728 <wdt_set_config+0x84>
	WDT_module->CONFIG.reg = new_config;
     730:	b2db      	uxtb	r3, r3
     732:	4a18      	ldr	r2, [pc, #96]	; (794 <wdt_set_config+0xf0>)
     734:	7053      	strb	r3, [r2, #1]
	if (config->early_warning_period != WDT_PERIOD_NONE) {
     736:	7963      	ldrb	r3, [r4, #5]
     738:	2b00      	cmp	r3, #0
     73a:	d118      	bne.n	76e <wdt_set_config+0xca>
	if (config->always_on) {
     73c:	7823      	ldrb	r3, [r4, #0]
     73e:	2b00      	cmp	r3, #0
     740:	d01f      	beq.n	782 <wdt_set_config+0xde>
		WDT_module->CTRL.reg |= WDT_CTRL_ALWAYSON;
     742:	4a14      	ldr	r2, [pc, #80]	; (794 <wdt_set_config+0xf0>)
     744:	7813      	ldrb	r3, [r2, #0]
     746:	2180      	movs	r1, #128	; 0x80
     748:	430b      	orrs	r3, r1
     74a:	7013      	strb	r3, [r2, #0]
     74c:	4a11      	ldr	r2, [pc, #68]	; (794 <wdt_set_config+0xf0>)
     74e:	79d3      	ldrb	r3, [r2, #7]
	while (wdt_is_syncing()) {
     750:	b25b      	sxtb	r3, r3
     752:	2b00      	cmp	r3, #0
     754:	dbfb      	blt.n	74e <wdt_set_config+0xaa>
	return STATUS_OK;
     756:	2000      	movs	r0, #0
     758:	e7b6      	b.n	6c8 <wdt_set_config+0x24>
		system_gclk_chan_lock(WDT_GCLK_ID);
     75a:	2001      	movs	r0, #1
     75c:	4b10      	ldr	r3, [pc, #64]	; (7a0 <wdt_set_config+0xfc>)
     75e:	4798      	blx	r3
     760:	e7d3      	b.n	70a <wdt_set_config+0x66>
		WDT_module->CTRL.reg &= ~WDT_CTRL_WEN;
     762:	490c      	ldr	r1, [pc, #48]	; (794 <wdt_set_config+0xf0>)
     764:	780a      	ldrb	r2, [r1, #0]
     766:	2004      	movs	r0, #4
     768:	4382      	bics	r2, r0
     76a:	700a      	strb	r2, [r1, #0]
     76c:	e7db      	b.n	726 <wdt_set_config+0x82>
     76e:	0011      	movs	r1, r2
     770:	79ca      	ldrb	r2, [r1, #7]
		while (wdt_is_syncing()) {
     772:	b252      	sxtb	r2, r2
     774:	2a00      	cmp	r2, #0
     776:	dbfb      	blt.n	770 <wdt_set_config+0xcc>
			= (config->early_warning_period - 1) << WDT_EWCTRL_EWOFFSET_Pos;
     778:	3b01      	subs	r3, #1
     77a:	b2db      	uxtb	r3, r3
     77c:	4a05      	ldr	r2, [pc, #20]	; (794 <wdt_set_config+0xf0>)
     77e:	7093      	strb	r3, [r2, #2]
     780:	e7dc      	b.n	73c <wdt_set_config+0x98>
		WDT_module->CTRL.reg |= WDT_CTRL_ENABLE;
     782:	4a04      	ldr	r2, [pc, #16]	; (794 <wdt_set_config+0xf0>)
     784:	7813      	ldrb	r3, [r2, #0]
     786:	2102      	movs	r1, #2
     788:	430b      	orrs	r3, r1
     78a:	7013      	strb	r3, [r2, #0]
     78c:	e7de      	b.n	74c <wdt_set_config+0xa8>
     78e:	46c0      	nop			; (mov r8, r8)
     790:	40000400 	.word	0x40000400
     794:	40001000 	.word	0x40001000
     798:	00002ae5 	.word	0x00002ae5
     79c:	00002a59 	.word	0x00002a59
     7a0:	00002b01 	.word	0x00002b01

000007a4 <wdt_reset_count>:
void wdt_reset_count(void)
{
	Wdt *const WDT_module = WDT;

	/* Disable the Watchdog module */
	WDT_module->CLEAR.reg = WDT_CLEAR_CLEAR_KEY;
     7a4:	22a5      	movs	r2, #165	; 0xa5
     7a6:	4b04      	ldr	r3, [pc, #16]	; (7b8 <wdt_reset_count+0x14>)
     7a8:	721a      	strb	r2, [r3, #8]
     7aa:	001a      	movs	r2, r3
     7ac:	79d3      	ldrb	r3, [r2, #7]

	while (wdt_is_syncing()) {
     7ae:	b25b      	sxtb	r3, r3
     7b0:	2b00      	cmp	r3, #0
     7b2:	dbfb      	blt.n	7ac <wdt_reset_count+0x8>
		/* Wait for all hardware modules to complete synchronization */
	}
}
     7b4:	4770      	bx	lr
     7b6:	46c0      	nop			; (mov r8, r8)
     7b8:	40001000 	.word	0x40001000

000007bc <wdt_register_callback>:
		const enum wdt_callback type)
{
	/* Sanity check arguments */
	Assert(callback);

	switch (type)
     7bc:	2900      	cmp	r1, #0
     7be:	d001      	beq.n	7c4 <wdt_register_callback+0x8>
	case WDT_CALLBACK_EARLY_WARNING:
		wdt_early_warning_callback = callback;
		return STATUS_OK;
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     7c0:	2017      	movs	r0, #23
	}
}
     7c2:	4770      	bx	lr
		wdt_early_warning_callback = callback;
     7c4:	4b01      	ldr	r3, [pc, #4]	; (7cc <wdt_register_callback+0x10>)
     7c6:	6018      	str	r0, [r3, #0]
		return STATUS_OK;
     7c8:	2000      	movs	r0, #0
     7ca:	e7fa      	b.n	7c2 <wdt_register_callback+0x6>
     7cc:	20004350 	.word	0x20004350

000007d0 <wdt_enable_callback>:
enum status_code wdt_enable_callback(
		const enum wdt_callback type)
{
	Wdt *const WDT_module = WDT;

	switch (type)
     7d0:	2800      	cmp	r0, #0
     7d2:	d001      	beq.n	7d8 <wdt_enable_callback+0x8>
		WDT_module->INTENSET.reg = WDT_INTENSET_EW;
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_WDT);
		return STATUS_OK;
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     7d4:	2017      	movs	r0, #23
	}
}
     7d6:	4770      	bx	lr
		WDT_module->INTENSET.reg = WDT_INTENSET_EW;
     7d8:	2201      	movs	r2, #1
     7da:	4b03      	ldr	r3, [pc, #12]	; (7e8 <wdt_enable_callback+0x18>)
     7dc:	715a      	strb	r2, [r3, #5]
     7de:	3203      	adds	r2, #3
     7e0:	4b02      	ldr	r3, [pc, #8]	; (7ec <wdt_enable_callback+0x1c>)
     7e2:	601a      	str	r2, [r3, #0]
		return STATUS_OK;
     7e4:	e7f7      	b.n	7d6 <wdt_enable_callback+0x6>
     7e6:	46c0      	nop			; (mov r8, r8)
     7e8:	40001000 	.word	0x40001000
     7ec:	e000e100 	.word	0xe000e100

000007f0 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
     7f0:	b510      	push	{r4, lr}
 */
static inline void wdt_clear_early_warning(void)
{
	Wdt *const WDT_module = WDT;

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
     7f2:	2201      	movs	r2, #1
     7f4:	4b03      	ldr	r3, [pc, #12]	; (804 <WDT_Handler+0x14>)
     7f6:	719a      	strb	r2, [r3, #6]
	wdt_clear_early_warning();

	if (wdt_early_warning_callback) {
     7f8:	4b03      	ldr	r3, [pc, #12]	; (808 <WDT_Handler+0x18>)
     7fa:	681b      	ldr	r3, [r3, #0]
     7fc:	2b00      	cmp	r3, #0
     7fe:	d000      	beq.n	802 <WDT_Handler+0x12>
		wdt_early_warning_callback();
     800:	4798      	blx	r3
	}
}
     802:	bd10      	pop	{r4, pc}
     804:	40001000 	.word	0x40001000
     808:	20004350 	.word	0x20004350

0000080c <extint_detection_callback>:

//! [setup_7]
void extint_detection_callback(void)
{
	//usart_write_buffer_wait(&MyUart03, string, sizeof(string));
	if(LoRa_IRQ_Flag == 0)
     80c:	4b03      	ldr	r3, [pc, #12]	; (81c <extint_detection_callback+0x10>)
     80e:	781b      	ldrb	r3, [r3, #0]
     810:	2b00      	cmp	r3, #0
     812:	d102      	bne.n	81a <extint_detection_callback+0xe>
	{
		LoRa_IRQ_Flag = 1;
     814:	2201      	movs	r2, #1
     816:	4b01      	ldr	r3, [pc, #4]	; (81c <extint_detection_callback+0x10>)
     818:	701a      	strb	r2, [r3, #0]
	}
}
     81a:	4770      	bx	lr
     81c:	200042bc 	.word	0x200042bc

00000820 <configure_extint_channel>:
{
     820:	b510      	push	{r4, lr}
     822:	b084      	sub	sp, #16
	extint_chan_get_config_defaults(&config_extint_chan);
     824:	ac01      	add	r4, sp, #4
     826:	0020      	movs	r0, r4
     828:	4b07      	ldr	r3, [pc, #28]	; (848 <configure_extint_channel+0x28>)
     82a:	4798      	blx	r3
	config_extint_chan.gpio_pin           = PIN_PA11A_EIC_EXTINT11;
     82c:	230b      	movs	r3, #11
     82e:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux       = MUX_PA11A_EIC_EXTINT11;
     830:	2300      	movs	r3, #0
     832:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
     834:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
     836:	3301      	adds	r3, #1
     838:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(11, &config_extint_chan);
     83a:	0021      	movs	r1, r4
     83c:	200b      	movs	r0, #11
     83e:	4b03      	ldr	r3, [pc, #12]	; (84c <configure_extint_channel+0x2c>)
     840:	4798      	blx	r3
}
     842:	b004      	add	sp, #16
     844:	bd10      	pop	{r4, pc}
     846:	46c0      	nop			; (mov r8, r8)
     848:	00000279 	.word	0x00000279
     84c:	0000028d 	.word	0x0000028d

00000850 <configure_extint_callbacks>:
{
     850:	b510      	push	{r4, lr}
	extint_register_callback(extint_detection_callback, 11, EXTINT_CALLBACK_TYPE_DETECT);
     852:	2200      	movs	r2, #0
     854:	210b      	movs	r1, #11
     856:	4804      	ldr	r0, [pc, #16]	; (868 <configure_extint_callbacks+0x18>)
     858:	4b04      	ldr	r3, [pc, #16]	; (86c <configure_extint_callbacks+0x1c>)
     85a:	4798      	blx	r3
	extint_chan_enable_callback(11, EXTINT_CALLBACK_TYPE_DETECT);
     85c:	2100      	movs	r1, #0
     85e:	200b      	movs	r0, #11
     860:	4b03      	ldr	r3, [pc, #12]	; (870 <configure_extint_callbacks+0x20>)
     862:	4798      	blx	r3
}
     864:	bd10      	pop	{r4, pc}
     866:	46c0      	nop			; (mov r8, r8)
     868:	0000080d 	.word	0x0000080d
     86c:	00000155 	.word	0x00000155
     870:	00000181 	.word	0x00000181

00000874 <lcd_4bit>:
﻿#include <asf.h>
#include <stdio.h>
#include "myDefine.h"

void lcd_4bit(unsigned char rs, unsigned char tmp)
{
     874:	b570      	push	{r4, r5, r6, lr}
	UINT8u_t user_data;
	user_data.byte = tmp;
	if(rs == 1)					LCM_RS_High		else	LCM_RS_Low
     876:	2801      	cmp	r0, #1
     878:	d022      	beq.n	8c0 <lcd_4bit+0x4c>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     87a:	2208      	movs	r2, #8
     87c:	4b1a      	ldr	r3, [pc, #104]	; (8e8 <lcd_4bit+0x74>)
     87e:	615a      	str	r2, [r3, #20]
     880:	2204      	movs	r2, #4
     882:	4b19      	ldr	r3, [pc, #100]	; (8e8 <lcd_4bit+0x74>)
     884:	615a      	str	r2, [r3, #20]
	LCM_RW_Low
	if(user_data.bit.b0 == 1)	LCM_04_High		else	LCM_04_Low
     886:	07cb      	lsls	r3, r1, #31
     888:	d51e      	bpl.n	8c8 <lcd_4bit+0x54>
		port_base->OUTSET.reg = pin_mask;
     88a:	320c      	adds	r2, #12
     88c:	4b16      	ldr	r3, [pc, #88]	; (8e8 <lcd_4bit+0x74>)
     88e:	619a      	str	r2, [r3, #24]
	if(user_data.bit.b1 == 1)	LCM_05_High		else	LCM_05_Low
     890:	078b      	lsls	r3, r1, #30
     892:	d51d      	bpl.n	8d0 <lcd_4bit+0x5c>
     894:	2220      	movs	r2, #32
     896:	4b14      	ldr	r3, [pc, #80]	; (8e8 <lcd_4bit+0x74>)
     898:	619a      	str	r2, [r3, #24]
	if(user_data.bit.b2 == 1)	LCM_06_High		else	LCM_06_Low
     89a:	074b      	lsls	r3, r1, #29
     89c:	d51c      	bpl.n	8d8 <lcd_4bit+0x64>
     89e:	2240      	movs	r2, #64	; 0x40
     8a0:	4b11      	ldr	r3, [pc, #68]	; (8e8 <lcd_4bit+0x74>)
     8a2:	619a      	str	r2, [r3, #24]
	if(user_data.bit.b3 == 1)	LCM_07_High		else	LCM_07_Low
     8a4:	070b      	lsls	r3, r1, #28
     8a6:	d41b      	bmi.n	8e0 <lcd_4bit+0x6c>
		port_base->OUTCLR.reg = pin_mask;
     8a8:	2280      	movs	r2, #128	; 0x80
     8aa:	4b0f      	ldr	r3, [pc, #60]	; (8e8 <lcd_4bit+0x74>)
     8ac:	615a      	str	r2, [r3, #20]
		port_base->OUTSET.reg = pin_mask;
     8ae:	4c0e      	ldr	r4, [pc, #56]	; (8e8 <lcd_4bit+0x74>)
     8b0:	2580      	movs	r5, #128	; 0x80
     8b2:	006d      	lsls	r5, r5, #1
     8b4:	61a5      	str	r5, [r4, #24]
	LCM_EN_High		
	delay_us(15);			//等待寫入
     8b6:	200f      	movs	r0, #15
     8b8:	4b0c      	ldr	r3, [pc, #48]	; (8ec <lcd_4bit+0x78>)
     8ba:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
     8bc:	6165      	str	r5, [r4, #20]
	LCM_EN_Low
}
     8be:	bd70      	pop	{r4, r5, r6, pc}
		port_base->OUTSET.reg = pin_mask;
     8c0:	2208      	movs	r2, #8
     8c2:	4b09      	ldr	r3, [pc, #36]	; (8e8 <lcd_4bit+0x74>)
     8c4:	619a      	str	r2, [r3, #24]
     8c6:	e7db      	b.n	880 <lcd_4bit+0xc>
		port_base->OUTCLR.reg = pin_mask;
     8c8:	2210      	movs	r2, #16
     8ca:	4b07      	ldr	r3, [pc, #28]	; (8e8 <lcd_4bit+0x74>)
     8cc:	615a      	str	r2, [r3, #20]
     8ce:	e7df      	b.n	890 <lcd_4bit+0x1c>
     8d0:	2220      	movs	r2, #32
     8d2:	4b05      	ldr	r3, [pc, #20]	; (8e8 <lcd_4bit+0x74>)
     8d4:	615a      	str	r2, [r3, #20]
     8d6:	e7e0      	b.n	89a <lcd_4bit+0x26>
     8d8:	2240      	movs	r2, #64	; 0x40
     8da:	4b03      	ldr	r3, [pc, #12]	; (8e8 <lcd_4bit+0x74>)
     8dc:	615a      	str	r2, [r3, #20]
     8de:	e7e1      	b.n	8a4 <lcd_4bit+0x30>
		port_base->OUTSET.reg = pin_mask;
     8e0:	2280      	movs	r2, #128	; 0x80
     8e2:	4b01      	ldr	r3, [pc, #4]	; (8e8 <lcd_4bit+0x74>)
     8e4:	619a      	str	r2, [r3, #24]
     8e6:	e7e2      	b.n	8ae <lcd_4bit+0x3a>
     8e8:	41004400 	.word	0x41004400
     8ec:	00001c95 	.word	0x00001c95

000008f0 <lcd_command>:

void lcd_command(unsigned char rs, unsigned char tmp)
{
     8f0:	b570      	push	{r4, r5, r6, lr}
     8f2:	0005      	movs	r5, r0
     8f4:	000c      	movs	r4, r1
	UINT8u_t	data;
	data.byte = tmp;
	lcd_4bit(rs, data.HL.H);
     8f6:	0909      	lsrs	r1, r1, #4
     8f8:	4e03      	ldr	r6, [pc, #12]	; (908 <lcd_command+0x18>)
     8fa:	47b0      	blx	r6
	lcd_4bit(rs, data.HL.L);
     8fc:	0721      	lsls	r1, r4, #28
     8fe:	0f09      	lsrs	r1, r1, #28
     900:	0028      	movs	r0, r5
     902:	47b0      	blx	r6
}
     904:	bd70      	pop	{r4, r5, r6, pc}
     906:	46c0      	nop			; (mov r8, r8)
     908:	00000875 	.word	0x00000875

0000090c <lcd_init>:

void lcd_init(void)
{
     90c:	b510      	push	{r4, lr}
	lcd_4bit(lcd_instr, 0x03);
     90e:	2103      	movs	r1, #3
     910:	2000      	movs	r0, #0
     912:	4c0c      	ldr	r4, [pc, #48]	; (944 <lcd_init+0x38>)
     914:	47a0      	blx	r4
	lcd_4bit(lcd_instr, 0x03);
     916:	2103      	movs	r1, #3
     918:	2000      	movs	r0, #0
     91a:	47a0      	blx	r4
	lcd_4bit(lcd_instr, 0x03);
     91c:	2103      	movs	r1, #3
     91e:	2000      	movs	r0, #0
     920:	47a0      	blx	r4
	lcd_4bit(lcd_instr, 0x02);
     922:	2102      	movs	r1, #2
     924:	2000      	movs	r0, #0
     926:	47a0      	blx	r4

	lcd_command(lcd_instr, 0x28);
     928:	2128      	movs	r1, #40	; 0x28
     92a:	2000      	movs	r0, #0
     92c:	4c06      	ldr	r4, [pc, #24]	; (948 <lcd_init+0x3c>)
     92e:	47a0      	blx	r4
	lcd_command(lcd_instr, 0x08);
     930:	2108      	movs	r1, #8
     932:	2000      	movs	r0, #0
     934:	47a0      	blx	r4

	lcd_command(lcd_instr, 0x06);
     936:	2106      	movs	r1, #6
     938:	2000      	movs	r0, #0
     93a:	47a0      	blx	r4
	lcd_command(lcd_instr, 0x0c);
     93c:	210c      	movs	r1, #12
     93e:	2000      	movs	r0, #0
     940:	47a0      	blx	r4
     942:	bd10      	pop	{r4, pc}
     944:	00000875 	.word	0x00000875
     948:	000008f1 	.word	0x000008f1

0000094c <UartToLora>:
	//delay_us(10);
	return (tmpA ^ tmpB);
}

void UartToLora(unsigned char Myindex)
{
     94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     94e:	46de      	mov	lr, fp
     950:	4647      	mov	r7, r8
     952:	b580      	push	{r7, lr}
	unsigned char XORtmp;
	unsigned char i;
	//計算要傳給Lora模組的CRC
	XORtmp = 0x00;
	for(i = 0; i < MyLoRaTmpCount[Myindex]; i++)
     954:	4680      	mov	r8, r0
     956:	4b27      	ldr	r3, [pc, #156]	; (9f4 <UartToLora+0xa8>)
     958:	5c1d      	ldrb	r5, [r3, r0]
     95a:	2d00      	cmp	r5, #0
     95c:	d033      	beq.n	9c6 <UartToLora+0x7a>
     95e:	0041      	lsls	r1, r0, #1
     960:	1808      	adds	r0, r1, r0
     962:	00c1      	lsls	r1, r0, #3
     964:	1840      	adds	r0, r0, r1
     966:	4924      	ldr	r1, [pc, #144]	; (9f8 <UartToLora+0xac>)
     968:	180b      	adds	r3, r1, r0
     96a:	3001      	adds	r0, #1
     96c:	3d01      	subs	r5, #1
     96e:	b2ed      	uxtb	r5, r5
     970:	1940      	adds	r0, r0, r5
     972:	1809      	adds	r1, r1, r0
     974:	2500      	movs	r5, #0
	return (tmpA ^ tmpB);
     976:	781a      	ldrb	r2, [r3, #0]
     978:	4055      	eors	r5, r2
     97a:	3301      	adds	r3, #1
	for(i = 0; i < MyLoRaTmpCount[Myindex]; i++)
     97c:	4299      	cmp	r1, r3
     97e:	d1fa      	bne.n	976 <UartToLora+0x2a>
     980:	2400      	movs	r4, #0
	}
	
	//開始將資料傳給Lora模組
	for(i = 0; i < MyLoRaTmpCount[Myindex]; i++)
	{
		uTXByte(&MyUart03, MyLoRaTmp[Myindex][i]);
     982:	4643      	mov	r3, r8
     984:	005b      	lsls	r3, r3, #1
     986:	4443      	add	r3, r8
     988:	00da      	lsls	r2, r3, #3
     98a:	189b      	adds	r3, r3, r2
     98c:	4f1a      	ldr	r7, [pc, #104]	; (9f8 <UartToLora+0xac>)
     98e:	18ff      	adds	r7, r7, r3
     990:	4e1a      	ldr	r6, [pc, #104]	; (9fc <UartToLora+0xb0>)
		if(Lora_Debug_Flag == 1)
		{
			uart_send_ascii_byte(Debug_COM, MyLoRaTmp[Myindex][i]);
     992:	46bb      	mov	fp, r7
     994:	e006      	b.n	9a4 <UartToLora+0x58>
	for(i = 0; i < MyLoRaTmpCount[Myindex]; i++)
     996:	3401      	adds	r4, #1
     998:	b2e4      	uxtb	r4, r4
     99a:	4b16      	ldr	r3, [pc, #88]	; (9f4 <UartToLora+0xa8>)
     99c:	4642      	mov	r2, r8
     99e:	5c9b      	ldrb	r3, [r3, r2]
     9a0:	42a3      	cmp	r3, r4
     9a2:	d910      	bls.n	9c6 <UartToLora+0x7a>
		uTXByte(&MyUart03, MyLoRaTmp[Myindex][i]);
     9a4:	5d39      	ldrb	r1, [r7, r4]
     9a6:	4816      	ldr	r0, [pc, #88]	; (a00 <UartToLora+0xb4>)
     9a8:	47b0      	blx	r6
		if(Lora_Debug_Flag == 1)
     9aa:	4b16      	ldr	r3, [pc, #88]	; (a04 <UartToLora+0xb8>)
     9ac:	781b      	ldrb	r3, [r3, #0]
     9ae:	071b      	lsls	r3, r3, #28
     9b0:	d5f1      	bpl.n	996 <UartToLora+0x4a>
			uart_send_ascii_byte(Debug_COM, MyLoRaTmp[Myindex][i]);
     9b2:	465b      	mov	r3, fp
     9b4:	5d19      	ldrb	r1, [r3, r4]
     9b6:	4814      	ldr	r0, [pc, #80]	; (a08 <UartToLora+0xbc>)
     9b8:	4b14      	ldr	r3, [pc, #80]	; (a0c <UartToLora+0xc0>)
     9ba:	4798      	blx	r3
			uTXByte(Debug_COM, ' ');
     9bc:	2120      	movs	r1, #32
     9be:	4812      	ldr	r0, [pc, #72]	; (a08 <UartToLora+0xbc>)
     9c0:	4b0e      	ldr	r3, [pc, #56]	; (9fc <UartToLora+0xb0>)
     9c2:	4798      	blx	r3
     9c4:	e7e7      	b.n	996 <UartToLora+0x4a>
		}
	}
	//傳送資料的CRC
	uTXByte(&MyUart03, XORtmp);
     9c6:	0029      	movs	r1, r5
     9c8:	480d      	ldr	r0, [pc, #52]	; (a00 <UartToLora+0xb4>)
     9ca:	4b0c      	ldr	r3, [pc, #48]	; (9fc <UartToLora+0xb0>)
     9cc:	4798      	blx	r3
	if(Lora_Debug_Flag == 1)
     9ce:	4b0d      	ldr	r3, [pc, #52]	; (a04 <UartToLora+0xb8>)
     9d0:	781b      	ldrb	r3, [r3, #0]
     9d2:	071b      	lsls	r3, r3, #28
     9d4:	d403      	bmi.n	9de <UartToLora+0x92>
	{
		uart_send_ascii_byte(Debug_COM, XORtmp);
		uTXByte(Debug_COM, 0x0d);
	}
}
     9d6:	bc0c      	pop	{r2, r3}
     9d8:	4690      	mov	r8, r2
     9da:	469b      	mov	fp, r3
     9dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_send_ascii_byte(Debug_COM, XORtmp);
     9de:	4c0a      	ldr	r4, [pc, #40]	; (a08 <UartToLora+0xbc>)
     9e0:	0029      	movs	r1, r5
     9e2:	0020      	movs	r0, r4
     9e4:	4b09      	ldr	r3, [pc, #36]	; (a0c <UartToLora+0xc0>)
     9e6:	4798      	blx	r3
		uTXByte(Debug_COM, 0x0d);
     9e8:	210d      	movs	r1, #13
     9ea:	0020      	movs	r0, r4
     9ec:	4b03      	ldr	r3, [pc, #12]	; (9fc <UartToLora+0xb0>)
     9ee:	4798      	blx	r3
}
     9f0:	e7f1      	b.n	9d6 <UartToLora+0x8a>
     9f2:	46c0      	nop			; (mov r8, r8)
     9f4:	200001b0 	.word	0x200001b0
     9f8:	20000000 	.word	0x20000000
     9fc:	00001b4d 	.word	0x00001b4d
     a00:	20004298 	.word	0x20004298
     a04:	20004144 	.word	0x20004144
     a08:	200040ac 	.word	0x200040ac
     a0c:	00001b6d 	.word	0x00001b6d

00000a10 <Write_LoRa_TxBuffer>:

//寫入資料
void Write_LoRa_TxBuffer(void)
{
     a10:	b510      	push	{r4, lr}
	MyBufferCount = 0;
     a12:	2400      	movs	r4, #0
     a14:	4b06      	ldr	r3, [pc, #24]	; (a30 <Write_LoRa_TxBuffer+0x20>)
     a16:	701c      	strb	r4, [r3, #0]
	UserRxCountMax = 4;
     a18:	2204      	movs	r2, #4
     a1a:	4b06      	ldr	r3, [pc, #24]	; (a34 <Write_LoRa_TxBuffer+0x24>)
     a1c:	701a      	strb	r2, [r3, #0]
	UartToLora(Write_LoRa_TxBuffer_Index);
     a1e:	2005      	movs	r0, #5
     a20:	4b05      	ldr	r3, [pc, #20]	; (a38 <Write_LoRa_TxBuffer+0x28>)
     a22:	4798      	blx	r3
	NowStatus = WaitRxData;
     a24:	2267      	movs	r2, #103	; 0x67
     a26:	4b05      	ldr	r3, [pc, #20]	; (a3c <Write_LoRa_TxBuffer+0x2c>)
     a28:	701a      	strb	r2, [r3, #0]
	f_count = 0;
     a2a:	4b05      	ldr	r3, [pc, #20]	; (a40 <Write_LoRa_TxBuffer+0x30>)
     a2c:	601c      	str	r4, [r3, #0]
}
     a2e:	bd10      	pop	{r4, pc}
     a30:	20004141 	.word	0x20004141
     a34:	200042bd 	.word	0x200042bd
     a38:	0000094d 	.word	0x0000094d
     a3c:	200040a4 	.word	0x200040a4
     a40:	20004294 	.word	0x20004294

00000a44 <Read_LoRa_RxBuffer>:


//讀取資料
void Read_LoRa_RxBuffer(void)
{
     a44:	b510      	push	{r4, lr}
	MyBufferCount = 0;
     a46:	2400      	movs	r4, #0
     a48:	4b06      	ldr	r3, [pc, #24]	; (a64 <Read_LoRa_RxBuffer+0x20>)
     a4a:	701c      	strb	r4, [r3, #0]
	UserRxCountMax = 29;
     a4c:	221d      	movs	r2, #29
     a4e:	4b06      	ldr	r3, [pc, #24]	; (a68 <Read_LoRa_RxBuffer+0x24>)
     a50:	701a      	strb	r2, [r3, #0]
	UartToLora(Read_LoRa_RxBuffer_Index);
     a52:	2006      	movs	r0, #6
     a54:	4b05      	ldr	r3, [pc, #20]	; (a6c <Read_LoRa_RxBuffer+0x28>)
     a56:	4798      	blx	r3
	NowStatus = WaitRxData;
     a58:	2267      	movs	r2, #103	; 0x67
     a5a:	4b05      	ldr	r3, [pc, #20]	; (a70 <Read_LoRa_RxBuffer+0x2c>)
     a5c:	701a      	strb	r2, [r3, #0]
	f_count = 0;
     a5e:	4b05      	ldr	r3, [pc, #20]	; (a74 <Read_LoRa_RxBuffer+0x30>)
     a60:	601c      	str	r4, [r3, #0]
}
     a62:	bd10      	pop	{r4, pc}
     a64:	20004141 	.word	0x20004141
     a68:	200042bd 	.word	0x200042bd
     a6c:	0000094d 	.word	0x0000094d
     a70:	200040a4 	.word	0x200040a4
     a74:	20004294 	.word	0x20004294

00000a78 <Read_LoRa_RxCount>:

//讀取接收計數器
void Read_LoRa_RxCount(void)
{
     a78:	b510      	push	{r4, lr}
	MyBufferCount = 0;
     a7a:	2400      	movs	r4, #0
     a7c:	4b06      	ldr	r3, [pc, #24]	; (a98 <Read_LoRa_RxCount+0x20>)
     a7e:	701c      	strb	r4, [r3, #0]
	UserRxCountMax = 5;
     a80:	2205      	movs	r2, #5
     a82:	4b06      	ldr	r3, [pc, #24]	; (a9c <Read_LoRa_RxCount+0x24>)
     a84:	701a      	strb	r2, [r3, #0]
	UartToLora(Read_LoRa_RxCount_Index);
     a86:	2007      	movs	r0, #7
     a88:	4b05      	ldr	r3, [pc, #20]	; (aa0 <Read_LoRa_RxCount+0x28>)
     a8a:	4798      	blx	r3
	NowStatus = WaitRxData;
     a8c:	2267      	movs	r2, #103	; 0x67
     a8e:	4b05      	ldr	r3, [pc, #20]	; (aa4 <Read_LoRa_RxCount+0x2c>)
     a90:	701a      	strb	r2, [r3, #0]
	f_count = 0;
     a92:	4b05      	ldr	r3, [pc, #20]	; (aa8 <Read_LoRa_RxCount+0x30>)
     a94:	601c      	str	r4, [r3, #0]
}
     a96:	bd10      	pop	{r4, pc}
     a98:	20004141 	.word	0x20004141
     a9c:	200042bd 	.word	0x200042bd
     aa0:	0000094d 	.word	0x0000094d
     aa4:	200040a4 	.word	0x200040a4
     aa8:	20004294 	.word	0x20004294

00000aac <Write_LoRa_Mode_FQ>:

//設定模式與頻率
void Write_LoRa_Mode_FQ(unsigned char tmpMode)
{
     aac:	b510      	push	{r4, lr}
	MyBufferCount = 0;
     aae:	2400      	movs	r4, #0
     ab0:	4b08      	ldr	r3, [pc, #32]	; (ad4 <Write_LoRa_Mode_FQ+0x28>)
     ab2:	701c      	strb	r4, [r3, #0]
	UserRxCountMax = 4;
     ab4:	2204      	movs	r2, #4
     ab6:	4b08      	ldr	r3, [pc, #32]	; (ad8 <Write_LoRa_Mode_FQ+0x2c>)
     ab8:	701a      	strb	r2, [r3, #0]
	MyLoRaTmp[Write_LoRa_Mode_FQ_Index][3] = tmpMode;	
     aba:	2354      	movs	r3, #84	; 0x54
     abc:	4a07      	ldr	r2, [pc, #28]	; (adc <Write_LoRa_Mode_FQ+0x30>)
     abe:	54d0      	strb	r0, [r2, r3]
	UartToLora(Write_LoRa_Mode_FQ_Index);
     ac0:	2003      	movs	r0, #3
     ac2:	4b07      	ldr	r3, [pc, #28]	; (ae0 <Write_LoRa_Mode_FQ+0x34>)
     ac4:	4798      	blx	r3
	NowStatus = WaitRxData;
     ac6:	2267      	movs	r2, #103	; 0x67
     ac8:	4b06      	ldr	r3, [pc, #24]	; (ae4 <Write_LoRa_Mode_FQ+0x38>)
     aca:	701a      	strb	r2, [r3, #0]
	f_count = 0;
     acc:	4b06      	ldr	r3, [pc, #24]	; (ae8 <Write_LoRa_Mode_FQ+0x3c>)
     ace:	601c      	str	r4, [r3, #0]
}
     ad0:	bd10      	pop	{r4, pc}
     ad2:	46c0      	nop			; (mov r8, r8)
     ad4:	20004141 	.word	0x20004141
     ad8:	200042bd 	.word	0x200042bd
     adc:	20000000 	.word	0x20000000
     ae0:	0000094d 	.word	0x0000094d
     ae4:	200040a4 	.word	0x200040a4
     ae8:	20004294 	.word	0x20004294

00000aec <Write_LoRa_Setting>:

//設定Lora參數
void Write_LoRa_Setting(void)
{
     aec:	b510      	push	{r4, lr}
	MyBufferCount = 0;
     aee:	2400      	movs	r4, #0
     af0:	4b06      	ldr	r3, [pc, #24]	; (b0c <Write_LoRa_Setting+0x20>)
     af2:	701c      	strb	r4, [r3, #0]
	UserRxCountMax = 4;
     af4:	2204      	movs	r2, #4
     af6:	4b06      	ldr	r3, [pc, #24]	; (b10 <Write_LoRa_Setting+0x24>)
     af8:	701a      	strb	r2, [r3, #0]
	UartToLora(Write_LoRa_Setting_Index);
     afa:	2004      	movs	r0, #4
     afc:	4b05      	ldr	r3, [pc, #20]	; (b14 <Write_LoRa_Setting+0x28>)
     afe:	4798      	blx	r3
	NowStatus = WaitRxData;
     b00:	2267      	movs	r2, #103	; 0x67
     b02:	4b05      	ldr	r3, [pc, #20]	; (b18 <Write_LoRa_Setting+0x2c>)
     b04:	701a      	strb	r2, [r3, #0]
	f_count = 0;
     b06:	4b05      	ldr	r3, [pc, #20]	; (b1c <Write_LoRa_Setting+0x30>)
     b08:	601c      	str	r4, [r3, #0]
}
     b0a:	bd10      	pop	{r4, pc}
     b0c:	20004141 	.word	0x20004141
     b10:	200042bd 	.word	0x200042bd
     b14:	0000094d 	.word	0x0000094d
     b18:	200040a4 	.word	0x200040a4
     b1c:	20004294 	.word	0x20004294

00000b20 <Read_LoRa_Setting>:

//讀取設定狀態
void Read_LoRa_Setting(void)
{
     b20:	b510      	push	{r4, lr}
	MyBufferCount = 0;
     b22:	2400      	movs	r4, #0
     b24:	4b06      	ldr	r3, [pc, #24]	; (b40 <Read_LoRa_Setting+0x20>)
     b26:	701c      	strb	r4, [r3, #0]
	UserRxCountMax = 11;
     b28:	220b      	movs	r2, #11
     b2a:	4b06      	ldr	r3, [pc, #24]	; (b44 <Read_LoRa_Setting+0x24>)
     b2c:	701a      	strb	r2, [r3, #0]
	UartToLora(Read_LoRa_Setting_Index);
     b2e:	2002      	movs	r0, #2
     b30:	4b05      	ldr	r3, [pc, #20]	; (b48 <Read_LoRa_Setting+0x28>)
     b32:	4798      	blx	r3
	NowStatus = WaitRxData;
     b34:	2267      	movs	r2, #103	; 0x67
     b36:	4b05      	ldr	r3, [pc, #20]	; (b4c <Read_LoRa_Setting+0x2c>)
     b38:	701a      	strb	r2, [r3, #0]
	f_count = 0;
     b3a:	4b05      	ldr	r3, [pc, #20]	; (b50 <Read_LoRa_Setting+0x30>)
     b3c:	601c      	str	r4, [r3, #0]
}
     b3e:	bd10      	pop	{r4, pc}
     b40:	20004141 	.word	0x20004141
     b44:	200042bd 	.word	0x200042bd
     b48:	0000094d 	.word	0x0000094d
     b4c:	200040a4 	.word	0x200040a4
     b50:	20004294 	.word	0x20004294

00000b54 <Read_LoRa_ID>:

//讀取FW版本、Chip ID
void Read_LoRa_ID(void)
{
     b54:	b510      	push	{r4, lr}
	MyBufferCount = 0;
     b56:	2400      	movs	r4, #0
     b58:	4b06      	ldr	r3, [pc, #24]	; (b74 <Read_LoRa_ID+0x20>)
     b5a:	701c      	strb	r4, [r3, #0]
	UserRxCountMax = 9;
     b5c:	2209      	movs	r2, #9
     b5e:	4b06      	ldr	r3, [pc, #24]	; (b78 <Read_LoRa_ID+0x24>)
     b60:	701a      	strb	r2, [r3, #0]
	UartToLora(Read_LoRa_ID_Index);	
     b62:	2000      	movs	r0, #0
     b64:	4b05      	ldr	r3, [pc, #20]	; (b7c <Read_LoRa_ID+0x28>)
     b66:	4798      	blx	r3
	NowStatus = WaitRxData;
     b68:	2267      	movs	r2, #103	; 0x67
     b6a:	4b05      	ldr	r3, [pc, #20]	; (b80 <Read_LoRa_ID+0x2c>)
     b6c:	701a      	strb	r2, [r3, #0]
	f_count = 0;
     b6e:	4b05      	ldr	r3, [pc, #20]	; (b84 <Read_LoRa_ID+0x30>)
     b70:	601c      	str	r4, [r3, #0]
}
     b72:	bd10      	pop	{r4, pc}
     b74:	20004141 	.word	0x20004141
     b78:	200042bd 	.word	0x200042bd
     b7c:	0000094d 	.word	0x0000094d
     b80:	200040a4 	.word	0x200040a4
     b84:	20004294 	.word	0x20004294

00000b88 <Reset_LoRa>:



//重置、初始化
void Reset_LoRa(void)
{
     b88:	b510      	push	{r4, lr}
	MyBufferCount = 0;
     b8a:	2400      	movs	r4, #0
     b8c:	4b06      	ldr	r3, [pc, #24]	; (ba8 <Reset_LoRa+0x20>)
     b8e:	701c      	strb	r4, [r3, #0]
	UserRxCountMax = 4;
     b90:	2204      	movs	r2, #4
     b92:	4b06      	ldr	r3, [pc, #24]	; (bac <Reset_LoRa+0x24>)
     b94:	701a      	strb	r2, [r3, #0]
	UartToLora(Reset_LoRa_Index);	
     b96:	2001      	movs	r0, #1
     b98:	4b05      	ldr	r3, [pc, #20]	; (bb0 <Reset_LoRa+0x28>)
     b9a:	4798      	blx	r3
	NowStatus = WaitRxData;
     b9c:	2267      	movs	r2, #103	; 0x67
     b9e:	4b05      	ldr	r3, [pc, #20]	; (bb4 <Reset_LoRa+0x2c>)
     ba0:	701a      	strb	r2, [r3, #0]
	f_count = 0;
     ba2:	4b05      	ldr	r3, [pc, #20]	; (bb8 <Reset_LoRa+0x30>)
     ba4:	601c      	str	r4, [r3, #0]
}
     ba6:	bd10      	pop	{r4, pc}
     ba8:	20004141 	.word	0x20004141
     bac:	200042bd 	.word	0x200042bd
     bb0:	0000094d 	.word	0x0000094d
     bb4:	200040a4 	.word	0x200040a4
     bb8:	20004294 	.word	0x20004294

00000bbc <Catch_Lora_RX_Count_Form_Module>:

void Catch_Lora_RX_Count_Form_Module(void)
{
	UINT16u_t	tmp16;
		
	tmp16.byte[1] = MyBuffer[3];
     bbc:	4b03      	ldr	r3, [pc, #12]	; (bcc <Catch_Lora_RX_Count_Form_Module+0x10>)
     bbe:	78da      	ldrb	r2, [r3, #3]
	tmp16.byte[0] = MyBuffer[4];
     bc0:	791b      	ldrb	r3, [r3, #4]
     bc2:	0212      	lsls	r2, r2, #8
	Lora_RX_Count_Form_Module = tmp16.word;
     bc4:	4313      	orrs	r3, r2
     bc6:	4a02      	ldr	r2, [pc, #8]	; (bd0 <Catch_Lora_RX_Count_Form_Module+0x14>)
     bc8:	6013      	str	r3, [r2, #0]
}
     bca:	4770      	bx	lr
     bcc:	20004274 	.word	0x20004274
     bd0:	200040a0 	.word	0x200040a0

00000bd4 <Lora_CMD_Func>:
{
     bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
     bd6:	b083      	sub	sp, #12
	switch(NowStatus)
     bd8:	4bd6      	ldr	r3, [pc, #856]	; (f34 <Lora_CMD_Func+0x360>)
     bda:	781a      	ldrb	r2, [r3, #0]
     bdc:	2a6d      	cmp	r2, #109	; 0x6d
     bde:	d900      	bls.n	be2 <Lora_CMD_Func+0xe>
     be0:	e08c      	b.n	cfc <Lora_CMD_Func+0x128>
     be2:	0093      	lsls	r3, r2, #2
     be4:	4ad4      	ldr	r2, [pc, #848]	; (f38 <Lora_CMD_Func+0x364>)
     be6:	58d3      	ldr	r3, [r2, r3]
     be8:	469f      	mov	pc, r3
			if(f_count > 1000)
     bea:	4bd4      	ldr	r3, [pc, #848]	; (f3c <Lora_CMD_Func+0x368>)
     bec:	681a      	ldr	r2, [r3, #0]
     bee:	23fa      	movs	r3, #250	; 0xfa
     bf0:	009b      	lsls	r3, r3, #2
     bf2:	429a      	cmp	r2, r3
     bf4:	d800      	bhi.n	bf8 <Lora_CMD_Func+0x24>
     bf6:	e081      	b.n	cfc <Lora_CMD_Func+0x128>
				Print_Delay_LoRa_CMD_Msg();
     bf8:	4bd1      	ldr	r3, [pc, #836]	; (f40 <Lora_CMD_Func+0x36c>)
     bfa:	4798      	blx	r3
				if(Lora_CRC_Flag == CRCisOK)
     bfc:	4bd1      	ldr	r3, [pc, #836]	; (f44 <Lora_CMD_Func+0x370>)
     bfe:	781b      	ldrb	r3, [r3, #0]
     c00:	075b      	lsls	r3, r3, #29
     c02:	d404      	bmi.n	c0e <Lora_CMD_Func+0x3a>
					NowStatus = NextStatus;	
     c04:	4bd0      	ldr	r3, [pc, #832]	; (f48 <Lora_CMD_Func+0x374>)
     c06:	781a      	ldrb	r2, [r3, #0]
     c08:	4bca      	ldr	r3, [pc, #808]	; (f34 <Lora_CMD_Func+0x360>)
     c0a:	701a      	strb	r2, [r3, #0]
     c0c:	e076      	b.n	cfc <Lora_CMD_Func+0x128>
					NowStatus = LastStatus;	
     c0e:	4bcf      	ldr	r3, [pc, #828]	; (f4c <Lora_CMD_Func+0x378>)
     c10:	781a      	ldrb	r2, [r3, #0]
     c12:	4bc8      	ldr	r3, [pc, #800]	; (f34 <Lora_CMD_Func+0x360>)
     c14:	701a      	strb	r2, [r3, #0]
     c16:	e071      	b.n	cfc <Lora_CMD_Func+0x128>
			if(f_count < 500) //尚未Time Out
     c18:	4bc8      	ldr	r3, [pc, #800]	; (f3c <Lora_CMD_Func+0x368>)
     c1a:	681a      	ldr	r2, [r3, #0]
     c1c:	23f4      	movs	r3, #244	; 0xf4
     c1e:	33ff      	adds	r3, #255	; 0xff
     c20:	429a      	cmp	r2, r3
     c22:	d80c      	bhi.n	c3e <Lora_CMD_Func+0x6a>
				if(MyBufferCount != UserRxCountMax) //若資料長度不如預期長度
     c24:	4bca      	ldr	r3, [pc, #808]	; (f50 <Lora_CMD_Func+0x37c>)
     c26:	781a      	ldrb	r2, [r3, #0]
     c28:	4bca      	ldr	r3, [pc, #808]	; (f54 <Lora_CMD_Func+0x380>)
     c2a:	781b      	ldrb	r3, [r3, #0]
     c2c:	429a      	cmp	r2, r3
     c2e:	d165      	bne.n	cfc <Lora_CMD_Func+0x128>
					Lora_TimeOut_Count = 0; //清除TimeOutCount
     c30:	2200      	movs	r2, #0
     c32:	4bc9      	ldr	r3, [pc, #804]	; (f58 <Lora_CMD_Func+0x384>)
     c34:	601a      	str	r2, [r3, #0]
					NowStatus = CheckRxCRC;	//進入CRC檢查
     c36:	3268      	adds	r2, #104	; 0x68
     c38:	4bbe      	ldr	r3, [pc, #760]	; (f34 <Lora_CMD_Func+0x360>)
     c3a:	701a      	strb	r2, [r3, #0]
     c3c:	e05e      	b.n	cfc <Lora_CMD_Func+0x128>
				Lora_TimeOut_Count++;
     c3e:	4bc6      	ldr	r3, [pc, #792]	; (f58 <Lora_CMD_Func+0x384>)
     c40:	681a      	ldr	r2, [r3, #0]
     c42:	3201      	adds	r2, #1
     c44:	601a      	str	r2, [r3, #0]
				if(Lora_TimeOut_Count > 3)	//若Time Out三次
     c46:	681b      	ldr	r3, [r3, #0]
     c48:	2b03      	cmp	r3, #3
     c4a:	d905      	bls.n	c58 <Lora_CMD_Func+0x84>
					NowStatus = Read_LoRa_ID_Index;
     c4c:	2200      	movs	r2, #0
     c4e:	4bb9      	ldr	r3, [pc, #740]	; (f34 <Lora_CMD_Func+0x360>)
     c50:	701a      	strb	r2, [r3, #0]
				Print_Time_Out_Msg();
     c52:	4bc2      	ldr	r3, [pc, #776]	; (f5c <Lora_CMD_Func+0x388>)
     c54:	4798      	blx	r3
     c56:	e051      	b.n	cfc <Lora_CMD_Func+0x128>
					NowStatus = LastStatus;	//重傳上一次的指令
     c58:	4bbc      	ldr	r3, [pc, #752]	; (f4c <Lora_CMD_Func+0x378>)
     c5a:	781a      	ldrb	r2, [r3, #0]
     c5c:	4bb5      	ldr	r3, [pc, #724]	; (f34 <Lora_CMD_Func+0x360>)
     c5e:	701a      	strb	r2, [r3, #0]
     c60:	e7f7      	b.n	c52 <Lora_CMD_Func+0x7e>
			if(Lora_Debug_Flag == 1)
     c62:	4bb8      	ldr	r3, [pc, #736]	; (f44 <Lora_CMD_Func+0x370>)
     c64:	781b      	ldrb	r3, [r3, #0]
     c66:	071b      	lsls	r3, r3, #28
     c68:	d40c      	bmi.n	c84 <Lora_CMD_Func+0xb0>
			XORtmp = 0x00;
     c6a:	2200      	movs	r2, #0
     c6c:	466b      	mov	r3, sp
     c6e:	71da      	strb	r2, [r3, #7]
			for(i = 0; i < (MyBufferCount - 1); i++)
     c70:	4bb7      	ldr	r3, [pc, #732]	; (f50 <Lora_CMD_Func+0x37c>)
     c72:	781b      	ldrb	r3, [r3, #0]
     c74:	3b01      	subs	r3, #1
     c76:	2b00      	cmp	r3, #0
     c78:	dd24      	ble.n	cc4 <Lora_CMD_Func+0xf0>
     c7a:	2700      	movs	r7, #0
     c7c:	2400      	movs	r4, #0
				if(Lora_Debug_Flag == 1)
     c7e:	4eb1      	ldr	r6, [pc, #708]	; (f44 <Lora_CMD_Func+0x370>)
					uart_send_ascii_byte(Debug_COM, MyBuffer[i]);
     c80:	4db7      	ldr	r5, [pc, #732]	; (f60 <Lora_CMD_Func+0x38c>)
     c82:	e013      	b.n	cac <Lora_CMD_Func+0xd8>
				uTXByte(Debug_COM, 0x09);
     c84:	2109      	movs	r1, #9
     c86:	48b7      	ldr	r0, [pc, #732]	; (f64 <Lora_CMD_Func+0x390>)
     c88:	4bb7      	ldr	r3, [pc, #732]	; (f68 <Lora_CMD_Func+0x394>)
     c8a:	4798      	blx	r3
     c8c:	e7ed      	b.n	c6a <Lora_CMD_Func+0x96>
				XORtmp = XORtmp ^ MyBuffer[i];
     c8e:	466b      	mov	r3, sp
     c90:	1dda      	adds	r2, r3, #7
     c92:	79db      	ldrb	r3, [r3, #7]
     c94:	49b2      	ldr	r1, [pc, #712]	; (f60 <Lora_CMD_Func+0x38c>)
     c96:	5dc9      	ldrb	r1, [r1, r7]
     c98:	404b      	eors	r3, r1
     c9a:	7013      	strb	r3, [r2, #0]
			for(i = 0; i < (MyBufferCount - 1); i++)
     c9c:	3401      	adds	r4, #1
     c9e:	b2e4      	uxtb	r4, r4
     ca0:	0027      	movs	r7, r4
     ca2:	4bab      	ldr	r3, [pc, #684]	; (f50 <Lora_CMD_Func+0x37c>)
     ca4:	781b      	ldrb	r3, [r3, #0]
     ca6:	3b01      	subs	r3, #1
     ca8:	429c      	cmp	r4, r3
     caa:	da0b      	bge.n	cc4 <Lora_CMD_Func+0xf0>
				if(Lora_Debug_Flag == 1)
     cac:	7833      	ldrb	r3, [r6, #0]
     cae:	071b      	lsls	r3, r3, #28
     cb0:	d5ed      	bpl.n	c8e <Lora_CMD_Func+0xba>
					uart_send_ascii_byte(Debug_COM, MyBuffer[i]);
     cb2:	5de9      	ldrb	r1, [r5, r7]
     cb4:	48ab      	ldr	r0, [pc, #684]	; (f64 <Lora_CMD_Func+0x390>)
     cb6:	4bad      	ldr	r3, [pc, #692]	; (f6c <Lora_CMD_Func+0x398>)
     cb8:	4798      	blx	r3
					uTXByte(Debug_COM, ' ');
     cba:	2120      	movs	r1, #32
     cbc:	48a9      	ldr	r0, [pc, #676]	; (f64 <Lora_CMD_Func+0x390>)
     cbe:	4baa      	ldr	r3, [pc, #680]	; (f68 <Lora_CMD_Func+0x394>)
     cc0:	4798      	blx	r3
     cc2:	e7e4      	b.n	c8e <Lora_CMD_Func+0xba>
			if(Lora_Debug_Flag == 1)
     cc4:	4b9f      	ldr	r3, [pc, #636]	; (f44 <Lora_CMD_Func+0x370>)
     cc6:	781b      	ldrb	r3, [r3, #0]
     cc8:	071b      	lsls	r3, r3, #28
     cca:	d419      	bmi.n	d00 <Lora_CMD_Func+0x12c>
			if(MyBuffer[(MyBufferCount - 1)] != XORtmp) //如果CRC錯誤
     ccc:	466b      	mov	r3, sp
     cce:	79da      	ldrb	r2, [r3, #7]
     cd0:	b2d2      	uxtb	r2, r2
     cd2:	4b9f      	ldr	r3, [pc, #636]	; (f50 <Lora_CMD_Func+0x37c>)
     cd4:	7819      	ldrb	r1, [r3, #0]
     cd6:	4ba2      	ldr	r3, [pc, #648]	; (f60 <Lora_CMD_Func+0x38c>)
     cd8:	185b      	adds	r3, r3, r1
     cda:	3b01      	subs	r3, #1
     cdc:	781b      	ldrb	r3, [r3, #0]
     cde:	4293      	cmp	r3, r2
     ce0:	d031      	beq.n	d46 <Lora_CMD_Func+0x172>
				Print_CRC_ERROR();	
     ce2:	4ba3      	ldr	r3, [pc, #652]	; (f70 <Lora_CMD_Func+0x39c>)
     ce4:	4798      	blx	r3
				Lora_CRC_Flag = CRCisErr;
     ce6:	4a97      	ldr	r2, [pc, #604]	; (f44 <Lora_CMD_Func+0x370>)
     ce8:	7813      	ldrb	r3, [r2, #0]
     cea:	2104      	movs	r1, #4
     cec:	430b      	orrs	r3, r1
     cee:	7013      	strb	r3, [r2, #0]
			f_count = 0;
     cf0:	2200      	movs	r2, #0
     cf2:	4b92      	ldr	r3, [pc, #584]	; (f3c <Lora_CMD_Func+0x368>)
     cf4:	601a      	str	r2, [r3, #0]
			NowStatus = Lora_CMD_Delay_Index;	//進入DelayTime，再進行資料傳輸
     cf6:	326b      	adds	r2, #107	; 0x6b
     cf8:	4b8e      	ldr	r3, [pc, #568]	; (f34 <Lora_CMD_Func+0x360>)
     cfa:	701a      	strb	r2, [r3, #0]
}
     cfc:	b003      	add	sp, #12
     cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
				uTXByte(Debug_COM, '-');
     d00:	4c98      	ldr	r4, [pc, #608]	; (f64 <Lora_CMD_Func+0x390>)
     d02:	212d      	movs	r1, #45	; 0x2d
     d04:	0020      	movs	r0, r4
     d06:	4d98      	ldr	r5, [pc, #608]	; (f68 <Lora_CMD_Func+0x394>)
     d08:	47a8      	blx	r5
				uTXByte(Debug_COM, ' ');
     d0a:	2120      	movs	r1, #32
     d0c:	0020      	movs	r0, r4
     d0e:	47a8      	blx	r5
				uart_send_ascii_byte(Debug_COM, MyBuffer[(MyBufferCount-1)]);
     d10:	4f8f      	ldr	r7, [pc, #572]	; (f50 <Lora_CMD_Func+0x37c>)
     d12:	783a      	ldrb	r2, [r7, #0]
     d14:	4b92      	ldr	r3, [pc, #584]	; (f60 <Lora_CMD_Func+0x38c>)
     d16:	189b      	adds	r3, r3, r2
     d18:	3b01      	subs	r3, #1
     d1a:	7819      	ldrb	r1, [r3, #0]
     d1c:	0020      	movs	r0, r4
     d1e:	4e93      	ldr	r6, [pc, #588]	; (f6c <Lora_CMD_Func+0x398>)
     d20:	47b0      	blx	r6
				uTXByte(Debug_COM, ' ');
     d22:	2120      	movs	r1, #32
     d24:	0020      	movs	r0, r4
     d26:	47a8      	blx	r5
				uart_send_ascii_byte(Debug_COM, MyBufferCount);
     d28:	7839      	ldrb	r1, [r7, #0]
     d2a:	0020      	movs	r0, r4
     d2c:	47b0      	blx	r6
				uTXByte(Debug_COM, ' ');
     d2e:	2120      	movs	r1, #32
     d30:	0020      	movs	r0, r4
     d32:	47a8      	blx	r5
				uart_send_ascii_byte(Debug_COM, XORtmp);
     d34:	466b      	mov	r3, sp
     d36:	79d9      	ldrb	r1, [r3, #7]
     d38:	b2c9      	uxtb	r1, r1
     d3a:	0020      	movs	r0, r4
     d3c:	47b0      	blx	r6
				uTXByte(Debug_COM, ' ');
     d3e:	2120      	movs	r1, #32
     d40:	0020      	movs	r0, r4
     d42:	47a8      	blx	r5
     d44:	e7c2      	b.n	ccc <Lora_CMD_Func+0xf8>
				Print_CRC_OK();
     d46:	4b8b      	ldr	r3, [pc, #556]	; (f74 <Lora_CMD_Func+0x3a0>)
     d48:	4798      	blx	r3
				Lora_CRC_Flag = CRCisOK;
     d4a:	4a7e      	ldr	r2, [pc, #504]	; (f44 <Lora_CMD_Func+0x370>)
     d4c:	7813      	ldrb	r3, [r2, #0]
     d4e:	2104      	movs	r1, #4
     d50:	438b      	bics	r3, r1
     d52:	7013      	strb	r3, [r2, #0]
     d54:	e7cc      	b.n	cf0 <Lora_CMD_Func+0x11c>
			Lora_initial_Flag = 0;
     d56:	4a7b      	ldr	r2, [pc, #492]	; (f44 <Lora_CMD_Func+0x370>)
     d58:	7813      	ldrb	r3, [r2, #0]
     d5a:	2102      	movs	r1, #2
     d5c:	438b      	bics	r3, r1
     d5e:	7013      	strb	r3, [r2, #0]
			LastStatus = Read_LoRa_ID_Index;	//記得現在位置
     d60:	2200      	movs	r2, #0
     d62:	4b7a      	ldr	r3, [pc, #488]	; (f4c <Lora_CMD_Func+0x378>)
     d64:	701a      	strb	r2, [r3, #0]
			NextStatus = Catch_LoRa_ID_Index;	//CRC OK後，要去的位置
     d66:	3269      	adds	r2, #105	; 0x69
     d68:	4b77      	ldr	r3, [pc, #476]	; (f48 <Lora_CMD_Func+0x374>)
     d6a:	701a      	strb	r2, [r3, #0]
			Print_Read_LoRa_ID_Msg();
     d6c:	4b82      	ldr	r3, [pc, #520]	; (f78 <Lora_CMD_Func+0x3a4>)
     d6e:	4798      	blx	r3
			Read_LoRa_ID();			//送出Read_LoRa_ID後，再進入WaitRxData等待Uart回傳
     d70:	4b82      	ldr	r3, [pc, #520]	; (f7c <Lora_CMD_Func+0x3a8>)
     d72:	4798      	blx	r3
			break;
     d74:	e7c2      	b.n	cfc <Lora_CMD_Func+0x128>
			Lora_initial_Flag = 0;
     d76:	4a73      	ldr	r2, [pc, #460]	; (f44 <Lora_CMD_Func+0x370>)
     d78:	7813      	ldrb	r3, [r2, #0]
     d7a:	2102      	movs	r1, #2
     d7c:	438b      	bics	r3, r1
     d7e:	7013      	strb	r3, [r2, #0]
			MyLoRaFW = MyBuffer[4]; 
     d80:	4b77      	ldr	r3, [pc, #476]	; (f60 <Lora_CMD_Func+0x38c>)
     d82:	7919      	ldrb	r1, [r3, #4]
     d84:	4a7e      	ldr	r2, [pc, #504]	; (f80 <Lora_CMD_Func+0x3ac>)
     d86:	7011      	strb	r1, [r2, #0]
			MyLoRaID[0] = MyBuffer[5];
     d88:	4a7e      	ldr	r2, [pc, #504]	; (f84 <Lora_CMD_Func+0x3b0>)
     d8a:	7959      	ldrb	r1, [r3, #5]
     d8c:	7011      	strb	r1, [r2, #0]
			MyLoRaID[1] = MyBuffer[6];
     d8e:	7999      	ldrb	r1, [r3, #6]
     d90:	7051      	strb	r1, [r2, #1]
			MyLoRaID[2] = MyBuffer[7];
     d92:	79d9      	ldrb	r1, [r3, #7]
     d94:	7091      	strb	r1, [r2, #2]
			MyLoRaID[3] = MyBuffer[8];
     d96:	7a1b      	ldrb	r3, [r3, #8]
     d98:	70d3      	strb	r3, [r2, #3]
			Print_Catch_LoRa_ID_Msg();
     d9a:	4b7b      	ldr	r3, [pc, #492]	; (f88 <Lora_CMD_Func+0x3b4>)
     d9c:	4798      	blx	r3
			NowStatus = Reset_LoRa_Index;
     d9e:	2201      	movs	r2, #1
     da0:	4b64      	ldr	r3, [pc, #400]	; (f34 <Lora_CMD_Func+0x360>)
     da2:	701a      	strb	r2, [r3, #0]
			break;
     da4:	e7aa      	b.n	cfc <Lora_CMD_Func+0x128>
			Lora_initial_Flag = 0;
     da6:	4967      	ldr	r1, [pc, #412]	; (f44 <Lora_CMD_Func+0x370>)
     da8:	780b      	ldrb	r3, [r1, #0]
     daa:	2202      	movs	r2, #2
     dac:	4393      	bics	r3, r2
     dae:	700b      	strb	r3, [r1, #0]
			LastStatus = Reset_LoRa_Index;
     db0:	2101      	movs	r1, #1
     db2:	4b66      	ldr	r3, [pc, #408]	; (f4c <Lora_CMD_Func+0x378>)
     db4:	7019      	strb	r1, [r3, #0]
			NextStatus = Read_LoRa_Setting_Index;
     db6:	4b64      	ldr	r3, [pc, #400]	; (f48 <Lora_CMD_Func+0x374>)
     db8:	701a      	strb	r2, [r3, #0]
			Print_Reset_LoRa_Msg();
     dba:	4b74      	ldr	r3, [pc, #464]	; (f8c <Lora_CMD_Func+0x3b8>)
     dbc:	4798      	blx	r3
			Reset_LoRa();
     dbe:	4b74      	ldr	r3, [pc, #464]	; (f90 <Lora_CMD_Func+0x3bc>)
     dc0:	4798      	blx	r3
			break;
     dc2:	e79b      	b.n	cfc <Lora_CMD_Func+0x128>
			Lora_initial_Flag = 0;
     dc4:	495f      	ldr	r1, [pc, #380]	; (f44 <Lora_CMD_Func+0x370>)
     dc6:	780b      	ldrb	r3, [r1, #0]
     dc8:	2202      	movs	r2, #2
     dca:	4393      	bics	r3, r2
     dcc:	700b      	strb	r3, [r1, #0]
			LastStatus = Read_LoRa_Setting_Index;
     dce:	4b5f      	ldr	r3, [pc, #380]	; (f4c <Lora_CMD_Func+0x378>)
     dd0:	701a      	strb	r2, [r3, #0]
			NextStatus = Write_LoRa_Setting_Index;
     dd2:	3202      	adds	r2, #2
     dd4:	4b5c      	ldr	r3, [pc, #368]	; (f48 <Lora_CMD_Func+0x374>)
     dd6:	701a      	strb	r2, [r3, #0]
			Print_Read_LoRa_Setting_Msg();
     dd8:	4b6e      	ldr	r3, [pc, #440]	; (f94 <Lora_CMD_Func+0x3c0>)
     dda:	4798      	blx	r3
			Read_LoRa_Setting();
     ddc:	4b6e      	ldr	r3, [pc, #440]	; (f98 <Lora_CMD_Func+0x3c4>)
     dde:	4798      	blx	r3
			break;
     de0:	e78c      	b.n	cfc <Lora_CMD_Func+0x128>
			Lora_initial_Flag = 0;
     de2:	4a58      	ldr	r2, [pc, #352]	; (f44 <Lora_CMD_Func+0x370>)
     de4:	7813      	ldrb	r3, [r2, #0]
     de6:	2102      	movs	r1, #2
     de8:	438b      	bics	r3, r1
     dea:	7013      	strb	r3, [r2, #0]
			LastStatus = Write_LoRa_Setting_Index;
     dec:	2204      	movs	r2, #4
     dee:	4b57      	ldr	r3, [pc, #348]	; (f4c <Lora_CMD_Func+0x378>)
     df0:	701a      	strb	r2, [r3, #0]
			NextStatus = Write_LoRa_Mode_FQ_Index;			
     df2:	3a01      	subs	r2, #1
     df4:	4b54      	ldr	r3, [pc, #336]	; (f48 <Lora_CMD_Func+0x374>)
     df6:	701a      	strb	r2, [r3, #0]
			Print_Write_LoRa_Setting_Msg();
     df8:	4b68      	ldr	r3, [pc, #416]	; (f9c <Lora_CMD_Func+0x3c8>)
     dfa:	4798      	blx	r3
			Write_LoRa_Setting();
     dfc:	4b68      	ldr	r3, [pc, #416]	; (fa0 <Lora_CMD_Func+0x3cc>)
     dfe:	4798      	blx	r3
			break;
     e00:	e77c      	b.n	cfc <Lora_CMD_Func+0x128>
			Lora_initial_Flag = 0;
     e02:	4a50      	ldr	r2, [pc, #320]	; (f44 <Lora_CMD_Func+0x370>)
     e04:	7813      	ldrb	r3, [r2, #0]
     e06:	2102      	movs	r1, #2
     e08:	438b      	bics	r3, r1
     e0a:	7013      	strb	r3, [r2, #0]
			LastStatus = Write_LoRa_Mode_FQ_Index;
     e0c:	2203      	movs	r2, #3
     e0e:	4b4f      	ldr	r3, [pc, #316]	; (f4c <Lora_CMD_Func+0x378>)
     e10:	701a      	strb	r2, [r3, #0]
			Print_Write_LoRa_Mode_FQ_Msg();
     e12:	4b64      	ldr	r3, [pc, #400]	; (fa4 <Lora_CMD_Func+0x3d0>)
     e14:	4798      	blx	r3
			if(LoRa_TxRx_Mode_Flag == SetRx)
     e16:	4b64      	ldr	r3, [pc, #400]	; (fa8 <Lora_CMD_Func+0x3d4>)
     e18:	781b      	ldrb	r3, [r3, #0]
     e1a:	2b03      	cmp	r3, #3
     e1c:	d006      	beq.n	e2c <Lora_CMD_Func+0x258>
				NextStatus = Write_LoRa_TxBuffer_Index;
     e1e:	2205      	movs	r2, #5
     e20:	4b49      	ldr	r3, [pc, #292]	; (f48 <Lora_CMD_Func+0x374>)
     e22:	701a      	strb	r2, [r3, #0]
				Write_LoRa_Mode_FQ(SetTx);
     e24:	2002      	movs	r0, #2
     e26:	4b61      	ldr	r3, [pc, #388]	; (fac <Lora_CMD_Func+0x3d8>)
     e28:	4798      	blx	r3
     e2a:	e767      	b.n	cfc <Lora_CMD_Func+0x128>
				NextStatus = Read_LoRa_RxCount_Index;
     e2c:	2207      	movs	r2, #7
     e2e:	4b46      	ldr	r3, [pc, #280]	; (f48 <Lora_CMD_Func+0x374>)
     e30:	701a      	strb	r2, [r3, #0]
				Write_LoRa_Mode_FQ(SetRx);
     e32:	2003      	movs	r0, #3
     e34:	4b5d      	ldr	r3, [pc, #372]	; (fac <Lora_CMD_Func+0x3d8>)
     e36:	4798      	blx	r3
     e38:	e760      	b.n	cfc <Lora_CMD_Func+0x128>
			Lora_initial_Flag = 1;
     e3a:	4a42      	ldr	r2, [pc, #264]	; (f44 <Lora_CMD_Func+0x370>)
     e3c:	7813      	ldrb	r3, [r2, #0]
     e3e:	2102      	movs	r1, #2
     e40:	430b      	orrs	r3, r1
     e42:	7013      	strb	r3, [r2, #0]
			if(LoRa_IRQ_Flag == 1)
     e44:	4b5a      	ldr	r3, [pc, #360]	; (fb0 <Lora_CMD_Func+0x3dc>)
     e46:	781b      	ldrb	r3, [r3, #0]
     e48:	2b01      	cmp	r3, #1
     e4a:	d000      	beq.n	e4e <Lora_CMD_Func+0x27a>
     e4c:	e756      	b.n	cfc <Lora_CMD_Func+0x128>
		port_base->OUTCLR.reg = pin_mask;
     e4e:	2280      	movs	r2, #128	; 0x80
     e50:	0512      	lsls	r2, r2, #20
     e52:	4b58      	ldr	r3, [pc, #352]	; (fb4 <Lora_CMD_Func+0x3e0>)
     e54:	615a      	str	r2, [r3, #20]
				wdt_reset_count();
     e56:	4b58      	ldr	r3, [pc, #352]	; (fb8 <Lora_CMD_Func+0x3e4>)
     e58:	4798      	blx	r3
				LastStatus = Read_LoRa_RxCount_Index;
     e5a:	2207      	movs	r2, #7
     e5c:	4b3b      	ldr	r3, [pc, #236]	; (f4c <Lora_CMD_Func+0x378>)
     e5e:	701a      	strb	r2, [r3, #0]
				NextStatus = Catch_Lora_RX_Count_Form_Module_Index;
     e60:	3266      	adds	r2, #102	; 0x66
     e62:	4b39      	ldr	r3, [pc, #228]	; (f48 <Lora_CMD_Func+0x374>)
     e64:	701a      	strb	r2, [r3, #0]
				Print_Read_LoRa_RxCount_Msg();
     e66:	4b55      	ldr	r3, [pc, #340]	; (fbc <Lora_CMD_Func+0x3e8>)
     e68:	4798      	blx	r3
				Read_LoRa_RxCount();
     e6a:	4b55      	ldr	r3, [pc, #340]	; (fc0 <Lora_CMD_Func+0x3ec>)
     e6c:	4798      	blx	r3
     e6e:	e745      	b.n	cfc <Lora_CMD_Func+0x128>
			Catch_Lora_RX_Count_Form_Module();
     e70:	4b54      	ldr	r3, [pc, #336]	; (fc4 <Lora_CMD_Func+0x3f0>)
     e72:	4798      	blx	r3
			NowStatus = Read_LoRa_RxBuffer_Index;
     e74:	2206      	movs	r2, #6
     e76:	4b2f      	ldr	r3, [pc, #188]	; (f34 <Lora_CMD_Func+0x360>)
     e78:	701a      	strb	r2, [r3, #0]
			break;
     e7a:	e73f      	b.n	cfc <Lora_CMD_Func+0x128>
		port_base->OUTSET.reg = pin_mask;
     e7c:	2280      	movs	r2, #128	; 0x80
     e7e:	0512      	lsls	r2, r2, #20
     e80:	4b4c      	ldr	r3, [pc, #304]	; (fb4 <Lora_CMD_Func+0x3e0>)
     e82:	619a      	str	r2, [r3, #24]
			LastStatus = Read_LoRa_RxBuffer_Index;
     e84:	2206      	movs	r2, #6
     e86:	4b31      	ldr	r3, [pc, #196]	; (f4c <Lora_CMD_Func+0x378>)
     e88:	701a      	strb	r2, [r3, #0]
			NextStatus = Reset_IRQ_Flag_Index;
     e8a:	325e      	adds	r2, #94	; 0x5e
     e8c:	4b2e      	ldr	r3, [pc, #184]	; (f48 <Lora_CMD_Func+0x374>)
     e8e:	701a      	strb	r2, [r3, #0]
			Print_Read_LoRa_RxBuffer_Msg();
     e90:	4b4d      	ldr	r3, [pc, #308]	; (fc8 <Lora_CMD_Func+0x3f4>)
     e92:	4798      	blx	r3
			Read_LoRa_RxBuffer();
     e94:	4b4d      	ldr	r3, [pc, #308]	; (fcc <Lora_CMD_Func+0x3f8>)
     e96:	4798      	blx	r3
			break;
     e98:	e730      	b.n	cfc <Lora_CMD_Func+0x128>
			LoRa_IRQ_Flag = 0;
     e9a:	2200      	movs	r2, #0
     e9c:	4b44      	ldr	r3, [pc, #272]	; (fb0 <Lora_CMD_Func+0x3dc>)
     e9e:	701a      	strb	r2, [r3, #0]
			LoRa_Rx_Flag = LoraRxDataReady;
     ea0:	3204      	adds	r2, #4
     ea2:	4b4b      	ldr	r3, [pc, #300]	; (fd0 <Lora_CMD_Func+0x3fc>)
     ea4:	701a      	strb	r2, [r3, #0]
			Print_Reset_IRQ_Flag_Msg();
     ea6:	4b4b      	ldr	r3, [pc, #300]	; (fd4 <Lora_CMD_Func+0x400>)
     ea8:	4798      	blx	r3
			NowStatus = Read_LoRa_RxCount_Index;
     eaa:	2207      	movs	r2, #7
     eac:	4b21      	ldr	r3, [pc, #132]	; (f34 <Lora_CMD_Func+0x360>)
     eae:	701a      	strb	r2, [r3, #0]
			break;
     eb0:	e724      	b.n	cfc <Lora_CMD_Func+0x128>
			Lora_initial_Flag = 1;
     eb2:	4a24      	ldr	r2, [pc, #144]	; (f44 <Lora_CMD_Func+0x370>)
     eb4:	7813      	ldrb	r3, [r2, #0]
     eb6:	2102      	movs	r1, #2
     eb8:	430b      	orrs	r3, r1
     eba:	7013      	strb	r3, [r2, #0]
			LastStatus = Write_LoRa_TxBuffer_Index;
     ebc:	2205      	movs	r2, #5
     ebe:	4b23      	ldr	r3, [pc, #140]	; (f4c <Lora_CMD_Func+0x378>)
     ec0:	701a      	strb	r2, [r3, #0]
			NextStatus = Wait_TX_Finish_Index;
     ec2:	3267      	adds	r2, #103	; 0x67
     ec4:	4b20      	ldr	r3, [pc, #128]	; (f48 <Lora_CMD_Func+0x374>)
     ec6:	701a      	strb	r2, [r3, #0]
			Print_Write_LoRa_TxBuffer_Msg();
     ec8:	4b43      	ldr	r3, [pc, #268]	; (fd8 <Lora_CMD_Func+0x404>)
     eca:	4798      	blx	r3
			Write_LoRa_TxBuffer();
     ecc:	4b43      	ldr	r3, [pc, #268]	; (fdc <Lora_CMD_Func+0x408>)
     ece:	4798      	blx	r3
			break;
     ed0:	e714      	b.n	cfc <Lora_CMD_Func+0x128>
			if(LoRa_IRQ_Flag == 1)
     ed2:	4b37      	ldr	r3, [pc, #220]	; (fb0 <Lora_CMD_Func+0x3dc>)
     ed4:	781b      	ldrb	r3, [r3, #0]
     ed6:	2b01      	cmp	r3, #1
     ed8:	d000      	beq.n	edc <Lora_CMD_Func+0x308>
     eda:	e70f      	b.n	cfc <Lora_CMD_Func+0x128>
     edc:	2280      	movs	r2, #128	; 0x80
     ede:	0552      	lsls	r2, r2, #21
     ee0:	4b34      	ldr	r3, [pc, #208]	; (fb4 <Lora_CMD_Func+0x3e0>)
     ee2:	619a      	str	r2, [r3, #24]
				Print_Wait_TX_Finish_Msg();
     ee4:	4b3e      	ldr	r3, [pc, #248]	; (fe0 <Lora_CMD_Func+0x40c>)
     ee6:	4798      	blx	r3
				LoRa_IRQ_Flag = 0;
     ee8:	2200      	movs	r2, #0
     eea:	4b31      	ldr	r3, [pc, #196]	; (fb0 <Lora_CMD_Func+0x3dc>)
     eec:	701a      	strb	r2, [r3, #0]
				NowStatus = Leave_LoRa_Tx_Mode_Index;
     eee:	3265      	adds	r2, #101	; 0x65
     ef0:	4b10      	ldr	r3, [pc, #64]	; (f34 <Lora_CMD_Func+0x360>)
     ef2:	701a      	strb	r2, [r3, #0]
     ef4:	e702      	b.n	cfc <Lora_CMD_Func+0x128>
			if(Lora_Delay_Count == 0)
     ef6:	4b3b      	ldr	r3, [pc, #236]	; (fe4 <Lora_CMD_Func+0x410>)
     ef8:	681b      	ldr	r3, [r3, #0]
     efa:	2b00      	cmp	r3, #0
     efc:	d010      	beq.n	f20 <Lora_CMD_Func+0x34c>
			else if(f_count > 2000)
     efe:	4b0f      	ldr	r3, [pc, #60]	; (f3c <Lora_CMD_Func+0x368>)
     f00:	681a      	ldr	r2, [r3, #0]
     f02:	23fa      	movs	r3, #250	; 0xfa
     f04:	00db      	lsls	r3, r3, #3
     f06:	429a      	cmp	r2, r3
     f08:	d800      	bhi.n	f0c <Lora_CMD_Func+0x338>
     f0a:	e6f7      	b.n	cfc <Lora_CMD_Func+0x128>
				NowStatus = Change_LoRa_Tx_Mode_Data_Index;
     f0c:	226a      	movs	r2, #106	; 0x6a
     f0e:	4b09      	ldr	r3, [pc, #36]	; (f34 <Lora_CMD_Func+0x360>)
     f10:	701a      	strb	r2, [r3, #0]
					LoRa_TxRx_Mode_Flag = SetRx;
     f12:	3a67      	subs	r2, #103	; 0x67
     f14:	4b24      	ldr	r3, [pc, #144]	; (fa8 <Lora_CMD_Func+0x3d4>)
     f16:	701a      	strb	r2, [r3, #0]
				Lora_Delay_Count = 0;
     f18:	2200      	movs	r2, #0
     f1a:	4b32      	ldr	r3, [pc, #200]	; (fe4 <Lora_CMD_Func+0x410>)
     f1c:	601a      	str	r2, [r3, #0]
     f1e:	e6ed      	b.n	cfc <Lora_CMD_Func+0x128>
				Print_Leave_LoRa_Tx_Mode_Msg();
     f20:	4b31      	ldr	r3, [pc, #196]	; (fe8 <Lora_CMD_Func+0x414>)
     f22:	4798      	blx	r3
				f_count = 0;
     f24:	2200      	movs	r2, #0
     f26:	4b05      	ldr	r3, [pc, #20]	; (f3c <Lora_CMD_Func+0x368>)
     f28:	601a      	str	r2, [r3, #0]
				Lora_Delay_Count = 1;
     f2a:	3201      	adds	r2, #1
     f2c:	4b2d      	ldr	r3, [pc, #180]	; (fe4 <Lora_CMD_Func+0x410>)
     f2e:	601a      	str	r2, [r3, #0]
     f30:	e6e4      	b.n	cfc <Lora_CMD_Func+0x128>
     f32:	46c0      	nop			; (mov r8, r8)
     f34:	200040a4 	.word	0x200040a4
     f38:	00003230 	.word	0x00003230
     f3c:	20004294 	.word	0x20004294
     f40:	000010e9 	.word	0x000010e9
     f44:	20004144 	.word	0x20004144
     f48:	2000414d 	.word	0x2000414d
     f4c:	20004142 	.word	0x20004142
     f50:	20004141 	.word	0x20004141
     f54:	200042bd 	.word	0x200042bd
     f58:	20004270 	.word	0x20004270
     f5c:	00001145 	.word	0x00001145
     f60:	20004274 	.word	0x20004274
     f64:	200040ac 	.word	0x200040ac
     f68:	00001b4d 	.word	0x00001b4d
     f6c:	00001b6d 	.word	0x00001b6d
     f70:	00001411 	.word	0x00001411
     f74:	00001461 	.word	0x00001461
     f78:	000010a5 	.word	0x000010a5
     f7c:	00000b55 	.word	0x00000b55
     f80:	2000426c 	.word	0x2000426c
     f84:	20004138 	.word	0x20004138
     f88:	000014d9 	.word	0x000014d9
     f8c:	00001199 	.word	0x00001199
     f90:	00000b89 	.word	0x00000b89
     f94:	000011e1 	.word	0x000011e1
     f98:	00000b21 	.word	0x00000b21
     f9c:	00001269 	.word	0x00001269
     fa0:	00000aed 	.word	0x00000aed
     fa4:	00001225 	.word	0x00001225
     fa8:	2000426d 	.word	0x2000426d
     fac:	00000aad 	.word	0x00000aad
     fb0:	200042bc 	.word	0x200042bc
     fb4:	41004400 	.word	0x41004400
     fb8:	000007a5 	.word	0x000007a5
     fbc:	000012ad 	.word	0x000012ad
     fc0:	00000a79 	.word	0x00000a79
     fc4:	00000bbd 	.word	0x00000bbd
     fc8:	000012f1 	.word	0x000012f1
     fcc:	00000a45 	.word	0x00000a45
     fd0:	200040ec 	.word	0x200040ec
     fd4:	00001335 	.word	0x00001335
     fd8:	00001385 	.word	0x00001385
     fdc:	00000a11 	.word	0x00000a11
     fe0:	000017c5 	.word	0x000017c5
     fe4:	20004148 	.word	0x20004148
     fe8:	000013c9 	.word	0x000013c9
			NowStatus = Write_LoRa_Setting_Index;
     fec:	2204      	movs	r2, #4
     fee:	4b01      	ldr	r3, [pc, #4]	; (ff4 <Lora_CMD_Func+0x420>)
     ff0:	701a      	strb	r2, [r3, #0]
}
     ff2:	e683      	b.n	cfc <Lora_CMD_Func+0x128>
     ff4:	200040a4 	.word	0x200040a4

00000ff8 <Display_Rssi>:



void Display_Rssi(void)
{
     ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
     ffa:	46c6      	mov	lr, r8
     ffc:	b500      	push	{lr}
	UINT16u_t	tmp16;
	UINT8u_t	tmp8;
	
	tmp16.byte[1] = MyBuffer[27];
     ffe:	4f22      	ldr	r7, [pc, #136]	; (1088 <Display_Rssi+0x90>)
    1000:	7efb      	ldrb	r3, [r7, #27]
	tmp16.byte[0] = MyBuffer[28];
    1002:	7f38      	ldrb	r0, [r7, #28]
    1004:	021b      	lsls	r3, r3, #8
	RSSIValue = tmp16.word;
    1006:	4303      	orrs	r3, r0
	
	RSSIValue = 65536 - RSSIValue;
    1008:	2080      	movs	r0, #128	; 0x80
    100a:	0240      	lsls	r0, r0, #9
    100c:	1ac0      	subs	r0, r0, r3
    100e:	4b1f      	ldr	r3, [pc, #124]	; (108c <Display_Rssi+0x94>)
    1010:	6018      	str	r0, [r3, #0]
	tmp16.word = hex_to_bcd(RSSIValue);
    1012:	4b1f      	ldr	r3, [pc, #124]	; (1090 <Display_Rssi+0x98>)
    1014:	4798      	blx	r3
    1016:	0006      	movs	r6, r0
	tmp8.byte = tmp16.byte[1];
    1018:	0404      	lsls	r4, r0, #16
    101a:	0e24      	lsrs	r4, r4, #24
	lcd_command(lcd_instr, 0x87);
    101c:	2187      	movs	r1, #135	; 0x87
    101e:	2000      	movs	r0, #0
    1020:	4d1c      	ldr	r5, [pc, #112]	; (1094 <Display_Rssi+0x9c>)
    1022:	47a8      	blx	r5
	lcd_command(lcd_data, hex_to_ascii(tmp8.HL.H));
    1024:	0620      	lsls	r0, r4, #24
    1026:	0f00      	lsrs	r0, r0, #28
    1028:	4b1b      	ldr	r3, [pc, #108]	; (1098 <Display_Rssi+0xa0>)
    102a:	4698      	mov	r8, r3
    102c:	4798      	blx	r3
    102e:	0001      	movs	r1, r0
    1030:	2001      	movs	r0, #1
    1032:	47a8      	blx	r5
	lcd_command(lcd_data, hex_to_ascii(tmp8.HL.L));
    1034:	0724      	lsls	r4, r4, #28
    1036:	0f20      	lsrs	r0, r4, #28
    1038:	47c0      	blx	r8
    103a:	0001      	movs	r1, r0
    103c:	2001      	movs	r0, #1
    103e:	47a8      	blx	r5
	tmp8.byte = tmp16.byte[0];
	lcd_command(lcd_data, hex_to_ascii(tmp8.HL.H));
    1040:	0630      	lsls	r0, r6, #24
    1042:	0f00      	lsrs	r0, r0, #28
    1044:	47c0      	blx	r8
    1046:	0001      	movs	r1, r0
    1048:	2001      	movs	r0, #1
    104a:	47a8      	blx	r5
	lcd_command(lcd_data, hex_to_ascii(tmp8.HL.L));
    104c:	0730      	lsls	r0, r6, #28
    104e:	0f00      	lsrs	r0, r0, #28
    1050:	47c0      	blx	r8
    1052:	0001      	movs	r1, r0
    1054:	2001      	movs	r0, #1
    1056:	47a8      	blx	r5
	
	lcd_command(lcd_instr, 0xCE);
    1058:	21ce      	movs	r1, #206	; 0xce
    105a:	2000      	movs	r0, #0
    105c:	47a8      	blx	r5
	lcd_command(lcd_data, MyBuffer[7]);
    105e:	79f9      	ldrb	r1, [r7, #7]
    1060:	2001      	movs	r0, #1
    1062:	47a8      	blx	r5
	return (port_base->IN.reg & pin_mask);
    1064:	4b0d      	ldr	r3, [pc, #52]	; (109c <Display_Rssi+0xa4>)
    1066:	6a1b      	ldr	r3, [r3, #32]
	
	if(port_pin_get_input_level(PIN_PA00) == 1)
    1068:	07db      	lsls	r3, r3, #31
    106a:	d506      	bpl.n	107a <Display_Rssi+0x82>
	{
		if(TACT_SW_Value < 17)
    106c:	4b0c      	ldr	r3, [pc, #48]	; (10a0 <Display_Rssi+0xa8>)
    106e:	781b      	ldrb	r3, [r3, #0]
    1070:	2b10      	cmp	r3, #16
    1072:	d905      	bls.n	1080 <Display_Rssi+0x88>
		{
			TACT_SW_Value++;
		}
		else
		{
			TACT_SW_Value = 2;
    1074:	2202      	movs	r2, #2
    1076:	4b0a      	ldr	r3, [pc, #40]	; (10a0 <Display_Rssi+0xa8>)
    1078:	701a      	strb	r2, [r3, #0]
		}
	}
    107a:	bc04      	pop	{r2}
    107c:	4690      	mov	r8, r2
    107e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			TACT_SW_Value++;
    1080:	3301      	adds	r3, #1
    1082:	4a07      	ldr	r2, [pc, #28]	; (10a0 <Display_Rssi+0xa8>)
    1084:	7013      	strb	r3, [r2, #0]
    1086:	e7f8      	b.n	107a <Display_Rssi+0x82>
    1088:	20004274 	.word	0x20004274
    108c:	2000413c 	.word	0x2000413c
    1090:	00001be5 	.word	0x00001be5
    1094:	000008f1 	.word	0x000008f1
    1098:	00001b5d 	.word	0x00001b5d
    109c:	41004400 	.word	0x41004400
    10a0:	2000426e 	.word	0x2000426e

000010a4 <Print_Read_LoRa_ID_Msg>:
#include <stdio.h>
#include "myDefine.h"


void Print_Read_LoRa_ID_Msg(void)
{
    10a4:	b570      	push	{r4, r5, r6, lr}
	if(Lora_Debug_Flag == 0) return;
    10a6:	4b0d      	ldr	r3, [pc, #52]	; (10dc <Print_Read_LoRa_ID_Msg+0x38>)
    10a8:	781b      	ldrb	r3, [r3, #0]
    10aa:	071b      	lsls	r3, r3, #28
    10ac:	d400      	bmi.n	10b0 <Print_Read_LoRa_ID_Msg+0xc>
	uTXByte(Debug_COM, 'd');
	uTXByte(Debug_COM, ' ');
	uTXByte(Debug_COM, 'I');
	uTXByte(Debug_COM, 'D');
	uTXByte(Debug_COM, 0x09);
}
    10ae:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'R');
    10b0:	4d0b      	ldr	r5, [pc, #44]	; (10e0 <Print_Read_LoRa_ID_Msg+0x3c>)
    10b2:	2152      	movs	r1, #82	; 0x52
    10b4:	0028      	movs	r0, r5
    10b6:	4c0b      	ldr	r4, [pc, #44]	; (10e4 <Print_Read_LoRa_ID_Msg+0x40>)
    10b8:	47a0      	blx	r4
	uTXByte(Debug_COM, 'd');
    10ba:	2164      	movs	r1, #100	; 0x64
    10bc:	0028      	movs	r0, r5
    10be:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    10c0:	2120      	movs	r1, #32
    10c2:	0028      	movs	r0, r5
    10c4:	47a0      	blx	r4
	uTXByte(Debug_COM, 'I');
    10c6:	2149      	movs	r1, #73	; 0x49
    10c8:	0028      	movs	r0, r5
    10ca:	47a0      	blx	r4
	uTXByte(Debug_COM, 'D');
    10cc:	2144      	movs	r1, #68	; 0x44
    10ce:	0028      	movs	r0, r5
    10d0:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x09);
    10d2:	2109      	movs	r1, #9
    10d4:	0028      	movs	r0, r5
    10d6:	47a0      	blx	r4
    10d8:	e7e9      	b.n	10ae <Print_Read_LoRa_ID_Msg+0xa>
    10da:	46c0      	nop			; (mov r8, r8)
    10dc:	20004144 	.word	0x20004144
    10e0:	200040ac 	.word	0x200040ac
    10e4:	00001b4d 	.word	0x00001b4d

000010e8 <Print_Delay_LoRa_CMD_Msg>:

void Print_Delay_LoRa_CMD_Msg(void)
{
    10e8:	b570      	push	{r4, r5, r6, lr}
	if(Lora_Debug_Flag == 0) return;
    10ea:	4b13      	ldr	r3, [pc, #76]	; (1138 <Print_Delay_LoRa_CMD_Msg+0x50>)
    10ec:	781b      	ldrb	r3, [r3, #0]
    10ee:	071b      	lsls	r3, r3, #28
    10f0:	d400      	bmi.n	10f4 <Print_Delay_LoRa_CMD_Msg+0xc>
	uTXByte(Debug_COM, 'e');
	uTXByte(Debug_COM, 'l');
	uTXByte(Debug_COM, 'a');
	uTXByte(Debug_COM, 'y');
	uTXByte(Debug_COM, 0x0d);	
}
    10f2:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'C');
    10f4:	4d11      	ldr	r5, [pc, #68]	; (113c <Print_Delay_LoRa_CMD_Msg+0x54>)
    10f6:	2143      	movs	r1, #67	; 0x43
    10f8:	0028      	movs	r0, r5
    10fa:	4c11      	ldr	r4, [pc, #68]	; (1140 <Print_Delay_LoRa_CMD_Msg+0x58>)
    10fc:	47a0      	blx	r4
	uTXByte(Debug_COM, 'M');
    10fe:	214d      	movs	r1, #77	; 0x4d
    1100:	0028      	movs	r0, r5
    1102:	47a0      	blx	r4
	uTXByte(Debug_COM, 'D');
    1104:	2144      	movs	r1, #68	; 0x44
    1106:	0028      	movs	r0, r5
    1108:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    110a:	2120      	movs	r1, #32
    110c:	0028      	movs	r0, r5
    110e:	47a0      	blx	r4
	uTXByte(Debug_COM, 'D');
    1110:	2144      	movs	r1, #68	; 0x44
    1112:	0028      	movs	r0, r5
    1114:	47a0      	blx	r4
	uTXByte(Debug_COM, 'e');
    1116:	2165      	movs	r1, #101	; 0x65
    1118:	0028      	movs	r0, r5
    111a:	47a0      	blx	r4
	uTXByte(Debug_COM, 'l');
    111c:	216c      	movs	r1, #108	; 0x6c
    111e:	0028      	movs	r0, r5
    1120:	47a0      	blx	r4
	uTXByte(Debug_COM, 'a');
    1122:	2161      	movs	r1, #97	; 0x61
    1124:	0028      	movs	r0, r5
    1126:	47a0      	blx	r4
	uTXByte(Debug_COM, 'y');
    1128:	2179      	movs	r1, #121	; 0x79
    112a:	0028      	movs	r0, r5
    112c:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);	
    112e:	210d      	movs	r1, #13
    1130:	0028      	movs	r0, r5
    1132:	47a0      	blx	r4
    1134:	e7dd      	b.n	10f2 <Print_Delay_LoRa_CMD_Msg+0xa>
    1136:	46c0      	nop			; (mov r8, r8)
    1138:	20004144 	.word	0x20004144
    113c:	200040ac 	.word	0x200040ac
    1140:	00001b4d 	.word	0x00001b4d

00001144 <Print_Time_Out_Msg>:

void Print_Time_Out_Msg(void)
{
    1144:	b570      	push	{r4, r5, r6, lr}
	if(Lora_Debug_Flag == 0) return;
    1146:	4b11      	ldr	r3, [pc, #68]	; (118c <Print_Time_Out_Msg+0x48>)
    1148:	781b      	ldrb	r3, [r3, #0]
    114a:	071b      	lsls	r3, r3, #28
    114c:	d400      	bmi.n	1150 <Print_Time_Out_Msg+0xc>
	uTXByte(Debug_COM, ' ');
	uTXByte(Debug_COM, 'O');
	uTXByte(Debug_COM, 'u');
	uTXByte(Debug_COM, 't');
	uTXByte(Debug_COM, 0x0d);
}
    114e:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'T');
    1150:	4d0f      	ldr	r5, [pc, #60]	; (1190 <Print_Time_Out_Msg+0x4c>)
    1152:	2154      	movs	r1, #84	; 0x54
    1154:	0028      	movs	r0, r5
    1156:	4c0f      	ldr	r4, [pc, #60]	; (1194 <Print_Time_Out_Msg+0x50>)
    1158:	47a0      	blx	r4
	uTXByte(Debug_COM, 'i');
    115a:	2169      	movs	r1, #105	; 0x69
    115c:	0028      	movs	r0, r5
    115e:	47a0      	blx	r4
	uTXByte(Debug_COM, 'm');
    1160:	216d      	movs	r1, #109	; 0x6d
    1162:	0028      	movs	r0, r5
    1164:	47a0      	blx	r4
	uTXByte(Debug_COM, 'e');
    1166:	2165      	movs	r1, #101	; 0x65
    1168:	0028      	movs	r0, r5
    116a:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    116c:	2120      	movs	r1, #32
    116e:	0028      	movs	r0, r5
    1170:	47a0      	blx	r4
	uTXByte(Debug_COM, 'O');
    1172:	214f      	movs	r1, #79	; 0x4f
    1174:	0028      	movs	r0, r5
    1176:	47a0      	blx	r4
	uTXByte(Debug_COM, 'u');
    1178:	2175      	movs	r1, #117	; 0x75
    117a:	0028      	movs	r0, r5
    117c:	47a0      	blx	r4
	uTXByte(Debug_COM, 't');
    117e:	2174      	movs	r1, #116	; 0x74
    1180:	0028      	movs	r0, r5
    1182:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);
    1184:	210d      	movs	r1, #13
    1186:	0028      	movs	r0, r5
    1188:	47a0      	blx	r4
    118a:	e7e0      	b.n	114e <Print_Time_Out_Msg+0xa>
    118c:	20004144 	.word	0x20004144
    1190:	200040ac 	.word	0x200040ac
    1194:	00001b4d 	.word	0x00001b4d

00001198 <Print_Reset_LoRa_Msg>:
	Print_Line_Msg();
}


void Print_Reset_LoRa_Msg(void)
{
    1198:	b570      	push	{r4, r5, r6, lr}
	if(Lora_Debug_Flag == 0) return;
    119a:	4b0e      	ldr	r3, [pc, #56]	; (11d4 <Print_Reset_LoRa_Msg+0x3c>)
    119c:	781b      	ldrb	r3, [r3, #0]
    119e:	071b      	lsls	r3, r3, #28
    11a0:	d400      	bmi.n	11a4 <Print_Reset_LoRa_Msg+0xc>
	uTXByte(Debug_COM, ' ');
	uTXByte(Debug_COM, 'R');
	uTXByte(Debug_COM, 'S');
	uTXByte(Debug_COM, 'T');
	uTXByte(Debug_COM, 0x09);
}
    11a2:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'L');
    11a4:	4d0c      	ldr	r5, [pc, #48]	; (11d8 <Print_Reset_LoRa_Msg+0x40>)
    11a6:	214c      	movs	r1, #76	; 0x4c
    11a8:	0028      	movs	r0, r5
    11aa:	4c0c      	ldr	r4, [pc, #48]	; (11dc <Print_Reset_LoRa_Msg+0x44>)
    11ac:	47a0      	blx	r4
	uTXByte(Debug_COM, 'R');
    11ae:	2152      	movs	r1, #82	; 0x52
    11b0:	0028      	movs	r0, r5
    11b2:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    11b4:	2120      	movs	r1, #32
    11b6:	0028      	movs	r0, r5
    11b8:	47a0      	blx	r4
	uTXByte(Debug_COM, 'R');
    11ba:	2152      	movs	r1, #82	; 0x52
    11bc:	0028      	movs	r0, r5
    11be:	47a0      	blx	r4
	uTXByte(Debug_COM, 'S');
    11c0:	2153      	movs	r1, #83	; 0x53
    11c2:	0028      	movs	r0, r5
    11c4:	47a0      	blx	r4
	uTXByte(Debug_COM, 'T');
    11c6:	2154      	movs	r1, #84	; 0x54
    11c8:	0028      	movs	r0, r5
    11ca:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x09);
    11cc:	2109      	movs	r1, #9
    11ce:	0028      	movs	r0, r5
    11d0:	47a0      	blx	r4
    11d2:	e7e6      	b.n	11a2 <Print_Reset_LoRa_Msg+0xa>
    11d4:	20004144 	.word	0x20004144
    11d8:	200040ac 	.word	0x200040ac
    11dc:	00001b4d 	.word	0x00001b4d

000011e0 <Print_Read_LoRa_Setting_Msg>:

void Print_Read_LoRa_Setting_Msg(void)
{
    11e0:	b570      	push	{r4, r5, r6, lr}
	if(Lora_Debug_Flag == 0) return;
    11e2:	4b0d      	ldr	r3, [pc, #52]	; (1218 <Print_Read_LoRa_Setting_Msg+0x38>)
    11e4:	781b      	ldrb	r3, [r3, #0]
    11e6:	071b      	lsls	r3, r3, #28
    11e8:	d400      	bmi.n	11ec <Print_Read_LoRa_Setting_Msg+0xc>
	uTXByte(Debug_COM, 'd');
	uTXByte(Debug_COM, ' ');
	uTXByte(Debug_COM, 'S');
	uTXByte(Debug_COM, 't');
	uTXByte(Debug_COM, 0x09);	
}
    11ea:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'R');
    11ec:	4d0b      	ldr	r5, [pc, #44]	; (121c <Print_Read_LoRa_Setting_Msg+0x3c>)
    11ee:	2152      	movs	r1, #82	; 0x52
    11f0:	0028      	movs	r0, r5
    11f2:	4c0b      	ldr	r4, [pc, #44]	; (1220 <Print_Read_LoRa_Setting_Msg+0x40>)
    11f4:	47a0      	blx	r4
	uTXByte(Debug_COM, 'd');
    11f6:	2164      	movs	r1, #100	; 0x64
    11f8:	0028      	movs	r0, r5
    11fa:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    11fc:	2120      	movs	r1, #32
    11fe:	0028      	movs	r0, r5
    1200:	47a0      	blx	r4
	uTXByte(Debug_COM, 'S');
    1202:	2153      	movs	r1, #83	; 0x53
    1204:	0028      	movs	r0, r5
    1206:	47a0      	blx	r4
	uTXByte(Debug_COM, 't');
    1208:	2174      	movs	r1, #116	; 0x74
    120a:	0028      	movs	r0, r5
    120c:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x09);	
    120e:	2109      	movs	r1, #9
    1210:	0028      	movs	r0, r5
    1212:	47a0      	blx	r4
    1214:	e7e9      	b.n	11ea <Print_Read_LoRa_Setting_Msg+0xa>
    1216:	46c0      	nop			; (mov r8, r8)
    1218:	20004144 	.word	0x20004144
    121c:	200040ac 	.word	0x200040ac
    1220:	00001b4d 	.word	0x00001b4d

00001224 <Print_Write_LoRa_Mode_FQ_Msg>:
void Print_Write_LoRa_Mode_FQ_Msg(void)
{
    1224:	b570      	push	{r4, r5, r6, lr}
	if(Lora_Debug_Flag == 0) return;
    1226:	4b0d      	ldr	r3, [pc, #52]	; (125c <Print_Write_LoRa_Mode_FQ_Msg+0x38>)
    1228:	781b      	ldrb	r3, [r3, #0]
    122a:	071b      	lsls	r3, r3, #28
    122c:	d400      	bmi.n	1230 <Print_Write_LoRa_Mode_FQ_Msg+0xc>
	uTXByte(Debug_COM, 'r');
	uTXByte(Debug_COM, ' ');
	uTXByte(Debug_COM, 'F');
	uTXByte(Debug_COM, 'Q');
	uTXByte(Debug_COM, 0x09);
}
    122e:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'W');
    1230:	4d0b      	ldr	r5, [pc, #44]	; (1260 <Print_Write_LoRa_Mode_FQ_Msg+0x3c>)
    1232:	2157      	movs	r1, #87	; 0x57
    1234:	0028      	movs	r0, r5
    1236:	4c0b      	ldr	r4, [pc, #44]	; (1264 <Print_Write_LoRa_Mode_FQ_Msg+0x40>)
    1238:	47a0      	blx	r4
	uTXByte(Debug_COM, 'r');
    123a:	2172      	movs	r1, #114	; 0x72
    123c:	0028      	movs	r0, r5
    123e:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    1240:	2120      	movs	r1, #32
    1242:	0028      	movs	r0, r5
    1244:	47a0      	blx	r4
	uTXByte(Debug_COM, 'F');
    1246:	2146      	movs	r1, #70	; 0x46
    1248:	0028      	movs	r0, r5
    124a:	47a0      	blx	r4
	uTXByte(Debug_COM, 'Q');
    124c:	2151      	movs	r1, #81	; 0x51
    124e:	0028      	movs	r0, r5
    1250:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x09);
    1252:	2109      	movs	r1, #9
    1254:	0028      	movs	r0, r5
    1256:	47a0      	blx	r4
    1258:	e7e9      	b.n	122e <Print_Write_LoRa_Mode_FQ_Msg+0xa>
    125a:	46c0      	nop			; (mov r8, r8)
    125c:	20004144 	.word	0x20004144
    1260:	200040ac 	.word	0x200040ac
    1264:	00001b4d 	.word	0x00001b4d

00001268 <Print_Write_LoRa_Setting_Msg>:
void Print_Write_LoRa_Setting_Msg(void)
{
    1268:	b570      	push	{r4, r5, r6, lr}
	if(Lora_Debug_Flag == 0) return;
    126a:	4b0d      	ldr	r3, [pc, #52]	; (12a0 <Print_Write_LoRa_Setting_Msg+0x38>)
    126c:	781b      	ldrb	r3, [r3, #0]
    126e:	071b      	lsls	r3, r3, #28
    1270:	d400      	bmi.n	1274 <Print_Write_LoRa_Setting_Msg+0xc>
	uTXByte(Debug_COM, 'r');
	uTXByte(Debug_COM, ' ');
	uTXByte(Debug_COM, 'S');
	uTXByte(Debug_COM, 't');
	uTXByte(Debug_COM, 0x09);	
}
    1272:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'W');
    1274:	4d0b      	ldr	r5, [pc, #44]	; (12a4 <Print_Write_LoRa_Setting_Msg+0x3c>)
    1276:	2157      	movs	r1, #87	; 0x57
    1278:	0028      	movs	r0, r5
    127a:	4c0b      	ldr	r4, [pc, #44]	; (12a8 <Print_Write_LoRa_Setting_Msg+0x40>)
    127c:	47a0      	blx	r4
	uTXByte(Debug_COM, 'r');
    127e:	2172      	movs	r1, #114	; 0x72
    1280:	0028      	movs	r0, r5
    1282:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    1284:	2120      	movs	r1, #32
    1286:	0028      	movs	r0, r5
    1288:	47a0      	blx	r4
	uTXByte(Debug_COM, 'S');
    128a:	2153      	movs	r1, #83	; 0x53
    128c:	0028      	movs	r0, r5
    128e:	47a0      	blx	r4
	uTXByte(Debug_COM, 't');
    1290:	2174      	movs	r1, #116	; 0x74
    1292:	0028      	movs	r0, r5
    1294:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x09);	
    1296:	2109      	movs	r1, #9
    1298:	0028      	movs	r0, r5
    129a:	47a0      	blx	r4
    129c:	e7e9      	b.n	1272 <Print_Write_LoRa_Setting_Msg+0xa>
    129e:	46c0      	nop			; (mov r8, r8)
    12a0:	20004144 	.word	0x20004144
    12a4:	200040ac 	.word	0x200040ac
    12a8:	00001b4d 	.word	0x00001b4d

000012ac <Print_Read_LoRa_RxCount_Msg>:
void Print_Read_LoRa_RxCount_Msg(void)
{
    12ac:	b570      	push	{r4, r5, r6, lr}
	if(Lora_Debug_Flag == 0) return;
    12ae:	4b0d      	ldr	r3, [pc, #52]	; (12e4 <Print_Read_LoRa_RxCount_Msg+0x38>)
    12b0:	781b      	ldrb	r3, [r3, #0]
    12b2:	071b      	lsls	r3, r3, #28
    12b4:	d400      	bmi.n	12b8 <Print_Read_LoRa_RxCount_Msg+0xc>
	uTXByte(Debug_COM, 'd');
	uTXByte(Debug_COM, ' ');
	uTXByte(Debug_COM, 'C');
	uTXByte(Debug_COM, 'T');
	uTXByte(Debug_COM, 0x09);	
}
    12b6:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'R');
    12b8:	4d0b      	ldr	r5, [pc, #44]	; (12e8 <Print_Read_LoRa_RxCount_Msg+0x3c>)
    12ba:	2152      	movs	r1, #82	; 0x52
    12bc:	0028      	movs	r0, r5
    12be:	4c0b      	ldr	r4, [pc, #44]	; (12ec <Print_Read_LoRa_RxCount_Msg+0x40>)
    12c0:	47a0      	blx	r4
	uTXByte(Debug_COM, 'd');
    12c2:	2164      	movs	r1, #100	; 0x64
    12c4:	0028      	movs	r0, r5
    12c6:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    12c8:	2120      	movs	r1, #32
    12ca:	0028      	movs	r0, r5
    12cc:	47a0      	blx	r4
	uTXByte(Debug_COM, 'C');
    12ce:	2143      	movs	r1, #67	; 0x43
    12d0:	0028      	movs	r0, r5
    12d2:	47a0      	blx	r4
	uTXByte(Debug_COM, 'T');
    12d4:	2154      	movs	r1, #84	; 0x54
    12d6:	0028      	movs	r0, r5
    12d8:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x09);	
    12da:	2109      	movs	r1, #9
    12dc:	0028      	movs	r0, r5
    12de:	47a0      	blx	r4
    12e0:	e7e9      	b.n	12b6 <Print_Read_LoRa_RxCount_Msg+0xa>
    12e2:	46c0      	nop			; (mov r8, r8)
    12e4:	20004144 	.word	0x20004144
    12e8:	200040ac 	.word	0x200040ac
    12ec:	00001b4d 	.word	0x00001b4d

000012f0 <Print_Read_LoRa_RxBuffer_Msg>:
void Print_Read_LoRa_RxBuffer_Msg(void)
{
    12f0:	b570      	push	{r4, r5, r6, lr}
	if(Lora_Debug_Flag == 0) return;
    12f2:	4b0d      	ldr	r3, [pc, #52]	; (1328 <Print_Read_LoRa_RxBuffer_Msg+0x38>)
    12f4:	781b      	ldrb	r3, [r3, #0]
    12f6:	071b      	lsls	r3, r3, #28
    12f8:	d400      	bmi.n	12fc <Print_Read_LoRa_RxBuffer_Msg+0xc>
	uTXByte(Debug_COM, 'd');
	uTXByte(Debug_COM, ' ');
	uTXByte(Debug_COM, 'B');
	uTXByte(Debug_COM, 'F');
	uTXByte(Debug_COM, 0x09);
}
    12fa:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'R');
    12fc:	4d0b      	ldr	r5, [pc, #44]	; (132c <Print_Read_LoRa_RxBuffer_Msg+0x3c>)
    12fe:	2152      	movs	r1, #82	; 0x52
    1300:	0028      	movs	r0, r5
    1302:	4c0b      	ldr	r4, [pc, #44]	; (1330 <Print_Read_LoRa_RxBuffer_Msg+0x40>)
    1304:	47a0      	blx	r4
	uTXByte(Debug_COM, 'd');
    1306:	2164      	movs	r1, #100	; 0x64
    1308:	0028      	movs	r0, r5
    130a:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    130c:	2120      	movs	r1, #32
    130e:	0028      	movs	r0, r5
    1310:	47a0      	blx	r4
	uTXByte(Debug_COM, 'B');
    1312:	2142      	movs	r1, #66	; 0x42
    1314:	0028      	movs	r0, r5
    1316:	47a0      	blx	r4
	uTXByte(Debug_COM, 'F');
    1318:	2146      	movs	r1, #70	; 0x46
    131a:	0028      	movs	r0, r5
    131c:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x09);
    131e:	2109      	movs	r1, #9
    1320:	0028      	movs	r0, r5
    1322:	47a0      	blx	r4
    1324:	e7e9      	b.n	12fa <Print_Read_LoRa_RxBuffer_Msg+0xa>
    1326:	46c0      	nop			; (mov r8, r8)
    1328:	20004144 	.word	0x20004144
    132c:	200040ac 	.word	0x200040ac
    1330:	00001b4d 	.word	0x00001b4d

00001334 <Print_Reset_IRQ_Flag_Msg>:
void Print_Reset_IRQ_Flag_Msg(void)
{
    1334:	b570      	push	{r4, r5, r6, lr}
	if(Lora_Debug_Flag == 0) return;
    1336:	4b10      	ldr	r3, [pc, #64]	; (1378 <Print_Reset_IRQ_Flag_Msg+0x44>)
    1338:	781b      	ldrb	r3, [r3, #0]
    133a:	071b      	lsls	r3, r3, #28
    133c:	d400      	bmi.n	1340 <Print_Reset_IRQ_Flag_Msg+0xc>
	uTXByte(Debug_COM, ' ');
	uTXByte(Debug_COM, 'I');
	uTXByte(Debug_COM, 'R');
	uTXByte(Debug_COM, 'Q');
	uTXByte(Debug_COM, 0x0d);	
}
    133e:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'R');
    1340:	4d0e      	ldr	r5, [pc, #56]	; (137c <Print_Reset_IRQ_Flag_Msg+0x48>)
    1342:	2152      	movs	r1, #82	; 0x52
    1344:	0028      	movs	r0, r5
    1346:	4c0e      	ldr	r4, [pc, #56]	; (1380 <Print_Reset_IRQ_Flag_Msg+0x4c>)
    1348:	47a0      	blx	r4
	uTXByte(Debug_COM, 'S');
    134a:	2153      	movs	r1, #83	; 0x53
    134c:	0028      	movs	r0, r5
    134e:	47a0      	blx	r4
	uTXByte(Debug_COM, 'T');
    1350:	2154      	movs	r1, #84	; 0x54
    1352:	0028      	movs	r0, r5
    1354:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    1356:	2120      	movs	r1, #32
    1358:	0028      	movs	r0, r5
    135a:	47a0      	blx	r4
	uTXByte(Debug_COM, 'I');
    135c:	2149      	movs	r1, #73	; 0x49
    135e:	0028      	movs	r0, r5
    1360:	47a0      	blx	r4
	uTXByte(Debug_COM, 'R');
    1362:	2152      	movs	r1, #82	; 0x52
    1364:	0028      	movs	r0, r5
    1366:	47a0      	blx	r4
	uTXByte(Debug_COM, 'Q');
    1368:	2151      	movs	r1, #81	; 0x51
    136a:	0028      	movs	r0, r5
    136c:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);	
    136e:	210d      	movs	r1, #13
    1370:	0028      	movs	r0, r5
    1372:	47a0      	blx	r4
    1374:	e7e3      	b.n	133e <Print_Reset_IRQ_Flag_Msg+0xa>
    1376:	46c0      	nop			; (mov r8, r8)
    1378:	20004144 	.word	0x20004144
    137c:	200040ac 	.word	0x200040ac
    1380:	00001b4d 	.word	0x00001b4d

00001384 <Print_Write_LoRa_TxBuffer_Msg>:
void Print_Write_LoRa_TxBuffer_Msg(void)
{
    1384:	b570      	push	{r4, r5, r6, lr}
	if(Lora_Debug_Flag == 0) return;
    1386:	4b0d      	ldr	r3, [pc, #52]	; (13bc <Print_Write_LoRa_TxBuffer_Msg+0x38>)
    1388:	781b      	ldrb	r3, [r3, #0]
    138a:	071b      	lsls	r3, r3, #28
    138c:	d400      	bmi.n	1390 <Print_Write_LoRa_TxBuffer_Msg+0xc>
	uTXByte(Debug_COM, 'r');
	uTXByte(Debug_COM, ' ');
	uTXByte(Debug_COM, 'B');
	uTXByte(Debug_COM, 'F');
	uTXByte(Debug_COM, 0x09);	
}
    138e:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'W');
    1390:	4d0b      	ldr	r5, [pc, #44]	; (13c0 <Print_Write_LoRa_TxBuffer_Msg+0x3c>)
    1392:	2157      	movs	r1, #87	; 0x57
    1394:	0028      	movs	r0, r5
    1396:	4c0b      	ldr	r4, [pc, #44]	; (13c4 <Print_Write_LoRa_TxBuffer_Msg+0x40>)
    1398:	47a0      	blx	r4
	uTXByte(Debug_COM, 'r');
    139a:	2172      	movs	r1, #114	; 0x72
    139c:	0028      	movs	r0, r5
    139e:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    13a0:	2120      	movs	r1, #32
    13a2:	0028      	movs	r0, r5
    13a4:	47a0      	blx	r4
	uTXByte(Debug_COM, 'B');
    13a6:	2142      	movs	r1, #66	; 0x42
    13a8:	0028      	movs	r0, r5
    13aa:	47a0      	blx	r4
	uTXByte(Debug_COM, 'F');
    13ac:	2146      	movs	r1, #70	; 0x46
    13ae:	0028      	movs	r0, r5
    13b0:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x09);	
    13b2:	2109      	movs	r1, #9
    13b4:	0028      	movs	r0, r5
    13b6:	47a0      	blx	r4
    13b8:	e7e9      	b.n	138e <Print_Write_LoRa_TxBuffer_Msg+0xa>
    13ba:	46c0      	nop			; (mov r8, r8)
    13bc:	20004144 	.word	0x20004144
    13c0:	200040ac 	.word	0x200040ac
    13c4:	00001b4d 	.word	0x00001b4d

000013c8 <Print_Leave_LoRa_Tx_Mode_Msg>:
void Print_Leave_LoRa_Tx_Mode_Msg(void)
{
    13c8:	b570      	push	{r4, r5, r6, lr}
	if(Lora_Debug_Flag == 0) return;
    13ca:	4b0e      	ldr	r3, [pc, #56]	; (1404 <Print_Leave_LoRa_Tx_Mode_Msg+0x3c>)
    13cc:	781b      	ldrb	r3, [r3, #0]
    13ce:	071b      	lsls	r3, r3, #28
    13d0:	d400      	bmi.n	13d4 <Print_Leave_LoRa_Tx_Mode_Msg+0xc>
	uTXByte(Debug_COM, 'v');
	uTXByte(Debug_COM, ' ');
	uTXByte(Debug_COM, 'T');
	uTXByte(Debug_COM, 'X');
	uTXByte(Debug_COM, 0x0d);	
}
    13d2:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'L');
    13d4:	4d0c      	ldr	r5, [pc, #48]	; (1408 <Print_Leave_LoRa_Tx_Mode_Msg+0x40>)
    13d6:	214c      	movs	r1, #76	; 0x4c
    13d8:	0028      	movs	r0, r5
    13da:	4c0c      	ldr	r4, [pc, #48]	; (140c <Print_Leave_LoRa_Tx_Mode_Msg+0x44>)
    13dc:	47a0      	blx	r4
	uTXByte(Debug_COM, 'e');
    13de:	2165      	movs	r1, #101	; 0x65
    13e0:	0028      	movs	r0, r5
    13e2:	47a0      	blx	r4
	uTXByte(Debug_COM, 'v');
    13e4:	2176      	movs	r1, #118	; 0x76
    13e6:	0028      	movs	r0, r5
    13e8:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    13ea:	2120      	movs	r1, #32
    13ec:	0028      	movs	r0, r5
    13ee:	47a0      	blx	r4
	uTXByte(Debug_COM, 'T');
    13f0:	2154      	movs	r1, #84	; 0x54
    13f2:	0028      	movs	r0, r5
    13f4:	47a0      	blx	r4
	uTXByte(Debug_COM, 'X');
    13f6:	2158      	movs	r1, #88	; 0x58
    13f8:	0028      	movs	r0, r5
    13fa:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);	
    13fc:	210d      	movs	r1, #13
    13fe:	0028      	movs	r0, r5
    1400:	47a0      	blx	r4
    1402:	e7e6      	b.n	13d2 <Print_Leave_LoRa_Tx_Mode_Msg+0xa>
    1404:	20004144 	.word	0x20004144
    1408:	200040ac 	.word	0x200040ac
    140c:	00001b4d 	.word	0x00001b4d

00001410 <Print_CRC_ERROR>:
	uTXByte(Debug_COM, 'P');
	uTXByte(Debug_COM, 0x0d);
}
					
void Print_CRC_ERROR(void)				
{
    1410:	b570      	push	{r4, r5, r6, lr}
	if(Lora_Debug_Flag == 0) return;
    1412:	4b10      	ldr	r3, [pc, #64]	; (1454 <Print_CRC_ERROR+0x44>)
    1414:	781b      	ldrb	r3, [r3, #0]
    1416:	071b      	lsls	r3, r3, #28
    1418:	d400      	bmi.n	141c <Print_CRC_ERROR+0xc>
	uTXByte(Debug_COM, ' ');
	uTXByte(Debug_COM, 'E');
	uTXByte(Debug_COM, 'r');
	uTXByte(Debug_COM, 'r');
	uTXByte(Debug_COM, 0x0d);
}
    141a:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'C');
    141c:	4d0e      	ldr	r5, [pc, #56]	; (1458 <Print_CRC_ERROR+0x48>)
    141e:	2143      	movs	r1, #67	; 0x43
    1420:	0028      	movs	r0, r5
    1422:	4c0e      	ldr	r4, [pc, #56]	; (145c <Print_CRC_ERROR+0x4c>)
    1424:	47a0      	blx	r4
	uTXByte(Debug_COM, 'R');
    1426:	2152      	movs	r1, #82	; 0x52
    1428:	0028      	movs	r0, r5
    142a:	47a0      	blx	r4
	uTXByte(Debug_COM, 'C');
    142c:	2143      	movs	r1, #67	; 0x43
    142e:	0028      	movs	r0, r5
    1430:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    1432:	2120      	movs	r1, #32
    1434:	0028      	movs	r0, r5
    1436:	47a0      	blx	r4
	uTXByte(Debug_COM, 'E');
    1438:	2145      	movs	r1, #69	; 0x45
    143a:	0028      	movs	r0, r5
    143c:	47a0      	blx	r4
	uTXByte(Debug_COM, 'r');
    143e:	2172      	movs	r1, #114	; 0x72
    1440:	0028      	movs	r0, r5
    1442:	47a0      	blx	r4
	uTXByte(Debug_COM, 'r');
    1444:	2172      	movs	r1, #114	; 0x72
    1446:	0028      	movs	r0, r5
    1448:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);
    144a:	210d      	movs	r1, #13
    144c:	0028      	movs	r0, r5
    144e:	47a0      	blx	r4
    1450:	e7e3      	b.n	141a <Print_CRC_ERROR+0xa>
    1452:	46c0      	nop			; (mov r8, r8)
    1454:	20004144 	.word	0x20004144
    1458:	200040ac 	.word	0x200040ac
    145c:	00001b4d 	.word	0x00001b4d

00001460 <Print_CRC_OK>:


void Print_CRC_OK(void)
{
    1460:	b570      	push	{r4, r5, r6, lr}
	if(Lora_Debug_Flag == 0) return;
    1462:	4b0e      	ldr	r3, [pc, #56]	; (149c <Print_CRC_OK+0x3c>)
    1464:	781b      	ldrb	r3, [r3, #0]
    1466:	071b      	lsls	r3, r3, #28
    1468:	d400      	bmi.n	146c <Print_CRC_OK+0xc>
	uTXByte(Debug_COM, 'C');
	uTXByte(Debug_COM, ' ');
	uTXByte(Debug_COM, 'O');
	uTXByte(Debug_COM, 'K');
	uTXByte(Debug_COM, 0x0d);
}
    146a:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'C');
    146c:	4d0c      	ldr	r5, [pc, #48]	; (14a0 <Print_CRC_OK+0x40>)
    146e:	2143      	movs	r1, #67	; 0x43
    1470:	0028      	movs	r0, r5
    1472:	4c0c      	ldr	r4, [pc, #48]	; (14a4 <Print_CRC_OK+0x44>)
    1474:	47a0      	blx	r4
	uTXByte(Debug_COM, 'R');
    1476:	2152      	movs	r1, #82	; 0x52
    1478:	0028      	movs	r0, r5
    147a:	47a0      	blx	r4
	uTXByte(Debug_COM, 'C');
    147c:	2143      	movs	r1, #67	; 0x43
    147e:	0028      	movs	r0, r5
    1480:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    1482:	2120      	movs	r1, #32
    1484:	0028      	movs	r0, r5
    1486:	47a0      	blx	r4
	uTXByte(Debug_COM, 'O');
    1488:	214f      	movs	r1, #79	; 0x4f
    148a:	0028      	movs	r0, r5
    148c:	47a0      	blx	r4
	uTXByte(Debug_COM, 'K');
    148e:	214b      	movs	r1, #75	; 0x4b
    1490:	0028      	movs	r0, r5
    1492:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);
    1494:	210d      	movs	r1, #13
    1496:	0028      	movs	r0, r5
    1498:	47a0      	blx	r4
    149a:	e7e6      	b.n	146a <Print_CRC_OK+0xa>
    149c:	20004144 	.word	0x20004144
    14a0:	200040ac 	.word	0x200040ac
    14a4:	00001b4d 	.word	0x00001b4d

000014a8 <Print_Line_Msg>:
	Print_Line_Msg();
	uTXByte(Debug_COM, 0x0d);
}

void Print_Line_Msg(void)
{
    14a8:	b570      	push	{r4, r5, r6, lr}
    14aa:	240f      	movs	r4, #15
	unsigned char i;
	for(i = 0; i < 15; i++)
	{
		uTXByte(Debug_COM, '-');
    14ac:	4e08      	ldr	r6, [pc, #32]	; (14d0 <Print_Line_Msg+0x28>)
    14ae:	4d09      	ldr	r5, [pc, #36]	; (14d4 <Print_Line_Msg+0x2c>)
    14b0:	212d      	movs	r1, #45	; 0x2d
    14b2:	0030      	movs	r0, r6
    14b4:	47a8      	blx	r5
		uTXByte(Debug_COM, ' ');
    14b6:	2120      	movs	r1, #32
    14b8:	0030      	movs	r0, r6
    14ba:	47a8      	blx	r5
    14bc:	3c01      	subs	r4, #1
    14be:	b2e4      	uxtb	r4, r4
	for(i = 0; i < 15; i++)
    14c0:	2c00      	cmp	r4, #0
    14c2:	d1f5      	bne.n	14b0 <Print_Line_Msg+0x8>
	}
	uTXByte(Debug_COM, 0x0d);
    14c4:	210d      	movs	r1, #13
    14c6:	4802      	ldr	r0, [pc, #8]	; (14d0 <Print_Line_Msg+0x28>)
    14c8:	4b02      	ldr	r3, [pc, #8]	; (14d4 <Print_Line_Msg+0x2c>)
    14ca:	4798      	blx	r3
}
    14cc:	bd70      	pop	{r4, r5, r6, pc}
    14ce:	46c0      	nop			; (mov r8, r8)
    14d0:	200040ac 	.word	0x200040ac
    14d4:	00001b4d 	.word	0x00001b4d

000014d8 <Print_Catch_LoRa_ID_Msg>:
{
    14d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    14da:	46c6      	mov	lr, r8
    14dc:	b500      	push	{lr}
	Print_Line_Msg();
    14de:	4b24      	ldr	r3, [pc, #144]	; (1570 <Print_Catch_LoRa_ID_Msg+0x98>)
    14e0:	4698      	mov	r8, r3
    14e2:	4798      	blx	r3
	uTXByte(Debug_COM, '[');
    14e4:	4c23      	ldr	r4, [pc, #140]	; (1574 <Print_Catch_LoRa_ID_Msg+0x9c>)
    14e6:	215b      	movs	r1, #91	; 0x5b
    14e8:	0020      	movs	r0, r4
    14ea:	4d23      	ldr	r5, [pc, #140]	; (1578 <Print_Catch_LoRa_ID_Msg+0xa0>)
    14ec:	47a8      	blx	r5
	uTXByte(Debug_COM, 'L');
    14ee:	214c      	movs	r1, #76	; 0x4c
    14f0:	0020      	movs	r0, r4
    14f2:	47a8      	blx	r5
	uTXByte(Debug_COM, 'o');
    14f4:	216f      	movs	r1, #111	; 0x6f
    14f6:	0020      	movs	r0, r4
    14f8:	47a8      	blx	r5
	uTXByte(Debug_COM, 'R');
    14fa:	2152      	movs	r1, #82	; 0x52
    14fc:	0020      	movs	r0, r4
    14fe:	47a8      	blx	r5
	uTXByte(Debug_COM, 'a');
    1500:	2161      	movs	r1, #97	; 0x61
    1502:	0020      	movs	r0, r4
    1504:	47a8      	blx	r5
	uTXByte(Debug_COM, ']');
    1506:	215d      	movs	r1, #93	; 0x5d
    1508:	0020      	movs	r0, r4
    150a:	47a8      	blx	r5
	uTXByte(Debug_COM, 0x0d);
    150c:	210d      	movs	r1, #13
    150e:	0020      	movs	r0, r4
    1510:	47a8      	blx	r5
	uTXByte(Debug_COM, 'F');
    1512:	2146      	movs	r1, #70	; 0x46
    1514:	0020      	movs	r0, r4
    1516:	47a8      	blx	r5
	uTXByte(Debug_COM, 'W');
    1518:	2157      	movs	r1, #87	; 0x57
    151a:	0020      	movs	r0, r4
    151c:	47a8      	blx	r5
	uTXByte(Debug_COM, ':');
    151e:	213a      	movs	r1, #58	; 0x3a
    1520:	0020      	movs	r0, r4
    1522:	47a8      	blx	r5
	uart_send_ascii_byte(Debug_COM, MyLoRaFW);
    1524:	4b15      	ldr	r3, [pc, #84]	; (157c <Print_Catch_LoRa_ID_Msg+0xa4>)
    1526:	7819      	ldrb	r1, [r3, #0]
    1528:	0020      	movs	r0, r4
    152a:	4e15      	ldr	r6, [pc, #84]	; (1580 <Print_Catch_LoRa_ID_Msg+0xa8>)
    152c:	47b0      	blx	r6
	uTXByte(Debug_COM, 0x0d);
    152e:	210d      	movs	r1, #13
    1530:	0020      	movs	r0, r4
    1532:	47a8      	blx	r5
	uTXByte(Debug_COM, 'I');
    1534:	2149      	movs	r1, #73	; 0x49
    1536:	0020      	movs	r0, r4
    1538:	47a8      	blx	r5
	uTXByte(Debug_COM, 'D');
    153a:	2144      	movs	r1, #68	; 0x44
    153c:	0020      	movs	r0, r4
    153e:	47a8      	blx	r5
	uTXByte(Debug_COM, ':');
    1540:	213a      	movs	r1, #58	; 0x3a
    1542:	0020      	movs	r0, r4
    1544:	47a8      	blx	r5
	uart_send_ascii_byte(Debug_COM, MyLoRaID[0]);
    1546:	4f0f      	ldr	r7, [pc, #60]	; (1584 <Print_Catch_LoRa_ID_Msg+0xac>)
    1548:	7839      	ldrb	r1, [r7, #0]
    154a:	0020      	movs	r0, r4
    154c:	47b0      	blx	r6
	uart_send_ascii_byte(Debug_COM, MyLoRaID[1]);
    154e:	7879      	ldrb	r1, [r7, #1]
    1550:	0020      	movs	r0, r4
    1552:	47b0      	blx	r6
	uart_send_ascii_byte(Debug_COM, MyLoRaID[2]);
    1554:	78b9      	ldrb	r1, [r7, #2]
    1556:	0020      	movs	r0, r4
    1558:	47b0      	blx	r6
	uart_send_ascii_byte(Debug_COM, MyLoRaID[3]);
    155a:	78f9      	ldrb	r1, [r7, #3]
    155c:	0020      	movs	r0, r4
    155e:	47b0      	blx	r6
	uTXByte(Debug_COM, 0x0d);
    1560:	210d      	movs	r1, #13
    1562:	0020      	movs	r0, r4
    1564:	47a8      	blx	r5
	Print_Line_Msg();
    1566:	47c0      	blx	r8
}
    1568:	bc04      	pop	{r2}
    156a:	4690      	mov	r8, r2
    156c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    156e:	46c0      	nop			; (mov r8, r8)
    1570:	000014a9 	.word	0x000014a9
    1574:	200040ac 	.word	0x200040ac
    1578:	00001b4d 	.word	0x00001b4d
    157c:	2000426c 	.word	0x2000426c
    1580:	00001b6d 	.word	0x00001b6d
    1584:	20004138 	.word	0x20004138

00001588 <Print_Start_Msg>:
{
    1588:	b570      	push	{r4, r5, r6, lr}
	if(Lora_Debug_Flag == 0) return;
    158a:	4b24      	ldr	r3, [pc, #144]	; (161c <Print_Start_Msg+0x94>)
    158c:	781b      	ldrb	r3, [r3, #0]
    158e:	071b      	lsls	r3, r3, #28
    1590:	d400      	bmi.n	1594 <Print_Start_Msg+0xc>
}
    1592:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 0x0d);
    1594:	4d22      	ldr	r5, [pc, #136]	; (1620 <Print_Start_Msg+0x98>)
    1596:	210d      	movs	r1, #13
    1598:	0028      	movs	r0, r5
    159a:	4c22      	ldr	r4, [pc, #136]	; (1624 <Print_Start_Msg+0x9c>)
    159c:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);
    159e:	210d      	movs	r1, #13
    15a0:	0028      	movs	r0, r5
    15a2:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);
    15a4:	210d      	movs	r1, #13
    15a6:	0028      	movs	r0, r5
    15a8:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);
    15aa:	210d      	movs	r1, #13
    15ac:	0028      	movs	r0, r5
    15ae:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);
    15b0:	210d      	movs	r1, #13
    15b2:	0028      	movs	r0, r5
    15b4:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);
    15b6:	210d      	movs	r1, #13
    15b8:	0028      	movs	r0, r5
    15ba:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);
    15bc:	210d      	movs	r1, #13
    15be:	0028      	movs	r0, r5
    15c0:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);
    15c2:	210d      	movs	r1, #13
    15c4:	0028      	movs	r0, r5
    15c6:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);
    15c8:	210d      	movs	r1, #13
    15ca:	0028      	movs	r0, r5
    15cc:	47a0      	blx	r4
	uTXByte(Debug_COM, 'S');
    15ce:	2153      	movs	r1, #83	; 0x53
    15d0:	0028      	movs	r0, r5
    15d2:	47a0      	blx	r4
	uTXByte(Debug_COM, 'H');
    15d4:	2148      	movs	r1, #72	; 0x48
    15d6:	0028      	movs	r0, r5
    15d8:	47a0      	blx	r4
	uTXByte(Debug_COM, 'H');
    15da:	2148      	movs	r1, #72	; 0x48
    15dc:	0028      	movs	r0, r5
    15de:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    15e0:	2120      	movs	r1, #32
    15e2:	0028      	movs	r0, r5
    15e4:	47a0      	blx	r4
	uTXByte(Debug_COM, 'S');
    15e6:	2153      	movs	r1, #83	; 0x53
    15e8:	0028      	movs	r0, r5
    15ea:	47a0      	blx	r4
	uTXByte(Debug_COM, 'y');
    15ec:	2179      	movs	r1, #121	; 0x79
    15ee:	0028      	movs	r0, r5
    15f0:	47a0      	blx	r4
	uTXByte(Debug_COM, 's');
    15f2:	2173      	movs	r1, #115	; 0x73
    15f4:	0028      	movs	r0, r5
    15f6:	47a0      	blx	r4
	uTXByte(Debug_COM, 't');
    15f8:	2174      	movs	r1, #116	; 0x74
    15fa:	0028      	movs	r0, r5
    15fc:	47a0      	blx	r4
	uTXByte(Debug_COM, 'e');
    15fe:	2165      	movs	r1, #101	; 0x65
    1600:	0028      	movs	r0, r5
    1602:	47a0      	blx	r4
	uTXByte(Debug_COM, 'm');
    1604:	216d      	movs	r1, #109	; 0x6d
    1606:	0028      	movs	r0, r5
    1608:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);
    160a:	210d      	movs	r1, #13
    160c:	0028      	movs	r0, r5
    160e:	47a0      	blx	r4
	Print_Line_Msg();
    1610:	4b05      	ldr	r3, [pc, #20]	; (1628 <Print_Start_Msg+0xa0>)
    1612:	4798      	blx	r3
	uTXByte(Debug_COM, 0x0d);
    1614:	210d      	movs	r1, #13
    1616:	0028      	movs	r0, r5
    1618:	47a0      	blx	r4
    161a:	e7ba      	b.n	1592 <Print_Start_Msg+0xa>
    161c:	20004144 	.word	0x20004144
    1620:	200040ac 	.word	0x200040ac
    1624:	00001b4d 	.word	0x00001b4d
    1628:	000014a9 	.word	0x000014a9

0000162c <Print_RSSI_Msg>:

void Print_RSSI_Msg(void)
{
    162c:	b570      	push	{r4, r5, r6, lr}
	uTXByte(Debug_COM, 'R');
    162e:	4c17      	ldr	r4, [pc, #92]	; (168c <Print_RSSI_Msg+0x60>)
    1630:	2152      	movs	r1, #82	; 0x52
    1632:	0020      	movs	r0, r4
    1634:	4d16      	ldr	r5, [pc, #88]	; (1690 <Print_RSSI_Msg+0x64>)
    1636:	47a8      	blx	r5
	uTXByte(Debug_COM, 's');
    1638:	2173      	movs	r1, #115	; 0x73
    163a:	0020      	movs	r0, r4
    163c:	47a8      	blx	r5
	uTXByte(Debug_COM, 's');
    163e:	2173      	movs	r1, #115	; 0x73
    1640:	0020      	movs	r0, r4
    1642:	47a8      	blx	r5
	uTXByte(Debug_COM, 'i');
    1644:	2169      	movs	r1, #105	; 0x69
    1646:	0020      	movs	r0, r4
    1648:	47a8      	blx	r5
	uTXByte(Debug_COM, ':');
    164a:	213a      	movs	r1, #58	; 0x3a
    164c:	0020      	movs	r0, r4
    164e:	47a8      	blx	r5
	uTXByte(Debug_COM, ' ');
    1650:	2120      	movs	r1, #32
    1652:	0020      	movs	r0, r4
    1654:	47a8      	blx	r5
	uTXByte(Debug_COM, '-');
    1656:	212d      	movs	r1, #45	; 0x2d
    1658:	0020      	movs	r0, r4
    165a:	47a8      	blx	r5
	uart_send_word(Debug_COM, hex_to_bcd(RSSIValue));
    165c:	4b0d      	ldr	r3, [pc, #52]	; (1694 <Print_RSSI_Msg+0x68>)
    165e:	6818      	ldr	r0, [r3, #0]
    1660:	4b0d      	ldr	r3, [pc, #52]	; (1698 <Print_RSSI_Msg+0x6c>)
    1662:	4798      	blx	r3
    1664:	0001      	movs	r1, r0
    1666:	0020      	movs	r0, r4
    1668:	4b0c      	ldr	r3, [pc, #48]	; (169c <Print_RSSI_Msg+0x70>)
    166a:	4798      	blx	r3
	uTXByte(Debug_COM, ' ');
    166c:	2120      	movs	r1, #32
    166e:	0020      	movs	r0, r4
    1670:	47a8      	blx	r5
	uTXByte(Debug_COM, 'd');
    1672:	2164      	movs	r1, #100	; 0x64
    1674:	0020      	movs	r0, r4
    1676:	47a8      	blx	r5
	uTXByte(Debug_COM, 'B');
    1678:	2142      	movs	r1, #66	; 0x42
    167a:	0020      	movs	r0, r4
    167c:	47a8      	blx	r5
	uTXByte(Debug_COM, 'm');
    167e:	216d      	movs	r1, #109	; 0x6d
    1680:	0020      	movs	r0, r4
    1682:	47a8      	blx	r5
	uTXByte(Debug_COM, 0x0d);
    1684:	210d      	movs	r1, #13
    1686:	0020      	movs	r0, r4
    1688:	47a8      	blx	r5
}
    168a:	bd70      	pop	{r4, r5, r6, pc}
    168c:	200040ac 	.word	0x200040ac
    1690:	00001b4d 	.word	0x00001b4d
    1694:	2000413c 	.word	0x2000413c
    1698:	00001be5 	.word	0x00001be5
    169c:	00001b99 	.word	0x00001b99

000016a0 <Print_Lora_RX_Count_Form_Module_Msg>:

void Print_Lora_RX_Count_Form_Module_Msg(void)
{
    16a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	UINT16u_t	tmp16;
	tmp16.word = Lora_RX_Count_Form_Module;
    16a2:	4b1a      	ldr	r3, [pc, #104]	; (170c <Print_Lora_RX_Count_Form_Module_Msg+0x6c>)
    16a4:	681e      	ldr	r6, [r3, #0]
	uTXByte(Debug_COM, 'R');
    16a6:	4c1a      	ldr	r4, [pc, #104]	; (1710 <Print_Lora_RX_Count_Form_Module_Msg+0x70>)
    16a8:	2152      	movs	r1, #82	; 0x52
    16aa:	0020      	movs	r0, r4
    16ac:	4d19      	ldr	r5, [pc, #100]	; (1714 <Print_Lora_RX_Count_Form_Module_Msg+0x74>)
    16ae:	47a8      	blx	r5
	uTXByte(Debug_COM, 'X');
    16b0:	2158      	movs	r1, #88	; 0x58
    16b2:	0020      	movs	r0, r4
    16b4:	47a8      	blx	r5
	uTXByte(Debug_COM, ' ');
    16b6:	2120      	movs	r1, #32
    16b8:	0020      	movs	r0, r4
    16ba:	47a8      	blx	r5
	uTXByte(Debug_COM, 'C');
    16bc:	2143      	movs	r1, #67	; 0x43
    16be:	0020      	movs	r0, r4
    16c0:	47a8      	blx	r5
	uTXByte(Debug_COM, 'o');
    16c2:	216f      	movs	r1, #111	; 0x6f
    16c4:	0020      	movs	r0, r4
    16c6:	47a8      	blx	r5
	uTXByte(Debug_COM, 'u');
    16c8:	2175      	movs	r1, #117	; 0x75
    16ca:	0020      	movs	r0, r4
    16cc:	47a8      	blx	r5
	uTXByte(Debug_COM, 'n');
    16ce:	216e      	movs	r1, #110	; 0x6e
    16d0:	0020      	movs	r0, r4
    16d2:	47a8      	blx	r5
	uTXByte(Debug_COM, 't');
    16d4:	2174      	movs	r1, #116	; 0x74
    16d6:	0020      	movs	r0, r4
    16d8:	47a8      	blx	r5
	uTXByte(Debug_COM, ':');
    16da:	213a      	movs	r1, #58	; 0x3a
    16dc:	0020      	movs	r0, r4
    16de:	47a8      	blx	r5
	uTXByte(Debug_COM, ' ');
    16e0:	2120      	movs	r1, #32
    16e2:	0020      	movs	r0, r4
    16e4:	47a8      	blx	r5
	uTXByte(Debug_COM, '0');
    16e6:	2130      	movs	r1, #48	; 0x30
    16e8:	0020      	movs	r0, r4
    16ea:	47a8      	blx	r5
	uTXByte(Debug_COM, 'x');
    16ec:	2178      	movs	r1, #120	; 0x78
    16ee:	0020      	movs	r0, r4
    16f0:	47a8      	blx	r5
	uart_send_ascii_byte(Debug_COM, tmp16.byte[1]);
    16f2:	0431      	lsls	r1, r6, #16
    16f4:	0e09      	lsrs	r1, r1, #24
    16f6:	0020      	movs	r0, r4
    16f8:	4f07      	ldr	r7, [pc, #28]	; (1718 <Print_Lora_RX_Count_Form_Module_Msg+0x78>)
    16fa:	47b8      	blx	r7
	uart_send_ascii_byte(Debug_COM, tmp16.byte[0]);
    16fc:	b2f1      	uxtb	r1, r6
    16fe:	0020      	movs	r0, r4
    1700:	47b8      	blx	r7
	uTXByte(Debug_COM, 0x0d);
    1702:	210d      	movs	r1, #13
    1704:	0020      	movs	r0, r4
    1706:	47a8      	blx	r5
}
    1708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    170a:	46c0      	nop			; (mov r8, r8)
    170c:	200040a0 	.word	0x200040a0
    1710:	200040ac 	.word	0x200040ac
    1714:	00001b4d 	.word	0x00001b4d
    1718:	00001b6d 	.word	0x00001b6d

0000171c <Print_Debug_Mode_ON_Msg>:



void Print_Debug_Mode_ON_Msg(void)
{
    171c:	b570      	push	{r4, r5, r6, lr}
	Print_Line_Msg();
    171e:	4e10      	ldr	r6, [pc, #64]	; (1760 <Print_Debug_Mode_ON_Msg+0x44>)
    1720:	47b0      	blx	r6
	uTXByte(Debug_COM, 'D');
    1722:	4d10      	ldr	r5, [pc, #64]	; (1764 <Print_Debug_Mode_ON_Msg+0x48>)
    1724:	2144      	movs	r1, #68	; 0x44
    1726:	0028      	movs	r0, r5
    1728:	4c0f      	ldr	r4, [pc, #60]	; (1768 <Print_Debug_Mode_ON_Msg+0x4c>)
    172a:	47a0      	blx	r4
	uTXByte(Debug_COM, 'e');
    172c:	2165      	movs	r1, #101	; 0x65
    172e:	0028      	movs	r0, r5
    1730:	47a0      	blx	r4
	uTXByte(Debug_COM, 'B');
    1732:	2142      	movs	r1, #66	; 0x42
    1734:	0028      	movs	r0, r5
    1736:	47a0      	blx	r4
	uTXByte(Debug_COM, 'u');
    1738:	2175      	movs	r1, #117	; 0x75
    173a:	0028      	movs	r0, r5
    173c:	47a0      	blx	r4
	uTXByte(Debug_COM, 'g');
    173e:	2167      	movs	r1, #103	; 0x67
    1740:	0028      	movs	r0, r5
    1742:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    1744:	2120      	movs	r1, #32
    1746:	0028      	movs	r0, r5
    1748:	47a0      	blx	r4
	uTXByte(Debug_COM, 'O');
    174a:	214f      	movs	r1, #79	; 0x4f
    174c:	0028      	movs	r0, r5
    174e:	47a0      	blx	r4
	uTXByte(Debug_COM, 'N');
    1750:	214e      	movs	r1, #78	; 0x4e
    1752:	0028      	movs	r0, r5
    1754:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);
    1756:	210d      	movs	r1, #13
    1758:	0028      	movs	r0, r5
    175a:	47a0      	blx	r4
	Print_Line_Msg();
    175c:	47b0      	blx	r6
}
    175e:	bd70      	pop	{r4, r5, r6, pc}
    1760:	000014a9 	.word	0x000014a9
    1764:	200040ac 	.word	0x200040ac
    1768:	00001b4d 	.word	0x00001b4d

0000176c <Print_Debug_Mode_OFF_Msg>:

void Print_Debug_Mode_OFF_Msg(void)
{
    176c:	b570      	push	{r4, r5, r6, lr}
	Print_Line_Msg();
    176e:	4e12      	ldr	r6, [pc, #72]	; (17b8 <Print_Debug_Mode_OFF_Msg+0x4c>)
    1770:	47b0      	blx	r6
	uTXByte(Debug_COM, 'D');
    1772:	4d12      	ldr	r5, [pc, #72]	; (17bc <Print_Debug_Mode_OFF_Msg+0x50>)
    1774:	2144      	movs	r1, #68	; 0x44
    1776:	0028      	movs	r0, r5
    1778:	4c11      	ldr	r4, [pc, #68]	; (17c0 <Print_Debug_Mode_OFF_Msg+0x54>)
    177a:	47a0      	blx	r4
	uTXByte(Debug_COM, 'e');
    177c:	2165      	movs	r1, #101	; 0x65
    177e:	0028      	movs	r0, r5
    1780:	47a0      	blx	r4
	uTXByte(Debug_COM, 'B');
    1782:	2142      	movs	r1, #66	; 0x42
    1784:	0028      	movs	r0, r5
    1786:	47a0      	blx	r4
	uTXByte(Debug_COM, 'u');
    1788:	2175      	movs	r1, #117	; 0x75
    178a:	0028      	movs	r0, r5
    178c:	47a0      	blx	r4
	uTXByte(Debug_COM, 'g');
    178e:	2167      	movs	r1, #103	; 0x67
    1790:	0028      	movs	r0, r5
    1792:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    1794:	2120      	movs	r1, #32
    1796:	0028      	movs	r0, r5
    1798:	47a0      	blx	r4
	uTXByte(Debug_COM, 'O');
    179a:	214f      	movs	r1, #79	; 0x4f
    179c:	0028      	movs	r0, r5
    179e:	47a0      	blx	r4
	uTXByte(Debug_COM, 'F');
    17a0:	2146      	movs	r1, #70	; 0x46
    17a2:	0028      	movs	r0, r5
    17a4:	47a0      	blx	r4
	uTXByte(Debug_COM, 'F');
    17a6:	2146      	movs	r1, #70	; 0x46
    17a8:	0028      	movs	r0, r5
    17aa:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);
    17ac:	210d      	movs	r1, #13
    17ae:	0028      	movs	r0, r5
    17b0:	47a0      	blx	r4
	Print_Line_Msg();
    17b2:	47b0      	blx	r6
}
    17b4:	bd70      	pop	{r4, r5, r6, pc}
    17b6:	46c0      	nop			; (mov r8, r8)
    17b8:	000014a9 	.word	0x000014a9
    17bc:	200040ac 	.word	0x200040ac
    17c0:	00001b4d 	.word	0x00001b4d

000017c4 <Print_Wait_TX_Finish_Msg>:

void Print_Wait_TX_Finish_Msg(void)
{
    17c4:	b570      	push	{r4, r5, r6, lr}
	if(Lora_Debug_Flag == 0) return;
    17c6:	4b16      	ldr	r3, [pc, #88]	; (1820 <Print_Wait_TX_Finish_Msg+0x5c>)
    17c8:	781b      	ldrb	r3, [r3, #0]
    17ca:	071b      	lsls	r3, r3, #28
    17cc:	d400      	bmi.n	17d0 <Print_Wait_TX_Finish_Msg+0xc>
	uTXByte(Debug_COM, ' ');
	uTXByte(Debug_COM, 'I');
	uTXByte(Debug_COM, 'R');
	uTXByte(Debug_COM, 'Q');
	uTXByte(Debug_COM, 0x0d);
}
    17ce:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'W');
    17d0:	4d14      	ldr	r5, [pc, #80]	; (1824 <Print_Wait_TX_Finish_Msg+0x60>)
    17d2:	2157      	movs	r1, #87	; 0x57
    17d4:	0028      	movs	r0, r5
    17d6:	4c14      	ldr	r4, [pc, #80]	; (1828 <Print_Wait_TX_Finish_Msg+0x64>)
    17d8:	47a0      	blx	r4
	uTXByte(Debug_COM, 'a');
    17da:	2161      	movs	r1, #97	; 0x61
    17dc:	0028      	movs	r0, r5
    17de:	47a0      	blx	r4
	uTXByte(Debug_COM, 'i');
    17e0:	2169      	movs	r1, #105	; 0x69
    17e2:	0028      	movs	r0, r5
    17e4:	47a0      	blx	r4
	uTXByte(Debug_COM, 'T');
    17e6:	2154      	movs	r1, #84	; 0x54
    17e8:	0028      	movs	r0, r5
    17ea:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    17ec:	2120      	movs	r1, #32
    17ee:	0028      	movs	r0, r5
    17f0:	47a0      	blx	r4
	uTXByte(Debug_COM, 'T');
    17f2:	2154      	movs	r1, #84	; 0x54
    17f4:	0028      	movs	r0, r5
    17f6:	47a0      	blx	r4
	uTXByte(Debug_COM, 'X');
    17f8:	2158      	movs	r1, #88	; 0x58
    17fa:	0028      	movs	r0, r5
    17fc:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    17fe:	2120      	movs	r1, #32
    1800:	0028      	movs	r0, r5
    1802:	47a0      	blx	r4
	uTXByte(Debug_COM, 'I');
    1804:	2149      	movs	r1, #73	; 0x49
    1806:	0028      	movs	r0, r5
    1808:	47a0      	blx	r4
	uTXByte(Debug_COM, 'R');
    180a:	2152      	movs	r1, #82	; 0x52
    180c:	0028      	movs	r0, r5
    180e:	47a0      	blx	r4
	uTXByte(Debug_COM, 'Q');
    1810:	2151      	movs	r1, #81	; 0x51
    1812:	0028      	movs	r0, r5
    1814:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);
    1816:	210d      	movs	r1, #13
    1818:	0028      	movs	r0, r5
    181a:	47a0      	blx	r4
    181c:	e7d7      	b.n	17ce <Print_Wait_TX_Finish_Msg+0xa>
    181e:	46c0      	nop			; (mov r8, r8)
    1820:	20004144 	.word	0x20004144
    1824:	200040ac 	.word	0x200040ac
    1828:	00001b4d 	.word	0x00001b4d

0000182c <tc_callback_to_to_period_100us>:



void tc_callback_to_to_period_100us(struct tc_module *const module_inst)
{
	if(f_count < 6000)
    182c:	4b04      	ldr	r3, [pc, #16]	; (1840 <tc_callback_to_to_period_100us+0x14>)
    182e:	681a      	ldr	r2, [r3, #0]
    1830:	4b04      	ldr	r3, [pc, #16]	; (1844 <tc_callback_to_to_period_100us+0x18>)
    1832:	429a      	cmp	r2, r3
    1834:	d803      	bhi.n	183e <tc_callback_to_to_period_100us+0x12>
	{
		f_count++;
    1836:	4a02      	ldr	r2, [pc, #8]	; (1840 <tc_callback_to_to_period_100us+0x14>)
    1838:	6813      	ldr	r3, [r2, #0]
    183a:	3301      	adds	r3, #1
    183c:	6013      	str	r3, [r2, #0]
	}
}
    183e:	4770      	bx	lr
    1840:	20004294 	.word	0x20004294
    1844:	0000176f 	.word	0x0000176f

00001848 <configure_tc>:

//! [setup]
void configure_tc(void)
{
    1848:	b570      	push	{r4, r5, r6, lr}
    184a:	b08e      	sub	sp, #56	; 0x38
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    184c:	ac01      	add	r4, sp, #4
    184e:	2300      	movs	r3, #0
    1850:	2200      	movs	r2, #0
    1852:	70a3      	strb	r3, [r4, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    1854:	8123      	strh	r3, [r4, #8]
	config->run_in_standby             = false;
    1856:	2100      	movs	r1, #0
    1858:	7061      	strb	r1, [r4, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    185a:	72a2      	strb	r2, [r4, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    185c:	72e2      	strb	r2, [r4, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    185e:	7322      	strb	r2, [r4, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    1860:	73a2      	strb	r2, [r4, #14]
	config->oneshot                    = false;
    1862:	7362      	strb	r2, [r4, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    1864:	7422      	strb	r2, [r4, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    1866:	6163      	str	r3, [r4, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    1868:	61a3      	str	r3, [r4, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    186a:	7722      	strb	r2, [r4, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    186c:	6223      	str	r3, [r4, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    186e:	6263      	str	r3, [r4, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    1870:	8523      	strh	r3, [r4, #40]	; 0x28
	//! [setup_config_defaults]
	tc_get_config_defaults(&config_tc);
	//! [setup_config_defaults]

	//! [setup_change_config]
	config_tc.clock_source    = GCLK_GENERATOR_1;
    1872:	3301      	adds	r3, #1
    1874:	7023      	strb	r3, [r4, #0]
	config_tc.counter_size    = TC_COUNTER_SIZE_16BIT;
	config_tc.clock_prescaler  =TC_CLOCK_PRESCALER_DIV4;
    1876:	2380      	movs	r3, #128	; 0x80
    1878:	009b      	lsls	r3, r3, #2
    187a:	80a3      	strh	r3, [r4, #4]
	config_tc.wave_generation = TC_WAVE_GENERATION_MATCH_FREQ;
    187c:	3be1      	subs	r3, #225	; 0xe1
    187e:	3bff      	subs	r3, #255	; 0xff
    1880:	71a3      	strb	r3, [r4, #6]
	config_tc.counter_16_bit.compare_capture_channel[0] = 50;
    1882:	3312      	adds	r3, #18
    1884:	8563      	strh	r3, [r4, #42]	; 0x2a
	config_tc.counter_16_bit.compare_capture_channel[1] = 50;
    1886:	85a3      	strh	r3, [r4, #44]	; 0x2c
	//! [setup_change_config_pwm]

	//! [setup_set_config]
	tc_init(&MyTimer01, TC1, &config_tc);
    1888:	4d0f      	ldr	r5, [pc, #60]	; (18c8 <configure_tc+0x80>)
    188a:	0022      	movs	r2, r4
    188c:	490f      	ldr	r1, [pc, #60]	; (18cc <configure_tc+0x84>)
    188e:	0028      	movs	r0, r5
    1890:	4e0f      	ldr	r6, [pc, #60]	; (18d0 <configure_tc+0x88>)
    1892:	47b0      	blx	r6
	tc_init(&MyTimer02, TC2, &config_tc);
    1894:	0022      	movs	r2, r4
    1896:	490f      	ldr	r1, [pc, #60]	; (18d4 <configure_tc+0x8c>)
    1898:	480f      	ldr	r0, [pc, #60]	; (18d8 <configure_tc+0x90>)
    189a:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    189c:	682a      	ldr	r2, [r5, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    189e:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    18a0:	b25b      	sxtb	r3, r3
    18a2:	2b00      	cmp	r3, #0
    18a4:	dbfb      	blt.n	189e <configure_tc+0x56>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    18a6:	8813      	ldrh	r3, [r2, #0]
    18a8:	2102      	movs	r1, #2
    18aa:	430b      	orrs	r3, r1
    18ac:	8013      	strh	r3, [r2, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    18ae:	4b0a      	ldr	r3, [pc, #40]	; (18d8 <configure_tc+0x90>)
    18b0:	681a      	ldr	r2, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    18b2:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    18b4:	b25b      	sxtb	r3, r3
    18b6:	2b00      	cmp	r3, #0
    18b8:	dbfb      	blt.n	18b2 <configure_tc+0x6a>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    18ba:	8813      	ldrh	r3, [r2, #0]
    18bc:	2102      	movs	r1, #2
    18be:	430b      	orrs	r3, r1
    18c0:	8013      	strh	r3, [r2, #0]
	
	tc_enable(&MyTimer01);
	tc_enable(&MyTimer02);
	//! [setup_enable]
	
}
    18c2:	b00e      	add	sp, #56	; 0x38
    18c4:	bd70      	pop	{r4, r5, r6, pc}
    18c6:	46c0      	nop			; (mov r8, r8)
    18c8:	20004250 	.word	0x20004250
    18cc:	42002400 	.word	0x42002400
    18d0:	00000459 	.word	0x00000459
    18d4:	42002800 	.word	0x42002800
    18d8:	200040d0 	.word	0x200040d0

000018dc <configure_tc_callbacks>:
//! [setup]
void configure_tc_callbacks(void)
{
    18dc:	b510      	push	{r4, lr}
	tc_register_callback(&MyTimer02, tc_callback_to_to_period_100us, TC_CALLBACK_CC_CHANNEL1);
    18de:	4c0c      	ldr	r4, [pc, #48]	; (1910 <configure_tc_callbacks+0x34>)
    18e0:	2203      	movs	r2, #3
    18e2:	490c      	ldr	r1, [pc, #48]	; (1914 <configure_tc_callbacks+0x38>)
    18e4:	0020      	movs	r0, r4
    18e6:	4b0c      	ldr	r3, [pc, #48]	; (1918 <configure_tc_callbacks+0x3c>)
    18e8:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    18ea:	6820      	ldr	r0, [r4, #0]
    18ec:	4b0b      	ldr	r3, [pc, #44]	; (191c <configure_tc_callbacks+0x40>)
    18ee:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    18f0:	4b0b      	ldr	r3, [pc, #44]	; (1920 <configure_tc_callbacks+0x44>)
    18f2:	5c1b      	ldrb	r3, [r3, r0]
    18f4:	221f      	movs	r2, #31
    18f6:	401a      	ands	r2, r3
    18f8:	2301      	movs	r3, #1
    18fa:	4093      	lsls	r3, r2
    18fc:	4a09      	ldr	r2, [pc, #36]	; (1924 <configure_tc_callbacks+0x48>)
    18fe:	6013      	str	r3, [r2, #0]
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
    1900:	7e63      	ldrb	r3, [r4, #25]
    1902:	2220      	movs	r2, #32
    1904:	4313      	orrs	r3, r2
    1906:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
    1908:	6823      	ldr	r3, [r4, #0]
    190a:	2220      	movs	r2, #32
    190c:	735a      	strb	r2, [r3, #13]
	
	tc_enable_callback(&MyTimer02, TC_CALLBACK_CC_CHANNEL1);
}
    190e:	bd10      	pop	{r4, pc}
    1910:	200040d0 	.word	0x200040d0
    1914:	0000182d 	.word	0x0000182d
    1918:	00000305 	.word	0x00000305
    191c:	0000041d 	.word	0x0000041d
    1920:	000033e8 	.word	0x000033e8
    1924:	e000e100 	.word	0xe000e100

00001928 <timer_configure>:

void timer_configure(void)
{
    1928:	b510      	push	{r4, lr}
	configure_tc();
    192a:	4b02      	ldr	r3, [pc, #8]	; (1934 <timer_configure+0xc>)
    192c:	4798      	blx	r3
	configure_tc_callbacks();
    192e:	4b02      	ldr	r3, [pc, #8]	; (1938 <timer_configure+0x10>)
    1930:	4798      	blx	r3
    1932:	bd10      	pop	{r4, pc}
    1934:	00001849 	.word	0x00001849
    1938:	000018dd 	.word	0x000018dd

0000193c <Uart_Form_SX1272_callback>:
//! [rx_buffer_var]

//! [callback_funcs]
void Uart_Form_SX1272_callback(struct usart_module *const usart_module)
{
	if(MyBufferCount <= UserRxCountMax)
    193c:	4b06      	ldr	r3, [pc, #24]	; (1958 <Uart_Form_SX1272_callback+0x1c>)
    193e:	781b      	ldrb	r3, [r3, #0]
    1940:	4a06      	ldr	r2, [pc, #24]	; (195c <Uart_Form_SX1272_callback+0x20>)
    1942:	7812      	ldrb	r2, [r2, #0]
    1944:	429a      	cmp	r2, r3
    1946:	d306      	bcc.n	1956 <Uart_Form_SX1272_callback+0x1a>
	{
		MyBuffer[MyBufferCount] = rx_buffer[0];
    1948:	4a05      	ldr	r2, [pc, #20]	; (1960 <Uart_Form_SX1272_callback+0x24>)
    194a:	7811      	ldrb	r1, [r2, #0]
    194c:	4a05      	ldr	r2, [pc, #20]	; (1964 <Uart_Form_SX1272_callback+0x28>)
    194e:	54d1      	strb	r1, [r2, r3]
		MyBufferCount++;	
    1950:	3301      	adds	r3, #1
    1952:	4a01      	ldr	r2, [pc, #4]	; (1958 <Uart_Form_SX1272_callback+0x1c>)
    1954:	7013      	strb	r3, [r2, #0]
	}
}
    1956:	4770      	bx	lr
    1958:	20004141 	.word	0x20004141
    195c:	200042bd 	.word	0x200042bd
    1960:	2000414c 	.word	0x2000414c
    1964:	20004274 	.word	0x20004274

00001968 <usart_read_callback>:



void usart_read_callback(struct usart_module *const usart_module)
{
	if(UserKeyInStauts == NOP)
    1968:	4b0b      	ldr	r3, [pc, #44]	; (1998 <usart_read_callback+0x30>)
    196a:	781b      	ldrb	r3, [r3, #0]
    196c:	2b00      	cmp	r3, #0
    196e:	d10e      	bne.n	198e <usart_read_callback+0x26>
	{
		if(UserKeyInBufCount < UserKeyInBufMax)
    1970:	4b0a      	ldr	r3, [pc, #40]	; (199c <usart_read_callback+0x34>)
    1972:	781b      	ldrb	r3, [r3, #0]
    1974:	2b1d      	cmp	r3, #29
    1976:	d806      	bhi.n	1986 <usart_read_callback+0x1e>
		{
			UserKeyInBuf[UserKeyInBufCount] = user_rx_buffer[0];
    1978:	4a09      	ldr	r2, [pc, #36]	; (19a0 <usart_read_callback+0x38>)
    197a:	7811      	ldrb	r1, [r2, #0]
    197c:	4a09      	ldr	r2, [pc, #36]	; (19a4 <usart_read_callback+0x3c>)
    197e:	54d1      	strb	r1, [r2, r3]
			UserKeyInBufCount++;
    1980:	3301      	adds	r3, #1
    1982:	4a06      	ldr	r2, [pc, #24]	; (199c <usart_read_callback+0x34>)
    1984:	7013      	strb	r3, [r2, #0]
		}
		if(user_rx_buffer[0] == 0x0d)
    1986:	4b06      	ldr	r3, [pc, #24]	; (19a0 <usart_read_callback+0x38>)
    1988:	781b      	ldrb	r3, [r3, #0]
    198a:	2b0d      	cmp	r3, #13
    198c:	d000      	beq.n	1990 <usart_read_callback+0x28>
		{
			UserKeyInStauts = UserKeyInEnterIndex;
		}
	}
}
    198e:	4770      	bx	lr
			UserKeyInStauts = UserKeyInEnterIndex;
    1990:	2201      	movs	r2, #1
    1992:	4b01      	ldr	r3, [pc, #4]	; (1998 <usart_read_callback+0x30>)
    1994:	701a      	strb	r2, [r3, #0]
}
    1996:	e7fa      	b.n	198e <usart_read_callback+0x26>
    1998:	20004146 	.word	0x20004146
    199c:	20004140 	.word	0x20004140
    19a0:	200040a8 	.word	0x200040a8
    19a4:	20004114 	.word	0x20004114

000019a8 <configure_usart>:
}
//! [callback_funcs]

//! [setup]
void configure_usart(void)
{
    19a8:	b530      	push	{r4, r5, lr}
    19aa:	b08d      	sub	sp, #52	; 0x34
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    19ac:	2380      	movs	r3, #128	; 0x80
    19ae:	05db      	lsls	r3, r3, #23
    19b0:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    19b2:	2300      	movs	r3, #0
    19b4:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    19b6:	22ff      	movs	r2, #255	; 0xff
    19b8:	4669      	mov	r1, sp
    19ba:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    19bc:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    19be:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    19c0:	2201      	movs	r2, #1
    19c2:	750a      	strb	r2, [r1, #20]
	config->transmitter_enable = true;
    19c4:	754a      	strb	r2, [r1, #21]
	config->clock_polarity_inverted = false;
    19c6:	758b      	strb	r3, [r1, #22]
	config->use_external_clock = false;
    19c8:	75cb      	strb	r3, [r1, #23]
	config->ext_clock_freq   = 0;
    19ca:	9306      	str	r3, [sp, #24]
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    19cc:	770b      	strb	r3, [r1, #28]
	config->generator_source = GCLK_GENERATOR_0;
    19ce:	774b      	strb	r3, [r1, #29]
	//! [setup_config_defaults]
	usart_get_config_defaults(&config_usart);
	//! [setup_config_defaults]

	//! [setup_change_config]
	config_usart.baudrate    = 115200;
    19d0:	23e1      	movs	r3, #225	; 0xe1
    19d2:	025b      	lsls	r3, r3, #9
    19d4:	9304      	str	r3, [sp, #16]
	config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;
    19d6:	23c4      	movs	r3, #196	; 0xc4
    19d8:	039b      	lsls	r3, r3, #14
    19da:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_UNUSED;
    19dc:	2301      	movs	r3, #1
    19de:	425b      	negs	r3, r3
    19e0:	9308      	str	r3, [sp, #32]
	config_usart.pinmux_pad1 = PINMUX_UNUSED;
    19e2:	9309      	str	r3, [sp, #36]	; 0x24
	config_usart.pinmux_pad2 = PINMUX_PA24C_SERCOM3_PAD2;
    19e4:	4b3a      	ldr	r3, [pc, #232]	; (1ad0 <configure_usart+0x128>)
    19e6:	930a      	str	r3, [sp, #40]	; 0x28
	config_usart.pinmux_pad3 = PINMUX_PA25C_SERCOM3_PAD3;
    19e8:	4b3a      	ldr	r3, [pc, #232]	; (1ad4 <configure_usart+0x12c>)
    19ea:	930b      	str	r3, [sp, #44]	; 0x2c
	//! [setup_change_config]

	//! [setup_set_config]
	while (usart_init(&MyUart01,
    19ec:	4d3a      	ldr	r5, [pc, #232]	; (1ad8 <configure_usart+0x130>)
    19ee:	4c3b      	ldr	r4, [pc, #236]	; (1adc <configure_usart+0x134>)
    19f0:	466a      	mov	r2, sp
    19f2:	493b      	ldr	r1, [pc, #236]	; (1ae0 <configure_usart+0x138>)
    19f4:	0028      	movs	r0, r5
    19f6:	47a0      	blx	r4
    19f8:	2800      	cmp	r0, #0
    19fa:	d1f9      	bne.n	19f0 <configure_usart+0x48>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    19fc:	4d36      	ldr	r5, [pc, #216]	; (1ad8 <configure_usart+0x130>)
    19fe:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1a00:	0020      	movs	r0, r4
    1a02:	4b38      	ldr	r3, [pc, #224]	; (1ae4 <configure_usart+0x13c>)
    1a04:	4798      	blx	r3
    1a06:	231f      	movs	r3, #31
    1a08:	4018      	ands	r0, r3
    1a0a:	3b1e      	subs	r3, #30
    1a0c:	4083      	lsls	r3, r0
    1a0e:	4a36      	ldr	r2, [pc, #216]	; (1ae8 <configure_usart+0x140>)
    1a10:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1a12:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    1a14:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
    1a16:	b21b      	sxth	r3, r3
    1a18:	2b00      	cmp	r3, #0
    1a1a:	dbfb      	blt.n	1a14 <configure_usart+0x6c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1a1c:	6823      	ldr	r3, [r4, #0]
    1a1e:	2202      	movs	r2, #2
    1a20:	4313      	orrs	r3, r2
    1a22:	6023      	str	r3, [r4, #0]
	//! [setup_enable]
	usart_enable(&MyUart01);
	//! [setup_enable]

	//! [setup_change_config]
	config_usart.baudrate    = 115200;
    1a24:	23e1      	movs	r3, #225	; 0xe1
    1a26:	025b      	lsls	r3, r3, #9
    1a28:	9304      	str	r3, [sp, #16]
	config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;
    1a2a:	23c4      	movs	r3, #196	; 0xc4
    1a2c:	039b      	lsls	r3, r3, #14
    1a2e:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_UNUSED;
    1a30:	2301      	movs	r3, #1
    1a32:	425b      	negs	r3, r3
    1a34:	9308      	str	r3, [sp, #32]
	config_usart.pinmux_pad1 = PINMUX_UNUSED;
    1a36:	9309      	str	r3, [sp, #36]	; 0x24
	config_usart.pinmux_pad2 = PINMUX_PA18C_SERCOM1_PAD2;
    1a38:	4b2c      	ldr	r3, [pc, #176]	; (1aec <configure_usart+0x144>)
    1a3a:	930a      	str	r3, [sp, #40]	; 0x28
	config_usart.pinmux_pad3 = PINMUX_PA19C_SERCOM1_PAD3;
    1a3c:	4b2c      	ldr	r3, [pc, #176]	; (1af0 <configure_usart+0x148>)
    1a3e:	930b      	str	r3, [sp, #44]	; 0x2c
	//! [setup_change_config]

	//! [setup_set_config]
	while (usart_init(&MyUart02,
    1a40:	4d2c      	ldr	r5, [pc, #176]	; (1af4 <configure_usart+0x14c>)
    1a42:	4c26      	ldr	r4, [pc, #152]	; (1adc <configure_usart+0x134>)
    1a44:	466a      	mov	r2, sp
    1a46:	492c      	ldr	r1, [pc, #176]	; (1af8 <configure_usart+0x150>)
    1a48:	0028      	movs	r0, r5
    1a4a:	47a0      	blx	r4
    1a4c:	2800      	cmp	r0, #0
    1a4e:	d1f9      	bne.n	1a44 <configure_usart+0x9c>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1a50:	4d28      	ldr	r5, [pc, #160]	; (1af4 <configure_usart+0x14c>)
    1a52:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1a54:	0020      	movs	r0, r4
    1a56:	4b23      	ldr	r3, [pc, #140]	; (1ae4 <configure_usart+0x13c>)
    1a58:	4798      	blx	r3
    1a5a:	231f      	movs	r3, #31
    1a5c:	4018      	ands	r0, r3
    1a5e:	3b1e      	subs	r3, #30
    1a60:	4083      	lsls	r3, r0
    1a62:	4a21      	ldr	r2, [pc, #132]	; (1ae8 <configure_usart+0x140>)
    1a64:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1a66:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    1a68:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
    1a6a:	b21b      	sxth	r3, r3
    1a6c:	2b00      	cmp	r3, #0
    1a6e:	dbfb      	blt.n	1a68 <configure_usart+0xc0>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1a70:	6823      	ldr	r3, [r4, #0]
    1a72:	2202      	movs	r2, #2
    1a74:	4313      	orrs	r3, r2
    1a76:	6023      	str	r3, [r4, #0]
	//! [setup_enable]
	usart_enable(&MyUart02);
	//! [setup_enable]
	
	//! [setup_change_config]
	config_usart.baudrate    = 115200;
    1a78:	23e1      	movs	r3, #225	; 0xe1
    1a7a:	025b      	lsls	r3, r3, #9
    1a7c:	9304      	str	r3, [sp, #16]
	config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;
    1a7e:	23c4      	movs	r3, #196	; 0xc4
    1a80:	039b      	lsls	r3, r3, #14
    1a82:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_UNUSED;
    1a84:	2301      	movs	r3, #1
    1a86:	425b      	negs	r3, r3
    1a88:	9308      	str	r3, [sp, #32]
	config_usart.pinmux_pad1 = PINMUX_UNUSED;
    1a8a:	9309      	str	r3, [sp, #36]	; 0x24
	config_usart.pinmux_pad2 = PINMUX_PA14C_SERCOM2_PAD2;
    1a8c:	4b1b      	ldr	r3, [pc, #108]	; (1afc <configure_usart+0x154>)
    1a8e:	930a      	str	r3, [sp, #40]	; 0x28
	config_usart.pinmux_pad3 = PINMUX_PA15C_SERCOM2_PAD3;
    1a90:	4b1b      	ldr	r3, [pc, #108]	; (1b00 <configure_usart+0x158>)
    1a92:	930b      	str	r3, [sp, #44]	; 0x2c
	//! [setup_change_config]

	//! [setup_set_config]
	while (usart_init(&MyUart03,
    1a94:	4d1b      	ldr	r5, [pc, #108]	; (1b04 <configure_usart+0x15c>)
    1a96:	4c11      	ldr	r4, [pc, #68]	; (1adc <configure_usart+0x134>)
    1a98:	466a      	mov	r2, sp
    1a9a:	491b      	ldr	r1, [pc, #108]	; (1b08 <configure_usart+0x160>)
    1a9c:	0028      	movs	r0, r5
    1a9e:	47a0      	blx	r4
    1aa0:	2800      	cmp	r0, #0
    1aa2:	d1f9      	bne.n	1a98 <configure_usart+0xf0>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1aa4:	4d17      	ldr	r5, [pc, #92]	; (1b04 <configure_usart+0x15c>)
    1aa6:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1aa8:	0020      	movs	r0, r4
    1aaa:	4b0e      	ldr	r3, [pc, #56]	; (1ae4 <configure_usart+0x13c>)
    1aac:	4798      	blx	r3
    1aae:	231f      	movs	r3, #31
    1ab0:	4018      	ands	r0, r3
    1ab2:	3b1e      	subs	r3, #30
    1ab4:	4083      	lsls	r3, r0
    1ab6:	4a0c      	ldr	r2, [pc, #48]	; (1ae8 <configure_usart+0x140>)
    1ab8:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1aba:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    1abc:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
    1abe:	b21b      	sxth	r3, r3
    1ac0:	2b00      	cmp	r3, #0
    1ac2:	dbfb      	blt.n	1abc <configure_usart+0x114>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1ac4:	6823      	ldr	r3, [r4, #0]
    1ac6:	2202      	movs	r2, #2
    1ac8:	4313      	orrs	r3, r2
    1aca:	6023      	str	r3, [r4, #0]

	//! [setup_enable]
	usart_enable(&MyUart04);
	//! [setup_enable]
	*/
}
    1acc:	b00d      	add	sp, #52	; 0x34
    1ace:	bd30      	pop	{r4, r5, pc}
    1ad0:	00180002 	.word	0x00180002
    1ad4:	00190002 	.word	0x00190002
    1ad8:	200040f0 	.word	0x200040f0
    1adc:	00002275 	.word	0x00002275
    1ae0:	42001400 	.word	0x42001400
    1ae4:	000021e5 	.word	0x000021e5
    1ae8:	e000e100 	.word	0xe000e100
    1aec:	00120002 	.word	0x00120002
    1af0:	00130002 	.word	0x00130002
    1af4:	200040ac 	.word	0x200040ac
    1af8:	42000c00 	.word	0x42000c00
    1afc:	000e0002 	.word	0x000e0002
    1b00:	000f0002 	.word	0x000f0002
    1b04:	20004298 	.word	0x20004298
    1b08:	42001000 	.word	0x42001000

00001b0c <configure_usart_callbacks>:

void configure_usart_callbacks(void)
{
    1b0c:	b570      	push	{r4, r5, r6, lr}
//			usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
//	usart_register_callback(&MyUart01,
//			usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
	
		
	usart_register_callback(&MyUart02,
    1b0e:	4d0a      	ldr	r5, [pc, #40]	; (1b38 <configure_usart_callbacks+0x2c>)
    1b10:	2201      	movs	r2, #1
    1b12:	490a      	ldr	r1, [pc, #40]	; (1b3c <configure_usart_callbacks+0x30>)
    1b14:	0028      	movs	r0, r5
    1b16:	4e0a      	ldr	r6, [pc, #40]	; (1b40 <configure_usart_callbacks+0x34>)
    1b18:	47b0      	blx	r6
			usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
	usart_register_callback(&MyUart03,
    1b1a:	4c0a      	ldr	r4, [pc, #40]	; (1b44 <configure_usart_callbacks+0x38>)
    1b1c:	2201      	movs	r2, #1
    1b1e:	490a      	ldr	r1, [pc, #40]	; (1b48 <configure_usart_callbacks+0x3c>)
    1b20:	0020      	movs	r0, r4
    1b22:	47b0      	blx	r6
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    1b24:	2321      	movs	r3, #33	; 0x21
    1b26:	2002      	movs	r0, #2
    1b28:	5ce9      	ldrb	r1, [r5, r3]
    1b2a:	4301      	orrs	r1, r0
    1b2c:	54e9      	strb	r1, [r5, r3]
    1b2e:	5ce2      	ldrb	r2, [r4, r3]
    1b30:	4302      	orrs	r2, r0
    1b32:	54e2      	strb	r2, [r4, r3]
	
//	usart_enable_callback(&MyUart03, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable_callback(&MyUart02, USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&MyUart03, USART_CALLBACK_BUFFER_RECEIVED);
	//! [setup_enable_callbacks]
}
    1b34:	bd70      	pop	{r4, r5, r6, pc}
    1b36:	46c0      	nop			; (mov r8, r8)
    1b38:	200040ac 	.word	0x200040ac
    1b3c:	00001969 	.word	0x00001969
    1b40:	00002535 	.word	0x00002535
    1b44:	20004298 	.word	0x20004298
    1b48:	0000193d 	.word	0x0000193d

00001b4c <uTXByte>:
	uTXByte(usart_module, hex_to_ascii(tmp8.HL.L));
}


void uTXByte(struct usart_module *const usart_module, uint8_t tmp_data)
{
    1b4c:	b510      	push	{r4, lr}
	usart_write_wait(usart_module, tmp_data);
    1b4e:	b289      	uxth	r1, r1
    1b50:	4b01      	ldr	r3, [pc, #4]	; (1b58 <uTXByte+0xc>)
    1b52:	4798      	blx	r3
}
    1b54:	bd10      	pop	{r4, pc}
    1b56:	46c0      	nop			; (mov r8, r8)
    1b58:	000024c9 	.word	0x000024c9

00001b5c <hex_to_ascii>:

unsigned char hex_to_ascii(unsigned char tmp)
{
	if(tmp > 9)
    1b5c:	2809      	cmp	r0, #9
    1b5e:	d802      	bhi.n	1b66 <hex_to_ascii+0xa>
	{
		return (tmp + 0x37);
	}
	else
	{
		return (tmp + 0x30);
    1b60:	3030      	adds	r0, #48	; 0x30
    1b62:	b2c0      	uxtb	r0, r0
	}
}
    1b64:	4770      	bx	lr
		return (tmp + 0x37);
    1b66:	3037      	adds	r0, #55	; 0x37
    1b68:	b2c0      	uxtb	r0, r0
    1b6a:	e7fb      	b.n	1b64 <hex_to_ascii+0x8>

00001b6c <uart_send_ascii_byte>:
{
    1b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b6e:	0005      	movs	r5, r0
    1b70:	000c      	movs	r4, r1
	uTXByte(usart_module, hex_to_ascii(tmp8.HL.H));
    1b72:	0908      	lsrs	r0, r1, #4
    1b74:	4f06      	ldr	r7, [pc, #24]	; (1b90 <uart_send_ascii_byte+0x24>)
    1b76:	47b8      	blx	r7
	usart_write_wait(usart_module, tmp_data);
    1b78:	b281      	uxth	r1, r0
    1b7a:	0028      	movs	r0, r5
    1b7c:	4e05      	ldr	r6, [pc, #20]	; (1b94 <uart_send_ascii_byte+0x28>)
    1b7e:	47b0      	blx	r6
	uTXByte(usart_module, hex_to_ascii(tmp8.HL.L));
    1b80:	0720      	lsls	r0, r4, #28
    1b82:	0f00      	lsrs	r0, r0, #28
    1b84:	47b8      	blx	r7
	usart_write_wait(usart_module, tmp_data);
    1b86:	b281      	uxth	r1, r0
    1b88:	0028      	movs	r0, r5
    1b8a:	47b0      	blx	r6
}
    1b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b8e:	46c0      	nop			; (mov r8, r8)
    1b90:	00001b5d 	.word	0x00001b5d
    1b94:	000024c9 	.word	0x000024c9

00001b98 <uart_send_word>:
{
    1b98:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b9a:	b083      	sub	sp, #12
    1b9c:	9001      	str	r0, [sp, #4]
    1b9e:	000c      	movs	r4, r1
	tmp8.byte = tmp16.byte[1];
    1ba0:	0408      	lsls	r0, r1, #16
	uTXByte(usart_module, hex_to_ascii(tmp8.HL.H));
    1ba2:	0e06      	lsrs	r6, r0, #24
    1ba4:	0f00      	lsrs	r0, r0, #28
    1ba6:	4d0d      	ldr	r5, [pc, #52]	; (1bdc <uart_send_word+0x44>)
    1ba8:	47a8      	blx	r5
	usart_write_wait(usart_module, tmp_data);
    1baa:	b281      	uxth	r1, r0
    1bac:	9801      	ldr	r0, [sp, #4]
    1bae:	4f0c      	ldr	r7, [pc, #48]	; (1be0 <uart_send_word+0x48>)
    1bb0:	47b8      	blx	r7
	uTXByte(usart_module, hex_to_ascii(tmp8.HL.L));
    1bb2:	0730      	lsls	r0, r6, #28
    1bb4:	0f00      	lsrs	r0, r0, #28
    1bb6:	47a8      	blx	r5
	usart_write_wait(usart_module, tmp_data);
    1bb8:	b281      	uxth	r1, r0
    1bba:	9801      	ldr	r0, [sp, #4]
    1bbc:	47b8      	blx	r7
	uTXByte(usart_module, hex_to_ascii(tmp8.HL.H));
    1bbe:	0620      	lsls	r0, r4, #24
    1bc0:	0f00      	lsrs	r0, r0, #28
    1bc2:	47a8      	blx	r5
	usart_write_wait(usart_module, tmp_data);
    1bc4:	b281      	uxth	r1, r0
    1bc6:	9801      	ldr	r0, [sp, #4]
    1bc8:	47b8      	blx	r7
	uTXByte(usart_module, hex_to_ascii(tmp8.HL.L));
    1bca:	0720      	lsls	r0, r4, #28
    1bcc:	0f00      	lsrs	r0, r0, #28
    1bce:	47a8      	blx	r5
	usart_write_wait(usart_module, tmp_data);
    1bd0:	b281      	uxth	r1, r0
    1bd2:	9801      	ldr	r0, [sp, #4]
    1bd4:	47b8      	blx	r7
}
    1bd6:	b003      	add	sp, #12
    1bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1bda:	46c0      	nop			; (mov r8, r8)
    1bdc:	00001b5d 	.word	0x00001b5d
    1be0:	000024c9 	.word	0x000024c9

00001be4 <hex_to_bcd>:



unsigned int hex_to_bcd(unsigned int tmp)
{
    1be4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1be6:	46ce      	mov	lr, r9
    1be8:	b500      	push	{lr}
    1bea:	b082      	sub	sp, #8
    1bec:	0006      	movs	r6, r0
	UINT16u_t	tmp16;
	UINT8u_t	tmp8;

	tmp8.HL.H = tmp / 1000;
    1bee:	4b17      	ldr	r3, [pc, #92]	; (1c4c <hex_to_bcd+0x68>)
    1bf0:	4699      	mov	r9, r3
    1bf2:	21fa      	movs	r1, #250	; 0xfa
    1bf4:	0089      	lsls	r1, r1, #2
    1bf6:	4798      	blx	r3
    1bf8:	270f      	movs	r7, #15
    1bfa:	0104      	lsls	r4, r0, #4
	tmp8.HL.L = (tmp % 1000) / 100;
    1bfc:	4d14      	ldr	r5, [pc, #80]	; (1c50 <hex_to_bcd+0x6c>)
    1bfe:	21fa      	movs	r1, #250	; 0xfa
    1c00:	0089      	lsls	r1, r1, #2
    1c02:	0030      	movs	r0, r6
    1c04:	47a8      	blx	r5
    1c06:	000b      	movs	r3, r1
    1c08:	2164      	movs	r1, #100	; 0x64
    1c0a:	9301      	str	r3, [sp, #4]
    1c0c:	0018      	movs	r0, r3
    1c0e:	47c8      	blx	r9
    1c10:	4038      	ands	r0, r7
    1c12:	4304      	orrs	r4, r0
	tmp16.byte[1] = tmp8.byte;
    1c14:	b2e6      	uxtb	r6, r4
    1c16:	0236      	lsls	r6, r6, #8
	
	tmp8.HL.H = ((tmp % 1000) % 100 ) / 10;
    1c18:	2164      	movs	r1, #100	; 0x64
    1c1a:	9801      	ldr	r0, [sp, #4]
    1c1c:	47a8      	blx	r5
    1c1e:	000b      	movs	r3, r1
    1c20:	210a      	movs	r1, #10
    1c22:	9301      	str	r3, [sp, #4]
    1c24:	0018      	movs	r0, r3
    1c26:	47c8      	blx	r9
    1c28:	0100      	lsls	r0, r0, #4
    1c2a:	403c      	ands	r4, r7
    1c2c:	4304      	orrs	r4, r0
	tmp8.HL.L = ((tmp % 1000) % 100 ) % 10;
    1c2e:	210a      	movs	r1, #10
    1c30:	9801      	ldr	r0, [sp, #4]
    1c32:	47a8      	blx	r5
    1c34:	0038      	movs	r0, r7
    1c36:	4008      	ands	r0, r1
    1c38:	230f      	movs	r3, #15
    1c3a:	439c      	bics	r4, r3
    1c3c:	4320      	orrs	r0, r4
	tmp16.byte[0] = tmp8.byte;
    1c3e:	b2c0      	uxtb	r0, r0
	return tmp16.word;
    1c40:	4330      	orrs	r0, r6
    1c42:	b002      	add	sp, #8
    1c44:	bc04      	pop	{r2}
    1c46:	4691      	mov	r9, r2
    1c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c4a:	46c0      	nop			; (mov r8, r8)
    1c4c:	00003039 	.word	0x00003039
    1c50:	00003145 	.word	0x00003145

00001c54 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    1c54:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    1c56:	2000      	movs	r0, #0
    1c58:	4b08      	ldr	r3, [pc, #32]	; (1c7c <delay_init+0x28>)
    1c5a:	4798      	blx	r3
    1c5c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    1c5e:	4c08      	ldr	r4, [pc, #32]	; (1c80 <delay_init+0x2c>)
    1c60:	21fa      	movs	r1, #250	; 0xfa
    1c62:	0089      	lsls	r1, r1, #2
    1c64:	47a0      	blx	r4
    1c66:	4b07      	ldr	r3, [pc, #28]	; (1c84 <delay_init+0x30>)
    1c68:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    1c6a:	4907      	ldr	r1, [pc, #28]	; (1c88 <delay_init+0x34>)
    1c6c:	0028      	movs	r0, r5
    1c6e:	47a0      	blx	r4
    1c70:	4b06      	ldr	r3, [pc, #24]	; (1c8c <delay_init+0x38>)
    1c72:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1c74:	2205      	movs	r2, #5
    1c76:	4b06      	ldr	r3, [pc, #24]	; (1c90 <delay_init+0x3c>)
    1c78:	601a      	str	r2, [r3, #0]
}
    1c7a:	bd70      	pop	{r4, r5, r6, pc}
    1c7c:	000029cd 	.word	0x000029cd
    1c80:	00003039 	.word	0x00003039
    1c84:	200001c0 	.word	0x200001c0
    1c88:	000f4240 	.word	0x000f4240
    1c8c:	200001c4 	.word	0x200001c4
    1c90:	e000e010 	.word	0xe000e010

00001c94 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    1c94:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    1c96:	4b08      	ldr	r3, [pc, #32]	; (1cb8 <delay_cycles_us+0x24>)
    1c98:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    1c9a:	4a08      	ldr	r2, [pc, #32]	; (1cbc <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    1c9c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1c9e:	2180      	movs	r1, #128	; 0x80
    1ca0:	0249      	lsls	r1, r1, #9
	while (n--) {
    1ca2:	3801      	subs	r0, #1
    1ca4:	d307      	bcc.n	1cb6 <delay_cycles_us+0x22>
	if (n > 0) {
    1ca6:	2c00      	cmp	r4, #0
    1ca8:	d0fb      	beq.n	1ca2 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    1caa:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    1cac:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1cae:	6813      	ldr	r3, [r2, #0]
    1cb0:	420b      	tst	r3, r1
    1cb2:	d0fc      	beq.n	1cae <delay_cycles_us+0x1a>
    1cb4:	e7f5      	b.n	1ca2 <delay_cycles_us+0xe>
	}
}
    1cb6:	bd30      	pop	{r4, r5, pc}
    1cb8:	200001c4 	.word	0x200001c4
    1cbc:	e000e010 	.word	0xe000e010

00001cc0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1cc0:	4b0c      	ldr	r3, [pc, #48]	; (1cf4 <cpu_irq_enter_critical+0x34>)
    1cc2:	681b      	ldr	r3, [r3, #0]
    1cc4:	2b00      	cmp	r3, #0
    1cc6:	d106      	bne.n	1cd6 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1cc8:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1ccc:	2b00      	cmp	r3, #0
    1cce:	d007      	beq.n	1ce0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1cd0:	2200      	movs	r2, #0
    1cd2:	4b09      	ldr	r3, [pc, #36]	; (1cf8 <cpu_irq_enter_critical+0x38>)
    1cd4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1cd6:	4a07      	ldr	r2, [pc, #28]	; (1cf4 <cpu_irq_enter_critical+0x34>)
    1cd8:	6813      	ldr	r3, [r2, #0]
    1cda:	3301      	adds	r3, #1
    1cdc:	6013      	str	r3, [r2, #0]
}
    1cde:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1ce0:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1ce2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1ce6:	2200      	movs	r2, #0
    1ce8:	4b04      	ldr	r3, [pc, #16]	; (1cfc <cpu_irq_enter_critical+0x3c>)
    1cea:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1cec:	3201      	adds	r2, #1
    1cee:	4b02      	ldr	r3, [pc, #8]	; (1cf8 <cpu_irq_enter_critical+0x38>)
    1cf0:	701a      	strb	r2, [r3, #0]
    1cf2:	e7f0      	b.n	1cd6 <cpu_irq_enter_critical+0x16>
    1cf4:	200001e8 	.word	0x200001e8
    1cf8:	200001ec 	.word	0x200001ec
    1cfc:	200001c8 	.word	0x200001c8

00001d00 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1d00:	4b08      	ldr	r3, [pc, #32]	; (1d24 <cpu_irq_leave_critical+0x24>)
    1d02:	681a      	ldr	r2, [r3, #0]
    1d04:	3a01      	subs	r2, #1
    1d06:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1d08:	681b      	ldr	r3, [r3, #0]
    1d0a:	2b00      	cmp	r3, #0
    1d0c:	d109      	bne.n	1d22 <cpu_irq_leave_critical+0x22>
    1d0e:	4b06      	ldr	r3, [pc, #24]	; (1d28 <cpu_irq_leave_critical+0x28>)
    1d10:	781b      	ldrb	r3, [r3, #0]
    1d12:	2b00      	cmp	r3, #0
    1d14:	d005      	beq.n	1d22 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1d16:	2201      	movs	r2, #1
    1d18:	4b04      	ldr	r3, [pc, #16]	; (1d2c <cpu_irq_leave_critical+0x2c>)
    1d1a:	701a      	strb	r2, [r3, #0]
    1d1c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1d20:	b662      	cpsie	i
	}
}
    1d22:	4770      	bx	lr
    1d24:	200001e8 	.word	0x200001e8
    1d28:	200001ec 	.word	0x200001ec
    1d2c:	200001c8 	.word	0x200001c8

00001d30 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1d30:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d32:	46c6      	mov	lr, r8
    1d34:	b500      	push	{lr}
    1d36:	b082      	sub	sp, #8
	config->input_pull = PORT_PIN_PULL_UP;
    1d38:	ac01      	add	r4, sp, #4
    1d3a:	2701      	movs	r7, #1
    1d3c:	7067      	strb	r7, [r4, #1]
	config->powersave  = false;
    1d3e:	2300      	movs	r3, #0
    1d40:	4698      	mov	r8, r3
    1d42:	70a3      	strb	r3, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
	
	/* Configure LEDs as outputs, turn them off */
	
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1d44:	7027      	strb	r7, [r4, #0]
	//	RGB LED PIN DEFINE
	port_pin_set_config(PIN_PA23, &pin_conf);
    1d46:	0021      	movs	r1, r4
    1d48:	2017      	movs	r0, #23
    1d4a:	4e2e      	ldr	r6, [pc, #184]	; (1e04 <system_board_init+0xd4>)
    1d4c:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    1d4e:	4d2e      	ldr	r5, [pc, #184]	; (1e08 <system_board_init+0xd8>)
    1d50:	2380      	movs	r3, #128	; 0x80
    1d52:	041b      	lsls	r3, r3, #16
    1d54:	61ab      	str	r3, [r5, #24]
	port_pin_set_output_level(PIN_PA23, true);
	port_pin_set_config(PIN_PA27, &pin_conf);
    1d56:	0021      	movs	r1, r4
    1d58:	201b      	movs	r0, #27
    1d5a:	47b0      	blx	r6
    1d5c:	2380      	movs	r3, #128	; 0x80
    1d5e:	051b      	lsls	r3, r3, #20
    1d60:	61ab      	str	r3, [r5, #24]
	port_pin_set_output_level(PIN_PA27, true);
	port_pin_set_config(PIN_PA28, &pin_conf);
    1d62:	0021      	movs	r1, r4
    1d64:	201c      	movs	r0, #28
    1d66:	47b0      	blx	r6
    1d68:	2380      	movs	r3, #128	; 0x80
    1d6a:	055b      	lsls	r3, r3, #21
    1d6c:	61ab      	str	r3, [r5, #24]
	port_pin_set_output_level(PIN_PA28, true);


	//	LCM PIN DEFINE	
	port_pin_set_config(PIN_PA02, &pin_conf);
    1d6e:	0021      	movs	r1, r4
    1d70:	2002      	movs	r0, #2
    1d72:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    1d74:	2304      	movs	r3, #4
    1d76:	616b      	str	r3, [r5, #20]
	port_pin_set_output_level(PIN_PA02, false);
	port_pin_set_config(PIN_PA03, &pin_conf);
    1d78:	0021      	movs	r1, r4
    1d7a:	2003      	movs	r0, #3
    1d7c:	47b0      	blx	r6
    1d7e:	2308      	movs	r3, #8
    1d80:	616b      	str	r3, [r5, #20]
	port_pin_set_output_level(PIN_PA03, false);
	port_pin_set_config(PIN_PA04, &pin_conf);
    1d82:	0021      	movs	r1, r4
    1d84:	2004      	movs	r0, #4
    1d86:	47b0      	blx	r6
    1d88:	2310      	movs	r3, #16
    1d8a:	616b      	str	r3, [r5, #20]
	port_pin_set_output_level(PIN_PA04, false);
	port_pin_set_config(PIN_PA05, &pin_conf);
    1d8c:	0021      	movs	r1, r4
    1d8e:	2005      	movs	r0, #5
    1d90:	47b0      	blx	r6
    1d92:	2320      	movs	r3, #32
    1d94:	616b      	str	r3, [r5, #20]
	port_pin_set_output_level(PIN_PA05, false);
	port_pin_set_config(PIN_PA06, &pin_conf);
    1d96:	0021      	movs	r1, r4
    1d98:	2006      	movs	r0, #6
    1d9a:	47b0      	blx	r6
    1d9c:	2340      	movs	r3, #64	; 0x40
    1d9e:	616b      	str	r3, [r5, #20]
	port_pin_set_output_level(PIN_PA06, false);
	port_pin_set_config(PIN_PA07, &pin_conf);
    1da0:	0021      	movs	r1, r4
    1da2:	2007      	movs	r0, #7
    1da4:	47b0      	blx	r6
    1da6:	2380      	movs	r3, #128	; 0x80
    1da8:	616b      	str	r3, [r5, #20]
	port_pin_set_output_level(PIN_PA07, false);
	port_pin_set_config(PIN_PA08, &pin_conf);
    1daa:	0021      	movs	r1, r4
    1dac:	2008      	movs	r0, #8
    1dae:	47b0      	blx	r6
    1db0:	2380      	movs	r3, #128	; 0x80
    1db2:	005b      	lsls	r3, r3, #1
    1db4:	616b      	str	r3, [r5, #20]
	port_pin_set_output_level(PIN_PA08, false);
	
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    1db6:	4643      	mov	r3, r8
    1db8:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(PIN_PA11, &pin_conf);
    1dba:	0021      	movs	r1, r4
    1dbc:	200b      	movs	r0, #11
    1dbe:	47b0      	blx	r6
    1dc0:	2380      	movs	r3, #128	; 0x80
    1dc2:	011b      	lsls	r3, r3, #4
    1dc4:	616b      	str	r3, [r5, #20]
	port_pin_set_output_level(PIN_PA11, false);
	
	// DIP SWITCH 4
	port_pin_set_config(PIN_PA22, &pin_conf);
    1dc6:	0021      	movs	r1, r4
    1dc8:	2016      	movs	r0, #22
    1dca:	47b0      	blx	r6
    1dcc:	2380      	movs	r3, #128	; 0x80
    1dce:	03db      	lsls	r3, r3, #15
    1dd0:	616b      	str	r3, [r5, #20]
	port_pin_set_output_level(PIN_PA22, false);
	port_pin_set_config(PIN_PA17, &pin_conf);
    1dd2:	0021      	movs	r1, r4
    1dd4:	2011      	movs	r0, #17
    1dd6:	47b0      	blx	r6
    1dd8:	2380      	movs	r3, #128	; 0x80
    1dda:	029b      	lsls	r3, r3, #10
    1ddc:	616b      	str	r3, [r5, #20]
	port_pin_set_output_level(PIN_PA17, false);
	port_pin_set_config(PIN_PA16, &pin_conf);
    1dde:	0021      	movs	r1, r4
    1de0:	2010      	movs	r0, #16
    1de2:	47b0      	blx	r6
    1de4:	2380      	movs	r3, #128	; 0x80
    1de6:	025b      	lsls	r3, r3, #9
    1de8:	616b      	str	r3, [r5, #20]
	port_pin_set_output_level(PIN_PA16, false);
	port_pin_set_config(PIN_PA01, &pin_conf);
    1dea:	0021      	movs	r1, r4
    1dec:	2001      	movs	r0, #1
    1dee:	47b0      	blx	r6
    1df0:	2302      	movs	r3, #2
    1df2:	616b      	str	r3, [r5, #20]
	port_pin_set_output_level(PIN_PA01, false);

	// TACT SWITCH
	port_pin_set_config(PIN_PA00, &pin_conf);
    1df4:	0021      	movs	r1, r4
    1df6:	2000      	movs	r0, #0
    1df8:	47b0      	blx	r6
    1dfa:	616f      	str	r7, [r5, #20]
	port_pin_set_output_level(PIN_PA00, false);

}
    1dfc:	b002      	add	sp, #8
    1dfe:	bc04      	pop	{r2}
    1e00:	4690      	mov	r8, r2
    1e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e04:	00001e0d 	.word	0x00001e0d
    1e08:	41004400 	.word	0x41004400

00001e0c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1e0c:	b500      	push	{lr}
    1e0e:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1e10:	ab01      	add	r3, sp, #4
    1e12:	2280      	movs	r2, #128	; 0x80
    1e14:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1e16:	780a      	ldrb	r2, [r1, #0]
    1e18:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1e1a:	784a      	ldrb	r2, [r1, #1]
    1e1c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1e1e:	788a      	ldrb	r2, [r1, #2]
    1e20:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1e22:	0019      	movs	r1, r3
    1e24:	4b01      	ldr	r3, [pc, #4]	; (1e2c <port_pin_set_config+0x20>)
    1e26:	4798      	blx	r3
}
    1e28:	b003      	add	sp, #12
    1e2a:	bd00      	pop	{pc}
    1e2c:	00002c0d 	.word	0x00002c0d

00001e30 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    1e30:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e32:	46de      	mov	lr, fp
    1e34:	4657      	mov	r7, sl
    1e36:	464e      	mov	r6, r9
    1e38:	4645      	mov	r5, r8
    1e3a:	b5e0      	push	{r5, r6, r7, lr}
    1e3c:	b087      	sub	sp, #28
    1e3e:	4680      	mov	r8, r0
    1e40:	9104      	str	r1, [sp, #16]
    1e42:	0016      	movs	r6, r2
    1e44:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1e46:	2200      	movs	r2, #0
    1e48:	2300      	movs	r3, #0
    1e4a:	2100      	movs	r1, #0
    1e4c:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    1e4e:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    1e50:	2001      	movs	r0, #1
    1e52:	0021      	movs	r1, r4
    1e54:	9600      	str	r6, [sp, #0]
    1e56:	9701      	str	r7, [sp, #4]
    1e58:	465c      	mov	r4, fp
    1e5a:	9403      	str	r4, [sp, #12]
    1e5c:	4644      	mov	r4, r8
    1e5e:	9405      	str	r4, [sp, #20]
    1e60:	e013      	b.n	1e8a <long_division+0x5a>
    1e62:	2420      	movs	r4, #32
    1e64:	1a64      	subs	r4, r4, r1
    1e66:	0005      	movs	r5, r0
    1e68:	40e5      	lsrs	r5, r4
    1e6a:	46a8      	mov	r8, r5
    1e6c:	e014      	b.n	1e98 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    1e6e:	9c00      	ldr	r4, [sp, #0]
    1e70:	9d01      	ldr	r5, [sp, #4]
    1e72:	1b12      	subs	r2, r2, r4
    1e74:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    1e76:	465c      	mov	r4, fp
    1e78:	464d      	mov	r5, r9
    1e7a:	432c      	orrs	r4, r5
    1e7c:	46a3      	mov	fp, r4
    1e7e:	9c03      	ldr	r4, [sp, #12]
    1e80:	4645      	mov	r5, r8
    1e82:	432c      	orrs	r4, r5
    1e84:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    1e86:	3901      	subs	r1, #1
    1e88:	d325      	bcc.n	1ed6 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    1e8a:	2420      	movs	r4, #32
    1e8c:	4264      	negs	r4, r4
    1e8e:	190c      	adds	r4, r1, r4
    1e90:	d4e7      	bmi.n	1e62 <long_division+0x32>
    1e92:	0005      	movs	r5, r0
    1e94:	40a5      	lsls	r5, r4
    1e96:	46a8      	mov	r8, r5
    1e98:	0004      	movs	r4, r0
    1e9a:	408c      	lsls	r4, r1
    1e9c:	46a1      	mov	r9, r4
		r = r << 1;
    1e9e:	1892      	adds	r2, r2, r2
    1ea0:	415b      	adcs	r3, r3
    1ea2:	0014      	movs	r4, r2
    1ea4:	001d      	movs	r5, r3
		if (n & bit_shift) {
    1ea6:	9e05      	ldr	r6, [sp, #20]
    1ea8:	464f      	mov	r7, r9
    1eaa:	403e      	ands	r6, r7
    1eac:	46b4      	mov	ip, r6
    1eae:	9e04      	ldr	r6, [sp, #16]
    1eb0:	4647      	mov	r7, r8
    1eb2:	403e      	ands	r6, r7
    1eb4:	46b2      	mov	sl, r6
    1eb6:	4666      	mov	r6, ip
    1eb8:	4657      	mov	r7, sl
    1eba:	433e      	orrs	r6, r7
    1ebc:	d003      	beq.n	1ec6 <long_division+0x96>
			r |= 0x01;
    1ebe:	0006      	movs	r6, r0
    1ec0:	4326      	orrs	r6, r4
    1ec2:	0032      	movs	r2, r6
    1ec4:	002b      	movs	r3, r5
		if (r >= d) {
    1ec6:	9c00      	ldr	r4, [sp, #0]
    1ec8:	9d01      	ldr	r5, [sp, #4]
    1eca:	429d      	cmp	r5, r3
    1ecc:	d8db      	bhi.n	1e86 <long_division+0x56>
    1ece:	d1ce      	bne.n	1e6e <long_division+0x3e>
    1ed0:	4294      	cmp	r4, r2
    1ed2:	d8d8      	bhi.n	1e86 <long_division+0x56>
    1ed4:	e7cb      	b.n	1e6e <long_division+0x3e>
    1ed6:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    1ed8:	4658      	mov	r0, fp
    1eda:	0019      	movs	r1, r3
    1edc:	b007      	add	sp, #28
    1ede:	bc3c      	pop	{r2, r3, r4, r5}
    1ee0:	4690      	mov	r8, r2
    1ee2:	4699      	mov	r9, r3
    1ee4:	46a2      	mov	sl, r4
    1ee6:	46ab      	mov	fp, r5
    1ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001eea <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1eea:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1eec:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1eee:	2340      	movs	r3, #64	; 0x40
    1ef0:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    1ef2:	4281      	cmp	r1, r0
    1ef4:	d202      	bcs.n	1efc <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    1ef6:	0018      	movs	r0, r3
    1ef8:	bd10      	pop	{r4, pc}
		baud_calculated++;
    1efa:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    1efc:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1efe:	1c63      	adds	r3, r4, #1
    1f00:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    1f02:	4288      	cmp	r0, r1
    1f04:	d9f9      	bls.n	1efa <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1f06:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    1f08:	2cff      	cmp	r4, #255	; 0xff
    1f0a:	d8f4      	bhi.n	1ef6 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    1f0c:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    1f0e:	2300      	movs	r3, #0
    1f10:	e7f1      	b.n	1ef6 <_sercom_get_sync_baud_val+0xc>
	...

00001f14 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1f14:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f16:	b083      	sub	sp, #12
    1f18:	000f      	movs	r7, r1
    1f1a:	0016      	movs	r6, r2
    1f1c:	aa08      	add	r2, sp, #32
    1f1e:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1f20:	0004      	movs	r4, r0
    1f22:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1f24:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    1f26:	42bc      	cmp	r4, r7
    1f28:	d902      	bls.n	1f30 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    1f2a:	0010      	movs	r0, r2
    1f2c:	b003      	add	sp, #12
    1f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1f30:	2b00      	cmp	r3, #0
    1f32:	d114      	bne.n	1f5e <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1f34:	0002      	movs	r2, r0
    1f36:	0008      	movs	r0, r1
    1f38:	2100      	movs	r1, #0
    1f3a:	4c19      	ldr	r4, [pc, #100]	; (1fa0 <_sercom_get_async_baud_val+0x8c>)
    1f3c:	47a0      	blx	r4
    1f3e:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    1f40:	003a      	movs	r2, r7
    1f42:	2300      	movs	r3, #0
    1f44:	2000      	movs	r0, #0
    1f46:	4c17      	ldr	r4, [pc, #92]	; (1fa4 <_sercom_get_async_baud_val+0x90>)
    1f48:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    1f4a:	2200      	movs	r2, #0
    1f4c:	2301      	movs	r3, #1
    1f4e:	1a12      	subs	r2, r2, r0
    1f50:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    1f52:	0c12      	lsrs	r2, r2, #16
    1f54:	041b      	lsls	r3, r3, #16
    1f56:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1f58:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    1f5a:	2200      	movs	r2, #0
    1f5c:	e7e5      	b.n	1f2a <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    1f5e:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1f60:	2b01      	cmp	r3, #1
    1f62:	d1f9      	bne.n	1f58 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    1f64:	000a      	movs	r2, r1
    1f66:	2300      	movs	r3, #0
    1f68:	2100      	movs	r1, #0
    1f6a:	4c0d      	ldr	r4, [pc, #52]	; (1fa0 <_sercom_get_async_baud_val+0x8c>)
    1f6c:	47a0      	blx	r4
    1f6e:	0002      	movs	r2, r0
    1f70:	000b      	movs	r3, r1
    1f72:	9200      	str	r2, [sp, #0]
    1f74:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    1f76:	0038      	movs	r0, r7
    1f78:	2100      	movs	r1, #0
    1f7a:	4c0a      	ldr	r4, [pc, #40]	; (1fa4 <_sercom_get_async_baud_val+0x90>)
    1f7c:	47a0      	blx	r4
    1f7e:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    1f80:	2380      	movs	r3, #128	; 0x80
    1f82:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1f84:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    1f86:	4298      	cmp	r0, r3
    1f88:	d8cf      	bhi.n	1f2a <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    1f8a:	0f79      	lsrs	r1, r7, #29
    1f8c:	00f8      	lsls	r0, r7, #3
    1f8e:	9a00      	ldr	r2, [sp, #0]
    1f90:	9b01      	ldr	r3, [sp, #4]
    1f92:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    1f94:	00ea      	lsls	r2, r5, #3
    1f96:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    1f98:	b2d2      	uxtb	r2, r2
    1f9a:	0352      	lsls	r2, r2, #13
    1f9c:	432a      	orrs	r2, r5
    1f9e:	e7db      	b.n	1f58 <_sercom_get_async_baud_val+0x44>
    1fa0:	00003151 	.word	0x00003151
    1fa4:	00001e31 	.word	0x00001e31

00001fa8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1fa8:	b510      	push	{r4, lr}
    1faa:	b082      	sub	sp, #8
    1fac:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1fae:	4b0e      	ldr	r3, [pc, #56]	; (1fe8 <sercom_set_gclk_generator+0x40>)
    1fb0:	781b      	ldrb	r3, [r3, #0]
    1fb2:	2b00      	cmp	r3, #0
    1fb4:	d007      	beq.n	1fc6 <sercom_set_gclk_generator+0x1e>
    1fb6:	2900      	cmp	r1, #0
    1fb8:	d105      	bne.n	1fc6 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    1fba:	4b0b      	ldr	r3, [pc, #44]	; (1fe8 <sercom_set_gclk_generator+0x40>)
    1fbc:	785b      	ldrb	r3, [r3, #1]
    1fbe:	4283      	cmp	r3, r0
    1fc0:	d010      	beq.n	1fe4 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1fc2:	201d      	movs	r0, #29
    1fc4:	e00c      	b.n	1fe0 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1fc6:	a901      	add	r1, sp, #4
    1fc8:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1fca:	200c      	movs	r0, #12
    1fcc:	4b07      	ldr	r3, [pc, #28]	; (1fec <sercom_set_gclk_generator+0x44>)
    1fce:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1fd0:	200c      	movs	r0, #12
    1fd2:	4b07      	ldr	r3, [pc, #28]	; (1ff0 <sercom_set_gclk_generator+0x48>)
    1fd4:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1fd6:	4b04      	ldr	r3, [pc, #16]	; (1fe8 <sercom_set_gclk_generator+0x40>)
    1fd8:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1fda:	2201      	movs	r2, #1
    1fdc:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    1fde:	2000      	movs	r0, #0
}
    1fe0:	b002      	add	sp, #8
    1fe2:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1fe4:	2000      	movs	r0, #0
    1fe6:	e7fb      	b.n	1fe0 <sercom_set_gclk_generator+0x38>
    1fe8:	200001f0 	.word	0x200001f0
    1fec:	00002ae5 	.word	0x00002ae5
    1ff0:	00002a59 	.word	0x00002a59

00001ff4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1ff4:	4b40      	ldr	r3, [pc, #256]	; (20f8 <STACK_SIZE+0xf8>)
    1ff6:	4298      	cmp	r0, r3
    1ff8:	d031      	beq.n	205e <STACK_SIZE+0x5e>
    1ffa:	d90a      	bls.n	2012 <STACK_SIZE+0x12>
    1ffc:	4b3f      	ldr	r3, [pc, #252]	; (20fc <STACK_SIZE+0xfc>)
    1ffe:	4298      	cmp	r0, r3
    2000:	d04d      	beq.n	209e <STACK_SIZE+0x9e>
    2002:	4b3f      	ldr	r3, [pc, #252]	; (2100 <STACK_SIZE+0x100>)
    2004:	4298      	cmp	r0, r3
    2006:	d05a      	beq.n	20be <STACK_SIZE+0xbe>
    2008:	4b3e      	ldr	r3, [pc, #248]	; (2104 <STACK_SIZE+0x104>)
    200a:	4298      	cmp	r0, r3
    200c:	d037      	beq.n	207e <STACK_SIZE+0x7e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    200e:	2000      	movs	r0, #0
}
    2010:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    2012:	4b3d      	ldr	r3, [pc, #244]	; (2108 <STACK_SIZE+0x108>)
    2014:	4298      	cmp	r0, r3
    2016:	d00c      	beq.n	2032 <STACK_SIZE+0x32>
    2018:	4b3c      	ldr	r3, [pc, #240]	; (210c <STACK_SIZE+0x10c>)
    201a:	4298      	cmp	r0, r3
    201c:	d1f7      	bne.n	200e <STACK_SIZE+0xe>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    201e:	2901      	cmp	r1, #1
    2020:	d017      	beq.n	2052 <STACK_SIZE+0x52>
    2022:	2900      	cmp	r1, #0
    2024:	d05d      	beq.n	20e2 <STACK_SIZE+0xe2>
    2026:	2902      	cmp	r1, #2
    2028:	d015      	beq.n	2056 <STACK_SIZE+0x56>
    202a:	2903      	cmp	r1, #3
    202c:	d015      	beq.n	205a <STACK_SIZE+0x5a>
	return 0;
    202e:	2000      	movs	r0, #0
    2030:	e7ee      	b.n	2010 <STACK_SIZE+0x10>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2032:	2901      	cmp	r1, #1
    2034:	d007      	beq.n	2046 <STACK_SIZE+0x46>
    2036:	2900      	cmp	r1, #0
    2038:	d051      	beq.n	20de <STACK_SIZE+0xde>
    203a:	2902      	cmp	r1, #2
    203c:	d005      	beq.n	204a <STACK_SIZE+0x4a>
    203e:	2903      	cmp	r1, #3
    2040:	d005      	beq.n	204e <STACK_SIZE+0x4e>
	return 0;
    2042:	2000      	movs	r0, #0
    2044:	e7e4      	b.n	2010 <STACK_SIZE+0x10>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2046:	4832      	ldr	r0, [pc, #200]	; (2110 <STACK_SIZE+0x110>)
    2048:	e7e2      	b.n	2010 <STACK_SIZE+0x10>
    204a:	4832      	ldr	r0, [pc, #200]	; (2114 <STACK_SIZE+0x114>)
    204c:	e7e0      	b.n	2010 <STACK_SIZE+0x10>
    204e:	4832      	ldr	r0, [pc, #200]	; (2118 <STACK_SIZE+0x118>)
    2050:	e7de      	b.n	2010 <STACK_SIZE+0x10>
    2052:	4832      	ldr	r0, [pc, #200]	; (211c <STACK_SIZE+0x11c>)
    2054:	e7dc      	b.n	2010 <STACK_SIZE+0x10>
    2056:	4832      	ldr	r0, [pc, #200]	; (2120 <STACK_SIZE+0x120>)
    2058:	e7da      	b.n	2010 <STACK_SIZE+0x10>
    205a:	4832      	ldr	r0, [pc, #200]	; (2124 <STACK_SIZE+0x124>)
    205c:	e7d8      	b.n	2010 <STACK_SIZE+0x10>
    205e:	2901      	cmp	r1, #1
    2060:	d007      	beq.n	2072 <STACK_SIZE+0x72>
    2062:	2900      	cmp	r1, #0
    2064:	d03f      	beq.n	20e6 <STACK_SIZE+0xe6>
    2066:	2902      	cmp	r1, #2
    2068:	d005      	beq.n	2076 <STACK_SIZE+0x76>
    206a:	2903      	cmp	r1, #3
    206c:	d005      	beq.n	207a <STACK_SIZE+0x7a>
	return 0;
    206e:	2000      	movs	r0, #0
    2070:	e7ce      	b.n	2010 <STACK_SIZE+0x10>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2072:	482d      	ldr	r0, [pc, #180]	; (2128 <STACK_SIZE+0x128>)
    2074:	e7cc      	b.n	2010 <STACK_SIZE+0x10>
    2076:	482d      	ldr	r0, [pc, #180]	; (212c <STACK_SIZE+0x12c>)
    2078:	e7ca      	b.n	2010 <STACK_SIZE+0x10>
    207a:	482d      	ldr	r0, [pc, #180]	; (2130 <STACK_SIZE+0x130>)
    207c:	e7c8      	b.n	2010 <STACK_SIZE+0x10>
    207e:	2901      	cmp	r1, #1
    2080:	d007      	beq.n	2092 <STACK_SIZE+0x92>
    2082:	2900      	cmp	r1, #0
    2084:	d031      	beq.n	20ea <STACK_SIZE+0xea>
    2086:	2902      	cmp	r1, #2
    2088:	d005      	beq.n	2096 <STACK_SIZE+0x96>
    208a:	2903      	cmp	r1, #3
    208c:	d005      	beq.n	209a <STACK_SIZE+0x9a>
	return 0;
    208e:	2000      	movs	r0, #0
    2090:	e7be      	b.n	2010 <STACK_SIZE+0x10>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2092:	4828      	ldr	r0, [pc, #160]	; (2134 <STACK_SIZE+0x134>)
    2094:	e7bc      	b.n	2010 <STACK_SIZE+0x10>
    2096:	4828      	ldr	r0, [pc, #160]	; (2138 <STACK_SIZE+0x138>)
    2098:	e7ba      	b.n	2010 <STACK_SIZE+0x10>
    209a:	4828      	ldr	r0, [pc, #160]	; (213c <STACK_SIZE+0x13c>)
    209c:	e7b8      	b.n	2010 <STACK_SIZE+0x10>
    209e:	2901      	cmp	r1, #1
    20a0:	d007      	beq.n	20b2 <STACK_SIZE+0xb2>
    20a2:	2900      	cmp	r1, #0
    20a4:	d023      	beq.n	20ee <STACK_SIZE+0xee>
    20a6:	2902      	cmp	r1, #2
    20a8:	d005      	beq.n	20b6 <STACK_SIZE+0xb6>
    20aa:	2903      	cmp	r1, #3
    20ac:	d005      	beq.n	20ba <STACK_SIZE+0xba>
	return 0;
    20ae:	2000      	movs	r0, #0
    20b0:	e7ae      	b.n	2010 <STACK_SIZE+0x10>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    20b2:	4823      	ldr	r0, [pc, #140]	; (2140 <STACK_SIZE+0x140>)
    20b4:	e7ac      	b.n	2010 <STACK_SIZE+0x10>
    20b6:	4823      	ldr	r0, [pc, #140]	; (2144 <STACK_SIZE+0x144>)
    20b8:	e7aa      	b.n	2010 <STACK_SIZE+0x10>
    20ba:	4823      	ldr	r0, [pc, #140]	; (2148 <STACK_SIZE+0x148>)
    20bc:	e7a8      	b.n	2010 <STACK_SIZE+0x10>
    20be:	2901      	cmp	r1, #1
    20c0:	d007      	beq.n	20d2 <STACK_SIZE+0xd2>
    20c2:	2900      	cmp	r1, #0
    20c4:	d015      	beq.n	20f2 <STACK_SIZE+0xf2>
    20c6:	2902      	cmp	r1, #2
    20c8:	d005      	beq.n	20d6 <STACK_SIZE+0xd6>
    20ca:	2903      	cmp	r1, #3
    20cc:	d005      	beq.n	20da <STACK_SIZE+0xda>
	return 0;
    20ce:	2000      	movs	r0, #0
    20d0:	e79e      	b.n	2010 <STACK_SIZE+0x10>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    20d2:	481e      	ldr	r0, [pc, #120]	; (214c <STACK_SIZE+0x14c>)
    20d4:	e79c      	b.n	2010 <STACK_SIZE+0x10>
    20d6:	481e      	ldr	r0, [pc, #120]	; (2150 <STACK_SIZE+0x150>)
    20d8:	e79a      	b.n	2010 <STACK_SIZE+0x10>
    20da:	481e      	ldr	r0, [pc, #120]	; (2154 <STACK_SIZE+0x154>)
    20dc:	e798      	b.n	2010 <STACK_SIZE+0x10>
    20de:	481e      	ldr	r0, [pc, #120]	; (2158 <STACK_SIZE+0x158>)
    20e0:	e796      	b.n	2010 <STACK_SIZE+0x10>
    20e2:	2003      	movs	r0, #3
    20e4:	e794      	b.n	2010 <STACK_SIZE+0x10>
    20e6:	481d      	ldr	r0, [pc, #116]	; (215c <STACK_SIZE+0x15c>)
    20e8:	e792      	b.n	2010 <STACK_SIZE+0x10>
    20ea:	481d      	ldr	r0, [pc, #116]	; (2160 <STACK_SIZE+0x160>)
    20ec:	e790      	b.n	2010 <STACK_SIZE+0x10>
    20ee:	481d      	ldr	r0, [pc, #116]	; (2164 <STACK_SIZE+0x164>)
    20f0:	e78e      	b.n	2010 <STACK_SIZE+0x10>
    20f2:	481d      	ldr	r0, [pc, #116]	; (2168 <STACK_SIZE+0x168>)
    20f4:	e78c      	b.n	2010 <STACK_SIZE+0x10>
    20f6:	46c0      	nop			; (mov r8, r8)
    20f8:	42001000 	.word	0x42001000
    20fc:	42001800 	.word	0x42001800
    2100:	42001c00 	.word	0x42001c00
    2104:	42001400 	.word	0x42001400
    2108:	42000800 	.word	0x42000800
    210c:	42000c00 	.word	0x42000c00
    2110:	00050003 	.word	0x00050003
    2114:	00060003 	.word	0x00060003
    2118:	00070003 	.word	0x00070003
    211c:	00010003 	.word	0x00010003
    2120:	001e0003 	.word	0x001e0003
    2124:	001f0003 	.word	0x001f0003
    2128:	00090003 	.word	0x00090003
    212c:	000a0003 	.word	0x000a0003
    2130:	000b0003 	.word	0x000b0003
    2134:	00110003 	.word	0x00110003
    2138:	00120003 	.word	0x00120003
    213c:	00130003 	.word	0x00130003
    2140:	000d0003 	.word	0x000d0003
    2144:	000e0003 	.word	0x000e0003
    2148:	000f0003 	.word	0x000f0003
    214c:	00170003 	.word	0x00170003
    2150:	00180003 	.word	0x00180003
    2154:	00190003 	.word	0x00190003
    2158:	00040003 	.word	0x00040003
    215c:	00080003 	.word	0x00080003
    2160:	00100003 	.word	0x00100003
    2164:	000c0003 	.word	0x000c0003
    2168:	00160003 	.word	0x00160003

0000216c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    216c:	b530      	push	{r4, r5, lr}
    216e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    2170:	4b0b      	ldr	r3, [pc, #44]	; (21a0 <_sercom_get_sercom_inst_index+0x34>)
    2172:	466a      	mov	r2, sp
    2174:	cb32      	ldmia	r3!, {r1, r4, r5}
    2176:	c232      	stmia	r2!, {r1, r4, r5}
    2178:	cb32      	ldmia	r3!, {r1, r4, r5}
    217a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    217c:	9b00      	ldr	r3, [sp, #0]
    217e:	4283      	cmp	r3, r0
    2180:	d00b      	beq.n	219a <_sercom_get_sercom_inst_index+0x2e>
    2182:	2301      	movs	r3, #1
    2184:	009a      	lsls	r2, r3, #2
    2186:	4669      	mov	r1, sp
    2188:	5852      	ldr	r2, [r2, r1]
    218a:	4282      	cmp	r2, r0
    218c:	d006      	beq.n	219c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    218e:	3301      	adds	r3, #1
    2190:	2b06      	cmp	r3, #6
    2192:	d1f7      	bne.n	2184 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    2194:	2000      	movs	r0, #0
}
    2196:	b007      	add	sp, #28
    2198:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    219a:	2300      	movs	r3, #0
			return i;
    219c:	b2d8      	uxtb	r0, r3
    219e:	e7fa      	b.n	2196 <_sercom_get_sercom_inst_index+0x2a>
    21a0:	000033f0 	.word	0x000033f0

000021a4 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    21a4:	4770      	bx	lr
	...

000021a8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    21a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    21aa:	4b0a      	ldr	r3, [pc, #40]	; (21d4 <_sercom_set_handler+0x2c>)
    21ac:	781b      	ldrb	r3, [r3, #0]
    21ae:	2b00      	cmp	r3, #0
    21b0:	d10c      	bne.n	21cc <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    21b2:	4f09      	ldr	r7, [pc, #36]	; (21d8 <_sercom_set_handler+0x30>)
    21b4:	4e09      	ldr	r6, [pc, #36]	; (21dc <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    21b6:	4d0a      	ldr	r5, [pc, #40]	; (21e0 <_sercom_set_handler+0x38>)
    21b8:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    21ba:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    21bc:	195a      	adds	r2, r3, r5
    21be:	6014      	str	r4, [r2, #0]
    21c0:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    21c2:	2b18      	cmp	r3, #24
    21c4:	d1f9      	bne.n	21ba <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    21c6:	2201      	movs	r2, #1
    21c8:	4b02      	ldr	r3, [pc, #8]	; (21d4 <_sercom_set_handler+0x2c>)
    21ca:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    21cc:	0080      	lsls	r0, r0, #2
    21ce:	4b02      	ldr	r3, [pc, #8]	; (21d8 <_sercom_set_handler+0x30>)
    21d0:	50c1      	str	r1, [r0, r3]
}
    21d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21d4:	200001f2 	.word	0x200001f2
    21d8:	200001f4 	.word	0x200001f4
    21dc:	000021a5 	.word	0x000021a5
    21e0:	20004354 	.word	0x20004354

000021e4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    21e4:	b500      	push	{lr}
    21e6:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    21e8:	2307      	movs	r3, #7
    21ea:	466a      	mov	r2, sp
    21ec:	7013      	strb	r3, [r2, #0]
    21ee:	3301      	adds	r3, #1
    21f0:	7053      	strb	r3, [r2, #1]
    21f2:	3301      	adds	r3, #1
    21f4:	7093      	strb	r3, [r2, #2]
    21f6:	3301      	adds	r3, #1
    21f8:	70d3      	strb	r3, [r2, #3]
    21fa:	3301      	adds	r3, #1
    21fc:	7113      	strb	r3, [r2, #4]
    21fe:	3301      	adds	r3, #1
    2200:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    2202:	4b03      	ldr	r3, [pc, #12]	; (2210 <_sercom_get_interrupt_vector+0x2c>)
    2204:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    2206:	466b      	mov	r3, sp
    2208:	5618      	ldrsb	r0, [r3, r0]
}
    220a:	b003      	add	sp, #12
    220c:	bd00      	pop	{pc}
    220e:	46c0      	nop			; (mov r8, r8)
    2210:	0000216d 	.word	0x0000216d

00002214 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    2214:	b510      	push	{r4, lr}
    2216:	4b02      	ldr	r3, [pc, #8]	; (2220 <SERCOM0_Handler+0xc>)
    2218:	681b      	ldr	r3, [r3, #0]
    221a:	2000      	movs	r0, #0
    221c:	4798      	blx	r3
    221e:	bd10      	pop	{r4, pc}
    2220:	200001f4 	.word	0x200001f4

00002224 <SERCOM1_Handler>:
    2224:	b510      	push	{r4, lr}
    2226:	4b02      	ldr	r3, [pc, #8]	; (2230 <SERCOM1_Handler+0xc>)
    2228:	685b      	ldr	r3, [r3, #4]
    222a:	2001      	movs	r0, #1
    222c:	4798      	blx	r3
    222e:	bd10      	pop	{r4, pc}
    2230:	200001f4 	.word	0x200001f4

00002234 <SERCOM2_Handler>:
    2234:	b510      	push	{r4, lr}
    2236:	4b02      	ldr	r3, [pc, #8]	; (2240 <SERCOM2_Handler+0xc>)
    2238:	689b      	ldr	r3, [r3, #8]
    223a:	2002      	movs	r0, #2
    223c:	4798      	blx	r3
    223e:	bd10      	pop	{r4, pc}
    2240:	200001f4 	.word	0x200001f4

00002244 <SERCOM3_Handler>:
    2244:	b510      	push	{r4, lr}
    2246:	4b02      	ldr	r3, [pc, #8]	; (2250 <SERCOM3_Handler+0xc>)
    2248:	68db      	ldr	r3, [r3, #12]
    224a:	2003      	movs	r0, #3
    224c:	4798      	blx	r3
    224e:	bd10      	pop	{r4, pc}
    2250:	200001f4 	.word	0x200001f4

00002254 <SERCOM4_Handler>:
    2254:	b510      	push	{r4, lr}
    2256:	4b02      	ldr	r3, [pc, #8]	; (2260 <SERCOM4_Handler+0xc>)
    2258:	691b      	ldr	r3, [r3, #16]
    225a:	2004      	movs	r0, #4
    225c:	4798      	blx	r3
    225e:	bd10      	pop	{r4, pc}
    2260:	200001f4 	.word	0x200001f4

00002264 <SERCOM5_Handler>:
    2264:	b510      	push	{r4, lr}
    2266:	4b02      	ldr	r3, [pc, #8]	; (2270 <SERCOM5_Handler+0xc>)
    2268:	695b      	ldr	r3, [r3, #20]
    226a:	2005      	movs	r0, #5
    226c:	4798      	blx	r3
    226e:	bd10      	pop	{r4, pc}
    2270:	200001f4 	.word	0x200001f4

00002274 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    2274:	b5f0      	push	{r4, r5, r6, r7, lr}
    2276:	46de      	mov	lr, fp
    2278:	4657      	mov	r7, sl
    227a:	464e      	mov	r6, r9
    227c:	4645      	mov	r5, r8
    227e:	b5e0      	push	{r5, r6, r7, lr}
    2280:	b08d      	sub	sp, #52	; 0x34
    2282:	0005      	movs	r5, r0
    2284:	000c      	movs	r4, r1
    2286:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    2288:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    228a:	0008      	movs	r0, r1
    228c:	4b80      	ldr	r3, [pc, #512]	; (2490 <usart_init+0x21c>)
    228e:	4798      	blx	r3
    2290:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2292:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    2294:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2296:	07db      	lsls	r3, r3, #31
    2298:	d506      	bpl.n	22a8 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    229a:	b00d      	add	sp, #52	; 0x34
    229c:	bc3c      	pop	{r2, r3, r4, r5}
    229e:	4690      	mov	r8, r2
    22a0:	4699      	mov	r9, r3
    22a2:	46a2      	mov	sl, r4
    22a4:	46ab      	mov	fp, r5
    22a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    22a8:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    22aa:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    22ac:	079b      	lsls	r3, r3, #30
    22ae:	d4f4      	bmi.n	229a <usart_init+0x26>
			PM->APBCMASK.reg |= mask;
    22b0:	4978      	ldr	r1, [pc, #480]	; (2494 <usart_init+0x220>)
    22b2:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    22b4:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    22b6:	2301      	movs	r3, #1
    22b8:	40bb      	lsls	r3, r7
    22ba:	4303      	orrs	r3, r0
    22bc:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    22be:	a90b      	add	r1, sp, #44	; 0x2c
    22c0:	7f73      	ldrb	r3, [r6, #29]
    22c2:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    22c4:	320d      	adds	r2, #13
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    22c6:	b2d7      	uxtb	r7, r2
    22c8:	0038      	movs	r0, r7
    22ca:	4b73      	ldr	r3, [pc, #460]	; (2498 <usart_init+0x224>)
    22cc:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    22ce:	0038      	movs	r0, r7
    22d0:	4b72      	ldr	r3, [pc, #456]	; (249c <usart_init+0x228>)
    22d2:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    22d4:	7f70      	ldrb	r0, [r6, #29]
    22d6:	2100      	movs	r1, #0
    22d8:	4b71      	ldr	r3, [pc, #452]	; (24a0 <usart_init+0x22c>)
    22da:	4798      	blx	r3
	module->character_size = config->character_size;
    22dc:	7af3      	ldrb	r3, [r6, #11]
    22de:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    22e0:	7d33      	ldrb	r3, [r6, #20]
    22e2:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    22e4:	7d73      	ldrb	r3, [r6, #21]
    22e6:	71eb      	strb	r3, [r5, #7]
	SercomUsart *const usart_hw = &(module->hw->USART);
    22e8:	682b      	ldr	r3, [r5, #0]
    22ea:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    22ec:	0018      	movs	r0, r3
    22ee:	4b68      	ldr	r3, [pc, #416]	; (2490 <usart_init+0x21c>)
    22f0:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    22f2:	300d      	adds	r0, #13
	uint16_t baud  = 0;
    22f4:	2200      	movs	r2, #0
    22f6:	230e      	movs	r3, #14
    22f8:	a902      	add	r1, sp, #8
    22fa:	468c      	mov	ip, r1
    22fc:	4463      	add	r3, ip
    22fe:	801a      	strh	r2, [r3, #0]
	ctrla = (uint32_t)config->data_order |
    2300:	6833      	ldr	r3, [r6, #0]
    2302:	9303      	str	r3, [sp, #12]
		(uint32_t)config->mux_setting |
    2304:	68f3      	ldr	r3, [r6, #12]
    2306:	469a      	mov	sl, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2308:	7db3      	ldrb	r3, [r6, #22]
    230a:	469b      	mov	fp, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    230c:	6873      	ldr	r3, [r6, #4]
    230e:	4699      	mov	r9, r3
	switch (transfer_mode)
    2310:	2b00      	cmp	r3, #0
    2312:	d014      	beq.n	233e <usart_init+0xca>
    2314:	2380      	movs	r3, #128	; 0x80
    2316:	055b      	lsls	r3, r3, #21
    2318:	4599      	cmp	r9, r3
    231a:	d130      	bne.n	237e <usart_init+0x10a>
			if (!config->use_external_clock) {
    231c:	7df3      	ldrb	r3, [r6, #23]
    231e:	2b00      	cmp	r3, #0
    2320:	d131      	bne.n	2386 <usart_init+0x112>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    2322:	6933      	ldr	r3, [r6, #16]
    2324:	001f      	movs	r7, r3
    2326:	b2c0      	uxtb	r0, r0
    2328:	4b5e      	ldr	r3, [pc, #376]	; (24a4 <usart_init+0x230>)
    232a:	4798      	blx	r3
    232c:	0001      	movs	r1, r0
    232e:	220e      	movs	r2, #14
    2330:	ab02      	add	r3, sp, #8
    2332:	469c      	mov	ip, r3
    2334:	4462      	add	r2, ip
    2336:	0038      	movs	r0, r7
    2338:	4b5b      	ldr	r3, [pc, #364]	; (24a8 <usart_init+0x234>)
    233a:	4798      	blx	r3
    233c:	e020      	b.n	2380 <usart_init+0x10c>
			if (config->use_external_clock) {
    233e:	7df3      	ldrb	r3, [r6, #23]
    2340:	2b00      	cmp	r3, #0
    2342:	d00b      	beq.n	235c <usart_init+0xe8>
				status_code =
    2344:	2310      	movs	r3, #16
    2346:	9300      	str	r3, [sp, #0]
    2348:	2300      	movs	r3, #0
    234a:	220e      	movs	r2, #14
    234c:	a902      	add	r1, sp, #8
    234e:	468c      	mov	ip, r1
    2350:	4462      	add	r2, ip
    2352:	69b1      	ldr	r1, [r6, #24]
    2354:	6930      	ldr	r0, [r6, #16]
    2356:	4f55      	ldr	r7, [pc, #340]	; (24ac <usart_init+0x238>)
    2358:	47b8      	blx	r7
    235a:	e011      	b.n	2380 <usart_init+0x10c>
						_sercom_get_async_baud_val(config->baudrate,
    235c:	6933      	ldr	r3, [r6, #16]
    235e:	001f      	movs	r7, r3
    2360:	b2c0      	uxtb	r0, r0
    2362:	4b50      	ldr	r3, [pc, #320]	; (24a4 <usart_init+0x230>)
    2364:	4798      	blx	r3
    2366:	0001      	movs	r1, r0
				status_code =
    2368:	2310      	movs	r3, #16
    236a:	9300      	str	r3, [sp, #0]
    236c:	2300      	movs	r3, #0
    236e:	220e      	movs	r2, #14
    2370:	a802      	add	r0, sp, #8
    2372:	4684      	mov	ip, r0
    2374:	4462      	add	r2, ip
    2376:	0038      	movs	r0, r7
    2378:	4f4c      	ldr	r7, [pc, #304]	; (24ac <usart_init+0x238>)
    237a:	47b8      	blx	r7
    237c:	e000      	b.n	2380 <usart_init+0x10c>
	enum status_code status_code = STATUS_OK;
    237e:	2000      	movs	r0, #0
	if (status_code != STATUS_OK) {
    2380:	2800      	cmp	r0, #0
    2382:	d000      	beq.n	2386 <usart_init+0x112>
    2384:	e789      	b.n	229a <usart_init+0x26>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2386:	682a      	ldr	r2, [r5, #0]
    2388:	9f03      	ldr	r7, [sp, #12]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    238a:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
    238c:	b21b      	sxth	r3, r3
    238e:	2b00      	cmp	r3, #0
    2390:	dbfb      	blt.n	238a <usart_init+0x116>
	usart_hw->BAUD.reg = baud;
    2392:	230e      	movs	r3, #14
    2394:	aa02      	add	r2, sp, #8
    2396:	4694      	mov	ip, r2
    2398:	4463      	add	r3, ip
    239a:	881b      	ldrh	r3, [r3, #0]
    239c:	4642      	mov	r2, r8
    239e:	8153      	strh	r3, [r2, #10]
	ctrla |= transfer_mode;
    23a0:	4653      	mov	r3, sl
    23a2:	431f      	orrs	r7, r3
    23a4:	464b      	mov	r3, r9
    23a6:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    23a8:	465b      	mov	r3, fp
    23aa:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    23ac:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    23ae:	7df3      	ldrb	r3, [r6, #23]
    23b0:	2b00      	cmp	r3, #0
    23b2:	d101      	bne.n	23b8 <usart_init+0x144>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    23b4:	3304      	adds	r3, #4
    23b6:	431f      	orrs	r7, r3
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    23b8:	7d31      	ldrb	r1, [r6, #20]
    23ba:	0449      	lsls	r1, r1, #17
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    23bc:	7d73      	ldrb	r3, [r6, #21]
    23be:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    23c0:	430b      	orrs	r3, r1
	ctrlb |= (uint32_t)config->character_size;
    23c2:	7ab1      	ldrb	r1, [r6, #10]
    23c4:	7af2      	ldrb	r2, [r6, #11]
    23c6:	4311      	orrs	r1, r2
    23c8:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    23ca:	8933      	ldrh	r3, [r6, #8]
    23cc:	2bff      	cmp	r3, #255	; 0xff
    23ce:	d003      	beq.n	23d8 <usart_init+0x164>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    23d0:	2280      	movs	r2, #128	; 0x80
    23d2:	0452      	lsls	r2, r2, #17
    23d4:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    23d6:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    23d8:	7f33      	ldrb	r3, [r6, #28]
    23da:	2b00      	cmp	r3, #0
    23dc:	d103      	bne.n	23e6 <usart_init+0x172>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    23de:	4b34      	ldr	r3, [pc, #208]	; (24b0 <usart_init+0x23c>)
    23e0:	789b      	ldrb	r3, [r3, #2]
    23e2:	079b      	lsls	r3, r3, #30
    23e4:	d501      	bpl.n	23ea <usart_init+0x176>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    23e6:	2380      	movs	r3, #128	; 0x80
    23e8:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    23ea:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    23ec:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
    23ee:	b21b      	sxth	r3, r3
    23f0:	2b00      	cmp	r3, #0
    23f2:	dbfb      	blt.n	23ec <usart_init+0x178>
	usart_hw->CTRLB.reg = ctrlb;
    23f4:	4643      	mov	r3, r8
    23f6:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    23f8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    23fa:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
    23fc:	b21b      	sxth	r3, r3
    23fe:	2b00      	cmp	r3, #0
    2400:	dbfb      	blt.n	23fa <usart_init+0x186>
	usart_hw->CTRLA.reg = ctrla;
    2402:	4643      	mov	r3, r8
    2404:	601f      	str	r7, [r3, #0]
    2406:	ab0a      	add	r3, sp, #40	; 0x28
    2408:	2280      	movs	r2, #128	; 0x80
    240a:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    240c:	2200      	movs	r2, #0
    240e:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    2410:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2412:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    2414:	6a33      	ldr	r3, [r6, #32]
    2416:	9306      	str	r3, [sp, #24]
    2418:	6a73      	ldr	r3, [r6, #36]	; 0x24
    241a:	9307      	str	r3, [sp, #28]
    241c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    241e:	9308      	str	r3, [sp, #32]
    2420:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    2422:	9303      	str	r3, [sp, #12]
    2424:	9309      	str	r3, [sp, #36]	; 0x24
    2426:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2428:	ae06      	add	r6, sp, #24
    242a:	e006      	b.n	243a <usart_init+0x1c6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    242c:	0020      	movs	r0, r4
    242e:	4b21      	ldr	r3, [pc, #132]	; (24b4 <usart_init+0x240>)
    2430:	4798      	blx	r3
    2432:	e007      	b.n	2444 <usart_init+0x1d0>
    2434:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    2436:	2f04      	cmp	r7, #4
    2438:	d00d      	beq.n	2456 <usart_init+0x1e2>
    243a:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    243c:	00bb      	lsls	r3, r7, #2
    243e:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    2440:	2800      	cmp	r0, #0
    2442:	d0f3      	beq.n	242c <usart_init+0x1b8>
		if (current_pinmux != PINMUX_UNUSED) {
    2444:	1c43      	adds	r3, r0, #1
    2446:	d0f5      	beq.n	2434 <usart_init+0x1c0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2448:	a90a      	add	r1, sp, #40	; 0x28
    244a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    244c:	0c00      	lsrs	r0, r0, #16
    244e:	b2c0      	uxtb	r0, r0
    2450:	4b19      	ldr	r3, [pc, #100]	; (24b8 <usart_init+0x244>)
    2452:	4798      	blx	r3
    2454:	e7ee      	b.n	2434 <usart_init+0x1c0>
		module->callback[i]            = NULL;
    2456:	2300      	movs	r3, #0
    2458:	60ab      	str	r3, [r5, #8]
    245a:	60eb      	str	r3, [r5, #12]
    245c:	612b      	str	r3, [r5, #16]
	module->tx_buffer_ptr              = NULL;
    245e:	61ab      	str	r3, [r5, #24]
	module->rx_buffer_ptr              = NULL;
    2460:	616b      	str	r3, [r5, #20]
	module->remaining_tx_buffer_length = 0x0000;
    2462:	2200      	movs	r2, #0
    2464:	83eb      	strh	r3, [r5, #30]
	module->remaining_rx_buffer_length = 0x0000;
    2466:	83ab      	strh	r3, [r5, #28]
	module->callback_reg_mask          = 0x00;
    2468:	3320      	adds	r3, #32
    246a:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    246c:	3301      	adds	r3, #1
    246e:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    2470:	3301      	adds	r3, #1
    2472:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    2474:	3301      	adds	r3, #1
    2476:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2478:	6828      	ldr	r0, [r5, #0]
    247a:	4b05      	ldr	r3, [pc, #20]	; (2490 <usart_init+0x21c>)
    247c:	4798      	blx	r3
    247e:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    2480:	490e      	ldr	r1, [pc, #56]	; (24bc <usart_init+0x248>)
    2482:	4b0f      	ldr	r3, [pc, #60]	; (24c0 <usart_init+0x24c>)
    2484:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2486:	00a4      	lsls	r4, r4, #2
    2488:	4b0e      	ldr	r3, [pc, #56]	; (24c4 <usart_init+0x250>)
    248a:	50e5      	str	r5, [r4, r3]
	return status_code;
    248c:	2000      	movs	r0, #0
    248e:	e704      	b.n	229a <usart_init+0x26>
    2490:	0000216d 	.word	0x0000216d
    2494:	40000400 	.word	0x40000400
    2498:	00002ae5 	.word	0x00002ae5
    249c:	00002a59 	.word	0x00002a59
    24a0:	00001fa9 	.word	0x00001fa9
    24a4:	00002b31 	.word	0x00002b31
    24a8:	00001eeb 	.word	0x00001eeb
    24ac:	00001f15 	.word	0x00001f15
    24b0:	41002000 	.word	0x41002000
    24b4:	00001ff5 	.word	0x00001ff5
    24b8:	00002c0d 	.word	0x00002c0d
    24bc:	0000256d 	.word	0x0000256d
    24c0:	000021a9 	.word	0x000021a9
    24c4:	20004354 	.word	0x20004354

000024c8 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    24c8:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    24ca:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    24cc:	2a00      	cmp	r2, #0
    24ce:	d101      	bne.n	24d4 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    24d0:	0018      	movs	r0, r3
    24d2:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    24d4:	8bc2      	ldrh	r2, [r0, #30]
    24d6:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    24d8:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    24da:	2a00      	cmp	r2, #0
    24dc:	d1f8      	bne.n	24d0 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    24de:	6802      	ldr	r2, [r0, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    24e0:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
    24e2:	b21b      	sxth	r3, r3
    24e4:	2b00      	cmp	r3, #0
    24e6:	dbfb      	blt.n	24e0 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    24e8:	8311      	strh	r1, [r2, #24]
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    24ea:	2102      	movs	r1, #2
    24ec:	7b93      	ldrb	r3, [r2, #14]
    24ee:	420b      	tst	r3, r1
    24f0:	d0fc      	beq.n	24ec <usart_write_wait+0x24>
	return STATUS_OK;
    24f2:	2300      	movs	r3, #0
    24f4:	e7ec      	b.n	24d0 <usart_write_wait+0x8>
	...

000024f8 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    24f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    24fa:	0006      	movs	r6, r0
    24fc:	000c      	movs	r4, r1
    24fe:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2500:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    2502:	4b0a      	ldr	r3, [pc, #40]	; (252c <_usart_read_buffer+0x34>)
    2504:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    2506:	8bb3      	ldrh	r3, [r6, #28]
    2508:	b29b      	uxth	r3, r3
    250a:	2b00      	cmp	r3, #0
    250c:	d003      	beq.n	2516 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    250e:	4b08      	ldr	r3, [pc, #32]	; (2530 <_usart_read_buffer+0x38>)
    2510:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    2512:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    2514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    2516:	83b5      	strh	r5, [r6, #28]
    2518:	4b05      	ldr	r3, [pc, #20]	; (2530 <_usart_read_buffer+0x38>)
    251a:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    251c:	6174      	str	r4, [r6, #20]
	module->rx_status                  = STATUS_BUSY;
    251e:	2205      	movs	r2, #5
    2520:	2322      	movs	r3, #34	; 0x22
    2522:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    2524:	3b1e      	subs	r3, #30
    2526:	737b      	strb	r3, [r7, #13]
	return STATUS_OK;
    2528:	2000      	movs	r0, #0
    252a:	e7f3      	b.n	2514 <_usart_read_buffer+0x1c>
    252c:	00001cc1 	.word	0x00001cc1
    2530:	00001d01 	.word	0x00001d01

00002534 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2534:	1c93      	adds	r3, r2, #2
    2536:	009b      	lsls	r3, r3, #2
    2538:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    253a:	2120      	movs	r1, #32
    253c:	2301      	movs	r3, #1
    253e:	4093      	lsls	r3, r2
    2540:	001a      	movs	r2, r3
    2542:	5c43      	ldrb	r3, [r0, r1]
    2544:	4313      	orrs	r3, r2
    2546:	5443      	strb	r3, [r0, r1]
}
    2548:	4770      	bx	lr
	...

0000254c <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    254c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    254e:	2317      	movs	r3, #23
	if (length == 0) {
    2550:	2a00      	cmp	r2, #0
    2552:	d101      	bne.n	2558 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    2554:	0018      	movs	r0, r3
    2556:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    2558:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    255a:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    255c:	2c00      	cmp	r4, #0
    255e:	d0f9      	beq.n	2554 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    2560:	4b01      	ldr	r3, [pc, #4]	; (2568 <usart_read_buffer_job+0x1c>)
    2562:	4798      	blx	r3
    2564:	0003      	movs	r3, r0
    2566:	e7f5      	b.n	2554 <usart_read_buffer_job+0x8>
    2568:	000024f9 	.word	0x000024f9

0000256c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    256c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    256e:	0080      	lsls	r0, r0, #2
    2570:	4b46      	ldr	r3, [pc, #280]	; (268c <_usart_interrupt_handler+0x120>)
    2572:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2574:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    2576:	8a23      	ldrh	r3, [r4, #16]
	while (usart_is_syncing(module)) {
    2578:	b21b      	sxth	r3, r3
    257a:	2b00      	cmp	r3, #0
    257c:	dbfb      	blt.n	2576 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    257e:	7ba3      	ldrb	r3, [r4, #14]
	interrupt_status &= usart_hw->INTENSET.reg;
    2580:	7b66      	ldrb	r6, [r4, #13]
    2582:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    2584:	2320      	movs	r3, #32
    2586:	5ceb      	ldrb	r3, [r5, r3]
    2588:	2221      	movs	r2, #33	; 0x21
    258a:	5caf      	ldrb	r7, [r5, r2]
    258c:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    258e:	07f3      	lsls	r3, r6, #31
    2590:	d522      	bpl.n	25d8 <_usart_interrupt_handler+0x6c>
		if (module->remaining_tx_buffer_length) {
    2592:	8beb      	ldrh	r3, [r5, #30]
    2594:	b29b      	uxth	r3, r3
    2596:	2b00      	cmp	r3, #0
    2598:	d01c      	beq.n	25d4 <_usart_interrupt_handler+0x68>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    259a:	69aa      	ldr	r2, [r5, #24]
    259c:	7813      	ldrb	r3, [r2, #0]
    259e:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    25a0:	1c51      	adds	r1, r2, #1
    25a2:	61a9      	str	r1, [r5, #24]

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    25a4:	7969      	ldrb	r1, [r5, #5]
    25a6:	2901      	cmp	r1, #1
    25a8:	d00e      	beq.n	25c8 <_usart_interrupt_handler+0x5c>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    25aa:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    25ac:	05db      	lsls	r3, r3, #23
    25ae:	0ddb      	lsrs	r3, r3, #23
    25b0:	8323      	strh	r3, [r4, #24]

			if (--(module->remaining_tx_buffer_length) == 0) {
    25b2:	8beb      	ldrh	r3, [r5, #30]
    25b4:	3b01      	subs	r3, #1
    25b6:	b29b      	uxth	r3, r3
    25b8:	83eb      	strh	r3, [r5, #30]
    25ba:	2b00      	cmp	r3, #0
    25bc:	d10c      	bne.n	25d8 <_usart_interrupt_handler+0x6c>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    25be:	3301      	adds	r3, #1
    25c0:	7323      	strb	r3, [r4, #12]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    25c2:	3301      	adds	r3, #1
    25c4:	7363      	strb	r3, [r4, #13]
    25c6:	e007      	b.n	25d8 <_usart_interrupt_handler+0x6c>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    25c8:	7851      	ldrb	r1, [r2, #1]
    25ca:	0209      	lsls	r1, r1, #8
    25cc:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    25ce:	3202      	adds	r2, #2
    25d0:	61aa      	str	r2, [r5, #24]
    25d2:	e7eb      	b.n	25ac <_usart_interrupt_handler+0x40>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    25d4:	2301      	movs	r3, #1
    25d6:	7323      	strb	r3, [r4, #12]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    25d8:	07b3      	lsls	r3, r6, #30
    25da:	d506      	bpl.n	25ea <_usart_interrupt_handler+0x7e>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    25dc:	2302      	movs	r3, #2
    25de:	7323      	strb	r3, [r4, #12]
		module->tx_status = STATUS_OK;
    25e0:	2200      	movs	r2, #0
    25e2:	3321      	adds	r3, #33	; 0x21
    25e4:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    25e6:	07fb      	lsls	r3, r7, #31
    25e8:	d416      	bmi.n	2618 <_usart_interrupt_handler+0xac>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    25ea:	0773      	lsls	r3, r6, #29
    25ec:	d54d      	bpl.n	268a <_usart_interrupt_handler+0x11e>

		if (module->remaining_rx_buffer_length) {
    25ee:	8bab      	ldrh	r3, [r5, #28]
    25f0:	b29b      	uxth	r3, r3
    25f2:	2b00      	cmp	r3, #0
    25f4:	d047      	beq.n	2686 <_usart_interrupt_handler+0x11a>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    25f6:	8a23      	ldrh	r3, [r4, #16]
    25f8:	b2db      	uxtb	r3, r3
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    25fa:	075a      	lsls	r2, r3, #29
    25fc:	d020      	beq.n	2640 <_usart_interrupt_handler+0xd4>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    25fe:	079a      	lsls	r2, r3, #30
    2600:	d50e      	bpl.n	2620 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2602:	221a      	movs	r2, #26
    2604:	2322      	movs	r3, #34	; 0x22
    2606:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2608:	3b20      	subs	r3, #32
    260a:	8223      	strh	r3, [r4, #16]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    260c:	077b      	lsls	r3, r7, #29
    260e:	d53c      	bpl.n	268a <_usart_interrupt_handler+0x11e>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2610:	692b      	ldr	r3, [r5, #16]
    2612:	0028      	movs	r0, r5
    2614:	4798      	blx	r3
    2616:	e038      	b.n	268a <_usart_interrupt_handler+0x11e>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2618:	0028      	movs	r0, r5
    261a:	68ab      	ldr	r3, [r5, #8]
    261c:	4798      	blx	r3
    261e:	e7e4      	b.n	25ea <_usart_interrupt_handler+0x7e>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2620:	075a      	lsls	r2, r3, #29
    2622:	d505      	bpl.n	2630 <_usart_interrupt_handler+0xc4>
					module->rx_status = STATUS_ERR_OVERFLOW;
    2624:	221e      	movs	r2, #30
    2626:	2322      	movs	r3, #34	; 0x22
    2628:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    262a:	3b1e      	subs	r3, #30
    262c:	8223      	strh	r3, [r4, #16]
    262e:	e7ed      	b.n	260c <_usart_interrupt_handler+0xa0>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2630:	07db      	lsls	r3, r3, #31
    2632:	d5eb      	bpl.n	260c <_usart_interrupt_handler+0xa0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2634:	2213      	movs	r2, #19
    2636:	2322      	movs	r3, #34	; 0x22
    2638:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    263a:	3b21      	subs	r3, #33	; 0x21
    263c:	8223      	strh	r3, [r4, #16]
    263e:	e7e5      	b.n	260c <_usart_interrupt_handler+0xa0>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2640:	8b23      	ldrh	r3, [r4, #24]
    2642:	05db      	lsls	r3, r3, #23
    2644:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2646:	b2da      	uxtb	r2, r3
    2648:	6969      	ldr	r1, [r5, #20]
    264a:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    264c:	696a      	ldr	r2, [r5, #20]
    264e:	1c51      	adds	r1, r2, #1
    2650:	6169      	str	r1, [r5, #20]

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2652:	7969      	ldrb	r1, [r5, #5]
    2654:	2901      	cmp	r1, #1
    2656:	d010      	beq.n	267a <_usart_interrupt_handler+0x10e>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2658:	8bab      	ldrh	r3, [r5, #28]
    265a:	3b01      	subs	r3, #1
    265c:	b29b      	uxth	r3, r3
    265e:	83ab      	strh	r3, [r5, #28]
    2660:	2b00      	cmp	r3, #0
    2662:	d112      	bne.n	268a <_usart_interrupt_handler+0x11e>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2664:	3304      	adds	r3, #4
    2666:	7323      	strb	r3, [r4, #12]
					module->rx_status = STATUS_OK;
    2668:	2200      	movs	r2, #0
    266a:	331e      	adds	r3, #30
    266c:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    266e:	07bb      	lsls	r3, r7, #30
    2670:	d50b      	bpl.n	268a <_usart_interrupt_handler+0x11e>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2672:	68eb      	ldr	r3, [r5, #12]
    2674:	0028      	movs	r0, r5
    2676:	4798      	blx	r3
    2678:	e007      	b.n	268a <_usart_interrupt_handler+0x11e>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    267a:	0a1b      	lsrs	r3, r3, #8
    267c:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    267e:	696b      	ldr	r3, [r5, #20]
    2680:	3301      	adds	r3, #1
    2682:	616b      	str	r3, [r5, #20]
    2684:	e7e8      	b.n	2658 <_usart_interrupt_handler+0xec>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2686:	2304      	movs	r3, #4
    2688:	7323      	strb	r3, [r4, #12]
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    268a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    268c:	20004354 	.word	0x20004354

00002690 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2690:	b510      	push	{r4, lr}
	switch (clock_source) {
    2692:	2807      	cmp	r0, #7
    2694:	d803      	bhi.n	269e <system_clock_source_get_hz+0xe>
    2696:	0080      	lsls	r0, r0, #2
    2698:	4b16      	ldr	r3, [pc, #88]	; (26f4 <system_clock_source_get_hz+0x64>)
    269a:	581b      	ldr	r3, [r3, r0]
    269c:	469f      	mov	pc, r3
		}

		return 48000000UL;

	default:
		return 0;
    269e:	2000      	movs	r0, #0
    26a0:	e027      	b.n	26f2 <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc.frequency;
    26a2:	4b15      	ldr	r3, [pc, #84]	; (26f8 <system_clock_source_get_hz+0x68>)
    26a4:	68d8      	ldr	r0, [r3, #12]
    26a6:	e024      	b.n	26f2 <system_clock_source_get_hz+0x62>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    26a8:	4b14      	ldr	r3, [pc, #80]	; (26fc <system_clock_source_get_hz+0x6c>)
    26aa:	6a1b      	ldr	r3, [r3, #32]
    26ac:	059b      	lsls	r3, r3, #22
    26ae:	0f9b      	lsrs	r3, r3, #30
    26b0:	4813      	ldr	r0, [pc, #76]	; (2700 <system_clock_source_get_hz+0x70>)
    26b2:	40d8      	lsrs	r0, r3
    26b4:	e01d      	b.n	26f2 <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc32k.frequency;
    26b6:	4b10      	ldr	r3, [pc, #64]	; (26f8 <system_clock_source_get_hz+0x68>)
    26b8:	6918      	ldr	r0, [r3, #16]
    26ba:	e01a      	b.n	26f2 <system_clock_source_get_hz+0x62>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    26bc:	4b0e      	ldr	r3, [pc, #56]	; (26f8 <system_clock_source_get_hz+0x68>)
    26be:	681b      	ldr	r3, [r3, #0]
			return 0;
    26c0:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    26c2:	079b      	lsls	r3, r3, #30
    26c4:	d515      	bpl.n	26f2 <system_clock_source_get_hz+0x62>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    26c6:	490d      	ldr	r1, [pc, #52]	; (26fc <system_clock_source_get_hz+0x6c>)
    26c8:	2210      	movs	r2, #16
    26ca:	68cb      	ldr	r3, [r1, #12]
    26cc:	421a      	tst	r2, r3
    26ce:	d0fc      	beq.n	26ca <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    26d0:	4b09      	ldr	r3, [pc, #36]	; (26f8 <system_clock_source_get_hz+0x68>)
    26d2:	681b      	ldr	r3, [r3, #0]
    26d4:	075b      	lsls	r3, r3, #29
    26d6:	d401      	bmi.n	26dc <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    26d8:	480a      	ldr	r0, [pc, #40]	; (2704 <system_clock_source_get_hz+0x74>)
    26da:	e00a      	b.n	26f2 <system_clock_source_get_hz+0x62>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    26dc:	2000      	movs	r0, #0
    26de:	4b0a      	ldr	r3, [pc, #40]	; (2708 <system_clock_source_get_hz+0x78>)
    26e0:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    26e2:	4b05      	ldr	r3, [pc, #20]	; (26f8 <system_clock_source_get_hz+0x68>)
    26e4:	689b      	ldr	r3, [r3, #8]
    26e6:	041b      	lsls	r3, r3, #16
    26e8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    26ea:	4358      	muls	r0, r3
    26ec:	e001      	b.n	26f2 <system_clock_source_get_hz+0x62>
		return 32768UL;
    26ee:	2080      	movs	r0, #128	; 0x80
    26f0:	0200      	lsls	r0, r0, #8
	}
}
    26f2:	bd10      	pop	{r4, pc}
    26f4:	00003408 	.word	0x00003408
    26f8:	2000020c 	.word	0x2000020c
    26fc:	40000800 	.word	0x40000800
    2700:	007a1200 	.word	0x007a1200
    2704:	02dc6c00 	.word	0x02dc6c00
    2708:	00002b31 	.word	0x00002b31

0000270c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    270c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    270e:	490c      	ldr	r1, [pc, #48]	; (2740 <system_clock_source_osc8m_set_config+0x34>)
    2710:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2712:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2714:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2716:	7840      	ldrb	r0, [r0, #1]
    2718:	2201      	movs	r2, #1
    271a:	4010      	ands	r0, r2
    271c:	0180      	lsls	r0, r0, #6
    271e:	2640      	movs	r6, #64	; 0x40
    2720:	43b3      	bics	r3, r6
    2722:	4303      	orrs	r3, r0
    2724:	402a      	ands	r2, r5
    2726:	01d2      	lsls	r2, r2, #7
    2728:	2080      	movs	r0, #128	; 0x80
    272a:	4383      	bics	r3, r0
    272c:	4313      	orrs	r3, r2
    272e:	2203      	movs	r2, #3
    2730:	4022      	ands	r2, r4
    2732:	0212      	lsls	r2, r2, #8
    2734:	4803      	ldr	r0, [pc, #12]	; (2744 <system_clock_source_osc8m_set_config+0x38>)
    2736:	4003      	ands	r3, r0
    2738:	4313      	orrs	r3, r2
    273a:	620b      	str	r3, [r1, #32]
}
    273c:	bd70      	pop	{r4, r5, r6, pc}
    273e:	46c0      	nop			; (mov r8, r8)
    2740:	40000800 	.word	0x40000800
    2744:	fffffcff 	.word	0xfffffcff

00002748 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2748:	2807      	cmp	r0, #7
    274a:	d803      	bhi.n	2754 <system_clock_source_enable+0xc>
    274c:	0080      	lsls	r0, r0, #2
    274e:	4b1e      	ldr	r3, [pc, #120]	; (27c8 <system_clock_source_enable+0x80>)
    2750:	581b      	ldr	r3, [r3, r0]
    2752:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2754:	2017      	movs	r0, #23
    2756:	e036      	b.n	27c6 <system_clock_source_enable+0x7e>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2758:	4a1c      	ldr	r2, [pc, #112]	; (27cc <system_clock_source_enable+0x84>)
    275a:	6a13      	ldr	r3, [r2, #32]
    275c:	2102      	movs	r1, #2
    275e:	430b      	orrs	r3, r1
    2760:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    2762:	2000      	movs	r0, #0
    2764:	e02f      	b.n	27c6 <system_clock_source_enable+0x7e>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2766:	4a19      	ldr	r2, [pc, #100]	; (27cc <system_clock_source_enable+0x84>)
    2768:	6993      	ldr	r3, [r2, #24]
    276a:	2102      	movs	r1, #2
    276c:	430b      	orrs	r3, r1
    276e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2770:	2000      	movs	r0, #0
		break;
    2772:	e028      	b.n	27c6 <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2774:	4a15      	ldr	r2, [pc, #84]	; (27cc <system_clock_source_enable+0x84>)
    2776:	8a13      	ldrh	r3, [r2, #16]
    2778:	2102      	movs	r1, #2
    277a:	430b      	orrs	r3, r1
    277c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    277e:	2000      	movs	r0, #0
		break;
    2780:	e021      	b.n	27c6 <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2782:	4a12      	ldr	r2, [pc, #72]	; (27cc <system_clock_source_enable+0x84>)
    2784:	8a93      	ldrh	r3, [r2, #20]
    2786:	2102      	movs	r1, #2
    2788:	430b      	orrs	r3, r1
    278a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    278c:	2000      	movs	r0, #0
		break;
    278e:	e01a      	b.n	27c6 <system_clock_source_enable+0x7e>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2790:	4b0f      	ldr	r3, [pc, #60]	; (27d0 <system_clock_source_enable+0x88>)
    2792:	681a      	ldr	r2, [r3, #0]
    2794:	2102      	movs	r1, #2
    2796:	430a      	orrs	r2, r1
    2798:	601a      	str	r2, [r3, #0]
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    279a:	681b      	ldr	r3, [r3, #0]
    279c:	4a0d      	ldr	r2, [pc, #52]	; (27d4 <system_clock_source_enable+0x8c>)
    279e:	4013      	ands	r3, r2
    27a0:	4a0a      	ldr	r2, [pc, #40]	; (27cc <system_clock_source_enable+0x84>)
    27a2:	8493      	strh	r3, [r2, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    27a4:	0011      	movs	r1, r2
    27a6:	2210      	movs	r2, #16
    27a8:	68cb      	ldr	r3, [r1, #12]
    27aa:	421a      	tst	r2, r3
    27ac:	d0fc      	beq.n	27a8 <system_clock_source_enable+0x60>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    27ae:	4a08      	ldr	r2, [pc, #32]	; (27d0 <system_clock_source_enable+0x88>)
    27b0:	6891      	ldr	r1, [r2, #8]
    27b2:	4b06      	ldr	r3, [pc, #24]	; (27cc <system_clock_source_enable+0x84>)
    27b4:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    27b6:	6851      	ldr	r1, [r2, #4]
    27b8:	6299      	str	r1, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    27ba:	6812      	ldr	r2, [r2, #0]
    27bc:	b292      	uxth	r2, r2
    27be:	849a      	strh	r2, [r3, #36]	; 0x24
	return STATUS_OK;
    27c0:	2000      	movs	r0, #0
    27c2:	e000      	b.n	27c6 <system_clock_source_enable+0x7e>
		return STATUS_OK;
    27c4:	2000      	movs	r0, #0
}
    27c6:	4770      	bx	lr
    27c8:	00003428 	.word	0x00003428
    27cc:	40000800 	.word	0x40000800
    27d0:	2000020c 	.word	0x2000020c
    27d4:	0000ff7f 	.word	0x0000ff7f

000027d8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    27d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    27da:	46c6      	mov	lr, r8
    27dc:	b500      	push	{lr}
    27de:	b084      	sub	sp, #16
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    27e0:	22c2      	movs	r2, #194	; 0xc2
    27e2:	00d2      	lsls	r2, r2, #3
    27e4:	4b28      	ldr	r3, [pc, #160]	; (2888 <system_clock_init+0xb0>)
    27e6:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    27e8:	4a28      	ldr	r2, [pc, #160]	; (288c <system_clock_init+0xb4>)
    27ea:	6853      	ldr	r3, [r2, #4]
    27ec:	211e      	movs	r1, #30
    27ee:	438b      	bics	r3, r1
    27f0:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    27f2:	2302      	movs	r3, #2
    27f4:	466a      	mov	r2, sp
    27f6:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    27f8:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    27fa:	4d25      	ldr	r5, [pc, #148]	; (2890 <system_clock_init+0xb8>)
    27fc:	b2e0      	uxtb	r0, r4
    27fe:	4669      	mov	r1, sp
    2800:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2802:	3401      	adds	r4, #1
    2804:	2c1c      	cmp	r4, #28
    2806:	d1f9      	bne.n	27fc <system_clock_init+0x24>
	config->run_in_standby  = false;
    2808:	a803      	add	r0, sp, #12
    280a:	2400      	movs	r4, #0
    280c:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    280e:	2301      	movs	r3, #1
    2810:	4698      	mov	r8, r3
    2812:	7083      	strb	r3, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    2814:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    2816:	4b1f      	ldr	r3, [pc, #124]	; (2894 <system_clock_init+0xbc>)
    2818:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    281a:	2006      	movs	r0, #6
    281c:	4b1e      	ldr	r3, [pc, #120]	; (2898 <system_clock_init+0xc0>)
    281e:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2820:	4b1e      	ldr	r3, [pc, #120]	; (289c <system_clock_init+0xc4>)
    2822:	4798      	blx	r3
	config->high_when_disabled = false;
    2824:	466b      	mov	r3, sp
    2826:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    2828:	2706      	movs	r7, #6
    282a:	701f      	strb	r7, [r3, #0]
	config->run_in_standby     = false;
    282c:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    282e:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    2830:	2308      	movs	r3, #8
    2832:	9301      	str	r3, [sp, #4]
    2834:	4669      	mov	r1, sp
    2836:	2001      	movs	r0, #1
    2838:	4e19      	ldr	r6, [pc, #100]	; (28a0 <system_clock_init+0xc8>)
    283a:	47b0      	blx	r6
    283c:	2001      	movs	r0, #1
    283e:	4d19      	ldr	r5, [pc, #100]	; (28a4 <system_clock_init+0xcc>)
    2840:	47a8      	blx	r5
	config->high_when_disabled = false;
    2842:	466b      	mov	r3, sp
    2844:	705c      	strb	r4, [r3, #1]
	config->run_in_standby     = false;
    2846:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    2848:	725c      	strb	r4, [r3, #9]
    284a:	2303      	movs	r3, #3
    284c:	466a      	mov	r2, sp
    284e:	7013      	strb	r3, [r2, #0]
    2850:	331d      	adds	r3, #29
    2852:	9301      	str	r3, [sp, #4]
    2854:	4669      	mov	r1, sp
    2856:	2004      	movs	r0, #4
    2858:	47b0      	blx	r6
    285a:	2004      	movs	r0, #4
    285c:	47a8      	blx	r5
	PM->CPUSEL.reg = (uint32_t)divider;
    285e:	4b12      	ldr	r3, [pc, #72]	; (28a8 <system_clock_init+0xd0>)
    2860:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    2862:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    2864:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    2866:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    2868:	4643      	mov	r3, r8
    286a:	9301      	str	r3, [sp, #4]
	config->high_when_disabled = false;
    286c:	466b      	mov	r3, sp
    286e:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    2870:	701f      	strb	r7, [r3, #0]
	config->run_in_standby     = false;
    2872:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    2874:	725c      	strb	r4, [r3, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2876:	4669      	mov	r1, sp
    2878:	2000      	movs	r0, #0
    287a:	47b0      	blx	r6
    287c:	2000      	movs	r0, #0
    287e:	47a8      	blx	r5
#endif
}
    2880:	b004      	add	sp, #16
    2882:	bc04      	pop	{r2}
    2884:	4690      	mov	r8, r2
    2886:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2888:	40000800 	.word	0x40000800
    288c:	41004000 	.word	0x41004000
    2890:	00002ae5 	.word	0x00002ae5
    2894:	0000270d 	.word	0x0000270d
    2898:	00002749 	.word	0x00002749
    289c:	000028ad 	.word	0x000028ad
    28a0:	000028d1 	.word	0x000028d1
    28a4:	00002989 	.word	0x00002989
    28a8:	40000400 	.word	0x40000400

000028ac <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    28ac:	4a06      	ldr	r2, [pc, #24]	; (28c8 <system_gclk_init+0x1c>)
    28ae:	6993      	ldr	r3, [r2, #24]
    28b0:	2108      	movs	r1, #8
    28b2:	430b      	orrs	r3, r1
    28b4:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    28b6:	2201      	movs	r2, #1
    28b8:	4b04      	ldr	r3, [pc, #16]	; (28cc <system_gclk_init+0x20>)
    28ba:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    28bc:	0019      	movs	r1, r3
    28be:	780b      	ldrb	r3, [r1, #0]
    28c0:	4213      	tst	r3, r2
    28c2:	d1fc      	bne.n	28be <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    28c4:	4770      	bx	lr
    28c6:	46c0      	nop			; (mov r8, r8)
    28c8:	40000400 	.word	0x40000400
    28cc:	40000c00 	.word	0x40000c00

000028d0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    28d0:	b570      	push	{r4, r5, r6, lr}
    28d2:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    28d4:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    28d6:	780d      	ldrb	r5, [r1, #0]
    28d8:	022d      	lsls	r5, r5, #8
    28da:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    28dc:	784b      	ldrb	r3, [r1, #1]
    28de:	2b00      	cmp	r3, #0
    28e0:	d002      	beq.n	28e8 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    28e2:	2380      	movs	r3, #128	; 0x80
    28e4:	02db      	lsls	r3, r3, #11
    28e6:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    28e8:	7a4b      	ldrb	r3, [r1, #9]
    28ea:	2b00      	cmp	r3, #0
    28ec:	d002      	beq.n	28f4 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    28ee:	2380      	movs	r3, #128	; 0x80
    28f0:	031b      	lsls	r3, r3, #12
    28f2:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    28f4:	6848      	ldr	r0, [r1, #4]
    28f6:	2801      	cmp	r0, #1
    28f8:	d910      	bls.n	291c <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    28fa:	1e43      	subs	r3, r0, #1
    28fc:	4218      	tst	r0, r3
    28fe:	d134      	bne.n	296a <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2900:	2802      	cmp	r0, #2
    2902:	d930      	bls.n	2966 <system_gclk_gen_set_config+0x96>
    2904:	2302      	movs	r3, #2
    2906:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2908:	3201      	adds	r2, #1
						mask <<= 1) {
    290a:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    290c:	4298      	cmp	r0, r3
    290e:	d8fb      	bhi.n	2908 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2910:	0212      	lsls	r2, r2, #8
    2912:	4332      	orrs	r2, r6
    2914:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2916:	2380      	movs	r3, #128	; 0x80
    2918:	035b      	lsls	r3, r3, #13
    291a:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    291c:	7a0b      	ldrb	r3, [r1, #8]
    291e:	2b00      	cmp	r3, #0
    2920:	d002      	beq.n	2928 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2922:	2380      	movs	r3, #128	; 0x80
    2924:	039b      	lsls	r3, r3, #14
    2926:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2928:	4a13      	ldr	r2, [pc, #76]	; (2978 <system_gclk_gen_set_config+0xa8>)
    292a:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    292c:	b25b      	sxtb	r3, r3
    292e:	2b00      	cmp	r3, #0
    2930:	dbfb      	blt.n	292a <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    2932:	4b12      	ldr	r3, [pc, #72]	; (297c <system_gclk_gen_set_config+0xac>)
    2934:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2936:	4b12      	ldr	r3, [pc, #72]	; (2980 <system_gclk_gen_set_config+0xb0>)
    2938:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    293a:	4a0f      	ldr	r2, [pc, #60]	; (2978 <system_gclk_gen_set_config+0xa8>)
    293c:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    293e:	b25b      	sxtb	r3, r3
    2940:	2b00      	cmp	r3, #0
    2942:	dbfb      	blt.n	293c <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2944:	4b0c      	ldr	r3, [pc, #48]	; (2978 <system_gclk_gen_set_config+0xa8>)
    2946:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2948:	001a      	movs	r2, r3
    294a:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    294c:	b25b      	sxtb	r3, r3
    294e:	2b00      	cmp	r3, #0
    2950:	dbfb      	blt.n	294a <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2952:	4a09      	ldr	r2, [pc, #36]	; (2978 <system_gclk_gen_set_config+0xa8>)
    2954:	6853      	ldr	r3, [r2, #4]
    2956:	2180      	movs	r1, #128	; 0x80
    2958:	0249      	lsls	r1, r1, #9
    295a:	400b      	ands	r3, r1
    295c:	431d      	orrs	r5, r3
    295e:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    2960:	4b08      	ldr	r3, [pc, #32]	; (2984 <system_gclk_gen_set_config+0xb4>)
    2962:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2964:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    2966:	2200      	movs	r2, #0
    2968:	e7d2      	b.n	2910 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    296a:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    296c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    296e:	2380      	movs	r3, #128	; 0x80
    2970:	029b      	lsls	r3, r3, #10
    2972:	431d      	orrs	r5, r3
    2974:	e7d2      	b.n	291c <system_gclk_gen_set_config+0x4c>
    2976:	46c0      	nop			; (mov r8, r8)
    2978:	40000c00 	.word	0x40000c00
    297c:	00001cc1 	.word	0x00001cc1
    2980:	40000c08 	.word	0x40000c08
    2984:	00001d01 	.word	0x00001d01

00002988 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2988:	b510      	push	{r4, lr}
    298a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    298c:	4a0b      	ldr	r2, [pc, #44]	; (29bc <system_gclk_gen_enable+0x34>)
    298e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2990:	b25b      	sxtb	r3, r3
    2992:	2b00      	cmp	r3, #0
    2994:	dbfb      	blt.n	298e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    2996:	4b0a      	ldr	r3, [pc, #40]	; (29c0 <system_gclk_gen_enable+0x38>)
    2998:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    299a:	4b0a      	ldr	r3, [pc, #40]	; (29c4 <system_gclk_gen_enable+0x3c>)
    299c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    299e:	4a07      	ldr	r2, [pc, #28]	; (29bc <system_gclk_gen_enable+0x34>)
    29a0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    29a2:	b25b      	sxtb	r3, r3
    29a4:	2b00      	cmp	r3, #0
    29a6:	dbfb      	blt.n	29a0 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    29a8:	4a04      	ldr	r2, [pc, #16]	; (29bc <system_gclk_gen_enable+0x34>)
    29aa:	6851      	ldr	r1, [r2, #4]
    29ac:	2380      	movs	r3, #128	; 0x80
    29ae:	025b      	lsls	r3, r3, #9
    29b0:	430b      	orrs	r3, r1
    29b2:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    29b4:	4b04      	ldr	r3, [pc, #16]	; (29c8 <system_gclk_gen_enable+0x40>)
    29b6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    29b8:	bd10      	pop	{r4, pc}
    29ba:	46c0      	nop			; (mov r8, r8)
    29bc:	40000c00 	.word	0x40000c00
    29c0:	00001cc1 	.word	0x00001cc1
    29c4:	40000c04 	.word	0x40000c04
    29c8:	00001d01 	.word	0x00001d01

000029cc <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    29cc:	b570      	push	{r4, r5, r6, lr}
    29ce:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    29d0:	4a1a      	ldr	r2, [pc, #104]	; (2a3c <system_gclk_gen_get_hz+0x70>)
    29d2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    29d4:	b25b      	sxtb	r3, r3
    29d6:	2b00      	cmp	r3, #0
    29d8:	dbfb      	blt.n	29d2 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    29da:	4b19      	ldr	r3, [pc, #100]	; (2a40 <system_gclk_gen_get_hz+0x74>)
    29dc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    29de:	4b19      	ldr	r3, [pc, #100]	; (2a44 <system_gclk_gen_get_hz+0x78>)
    29e0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    29e2:	4a16      	ldr	r2, [pc, #88]	; (2a3c <system_gclk_gen_get_hz+0x70>)
    29e4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    29e6:	b25b      	sxtb	r3, r3
    29e8:	2b00      	cmp	r3, #0
    29ea:	dbfb      	blt.n	29e4 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    29ec:	4e13      	ldr	r6, [pc, #76]	; (2a3c <system_gclk_gen_get_hz+0x70>)
    29ee:	6870      	ldr	r0, [r6, #4]
    29f0:	04c0      	lsls	r0, r0, #19
    29f2:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    29f4:	4b14      	ldr	r3, [pc, #80]	; (2a48 <system_gclk_gen_get_hz+0x7c>)
    29f6:	4798      	blx	r3
    29f8:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    29fa:	4b12      	ldr	r3, [pc, #72]	; (2a44 <system_gclk_gen_get_hz+0x78>)
    29fc:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    29fe:	6876      	ldr	r6, [r6, #4]
    2a00:	02f6      	lsls	r6, r6, #11
    2a02:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2a04:	4b11      	ldr	r3, [pc, #68]	; (2a4c <system_gclk_gen_get_hz+0x80>)
    2a06:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2a08:	4a0c      	ldr	r2, [pc, #48]	; (2a3c <system_gclk_gen_get_hz+0x70>)
    2a0a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2a0c:	b25b      	sxtb	r3, r3
    2a0e:	2b00      	cmp	r3, #0
    2a10:	dbfb      	blt.n	2a0a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    2a12:	4b0a      	ldr	r3, [pc, #40]	; (2a3c <system_gclk_gen_get_hz+0x70>)
    2a14:	689c      	ldr	r4, [r3, #8]
    2a16:	0224      	lsls	r4, r4, #8
    2a18:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    2a1a:	4b0d      	ldr	r3, [pc, #52]	; (2a50 <system_gclk_gen_get_hz+0x84>)
    2a1c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2a1e:	2e00      	cmp	r6, #0
    2a20:	d107      	bne.n	2a32 <system_gclk_gen_get_hz+0x66>
    2a22:	2c01      	cmp	r4, #1
    2a24:	d907      	bls.n	2a36 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    2a26:	0021      	movs	r1, r4
    2a28:	0028      	movs	r0, r5
    2a2a:	4b0a      	ldr	r3, [pc, #40]	; (2a54 <system_gclk_gen_get_hz+0x88>)
    2a2c:	4798      	blx	r3
    2a2e:	0005      	movs	r5, r0
    2a30:	e001      	b.n	2a36 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    2a32:	3401      	adds	r4, #1
    2a34:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    2a36:	0028      	movs	r0, r5
    2a38:	bd70      	pop	{r4, r5, r6, pc}
    2a3a:	46c0      	nop			; (mov r8, r8)
    2a3c:	40000c00 	.word	0x40000c00
    2a40:	00001cc1 	.word	0x00001cc1
    2a44:	40000c04 	.word	0x40000c04
    2a48:	00002691 	.word	0x00002691
    2a4c:	40000c08 	.word	0x40000c08
    2a50:	00001d01 	.word	0x00001d01
    2a54:	00003039 	.word	0x00003039

00002a58 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2a58:	b510      	push	{r4, lr}
    2a5a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2a5c:	4b06      	ldr	r3, [pc, #24]	; (2a78 <system_gclk_chan_enable+0x20>)
    2a5e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2a60:	4b06      	ldr	r3, [pc, #24]	; (2a7c <system_gclk_chan_enable+0x24>)
    2a62:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2a64:	4a06      	ldr	r2, [pc, #24]	; (2a80 <system_gclk_chan_enable+0x28>)
    2a66:	8853      	ldrh	r3, [r2, #2]
    2a68:	2180      	movs	r1, #128	; 0x80
    2a6a:	01c9      	lsls	r1, r1, #7
    2a6c:	430b      	orrs	r3, r1
    2a6e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    2a70:	4b04      	ldr	r3, [pc, #16]	; (2a84 <system_gclk_chan_enable+0x2c>)
    2a72:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2a74:	bd10      	pop	{r4, pc}
    2a76:	46c0      	nop			; (mov r8, r8)
    2a78:	00001cc1 	.word	0x00001cc1
    2a7c:	40000c02 	.word	0x40000c02
    2a80:	40000c00 	.word	0x40000c00
    2a84:	00001d01 	.word	0x00001d01

00002a88 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2a88:	b510      	push	{r4, lr}
    2a8a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2a8c:	4b0f      	ldr	r3, [pc, #60]	; (2acc <system_gclk_chan_disable+0x44>)
    2a8e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2a90:	4b0f      	ldr	r3, [pc, #60]	; (2ad0 <system_gclk_chan_disable+0x48>)
    2a92:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2a94:	4a0f      	ldr	r2, [pc, #60]	; (2ad4 <system_gclk_chan_disable+0x4c>)
    2a96:	8853      	ldrh	r3, [r2, #2]
    2a98:	051b      	lsls	r3, r3, #20
    2a9a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2a9c:	8853      	ldrh	r3, [r2, #2]
    2a9e:	490e      	ldr	r1, [pc, #56]	; (2ad8 <system_gclk_chan_disable+0x50>)
    2aa0:	400b      	ands	r3, r1
    2aa2:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2aa4:	8853      	ldrh	r3, [r2, #2]
    2aa6:	490d      	ldr	r1, [pc, #52]	; (2adc <system_gclk_chan_disable+0x54>)
    2aa8:	400b      	ands	r3, r1
    2aaa:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2aac:	0011      	movs	r1, r2
    2aae:	2280      	movs	r2, #128	; 0x80
    2ab0:	01d2      	lsls	r2, r2, #7
    2ab2:	884b      	ldrh	r3, [r1, #2]
    2ab4:	4213      	tst	r3, r2
    2ab6:	d1fc      	bne.n	2ab2 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2ab8:	4906      	ldr	r1, [pc, #24]	; (2ad4 <system_gclk_chan_disable+0x4c>)
    2aba:	884a      	ldrh	r2, [r1, #2]
    2abc:	0203      	lsls	r3, r0, #8
    2abe:	4806      	ldr	r0, [pc, #24]	; (2ad8 <system_gclk_chan_disable+0x50>)
    2ac0:	4002      	ands	r2, r0
    2ac2:	4313      	orrs	r3, r2
    2ac4:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    2ac6:	4b06      	ldr	r3, [pc, #24]	; (2ae0 <system_gclk_chan_disable+0x58>)
    2ac8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2aca:	bd10      	pop	{r4, pc}
    2acc:	00001cc1 	.word	0x00001cc1
    2ad0:	40000c02 	.word	0x40000c02
    2ad4:	40000c00 	.word	0x40000c00
    2ad8:	fffff0ff 	.word	0xfffff0ff
    2adc:	ffffbfff 	.word	0xffffbfff
    2ae0:	00001d01 	.word	0x00001d01

00002ae4 <system_gclk_chan_set_config>:
{
    2ae4:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2ae6:	780c      	ldrb	r4, [r1, #0]
    2ae8:	0224      	lsls	r4, r4, #8
    2aea:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    2aec:	4b02      	ldr	r3, [pc, #8]	; (2af8 <system_gclk_chan_set_config+0x14>)
    2aee:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2af0:	b2a4      	uxth	r4, r4
    2af2:	4b02      	ldr	r3, [pc, #8]	; (2afc <system_gclk_chan_set_config+0x18>)
    2af4:	805c      	strh	r4, [r3, #2]
}
    2af6:	bd10      	pop	{r4, pc}
    2af8:	00002a89 	.word	0x00002a89
    2afc:	40000c00 	.word	0x40000c00

00002b00 <system_gclk_chan_lock>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_lock(
		const uint8_t channel)
{
    2b00:	b510      	push	{r4, lr}
    2b02:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2b04:	4b06      	ldr	r3, [pc, #24]	; (2b20 <system_gclk_chan_lock+0x20>)
    2b06:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2b08:	4b06      	ldr	r3, [pc, #24]	; (2b24 <system_gclk_chan_lock+0x24>)
    2b0a:	701c      	strb	r4, [r3, #0]

	/* Lock the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_WRTLOCK | GCLK_CLKCTRL_CLKEN;
    2b0c:	4a06      	ldr	r2, [pc, #24]	; (2b28 <system_gclk_chan_lock+0x28>)
    2b0e:	8853      	ldrh	r3, [r2, #2]
    2b10:	21c0      	movs	r1, #192	; 0xc0
    2b12:	0209      	lsls	r1, r1, #8
    2b14:	430b      	orrs	r3, r1
    2b16:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    2b18:	4b04      	ldr	r3, [pc, #16]	; (2b2c <system_gclk_chan_lock+0x2c>)
    2b1a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2b1c:	bd10      	pop	{r4, pc}
    2b1e:	46c0      	nop			; (mov r8, r8)
    2b20:	00001cc1 	.word	0x00001cc1
    2b24:	40000c02 	.word	0x40000c02
    2b28:	40000c00 	.word	0x40000c00
    2b2c:	00001d01 	.word	0x00001d01

00002b30 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2b30:	b510      	push	{r4, lr}
    2b32:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2b34:	4b06      	ldr	r3, [pc, #24]	; (2b50 <system_gclk_chan_get_hz+0x20>)
    2b36:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2b38:	4b06      	ldr	r3, [pc, #24]	; (2b54 <system_gclk_chan_get_hz+0x24>)
    2b3a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2b3c:	4b06      	ldr	r3, [pc, #24]	; (2b58 <system_gclk_chan_get_hz+0x28>)
    2b3e:	885c      	ldrh	r4, [r3, #2]
    2b40:	0524      	lsls	r4, r4, #20
    2b42:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    2b44:	4b05      	ldr	r3, [pc, #20]	; (2b5c <system_gclk_chan_get_hz+0x2c>)
    2b46:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2b48:	0020      	movs	r0, r4
    2b4a:	4b05      	ldr	r3, [pc, #20]	; (2b60 <system_gclk_chan_get_hz+0x30>)
    2b4c:	4798      	blx	r3
}
    2b4e:	bd10      	pop	{r4, pc}
    2b50:	00001cc1 	.word	0x00001cc1
    2b54:	40000c02 	.word	0x40000c02
    2b58:	40000c00 	.word	0x40000c00
    2b5c:	00001d01 	.word	0x00001d01
    2b60:	000029cd 	.word	0x000029cd

00002b64 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2b64:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2b66:	78d3      	ldrb	r3, [r2, #3]
    2b68:	2b00      	cmp	r3, #0
    2b6a:	d135      	bne.n	2bd8 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2b6c:	7813      	ldrb	r3, [r2, #0]
    2b6e:	2b80      	cmp	r3, #128	; 0x80
    2b70:	d029      	beq.n	2bc6 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2b72:	061b      	lsls	r3, r3, #24
    2b74:	2480      	movs	r4, #128	; 0x80
    2b76:	0264      	lsls	r4, r4, #9
    2b78:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2b7a:	7854      	ldrb	r4, [r2, #1]
    2b7c:	2502      	movs	r5, #2
    2b7e:	43ac      	bics	r4, r5
    2b80:	d106      	bne.n	2b90 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2b82:	7894      	ldrb	r4, [r2, #2]
    2b84:	2c00      	cmp	r4, #0
    2b86:	d120      	bne.n	2bca <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    2b88:	2480      	movs	r4, #128	; 0x80
    2b8a:	02a4      	lsls	r4, r4, #10
    2b8c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2b8e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2b90:	7854      	ldrb	r4, [r2, #1]
    2b92:	3c01      	subs	r4, #1
    2b94:	2c01      	cmp	r4, #1
    2b96:	d91c      	bls.n	2bd2 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2b98:	040d      	lsls	r5, r1, #16
    2b9a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2b9c:	24a0      	movs	r4, #160	; 0xa0
    2b9e:	05e4      	lsls	r4, r4, #23
    2ba0:	432c      	orrs	r4, r5
    2ba2:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2ba4:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2ba6:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2ba8:	24d0      	movs	r4, #208	; 0xd0
    2baa:	0624      	lsls	r4, r4, #24
    2bac:	432c      	orrs	r4, r5
    2bae:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2bb0:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2bb2:	78d4      	ldrb	r4, [r2, #3]
    2bb4:	2c00      	cmp	r4, #0
    2bb6:	d122      	bne.n	2bfe <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2bb8:	035b      	lsls	r3, r3, #13
    2bba:	d51c      	bpl.n	2bf6 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2bbc:	7893      	ldrb	r3, [r2, #2]
    2bbe:	2b01      	cmp	r3, #1
    2bc0:	d01e      	beq.n	2c00 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    2bc2:	6141      	str	r1, [r0, #20]
    2bc4:	e017      	b.n	2bf6 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    2bc6:	2300      	movs	r3, #0
    2bc8:	e7d7      	b.n	2b7a <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2bca:	24c0      	movs	r4, #192	; 0xc0
    2bcc:	02e4      	lsls	r4, r4, #11
    2bce:	4323      	orrs	r3, r4
    2bd0:	e7dd      	b.n	2b8e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2bd2:	4c0d      	ldr	r4, [pc, #52]	; (2c08 <_system_pinmux_config+0xa4>)
    2bd4:	4023      	ands	r3, r4
    2bd6:	e7df      	b.n	2b98 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    2bd8:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2bda:	040c      	lsls	r4, r1, #16
    2bdc:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2bde:	23a0      	movs	r3, #160	; 0xa0
    2be0:	05db      	lsls	r3, r3, #23
    2be2:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2be4:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2be6:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2be8:	23d0      	movs	r3, #208	; 0xd0
    2bea:	061b      	lsls	r3, r3, #24
    2bec:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2bee:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2bf0:	78d3      	ldrb	r3, [r2, #3]
    2bf2:	2b00      	cmp	r3, #0
    2bf4:	d103      	bne.n	2bfe <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2bf6:	7853      	ldrb	r3, [r2, #1]
    2bf8:	3b01      	subs	r3, #1
    2bfa:	2b01      	cmp	r3, #1
    2bfc:	d902      	bls.n	2c04 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    2bfe:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    2c00:	6181      	str	r1, [r0, #24]
    2c02:	e7f8      	b.n	2bf6 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    2c04:	6081      	str	r1, [r0, #8]
}
    2c06:	e7fa      	b.n	2bfe <_system_pinmux_config+0x9a>
    2c08:	fffbffff 	.word	0xfffbffff

00002c0c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2c0c:	b510      	push	{r4, lr}
    2c0e:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2c10:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2c12:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2c14:	2900      	cmp	r1, #0
    2c16:	d104      	bne.n	2c22 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    2c18:	0943      	lsrs	r3, r0, #5
    2c1a:	01db      	lsls	r3, r3, #7
    2c1c:	4905      	ldr	r1, [pc, #20]	; (2c34 <system_pinmux_pin_set_config+0x28>)
    2c1e:	468c      	mov	ip, r1
    2c20:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2c22:	241f      	movs	r4, #31
    2c24:	4020      	ands	r0, r4
    2c26:	2101      	movs	r1, #1
    2c28:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    2c2a:	0018      	movs	r0, r3
    2c2c:	4b02      	ldr	r3, [pc, #8]	; (2c38 <system_pinmux_pin_set_config+0x2c>)
    2c2e:	4798      	blx	r3
}
    2c30:	bd10      	pop	{r4, pc}
    2c32:	46c0      	nop			; (mov r8, r8)
    2c34:	41004400 	.word	0x41004400
    2c38:	00002b65 	.word	0x00002b65

00002c3c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2c3c:	4770      	bx	lr
	...

00002c40 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2c40:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2c42:	4b05      	ldr	r3, [pc, #20]	; (2c58 <system_init+0x18>)
    2c44:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2c46:	4b05      	ldr	r3, [pc, #20]	; (2c5c <system_init+0x1c>)
    2c48:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2c4a:	4b05      	ldr	r3, [pc, #20]	; (2c60 <system_init+0x20>)
    2c4c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2c4e:	4b05      	ldr	r3, [pc, #20]	; (2c64 <system_init+0x24>)
    2c50:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2c52:	4b05      	ldr	r3, [pc, #20]	; (2c68 <system_init+0x28>)
    2c54:	4798      	blx	r3
}
    2c56:	bd10      	pop	{r4, pc}
    2c58:	000027d9 	.word	0x000027d9
    2c5c:	00001d31 	.word	0x00001d31
    2c60:	00002c3d 	.word	0x00002c3d
    2c64:	0000020d 	.word	0x0000020d
    2c68:	00002c3d 	.word	0x00002c3d

00002c6c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2c6c:	e7fe      	b.n	2c6c <Dummy_Handler>
	...

00002c70 <Reset_Handler>:
{
    2c70:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    2c72:	4a1a      	ldr	r2, [pc, #104]	; (2cdc <Reset_Handler+0x6c>)
    2c74:	4b1a      	ldr	r3, [pc, #104]	; (2ce0 <Reset_Handler+0x70>)
    2c76:	429a      	cmp	r2, r3
    2c78:	d011      	beq.n	2c9e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    2c7a:	001a      	movs	r2, r3
    2c7c:	4b19      	ldr	r3, [pc, #100]	; (2ce4 <Reset_Handler+0x74>)
    2c7e:	429a      	cmp	r2, r3
    2c80:	d20d      	bcs.n	2c9e <Reset_Handler+0x2e>
    2c82:	4a19      	ldr	r2, [pc, #100]	; (2ce8 <Reset_Handler+0x78>)
    2c84:	3303      	adds	r3, #3
    2c86:	1a9b      	subs	r3, r3, r2
    2c88:	089b      	lsrs	r3, r3, #2
    2c8a:	3301      	adds	r3, #1
    2c8c:	009b      	lsls	r3, r3, #2
    2c8e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2c90:	4813      	ldr	r0, [pc, #76]	; (2ce0 <Reset_Handler+0x70>)
    2c92:	4912      	ldr	r1, [pc, #72]	; (2cdc <Reset_Handler+0x6c>)
    2c94:	588c      	ldr	r4, [r1, r2]
    2c96:	5084      	str	r4, [r0, r2]
    2c98:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2c9a:	429a      	cmp	r2, r3
    2c9c:	d1fa      	bne.n	2c94 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    2c9e:	4a13      	ldr	r2, [pc, #76]	; (2cec <Reset_Handler+0x7c>)
    2ca0:	4b13      	ldr	r3, [pc, #76]	; (2cf0 <Reset_Handler+0x80>)
    2ca2:	429a      	cmp	r2, r3
    2ca4:	d20a      	bcs.n	2cbc <Reset_Handler+0x4c>
    2ca6:	43d3      	mvns	r3, r2
    2ca8:	4911      	ldr	r1, [pc, #68]	; (2cf0 <Reset_Handler+0x80>)
    2caa:	185b      	adds	r3, r3, r1
    2cac:	2103      	movs	r1, #3
    2cae:	438b      	bics	r3, r1
    2cb0:	3304      	adds	r3, #4
    2cb2:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    2cb4:	2100      	movs	r1, #0
    2cb6:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2cb8:	4293      	cmp	r3, r2
    2cba:	d1fc      	bne.n	2cb6 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2cbc:	4a0d      	ldr	r2, [pc, #52]	; (2cf4 <Reset_Handler+0x84>)
    2cbe:	21ff      	movs	r1, #255	; 0xff
    2cc0:	4b0d      	ldr	r3, [pc, #52]	; (2cf8 <Reset_Handler+0x88>)
    2cc2:	438b      	bics	r3, r1
    2cc4:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2cc6:	4a0d      	ldr	r2, [pc, #52]	; (2cfc <Reset_Handler+0x8c>)
    2cc8:	6853      	ldr	r3, [r2, #4]
    2cca:	397f      	subs	r1, #127	; 0x7f
    2ccc:	430b      	orrs	r3, r1
    2cce:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2cd0:	4b0b      	ldr	r3, [pc, #44]	; (2d00 <Reset_Handler+0x90>)
    2cd2:	4798      	blx	r3
        main();
    2cd4:	4b0b      	ldr	r3, [pc, #44]	; (2d04 <Reset_Handler+0x94>)
    2cd6:	4798      	blx	r3
    2cd8:	e7fe      	b.n	2cd8 <Reset_Handler+0x68>
    2cda:	46c0      	nop			; (mov r8, r8)
    2cdc:	00003468 	.word	0x00003468
    2ce0:	20000000 	.word	0x20000000
    2ce4:	200001cc 	.word	0x200001cc
    2ce8:	20000004 	.word	0x20000004
    2cec:	200001cc 	.word	0x200001cc
    2cf0:	2000436c 	.word	0x2000436c
    2cf4:	e000ed00 	.word	0xe000ed00
    2cf8:	00000000 	.word	0x00000000
    2cfc:	41004000 	.word	0x41004000
    2d00:	000031a5 	.word	0x000031a5
    2d04:	00002d09 	.word	0x00002d09

00002d08 <main>:




int main(void)
{
    2d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//uint16_t result;
	//uint8_t XORtmp;
	unsigned int i, j;
	//UINT16u_t	tmp16;
	
	system_init();
    2d0a:	4ba2      	ldr	r3, [pc, #648]	; (2f94 <main+0x28c>)
    2d0c:	4798      	blx	r3
	configure_usart();
    2d0e:	4ba2      	ldr	r3, [pc, #648]	; (2f98 <main+0x290>)
    2d10:	4798      	blx	r3
	configure_usart_callbacks();
    2d12:	4ba2      	ldr	r3, [pc, #648]	; (2f9c <main+0x294>)
    2d14:	4798      	blx	r3
	//configure_adc();
	timer_configure();
    2d16:	4ba2      	ldr	r3, [pc, #648]	; (2fa0 <main+0x298>)
    2d18:	4798      	blx	r3
	configure_extint_channel();
    2d1a:	4ba2      	ldr	r3, [pc, #648]	; (2fa4 <main+0x29c>)
    2d1c:	4798      	blx	r3
	configure_extint_callbacks();
    2d1e:	4ba2      	ldr	r3, [pc, #648]	; (2fa8 <main+0x2a0>)
    2d20:	4798      	blx	r3
	delay_init();
    2d22:	4ba2      	ldr	r3, [pc, #648]	; (2fac <main+0x2a4>)
    2d24:	4798      	blx	r3
	configure_wdt();
    2d26:	4ba2      	ldr	r3, [pc, #648]	; (2fb0 <main+0x2a8>)
    2d28:	4798      	blx	r3
	configure_wdt_callbacks();
    2d2a:	4ba2      	ldr	r3, [pc, #648]	; (2fb4 <main+0x2ac>)
    2d2c:	4798      	blx	r3
	cpu_irq_enable();
    2d2e:	2201      	movs	r2, #1
    2d30:	4ba1      	ldr	r3, [pc, #644]	; (2fb8 <main+0x2b0>)
    2d32:	701a      	strb	r2, [r3, #0]
    2d34:	f3bf 8f5f 	dmb	sy
    2d38:	b662      	cpsie	i
	system_interrupt_enable_global();

	wdt_reset_count();
    2d3a:	4da0      	ldr	r5, [pc, #640]	; (2fbc <main+0x2b4>)
    2d3c:	47a8      	blx	r5
	
	lcd_init();
    2d3e:	4ba0      	ldr	r3, [pc, #640]	; (2fc0 <main+0x2b8>)
    2d40:	4798      	blx	r3
	lcd_command(lcd_instr, 0x80);
    2d42:	2180      	movs	r1, #128	; 0x80
    2d44:	2000      	movs	r0, #0
    2d46:	4c9f      	ldr	r4, [pc, #636]	; (2fc4 <main+0x2bc>)
    2d48:	47a0      	blx	r4
	lcd_command(lcd_data, 'R');
    2d4a:	2152      	movs	r1, #82	; 0x52
    2d4c:	2001      	movs	r0, #1
    2d4e:	47a0      	blx	r4
	lcd_command(lcd_data, 'S');
    2d50:	2153      	movs	r1, #83	; 0x53
    2d52:	2001      	movs	r0, #1
    2d54:	47a0      	blx	r4
	lcd_command(lcd_data, 'S');
    2d56:	2153      	movs	r1, #83	; 0x53
    2d58:	2001      	movs	r0, #1
    2d5a:	47a0      	blx	r4
	lcd_command(lcd_data, 'I');
    2d5c:	2149      	movs	r1, #73	; 0x49
    2d5e:	2001      	movs	r0, #1
    2d60:	47a0      	blx	r4
	lcd_command(lcd_data, ':');
    2d62:	213a      	movs	r1, #58	; 0x3a
    2d64:	2001      	movs	r0, #1
    2d66:	47a0      	blx	r4
	lcd_command(lcd_data, ' ');
    2d68:	2120      	movs	r1, #32
    2d6a:	2001      	movs	r0, #1
    2d6c:	47a0      	blx	r4
	lcd_command(lcd_data, '-');
    2d6e:	212d      	movs	r1, #45	; 0x2d
    2d70:	2001      	movs	r0, #1
    2d72:	47a0      	blx	r4
	
	lcd_command(lcd_instr, 0x8B);
    2d74:	218b      	movs	r1, #139	; 0x8b
    2d76:	2000      	movs	r0, #0
    2d78:	47a0      	blx	r4
	lcd_command(lcd_data, ' ');
    2d7a:	2120      	movs	r1, #32
    2d7c:	2001      	movs	r0, #1
    2d7e:	47a0      	blx	r4
	lcd_command(lcd_data, 'd');
    2d80:	2164      	movs	r1, #100	; 0x64
    2d82:	2001      	movs	r0, #1
    2d84:	47a0      	blx	r4
	lcd_command(lcd_data, 'B');
    2d86:	2142      	movs	r1, #66	; 0x42
    2d88:	2001      	movs	r0, #1
    2d8a:	47a0      	blx	r4
	lcd_command(lcd_data, 'm');
    2d8c:	216d      	movs	r1, #109	; 0x6d
    2d8e:	2001      	movs	r0, #1
    2d90:	47a0      	blx	r4
	
	lcd_command(lcd_instr, 0xC0);
    2d92:	21c0      	movs	r1, #192	; 0xc0
    2d94:	2000      	movs	r0, #0
    2d96:	47a0      	blx	r4
	lcd_command(lcd_data, 'S');
    2d98:	2153      	movs	r1, #83	; 0x53
    2d9a:	2001      	movs	r0, #1
    2d9c:	47a0      	blx	r4
	lcd_command(lcd_data, 'F');
    2d9e:	2146      	movs	r1, #70	; 0x46
    2da0:	2001      	movs	r0, #1
    2da2:	47a0      	blx	r4
	lcd_command(lcd_data, ':');
    2da4:	213a      	movs	r1, #58	; 0x3a
    2da6:	2001      	movs	r0, #1
    2da8:	47a0      	blx	r4
	lcd_command(lcd_data, ' ');
    2daa:	2120      	movs	r1, #32
    2dac:	2001      	movs	r0, #1
    2dae:	47a0      	blx	r4
	
	lcd_command(lcd_instr, 0xC8);
    2db0:	21c8      	movs	r1, #200	; 0xc8
    2db2:	2000      	movs	r0, #0
    2db4:	47a0      	blx	r4
	lcd_command(lcd_data, 'D');
    2db6:	2144      	movs	r1, #68	; 0x44
    2db8:	2001      	movs	r0, #1
    2dba:	47a0      	blx	r4
	lcd_command(lcd_data, 'a');
    2dbc:	2161      	movs	r1, #97	; 0x61
    2dbe:	2001      	movs	r0, #1
    2dc0:	47a0      	blx	r4
	lcd_command(lcd_data, 't');
    2dc2:	2174      	movs	r1, #116	; 0x74
    2dc4:	2001      	movs	r0, #1
    2dc6:	47a0      	blx	r4
	lcd_command(lcd_data, 'a');
    2dc8:	2161      	movs	r1, #97	; 0x61
    2dca:	2001      	movs	r0, #1
    2dcc:	47a0      	blx	r4
	lcd_command(lcd_data, ':');
    2dce:	213a      	movs	r1, #58	; 0x3a
    2dd0:	2001      	movs	r0, #1
    2dd2:	47a0      	blx	r4
	lcd_command(lcd_data, ' ');
    2dd4:	2120      	movs	r1, #32
    2dd6:	2001      	movs	r0, #1
    2dd8:	47a0      	blx	r4
	
	

	
	wdt_reset_count();
    2dda:	47a8      	blx	r5
	//LED_R_OFF
	//LED_G_OFF
	//LED_B_ON
	Lora_Debug_Flag = 1;
    2ddc:	4a7a      	ldr	r2, [pc, #488]	; (2fc8 <main+0x2c0>)
    2dde:	7813      	ldrb	r3, [r2, #0]
    2de0:	2108      	movs	r1, #8
    2de2:	430b      	orrs	r3, r1
    2de4:	7013      	strb	r3, [r2, #0]
	

	Print_Start_Msg();
    2de6:	4b79      	ldr	r3, [pc, #484]	; (2fcc <main+0x2c4>)
    2de8:	4798      	blx	r3
	
	UserKeyInStauts = NOP;
    2dea:	2300      	movs	r3, #0
    2dec:	4a78      	ldr	r2, [pc, #480]	; (2fd0 <main+0x2c8>)
    2dee:	7013      	strb	r3, [r2, #0]
	NowStatus = Read_LoRa_ID_Index;
    2df0:	4a78      	ldr	r2, [pc, #480]	; (2fd4 <main+0x2cc>)
    2df2:	7013      	strb	r3, [r2, #0]
	LoRa_TxRx_Mode_Flag = SetRx;
    2df4:	2203      	movs	r2, #3
    2df6:	4b78      	ldr	r3, [pc, #480]	; (2fd8 <main+0x2d0>)
    2df8:	701a      	strb	r2, [r3, #0]
    2dfa:	4a78      	ldr	r2, [pc, #480]	; (2fdc <main+0x2d4>)
    2dfc:	23fa      	movs	r3, #250	; 0xfa
    2dfe:	019b      	lsls	r3, r3, #6
    2e00:	18d0      	adds	r0, r2, r3
	
	for(i = 0; i < 1000; i++)
	{
		for(j = 0; j < 16; j++)
		{
			dev[i][j] = '0';
    2e02:	2130      	movs	r1, #48	; 0x30
    2e04:	e002      	b.n	2e0c <main+0x104>
    2e06:	3210      	adds	r2, #16
	for(i = 0; i < 1000; i++)
    2e08:	4290      	cmp	r0, r2
    2e0a:	d005      	beq.n	2e18 <main+0x110>
{
    2e0c:	2300      	movs	r3, #0
			dev[i][j] = '0';
    2e0e:	54d1      	strb	r1, [r2, r3]
		for(j = 0; j < 16; j++)
    2e10:	3301      	adds	r3, #1
    2e12:	2b10      	cmp	r3, #16
    2e14:	d1fb      	bne.n	2e0e <main+0x106>
    2e16:	e7f6      	b.n	2e06 <main+0xfe>
	MyLoRaTmp[Write_LoRa_TxBuffer_Index][17] = Sensor_Data[5][0];
	MyLoRaTmp[Write_LoRa_TxBuffer_Index][18] = Sensor_Data[5][1];
*/
	while (true) 
	{
		usart_read_buffer_job(Debug_COM, (uint8_t *)user_rx_buffer, MAX_RX_BUFFER_LENGTH);
    2e18:	4e71      	ldr	r6, [pc, #452]	; (2fe0 <main+0x2d8>)
    2e1a:	e014      	b.n	2e46 <main+0x13e>
						lcd_command(lcd_data, 0x31);
						lcd_command(lcd_data, 0x30 + (DIP_SW_Value.byte - 10));
					}
					else
					{
						lcd_command(lcd_data, ' ');
    2e1c:	2120      	movs	r1, #32
    2e1e:	2001      	movs	r0, #1
    2e20:	4c68      	ldr	r4, [pc, #416]	; (2fc4 <main+0x2bc>)
    2e22:	47a0      	blx	r4
						lcd_command(lcd_data, 0x30 + DIP_SW_Value.byte);
    2e24:	4b6f      	ldr	r3, [pc, #444]	; (2fe4 <main+0x2dc>)
    2e26:	7819      	ldrb	r1, [r3, #0]
    2e28:	3130      	adds	r1, #48	; 0x30
    2e2a:	b2c9      	uxtb	r1, r1
    2e2c:	2001      	movs	r0, #1
    2e2e:	47a0      	blx	r4
			}
		}
		
		

		if(LoRa_Rx_Flag == LoraRxDataReady)		
    2e30:	4b6d      	ldr	r3, [pc, #436]	; (2fe8 <main+0x2e0>)
    2e32:	781b      	ldrb	r3, [r3, #0]
    2e34:	2b04      	cmp	r3, #4
    2e36:	d061      	beq.n	2efc <main+0x1f4>
			//NowStatus = Write_LoRa_Setting_Index;
			//LoRa_TxRx_Mode_Flag = SetTx;
			LoRa_Rx_Flag = LoraRxNoData;
		}
		
		switch(UserKeyInStauts)
    2e38:	4b65      	ldr	r3, [pc, #404]	; (2fd0 <main+0x2c8>)
    2e3a:	781b      	ldrb	r3, [r3, #0]
    2e3c:	2b01      	cmp	r3, #1
    2e3e:	d063      	beq.n	2f08 <main+0x200>
    2e40:	2b02      	cmp	r3, #2
    2e42:	d100      	bne.n	2e46 <main+0x13e>
    2e44:	e0a1      	b.n	2f8a <main+0x282>
		usart_read_buffer_job(Debug_COM, (uint8_t *)user_rx_buffer, MAX_RX_BUFFER_LENGTH);
    2e46:	2201      	movs	r2, #1
    2e48:	4968      	ldr	r1, [pc, #416]	; (2fec <main+0x2e4>)
    2e4a:	4869      	ldr	r0, [pc, #420]	; (2ff0 <main+0x2e8>)
    2e4c:	47b0      	blx	r6
		usart_read_buffer_job(&MyUart03, (uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
    2e4e:	2201      	movs	r2, #1
    2e50:	4968      	ldr	r1, [pc, #416]	; (2ff4 <main+0x2ec>)
    2e52:	4869      	ldr	r0, [pc, #420]	; (2ff8 <main+0x2f0>)
    2e54:	47b0      	blx	r6
		Lora_CMD_Func();
    2e56:	4b69      	ldr	r3, [pc, #420]	; (2ffc <main+0x2f4>)
    2e58:	4798      	blx	r3
		MyLoRaTmp[Write_LoRa_TxBuffer_Index][3] = MyLoRaID[0];
    2e5a:	4b69      	ldr	r3, [pc, #420]	; (3000 <main+0x2f8>)
    2e5c:	4a69      	ldr	r2, [pc, #420]	; (3004 <main+0x2fc>)
    2e5e:	7810      	ldrb	r0, [r2, #0]
    2e60:	218a      	movs	r1, #138	; 0x8a
    2e62:	5458      	strb	r0, [r3, r1]
		MyLoRaTmp[Write_LoRa_TxBuffer_Index][4] = MyLoRaID[1];
    2e64:	7850      	ldrb	r0, [r2, #1]
    2e66:	3101      	adds	r1, #1
    2e68:	5458      	strb	r0, [r3, r1]
		MyLoRaTmp[Write_LoRa_TxBuffer_Index][5] = MyLoRaID[2];
    2e6a:	7890      	ldrb	r0, [r2, #2]
    2e6c:	3101      	adds	r1, #1
    2e6e:	5458      	strb	r0, [r3, r1]
		MyLoRaTmp[Write_LoRa_TxBuffer_Index][6] = MyLoRaID[3];
    2e70:	78d1      	ldrb	r1, [r2, #3]
    2e72:	228d      	movs	r2, #141	; 0x8d
    2e74:	5499      	strb	r1, [r3, r2]
		DIP_SW_Value.byte = 0x00;
    2e76:	495b      	ldr	r1, [pc, #364]	; (2fe4 <main+0x2dc>)
    2e78:	2300      	movs	r3, #0
    2e7a:	700b      	strb	r3, [r1, #0]
	return (port_base->IN.reg & pin_mask);
    2e7c:	4c62      	ldr	r4, [pc, #392]	; (3008 <main+0x300>)
    2e7e:	6a22      	ldr	r2, [r4, #32]
    2e80:	0d92      	lsrs	r2, r2, #22
    2e82:	3301      	adds	r3, #1
		DIP_SW_Value.bit.b0 = port_pin_get_input_level(PIN_PA22);
    2e84:	401a      	ands	r2, r3
    2e86:	700a      	strb	r2, [r1, #0]
    2e88:	6a22      	ldr	r2, [r4, #32]
    2e8a:	0c52      	lsrs	r2, r2, #17
		DIP_SW_Value.bit.b1 = port_pin_get_input_level(PIN_PA17);
    2e8c:	401a      	ands	r2, r3
    2e8e:	0052      	lsls	r2, r2, #1
    2e90:	7808      	ldrb	r0, [r1, #0]
    2e92:	2502      	movs	r5, #2
    2e94:	43a8      	bics	r0, r5
    2e96:	4302      	orrs	r2, r0
    2e98:	700a      	strb	r2, [r1, #0]
    2e9a:	6a22      	ldr	r2, [r4, #32]
    2e9c:	0c12      	lsrs	r2, r2, #16
		DIP_SW_Value.bit.b2 = port_pin_get_input_level(PIN_PA16);
    2e9e:	4013      	ands	r3, r2
    2ea0:	009b      	lsls	r3, r3, #2
    2ea2:	780a      	ldrb	r2, [r1, #0]
    2ea4:	2004      	movs	r0, #4
    2ea6:	4382      	bics	r2, r0
		DIP_SW_Value.byte = DIP_SW_Value.byte + 6;	
    2ea8:	4313      	orrs	r3, r2
    2eaa:	1d9a      	adds	r2, r3, #6
    2eac:	b2d2      	uxtb	r2, r2
    2eae:	700a      	strb	r2, [r1, #0]
		if(Lora_initial_Flag == 1)
    2eb0:	4945      	ldr	r1, [pc, #276]	; (2fc8 <main+0x2c0>)
    2eb2:	7809      	ldrb	r1, [r1, #0]
    2eb4:	0789      	lsls	r1, r1, #30
    2eb6:	d5bb      	bpl.n	2e30 <main+0x128>
			if(Last_DIP_SW_Value != DIP_SW_Value.byte)
    2eb8:	4954      	ldr	r1, [pc, #336]	; (300c <main+0x304>)
    2eba:	7809      	ldrb	r1, [r1, #0]
    2ebc:	4291      	cmp	r1, r2
    2ebe:	d0b7      	beq.n	2e30 <main+0x128>
				MyLoRaTmp[Write_LoRa_Setting_Index][5] = DIP_SW_Value.byte - 5;
    2ec0:	3301      	adds	r3, #1
    2ec2:	2171      	movs	r1, #113	; 0x71
    2ec4:	484e      	ldr	r0, [pc, #312]	; (3000 <main+0x2f8>)
    2ec6:	5443      	strb	r3, [r0, r1]
				NowStatus = Write_LoRa_Setting_Index;
    2ec8:	396d      	subs	r1, #109	; 0x6d
    2eca:	4b42      	ldr	r3, [pc, #264]	; (2fd4 <main+0x2cc>)
    2ecc:	7019      	strb	r1, [r3, #0]
				Last_DIP_SW_Value = DIP_SW_Value.byte;
    2ece:	4b4f      	ldr	r3, [pc, #316]	; (300c <main+0x304>)
    2ed0:	701a      	strb	r2, [r3, #0]
				lcd_command(lcd_instr, 0xC4);
    2ed2:	31c0      	adds	r1, #192	; 0xc0
    2ed4:	2000      	movs	r0, #0
    2ed6:	4b3b      	ldr	r3, [pc, #236]	; (2fc4 <main+0x2bc>)
    2ed8:	4798      	blx	r3
				if(DIP_SW_Value.byte < 13)
    2eda:	4b42      	ldr	r3, [pc, #264]	; (2fe4 <main+0x2dc>)
    2edc:	781b      	ldrb	r3, [r3, #0]
    2ede:	2b0c      	cmp	r3, #12
    2ee0:	d8a6      	bhi.n	2e30 <main+0x128>
					if(DIP_SW_Value.byte > 9)
    2ee2:	2b09      	cmp	r3, #9
    2ee4:	d99a      	bls.n	2e1c <main+0x114>
						lcd_command(lcd_data, 0x31);
    2ee6:	2131      	movs	r1, #49	; 0x31
    2ee8:	2001      	movs	r0, #1
    2eea:	4c36      	ldr	r4, [pc, #216]	; (2fc4 <main+0x2bc>)
    2eec:	47a0      	blx	r4
						lcd_command(lcd_data, 0x30 + (DIP_SW_Value.byte - 10));
    2eee:	4b3d      	ldr	r3, [pc, #244]	; (2fe4 <main+0x2dc>)
    2ef0:	7819      	ldrb	r1, [r3, #0]
    2ef2:	3126      	adds	r1, #38	; 0x26
    2ef4:	b2c9      	uxtb	r1, r1
    2ef6:	2001      	movs	r0, #1
    2ef8:	47a0      	blx	r4
    2efa:	e799      	b.n	2e30 <main+0x128>
			Display_Rssi();
    2efc:	4b44      	ldr	r3, [pc, #272]	; (3010 <main+0x308>)
    2efe:	4798      	blx	r3
			LoRa_Rx_Flag = LoraRxNoData;
    2f00:	2205      	movs	r2, #5
    2f02:	4b39      	ldr	r3, [pc, #228]	; (2fe8 <main+0x2e0>)
    2f04:	701a      	strb	r2, [r3, #0]
    2f06:	e797      	b.n	2e38 <main+0x130>
		{
			case UserKeyInEnterIndex:
				for(i = 0; i < UserKeyInBufCount; i++)
    2f08:	4b42      	ldr	r3, [pc, #264]	; (3014 <main+0x30c>)
    2f0a:	781b      	ldrb	r3, [r3, #0]
    2f0c:	2b00      	cmp	r3, #0
    2f0e:	d00a      	beq.n	2f26 <main+0x21e>
    2f10:	2400      	movs	r4, #0
				{
					uTXByte(Debug_COM, UserKeyInBuf[i]);
    2f12:	4d41      	ldr	r5, [pc, #260]	; (3018 <main+0x310>)
    2f14:	4f41      	ldr	r7, [pc, #260]	; (301c <main+0x314>)
    2f16:	5d29      	ldrb	r1, [r5, r4]
    2f18:	4835      	ldr	r0, [pc, #212]	; (2ff0 <main+0x2e8>)
    2f1a:	47b8      	blx	r7
				for(i = 0; i < UserKeyInBufCount; i++)
    2f1c:	3401      	adds	r4, #1
    2f1e:	4b3d      	ldr	r3, [pc, #244]	; (3014 <main+0x30c>)
    2f20:	781b      	ldrb	r3, [r3, #0]
    2f22:	42a3      	cmp	r3, r4
    2f24:	d8f7      	bhi.n	2f16 <main+0x20e>
				}
				UserKeyInBufCount = 0;
    2f26:	2200      	movs	r2, #0
    2f28:	4b3a      	ldr	r3, [pc, #232]	; (3014 <main+0x30c>)
    2f2a:	701a      	strb	r2, [r3, #0]
			
				if(UserKeyInBuf[0] == 'd')	///debug mode
    2f2c:	4b3a      	ldr	r3, [pc, #232]	; (3018 <main+0x310>)
    2f2e:	781b      	ldrb	r3, [r3, #0]
    2f30:	2b64      	cmp	r3, #100	; 0x64
    2f32:	d00b      	beq.n	2f4c <main+0x244>
					{
						Lora_Debug_Flag = 1;
						Print_Debug_Mode_ON_Msg();
					}
				}
				if(UserKeyInBuf[0] == 's')	///Print Lora FW, ID
    2f34:	4b38      	ldr	r3, [pc, #224]	; (3018 <main+0x310>)
    2f36:	781b      	ldrb	r3, [r3, #0]
    2f38:	2b73      	cmp	r3, #115	; 0x73
    2f3a:	d01b      	beq.n	2f74 <main+0x26c>
				{
					Print_Catch_LoRa_ID_Msg();
				}
				if(UserKeyInBuf[0] == 'r')	///Print RSSI
    2f3c:	4b36      	ldr	r3, [pc, #216]	; (3018 <main+0x310>)
    2f3e:	781b      	ldrb	r3, [r3, #0]
    2f40:	2b72      	cmp	r3, #114	; 0x72
    2f42:	d01a      	beq.n	2f7a <main+0x272>
					Print_Line_Msg();
					Print_RSSI_Msg();
					Print_Lora_RX_Count_Form_Module_Msg();
					Print_Line_Msg();
				}
				UserKeyInStauts = NOP;
    2f44:	2200      	movs	r2, #0
    2f46:	4b22      	ldr	r3, [pc, #136]	; (2fd0 <main+0x2c8>)
    2f48:	701a      	strb	r2, [r3, #0]
				break;
    2f4a:	e77c      	b.n	2e46 <main+0x13e>
					if(Lora_Debug_Flag == 1)
    2f4c:	4b1e      	ldr	r3, [pc, #120]	; (2fc8 <main+0x2c0>)
    2f4e:	781b      	ldrb	r3, [r3, #0]
    2f50:	071b      	lsls	r3, r3, #28
    2f52:	d507      	bpl.n	2f64 <main+0x25c>
						Lora_Debug_Flag = 0;
    2f54:	4a1c      	ldr	r2, [pc, #112]	; (2fc8 <main+0x2c0>)
    2f56:	7813      	ldrb	r3, [r2, #0]
    2f58:	2108      	movs	r1, #8
    2f5a:	438b      	bics	r3, r1
    2f5c:	7013      	strb	r3, [r2, #0]
						Print_Debug_Mode_OFF_Msg();
    2f5e:	4b30      	ldr	r3, [pc, #192]	; (3020 <main+0x318>)
    2f60:	4798      	blx	r3
    2f62:	e7e7      	b.n	2f34 <main+0x22c>
						Lora_Debug_Flag = 1;
    2f64:	4a18      	ldr	r2, [pc, #96]	; (2fc8 <main+0x2c0>)
    2f66:	7813      	ldrb	r3, [r2, #0]
    2f68:	2108      	movs	r1, #8
    2f6a:	430b      	orrs	r3, r1
    2f6c:	7013      	strb	r3, [r2, #0]
						Print_Debug_Mode_ON_Msg();
    2f6e:	4b2d      	ldr	r3, [pc, #180]	; (3024 <main+0x31c>)
    2f70:	4798      	blx	r3
    2f72:	e7df      	b.n	2f34 <main+0x22c>
					Print_Catch_LoRa_ID_Msg();
    2f74:	4b2c      	ldr	r3, [pc, #176]	; (3028 <main+0x320>)
    2f76:	4798      	blx	r3
    2f78:	e7e0      	b.n	2f3c <main+0x234>
					Print_Line_Msg();
    2f7a:	4c2c      	ldr	r4, [pc, #176]	; (302c <main+0x324>)
    2f7c:	47a0      	blx	r4
					Print_RSSI_Msg();
    2f7e:	4b2c      	ldr	r3, [pc, #176]	; (3030 <main+0x328>)
    2f80:	4798      	blx	r3
					Print_Lora_RX_Count_Form_Module_Msg();
    2f82:	4b2c      	ldr	r3, [pc, #176]	; (3034 <main+0x32c>)
    2f84:	4798      	blx	r3
					Print_Line_Msg();
    2f86:	47a0      	blx	r4
    2f88:	e7dc      	b.n	2f44 <main+0x23c>

			
			case PrintListIndex:
				UserKeyInStauts = NOP;
    2f8a:	2200      	movs	r2, #0
    2f8c:	4b10      	ldr	r3, [pc, #64]	; (2fd0 <main+0x2c8>)
    2f8e:	701a      	strb	r2, [r3, #0]
				break;
    2f90:	e759      	b.n	2e46 <main+0x13e>
    2f92:	46c0      	nop			; (mov r8, r8)
    2f94:	00002c41 	.word	0x00002c41
    2f98:	000019a9 	.word	0x000019a9
    2f9c:	00001b0d 	.word	0x00001b0d
    2fa0:	00001929 	.word	0x00001929
    2fa4:	00000821 	.word	0x00000821
    2fa8:	00000851 	.word	0x00000851
    2fac:	00001c55 	.word	0x00001c55
    2fb0:	00000109 	.word	0x00000109
    2fb4:	00000135 	.word	0x00000135
    2fb8:	200001c8 	.word	0x200001c8
    2fbc:	000007a5 	.word	0x000007a5
    2fc0:	0000090d 	.word	0x0000090d
    2fc4:	000008f1 	.word	0x000008f1
    2fc8:	20004144 	.word	0x20004144
    2fcc:	00001589 	.word	0x00001589
    2fd0:	20004146 	.word	0x20004146
    2fd4:	200040a4 	.word	0x200040a4
    2fd8:	2000426d 	.word	0x2000426d
    2fdc:	20000220 	.word	0x20000220
    2fe0:	0000254d 	.word	0x0000254d
    2fe4:	20004134 	.word	0x20004134
    2fe8:	200040ec 	.word	0x200040ec
    2fec:	200040a8 	.word	0x200040a8
    2ff0:	200040ac 	.word	0x200040ac
    2ff4:	2000414c 	.word	0x2000414c
    2ff8:	20004298 	.word	0x20004298
    2ffc:	00000bd5 	.word	0x00000bd5
    3000:	20000000 	.word	0x20000000
    3004:	20004138 	.word	0x20004138
    3008:	41004400 	.word	0x41004400
    300c:	20004145 	.word	0x20004145
    3010:	00000ff9 	.word	0x00000ff9
    3014:	20004140 	.word	0x20004140
    3018:	20004114 	.word	0x20004114
    301c:	00001b4d 	.word	0x00001b4d
    3020:	0000176d 	.word	0x0000176d
    3024:	0000171d 	.word	0x0000171d
    3028:	000014d9 	.word	0x000014d9
    302c:	000014a9 	.word	0x000014a9
    3030:	0000162d 	.word	0x0000162d
    3034:	000016a1 	.word	0x000016a1

00003038 <__udivsi3>:
    3038:	2200      	movs	r2, #0
    303a:	0843      	lsrs	r3, r0, #1
    303c:	428b      	cmp	r3, r1
    303e:	d374      	bcc.n	312a <__udivsi3+0xf2>
    3040:	0903      	lsrs	r3, r0, #4
    3042:	428b      	cmp	r3, r1
    3044:	d35f      	bcc.n	3106 <__udivsi3+0xce>
    3046:	0a03      	lsrs	r3, r0, #8
    3048:	428b      	cmp	r3, r1
    304a:	d344      	bcc.n	30d6 <__udivsi3+0x9e>
    304c:	0b03      	lsrs	r3, r0, #12
    304e:	428b      	cmp	r3, r1
    3050:	d328      	bcc.n	30a4 <__udivsi3+0x6c>
    3052:	0c03      	lsrs	r3, r0, #16
    3054:	428b      	cmp	r3, r1
    3056:	d30d      	bcc.n	3074 <__udivsi3+0x3c>
    3058:	22ff      	movs	r2, #255	; 0xff
    305a:	0209      	lsls	r1, r1, #8
    305c:	ba12      	rev	r2, r2
    305e:	0c03      	lsrs	r3, r0, #16
    3060:	428b      	cmp	r3, r1
    3062:	d302      	bcc.n	306a <__udivsi3+0x32>
    3064:	1212      	asrs	r2, r2, #8
    3066:	0209      	lsls	r1, r1, #8
    3068:	d065      	beq.n	3136 <__udivsi3+0xfe>
    306a:	0b03      	lsrs	r3, r0, #12
    306c:	428b      	cmp	r3, r1
    306e:	d319      	bcc.n	30a4 <__udivsi3+0x6c>
    3070:	e000      	b.n	3074 <__udivsi3+0x3c>
    3072:	0a09      	lsrs	r1, r1, #8
    3074:	0bc3      	lsrs	r3, r0, #15
    3076:	428b      	cmp	r3, r1
    3078:	d301      	bcc.n	307e <__udivsi3+0x46>
    307a:	03cb      	lsls	r3, r1, #15
    307c:	1ac0      	subs	r0, r0, r3
    307e:	4152      	adcs	r2, r2
    3080:	0b83      	lsrs	r3, r0, #14
    3082:	428b      	cmp	r3, r1
    3084:	d301      	bcc.n	308a <__udivsi3+0x52>
    3086:	038b      	lsls	r3, r1, #14
    3088:	1ac0      	subs	r0, r0, r3
    308a:	4152      	adcs	r2, r2
    308c:	0b43      	lsrs	r3, r0, #13
    308e:	428b      	cmp	r3, r1
    3090:	d301      	bcc.n	3096 <__udivsi3+0x5e>
    3092:	034b      	lsls	r3, r1, #13
    3094:	1ac0      	subs	r0, r0, r3
    3096:	4152      	adcs	r2, r2
    3098:	0b03      	lsrs	r3, r0, #12
    309a:	428b      	cmp	r3, r1
    309c:	d301      	bcc.n	30a2 <__udivsi3+0x6a>
    309e:	030b      	lsls	r3, r1, #12
    30a0:	1ac0      	subs	r0, r0, r3
    30a2:	4152      	adcs	r2, r2
    30a4:	0ac3      	lsrs	r3, r0, #11
    30a6:	428b      	cmp	r3, r1
    30a8:	d301      	bcc.n	30ae <__udivsi3+0x76>
    30aa:	02cb      	lsls	r3, r1, #11
    30ac:	1ac0      	subs	r0, r0, r3
    30ae:	4152      	adcs	r2, r2
    30b0:	0a83      	lsrs	r3, r0, #10
    30b2:	428b      	cmp	r3, r1
    30b4:	d301      	bcc.n	30ba <__udivsi3+0x82>
    30b6:	028b      	lsls	r3, r1, #10
    30b8:	1ac0      	subs	r0, r0, r3
    30ba:	4152      	adcs	r2, r2
    30bc:	0a43      	lsrs	r3, r0, #9
    30be:	428b      	cmp	r3, r1
    30c0:	d301      	bcc.n	30c6 <__udivsi3+0x8e>
    30c2:	024b      	lsls	r3, r1, #9
    30c4:	1ac0      	subs	r0, r0, r3
    30c6:	4152      	adcs	r2, r2
    30c8:	0a03      	lsrs	r3, r0, #8
    30ca:	428b      	cmp	r3, r1
    30cc:	d301      	bcc.n	30d2 <__udivsi3+0x9a>
    30ce:	020b      	lsls	r3, r1, #8
    30d0:	1ac0      	subs	r0, r0, r3
    30d2:	4152      	adcs	r2, r2
    30d4:	d2cd      	bcs.n	3072 <__udivsi3+0x3a>
    30d6:	09c3      	lsrs	r3, r0, #7
    30d8:	428b      	cmp	r3, r1
    30da:	d301      	bcc.n	30e0 <__udivsi3+0xa8>
    30dc:	01cb      	lsls	r3, r1, #7
    30de:	1ac0      	subs	r0, r0, r3
    30e0:	4152      	adcs	r2, r2
    30e2:	0983      	lsrs	r3, r0, #6
    30e4:	428b      	cmp	r3, r1
    30e6:	d301      	bcc.n	30ec <__udivsi3+0xb4>
    30e8:	018b      	lsls	r3, r1, #6
    30ea:	1ac0      	subs	r0, r0, r3
    30ec:	4152      	adcs	r2, r2
    30ee:	0943      	lsrs	r3, r0, #5
    30f0:	428b      	cmp	r3, r1
    30f2:	d301      	bcc.n	30f8 <__udivsi3+0xc0>
    30f4:	014b      	lsls	r3, r1, #5
    30f6:	1ac0      	subs	r0, r0, r3
    30f8:	4152      	adcs	r2, r2
    30fa:	0903      	lsrs	r3, r0, #4
    30fc:	428b      	cmp	r3, r1
    30fe:	d301      	bcc.n	3104 <__udivsi3+0xcc>
    3100:	010b      	lsls	r3, r1, #4
    3102:	1ac0      	subs	r0, r0, r3
    3104:	4152      	adcs	r2, r2
    3106:	08c3      	lsrs	r3, r0, #3
    3108:	428b      	cmp	r3, r1
    310a:	d301      	bcc.n	3110 <__udivsi3+0xd8>
    310c:	00cb      	lsls	r3, r1, #3
    310e:	1ac0      	subs	r0, r0, r3
    3110:	4152      	adcs	r2, r2
    3112:	0883      	lsrs	r3, r0, #2
    3114:	428b      	cmp	r3, r1
    3116:	d301      	bcc.n	311c <__udivsi3+0xe4>
    3118:	008b      	lsls	r3, r1, #2
    311a:	1ac0      	subs	r0, r0, r3
    311c:	4152      	adcs	r2, r2
    311e:	0843      	lsrs	r3, r0, #1
    3120:	428b      	cmp	r3, r1
    3122:	d301      	bcc.n	3128 <__udivsi3+0xf0>
    3124:	004b      	lsls	r3, r1, #1
    3126:	1ac0      	subs	r0, r0, r3
    3128:	4152      	adcs	r2, r2
    312a:	1a41      	subs	r1, r0, r1
    312c:	d200      	bcs.n	3130 <__udivsi3+0xf8>
    312e:	4601      	mov	r1, r0
    3130:	4152      	adcs	r2, r2
    3132:	4610      	mov	r0, r2
    3134:	4770      	bx	lr
    3136:	e7ff      	b.n	3138 <__udivsi3+0x100>
    3138:	b501      	push	{r0, lr}
    313a:	2000      	movs	r0, #0
    313c:	f000 f806 	bl	314c <__aeabi_idiv0>
    3140:	bd02      	pop	{r1, pc}
    3142:	46c0      	nop			; (mov r8, r8)

00003144 <__aeabi_uidivmod>:
    3144:	2900      	cmp	r1, #0
    3146:	d0f7      	beq.n	3138 <__udivsi3+0x100>
    3148:	e776      	b.n	3038 <__udivsi3>
    314a:	4770      	bx	lr

0000314c <__aeabi_idiv0>:
    314c:	4770      	bx	lr
    314e:	46c0      	nop			; (mov r8, r8)

00003150 <__aeabi_lmul>:
    3150:	b5f0      	push	{r4, r5, r6, r7, lr}
    3152:	46ce      	mov	lr, r9
    3154:	4647      	mov	r7, r8
    3156:	0415      	lsls	r5, r2, #16
    3158:	0c2d      	lsrs	r5, r5, #16
    315a:	002e      	movs	r6, r5
    315c:	b580      	push	{r7, lr}
    315e:	0407      	lsls	r7, r0, #16
    3160:	0c14      	lsrs	r4, r2, #16
    3162:	0c3f      	lsrs	r7, r7, #16
    3164:	4699      	mov	r9, r3
    3166:	0c03      	lsrs	r3, r0, #16
    3168:	437e      	muls	r6, r7
    316a:	435d      	muls	r5, r3
    316c:	4367      	muls	r7, r4
    316e:	4363      	muls	r3, r4
    3170:	197f      	adds	r7, r7, r5
    3172:	0c34      	lsrs	r4, r6, #16
    3174:	19e4      	adds	r4, r4, r7
    3176:	469c      	mov	ip, r3
    3178:	42a5      	cmp	r5, r4
    317a:	d903      	bls.n	3184 <__aeabi_lmul+0x34>
    317c:	2380      	movs	r3, #128	; 0x80
    317e:	025b      	lsls	r3, r3, #9
    3180:	4698      	mov	r8, r3
    3182:	44c4      	add	ip, r8
    3184:	464b      	mov	r3, r9
    3186:	4351      	muls	r1, r2
    3188:	4343      	muls	r3, r0
    318a:	0436      	lsls	r6, r6, #16
    318c:	0c36      	lsrs	r6, r6, #16
    318e:	0c25      	lsrs	r5, r4, #16
    3190:	0424      	lsls	r4, r4, #16
    3192:	4465      	add	r5, ip
    3194:	19a4      	adds	r4, r4, r6
    3196:	1859      	adds	r1, r3, r1
    3198:	1949      	adds	r1, r1, r5
    319a:	0020      	movs	r0, r4
    319c:	bc0c      	pop	{r2, r3}
    319e:	4690      	mov	r8, r2
    31a0:	4699      	mov	r9, r3
    31a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000031a4 <__libc_init_array>:
    31a4:	b570      	push	{r4, r5, r6, lr}
    31a6:	2600      	movs	r6, #0
    31a8:	4d0c      	ldr	r5, [pc, #48]	; (31dc <__libc_init_array+0x38>)
    31aa:	4c0d      	ldr	r4, [pc, #52]	; (31e0 <__libc_init_array+0x3c>)
    31ac:	1b64      	subs	r4, r4, r5
    31ae:	10a4      	asrs	r4, r4, #2
    31b0:	42a6      	cmp	r6, r4
    31b2:	d109      	bne.n	31c8 <__libc_init_array+0x24>
    31b4:	2600      	movs	r6, #0
    31b6:	f000 f947 	bl	3448 <_init>
    31ba:	4d0a      	ldr	r5, [pc, #40]	; (31e4 <__libc_init_array+0x40>)
    31bc:	4c0a      	ldr	r4, [pc, #40]	; (31e8 <__libc_init_array+0x44>)
    31be:	1b64      	subs	r4, r4, r5
    31c0:	10a4      	asrs	r4, r4, #2
    31c2:	42a6      	cmp	r6, r4
    31c4:	d105      	bne.n	31d2 <__libc_init_array+0x2e>
    31c6:	bd70      	pop	{r4, r5, r6, pc}
    31c8:	00b3      	lsls	r3, r6, #2
    31ca:	58eb      	ldr	r3, [r5, r3]
    31cc:	4798      	blx	r3
    31ce:	3601      	adds	r6, #1
    31d0:	e7ee      	b.n	31b0 <__libc_init_array+0xc>
    31d2:	00b3      	lsls	r3, r6, #2
    31d4:	58eb      	ldr	r3, [r5, r3]
    31d6:	4798      	blx	r3
    31d8:	3601      	adds	r6, #1
    31da:	e7f2      	b.n	31c2 <__libc_init_array+0x1e>
    31dc:	00003454 	.word	0x00003454
    31e0:	00003454 	.word	0x00003454
    31e4:	00003454 	.word	0x00003454
    31e8:	00003458 	.word	0x00003458

000031ec <memcpy>:
    31ec:	2300      	movs	r3, #0
    31ee:	b510      	push	{r4, lr}
    31f0:	429a      	cmp	r2, r3
    31f2:	d100      	bne.n	31f6 <memcpy+0xa>
    31f4:	bd10      	pop	{r4, pc}
    31f6:	5ccc      	ldrb	r4, [r1, r3]
    31f8:	54c4      	strb	r4, [r0, r3]
    31fa:	3301      	adds	r3, #1
    31fc:	e7f8      	b.n	31f0 <memcpy+0x4>
    31fe:	0000      	movs	r0, r0
    3200:	42002000 	.word	0x42002000
    3204:	42002400 	.word	0x42002400
    3208:	42002800 	.word	0x42002800
    320c:	42002c00 	.word	0x42002c00
    3210:	42003000 	.word	0x42003000
    3214:	42003400 	.word	0x42003400
    3218:	42003800 	.word	0x42003800
    321c:	42003c00 	.word	0x42003c00
    3220:	02000100 	.word	0x02000100
    3224:	08000400 	.word	0x08000400
    3228:	20001000 	.word	0x20001000
    322c:	80004000 	.word	0x80004000
    3230:	00000d56 	.word	0x00000d56
    3234:	00000da6 	.word	0x00000da6
    3238:	00000dc4 	.word	0x00000dc4
    323c:	00000e02 	.word	0x00000e02
    3240:	00000de2 	.word	0x00000de2
    3244:	00000eb2 	.word	0x00000eb2
    3248:	00000e7c 	.word	0x00000e7c
    324c:	00000e3a 	.word	0x00000e3a
    3250:	00000cfc 	.word	0x00000cfc
    3254:	00000cfc 	.word	0x00000cfc
    3258:	00000cfc 	.word	0x00000cfc
    325c:	00000cfc 	.word	0x00000cfc
    3260:	00000cfc 	.word	0x00000cfc
    3264:	00000cfc 	.word	0x00000cfc
    3268:	00000cfc 	.word	0x00000cfc
    326c:	00000cfc 	.word	0x00000cfc
    3270:	00000cfc 	.word	0x00000cfc
    3274:	00000cfc 	.word	0x00000cfc
    3278:	00000cfc 	.word	0x00000cfc
    327c:	00000cfc 	.word	0x00000cfc
    3280:	00000cfc 	.word	0x00000cfc
    3284:	00000cfc 	.word	0x00000cfc
    3288:	00000cfc 	.word	0x00000cfc
    328c:	00000cfc 	.word	0x00000cfc
    3290:	00000cfc 	.word	0x00000cfc
    3294:	00000cfc 	.word	0x00000cfc
    3298:	00000cfc 	.word	0x00000cfc
    329c:	00000cfc 	.word	0x00000cfc
    32a0:	00000cfc 	.word	0x00000cfc
    32a4:	00000cfc 	.word	0x00000cfc
    32a8:	00000cfc 	.word	0x00000cfc
    32ac:	00000cfc 	.word	0x00000cfc
    32b0:	00000cfc 	.word	0x00000cfc
    32b4:	00000cfc 	.word	0x00000cfc
    32b8:	00000cfc 	.word	0x00000cfc
    32bc:	00000cfc 	.word	0x00000cfc
    32c0:	00000cfc 	.word	0x00000cfc
    32c4:	00000cfc 	.word	0x00000cfc
    32c8:	00000cfc 	.word	0x00000cfc
    32cc:	00000cfc 	.word	0x00000cfc
    32d0:	00000cfc 	.word	0x00000cfc
    32d4:	00000cfc 	.word	0x00000cfc
    32d8:	00000cfc 	.word	0x00000cfc
    32dc:	00000cfc 	.word	0x00000cfc
    32e0:	00000cfc 	.word	0x00000cfc
    32e4:	00000cfc 	.word	0x00000cfc
    32e8:	00000cfc 	.word	0x00000cfc
    32ec:	00000cfc 	.word	0x00000cfc
    32f0:	00000cfc 	.word	0x00000cfc
    32f4:	00000cfc 	.word	0x00000cfc
    32f8:	00000cfc 	.word	0x00000cfc
    32fc:	00000cfc 	.word	0x00000cfc
    3300:	00000cfc 	.word	0x00000cfc
    3304:	00000cfc 	.word	0x00000cfc
    3308:	00000cfc 	.word	0x00000cfc
    330c:	00000cfc 	.word	0x00000cfc
    3310:	00000cfc 	.word	0x00000cfc
    3314:	00000cfc 	.word	0x00000cfc
    3318:	00000cfc 	.word	0x00000cfc
    331c:	00000cfc 	.word	0x00000cfc
    3320:	00000cfc 	.word	0x00000cfc
    3324:	00000cfc 	.word	0x00000cfc
    3328:	00000cfc 	.word	0x00000cfc
    332c:	00000cfc 	.word	0x00000cfc
    3330:	00000cfc 	.word	0x00000cfc
    3334:	00000cfc 	.word	0x00000cfc
    3338:	00000cfc 	.word	0x00000cfc
    333c:	00000cfc 	.word	0x00000cfc
    3340:	00000cfc 	.word	0x00000cfc
    3344:	00000cfc 	.word	0x00000cfc
    3348:	00000cfc 	.word	0x00000cfc
    334c:	00000cfc 	.word	0x00000cfc
    3350:	00000cfc 	.word	0x00000cfc
    3354:	00000cfc 	.word	0x00000cfc
    3358:	00000cfc 	.word	0x00000cfc
    335c:	00000cfc 	.word	0x00000cfc
    3360:	00000cfc 	.word	0x00000cfc
    3364:	00000cfc 	.word	0x00000cfc
    3368:	00000cfc 	.word	0x00000cfc
    336c:	00000cfc 	.word	0x00000cfc
    3370:	00000cfc 	.word	0x00000cfc
    3374:	00000cfc 	.word	0x00000cfc
    3378:	00000cfc 	.word	0x00000cfc
    337c:	00000cfc 	.word	0x00000cfc
    3380:	00000cfc 	.word	0x00000cfc
    3384:	00000cfc 	.word	0x00000cfc
    3388:	00000cfc 	.word	0x00000cfc
    338c:	00000cfc 	.word	0x00000cfc
    3390:	00000cfc 	.word	0x00000cfc
    3394:	00000cfc 	.word	0x00000cfc
    3398:	00000cfc 	.word	0x00000cfc
    339c:	00000cfc 	.word	0x00000cfc
    33a0:	00000cfc 	.word	0x00000cfc
    33a4:	00000cfc 	.word	0x00000cfc
    33a8:	00000cfc 	.word	0x00000cfc
    33ac:	00000cfc 	.word	0x00000cfc
    33b0:	00000cfc 	.word	0x00000cfc
    33b4:	00000cfc 	.word	0x00000cfc
    33b8:	00000cfc 	.word	0x00000cfc
    33bc:	00000cfc 	.word	0x00000cfc
    33c0:	00000e9a 	.word	0x00000e9a
    33c4:	00000ef6 	.word	0x00000ef6
    33c8:	00000cfc 	.word	0x00000cfc
    33cc:	00000c18 	.word	0x00000c18
    33d0:	00000c62 	.word	0x00000c62
    33d4:	00000d76 	.word	0x00000d76
    33d8:	00000fec 	.word	0x00000fec
    33dc:	00000bea 	.word	0x00000bea
    33e0:	00000ed2 	.word	0x00000ed2
    33e4:	00000e70 	.word	0x00000e70

000033e8 <tc_interrupt_vectors.10500>:
    33e8:	100f0e0d 14131211 42000800 42000c00     ...........B...B
    33f8:	42001000 42001400 42001800 42001c00     ...B...B...B...B
    3408:	000026a2 0000269e 0000269e 000026ee     .&...&...&...&..
    3418:	000026ee 000026b6 000026a8 000026bc     .&...&...&...&..
    3428:	00002774 00002754 00002754 000027c4     t'..T'..T'...'..
    3438:	00002766 00002782 00002758 00002790     f'...'..X'...'..

00003448 <_init>:
    3448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    344a:	46c0      	nop			; (mov r8, r8)
    344c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    344e:	bc08      	pop	{r3}
    3450:	469e      	mov	lr, r3
    3452:	4770      	bx	lr

00003454 <__init_array_start>:
    3454:	000000cd 	.word	0x000000cd

00003458 <_fini>:
    3458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    345a:	46c0      	nop			; (mov r8, r8)
    345c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    345e:	bc08      	pop	{r3}
    3460:	469e      	mov	lr, r3
    3462:	4770      	bx	lr

00003464 <__fini_array_start>:
    3464:	000000a5 	.word	0x000000a5
