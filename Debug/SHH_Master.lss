
SHH_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000593c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001cc  20000000  0000593c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00003430  200001cc  00005b08  000201cc  2**2
                  ALLOC
  3 .stack        00002004  200035fc  00008f38  000201cc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
  6 .debug_info   0006039d  00000000  00000000  0002024d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006d12  00000000  00000000  000805ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00009144  00000000  00000000  000872fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000ab8  00000000  00000000  00090440  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b48  00000000  00000000  00090ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00019686  00000000  00000000  00091a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00018126  00000000  00000000  000ab0c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000645a0  00000000  00000000  000c31ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001b80  00000000  00000000  0012778c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	00 56 00 20 2d 4e 00 00 29 4e 00 00 29 4e 00 00     .V. -N..)N..)N..
	...
      2c:	29 4e 00 00 00 00 00 00 00 00 00 00 29 4e 00 00     )N..........)N..
      3c:	29 4e 00 00 29 4e 00 00 29 4e 00 00 45 23 00 00     )N..)N..)N..E#..
      4c:	29 4e 00 00 f5 1c 00 00 29 4e 00 00 29 4e 00 00     )N......)N..)N..
      5c:	d1 43 00 00 e1 43 00 00 f1 43 00 00 01 44 00 00     .C...C...C...D..
      6c:	11 44 00 00 21 44 00 00 f1 1e 00 00 01 1f 00 00     .D..!D..........
      7c:	11 1f 00 00 21 1f 00 00 31 1f 00 00 41 1f 00 00     ....!...1...A...
      8c:	51 1f 00 00 61 1f 00 00 29 4e 00 00 29 4e 00 00     Q...a...)N..)N..
      9c:	29 4e 00 00 29 4e 00 00                             )N..)N..

000000a4 <__do_global_dtors_aux>:
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
      b0:	2b00      	cmp	r3, #0
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
      bc:	7023      	strb	r3, [r4, #0]
      be:	bd10      	pop	{r4, pc}
      c0:	200001cc 	.word	0x200001cc
      c4:	00000000 	.word	0x00000000
      c8:	0000593c 	.word	0x0000593c

000000cc <frame_dummy>:
      cc:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
      ce:	b510      	push	{r4, lr}
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
      d4:	4907      	ldr	r1, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4808      	ldr	r0, [pc, #32]	; (f8 <frame_dummy+0x2c>)
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
      e4:	bd10      	pop	{r4, pc}
      e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e8:	2b00      	cmp	r3, #0
      ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
      ec:	4798      	blx	r3
      ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
      f0:	00000000 	.word	0x00000000
      f4:	200001d0 	.word	0x200001d0
      f8:	0000593c 	.word	0x0000593c
      fc:	0000593c 	.word	0x0000593c
     100:	00000000 	.word	0x00000000

00000104 <nvm_set_config>:
     104:	b510      	push	{r4, lr}
     106:	4a1e      	ldr	r2, [pc, #120]	; (180 <nvm_set_config+0x7c>)
     108:	69d3      	ldr	r3, [r2, #28]
     10a:	2104      	movs	r1, #4
     10c:	430b      	orrs	r3, r1
     10e:	61d3      	str	r3, [r2, #28]
     110:	4b1c      	ldr	r3, [pc, #112]	; (184 <nvm_set_config+0x80>)
     112:	2220      	movs	r2, #32
     114:	32ff      	adds	r2, #255	; 0xff
     116:	831a      	strh	r2, [r3, #24]
     118:	7d1a      	ldrb	r2, [r3, #20]
     11a:	2305      	movs	r3, #5
     11c:	07d2      	lsls	r2, r2, #31
     11e:	d401      	bmi.n	124 <nvm_set_config+0x20>
     120:	0018      	movs	r0, r3
     122:	bd10      	pop	{r4, pc}
     124:	7803      	ldrb	r3, [r0, #0]
     126:	021b      	lsls	r3, r3, #8
     128:	22c0      	movs	r2, #192	; 0xc0
     12a:	0092      	lsls	r2, r2, #2
     12c:	4013      	ands	r3, r2
     12e:	7841      	ldrb	r1, [r0, #1]
     130:	01c9      	lsls	r1, r1, #7
     132:	22ff      	movs	r2, #255	; 0xff
     134:	400a      	ands	r2, r1
     136:	4313      	orrs	r3, r2
     138:	7881      	ldrb	r1, [r0, #2]
     13a:	0049      	lsls	r1, r1, #1
     13c:	221e      	movs	r2, #30
     13e:	400a      	ands	r2, r1
     140:	4313      	orrs	r3, r2
     142:	78c2      	ldrb	r2, [r0, #3]
     144:	0492      	lsls	r2, r2, #18
     146:	2180      	movs	r1, #128	; 0x80
     148:	02c9      	lsls	r1, r1, #11
     14a:	400a      	ands	r2, r1
     14c:	4313      	orrs	r3, r2
     14e:	7902      	ldrb	r2, [r0, #4]
     150:	0412      	lsls	r2, r2, #16
     152:	21c0      	movs	r1, #192	; 0xc0
     154:	0289      	lsls	r1, r1, #10
     156:	400a      	ands	r2, r1
     158:	4313      	orrs	r3, r2
     15a:	4a0a      	ldr	r2, [pc, #40]	; (184 <nvm_set_config+0x80>)
     15c:	6053      	str	r3, [r2, #4]
     15e:	6893      	ldr	r3, [r2, #8]
     160:	035b      	lsls	r3, r3, #13
     162:	0f5b      	lsrs	r3, r3, #29
     164:	4908      	ldr	r1, [pc, #32]	; (188 <nvm_set_config+0x84>)
     166:	2408      	movs	r4, #8
     168:	409c      	lsls	r4, r3
     16a:	800c      	strh	r4, [r1, #0]
     16c:	6893      	ldr	r3, [r2, #8]
     16e:	804b      	strh	r3, [r1, #2]
     170:	7843      	ldrb	r3, [r0, #1]
     172:	710b      	strb	r3, [r1, #4]
     174:	8b13      	ldrh	r3, [r2, #24]
     176:	05db      	lsls	r3, r3, #23
     178:	0fdb      	lsrs	r3, r3, #31
     17a:	011b      	lsls	r3, r3, #4
     17c:	e7d0      	b.n	120 <nvm_set_config+0x1c>
     17e:	46c0      	nop			; (mov r8, r8)
     180:	40000400 	.word	0x40000400
     184:	41004000 	.word	0x41004000
     188:	200001e8 	.word	0x200001e8

0000018c <nvm_execute_command>:
     18c:	b530      	push	{r4, r5, lr}
     18e:	0004      	movs	r4, r0
     190:	4a22      	ldr	r2, [pc, #136]	; (21c <nvm_execute_command+0x90>)
     192:	8810      	ldrh	r0, [r2, #0]
     194:	8853      	ldrh	r3, [r2, #2]
     196:	4343      	muls	r3, r0
     198:	428b      	cmp	r3, r1
     19a:	d206      	bcs.n	1aa <nvm_execute_command+0x1e>
     19c:	2280      	movs	r2, #128	; 0x80
     19e:	0192      	lsls	r2, r2, #6
     1a0:	2018      	movs	r0, #24
     1a2:	4b1f      	ldr	r3, [pc, #124]	; (220 <nvm_execute_command+0x94>)
     1a4:	18cb      	adds	r3, r1, r3
     1a6:	4293      	cmp	r3, r2
     1a8:	d80e      	bhi.n	1c8 <nvm_execute_command+0x3c>
     1aa:	4b1e      	ldr	r3, [pc, #120]	; (224 <nvm_execute_command+0x98>)
     1ac:	685d      	ldr	r5, [r3, #4]
     1ae:	2280      	movs	r2, #128	; 0x80
     1b0:	02d2      	lsls	r2, r2, #11
     1b2:	432a      	orrs	r2, r5
     1b4:	605a      	str	r2, [r3, #4]
     1b6:	2220      	movs	r2, #32
     1b8:	32ff      	adds	r2, #255	; 0xff
     1ba:	831a      	strh	r2, [r3, #24]
     1bc:	7d1b      	ldrb	r3, [r3, #20]
     1be:	07db      	lsls	r3, r3, #31
     1c0:	d403      	bmi.n	1ca <nvm_execute_command+0x3e>
     1c2:	4b18      	ldr	r3, [pc, #96]	; (224 <nvm_execute_command+0x98>)
     1c4:	605d      	str	r5, [r3, #4]
     1c6:	2005      	movs	r0, #5
     1c8:	bd30      	pop	{r4, r5, pc}
     1ca:	2c45      	cmp	r4, #69	; 0x45
     1cc:	d822      	bhi.n	214 <nvm_execute_command+0x88>
     1ce:	00a3      	lsls	r3, r4, #2
     1d0:	4a15      	ldr	r2, [pc, #84]	; (228 <nvm_execute_command+0x9c>)
     1d2:	58d3      	ldr	r3, [r2, r3]
     1d4:	469f      	mov	pc, r3
     1d6:	4b13      	ldr	r3, [pc, #76]	; (224 <nvm_execute_command+0x98>)
     1d8:	8b1b      	ldrh	r3, [r3, #24]
     1da:	05db      	lsls	r3, r3, #23
     1dc:	d503      	bpl.n	1e6 <nvm_execute_command+0x5a>
     1de:	4b11      	ldr	r3, [pc, #68]	; (224 <nvm_execute_command+0x98>)
     1e0:	605d      	str	r5, [r3, #4]
     1e2:	2010      	movs	r0, #16
     1e4:	e7f0      	b.n	1c8 <nvm_execute_command+0x3c>
     1e6:	0889      	lsrs	r1, r1, #2
     1e8:	0049      	lsls	r1, r1, #1
     1ea:	4b0e      	ldr	r3, [pc, #56]	; (224 <nvm_execute_command+0x98>)
     1ec:	61d9      	str	r1, [r3, #28]
     1ee:	e003      	b.n	1f8 <nvm_execute_command+0x6c>
     1f0:	0889      	lsrs	r1, r1, #2
     1f2:	0049      	lsls	r1, r1, #1
     1f4:	4b0b      	ldr	r3, [pc, #44]	; (224 <nvm_execute_command+0x98>)
     1f6:	61d9      	str	r1, [r3, #28]
     1f8:	20a5      	movs	r0, #165	; 0xa5
     1fa:	0200      	lsls	r0, r0, #8
     1fc:	4304      	orrs	r4, r0
     1fe:	4b09      	ldr	r3, [pc, #36]	; (224 <nvm_execute_command+0x98>)
     200:	801c      	strh	r4, [r3, #0]
     202:	0019      	movs	r1, r3
     204:	2201      	movs	r2, #1
     206:	7d0b      	ldrb	r3, [r1, #20]
     208:	4213      	tst	r3, r2
     20a:	d0fc      	beq.n	206 <nvm_execute_command+0x7a>
     20c:	4b05      	ldr	r3, [pc, #20]	; (224 <nvm_execute_command+0x98>)
     20e:	605d      	str	r5, [r3, #4]
     210:	2000      	movs	r0, #0
     212:	e7d9      	b.n	1c8 <nvm_execute_command+0x3c>
     214:	4b03      	ldr	r3, [pc, #12]	; (224 <nvm_execute_command+0x98>)
     216:	605d      	str	r5, [r3, #4]
     218:	2017      	movs	r0, #23
     21a:	e7d5      	b.n	1c8 <nvm_execute_command+0x3c>
     21c:	200001e8 	.word	0x200001e8
     220:	ff7fc000 	.word	0xff7fc000
     224:	41004000 	.word	0x41004000
     228:	00005588 	.word	0x00005588

0000022c <nvm_write_buffer>:
     22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     22e:	4b25      	ldr	r3, [pc, #148]	; (2c4 <nvm_write_buffer+0x98>)
     230:	881d      	ldrh	r5, [r3, #0]
     232:	885b      	ldrh	r3, [r3, #2]
     234:	436b      	muls	r3, r5
     236:	2418      	movs	r4, #24
     238:	4283      	cmp	r3, r0
     23a:	d201      	bcs.n	240 <nvm_write_buffer+0x14>
     23c:	0020      	movs	r0, r4
     23e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     240:	1e6b      	subs	r3, r5, #1
     242:	4218      	tst	r0, r3
     244:	d1fa      	bne.n	23c <nvm_write_buffer+0x10>
     246:	3c01      	subs	r4, #1
     248:	4295      	cmp	r5, r2
     24a:	d3f7      	bcc.n	23c <nvm_write_buffer+0x10>
     24c:	4b1e      	ldr	r3, [pc, #120]	; (2c8 <nvm_write_buffer+0x9c>)
     24e:	7d1b      	ldrb	r3, [r3, #20]
     250:	3c12      	subs	r4, #18
     252:	07db      	lsls	r3, r3, #31
     254:	d5f2      	bpl.n	23c <nvm_write_buffer+0x10>
     256:	4c1d      	ldr	r4, [pc, #116]	; (2cc <nvm_write_buffer+0xa0>)
     258:	4b1b      	ldr	r3, [pc, #108]	; (2c8 <nvm_write_buffer+0x9c>)
     25a:	801c      	strh	r4, [r3, #0]
     25c:	001d      	movs	r5, r3
     25e:	2401      	movs	r4, #1
     260:	7d2b      	ldrb	r3, [r5, #20]
     262:	4223      	tst	r3, r4
     264:	d0fc      	beq.n	260 <nvm_write_buffer+0x34>
     266:	2420      	movs	r4, #32
     268:	34ff      	adds	r4, #255	; 0xff
     26a:	4b17      	ldr	r3, [pc, #92]	; (2c8 <nvm_write_buffer+0x9c>)
     26c:	831c      	strh	r4, [r3, #24]
     26e:	2a00      	cmp	r2, #0
     270:	d022      	beq.n	2b8 <nvm_write_buffer+0x8c>
     272:	2301      	movs	r3, #1
     274:	0005      	movs	r5, r0
     276:	439d      	bics	r5, r3
     278:	2300      	movs	r3, #0
     27a:	1e57      	subs	r7, r2, #1
     27c:	e009      	b.n	292 <nvm_write_buffer+0x66>
     27e:	18ce      	adds	r6, r1, r3
     280:	7876      	ldrb	r6, [r6, #1]
     282:	0236      	lsls	r6, r6, #8
     284:	4334      	orrs	r4, r6
     286:	802c      	strh	r4, [r5, #0]
     288:	3302      	adds	r3, #2
     28a:	b29b      	uxth	r3, r3
     28c:	3502      	adds	r5, #2
     28e:	429a      	cmp	r2, r3
     290:	d904      	bls.n	29c <nvm_write_buffer+0x70>
     292:	5ccc      	ldrb	r4, [r1, r3]
     294:	42bb      	cmp	r3, r7
     296:	dbf2      	blt.n	27e <nvm_write_buffer+0x52>
     298:	b2a4      	uxth	r4, r4
     29a:	e7f4      	b.n	286 <nvm_write_buffer+0x5a>
     29c:	4b09      	ldr	r3, [pc, #36]	; (2c4 <nvm_write_buffer+0x98>)
     29e:	791b      	ldrb	r3, [r3, #4]
     2a0:	2400      	movs	r4, #0
     2a2:	2b00      	cmp	r3, #0
     2a4:	d1ca      	bne.n	23c <nvm_write_buffer+0x10>
     2a6:	2a3f      	cmp	r2, #63	; 0x3f
     2a8:	d8c8      	bhi.n	23c <nvm_write_buffer+0x10>
     2aa:	2200      	movs	r2, #0
     2ac:	0001      	movs	r1, r0
     2ae:	2004      	movs	r0, #4
     2b0:	4b07      	ldr	r3, [pc, #28]	; (2d0 <nvm_write_buffer+0xa4>)
     2b2:	4798      	blx	r3
     2b4:	0004      	movs	r4, r0
     2b6:	e7c1      	b.n	23c <nvm_write_buffer+0x10>
     2b8:	4b02      	ldr	r3, [pc, #8]	; (2c4 <nvm_write_buffer+0x98>)
     2ba:	791b      	ldrb	r3, [r3, #4]
     2bc:	2400      	movs	r4, #0
     2be:	2b00      	cmp	r3, #0
     2c0:	d0f3      	beq.n	2aa <nvm_write_buffer+0x7e>
     2c2:	e7bb      	b.n	23c <nvm_write_buffer+0x10>
     2c4:	200001e8 	.word	0x200001e8
     2c8:	41004000 	.word	0x41004000
     2cc:	ffffa544 	.word	0xffffa544
     2d0:	0000018d 	.word	0x0000018d

000002d4 <nvm_read_buffer>:
     2d4:	b570      	push	{r4, r5, r6, lr}
     2d6:	4b18      	ldr	r3, [pc, #96]	; (338 <nvm_read_buffer+0x64>)
     2d8:	881d      	ldrh	r5, [r3, #0]
     2da:	885b      	ldrh	r3, [r3, #2]
     2dc:	436b      	muls	r3, r5
     2de:	2418      	movs	r4, #24
     2e0:	4283      	cmp	r3, r0
     2e2:	d201      	bcs.n	2e8 <nvm_read_buffer+0x14>
     2e4:	0020      	movs	r0, r4
     2e6:	bd70      	pop	{r4, r5, r6, pc}
     2e8:	1e6b      	subs	r3, r5, #1
     2ea:	4218      	tst	r0, r3
     2ec:	d1fa      	bne.n	2e4 <nvm_read_buffer+0x10>
     2ee:	3c01      	subs	r4, #1
     2f0:	4295      	cmp	r5, r2
     2f2:	d3f7      	bcc.n	2e4 <nvm_read_buffer+0x10>
     2f4:	4b11      	ldr	r3, [pc, #68]	; (33c <nvm_read_buffer+0x68>)
     2f6:	7d1b      	ldrb	r3, [r3, #20]
     2f8:	3c12      	subs	r4, #18
     2fa:	07db      	lsls	r3, r3, #31
     2fc:	d5f2      	bpl.n	2e4 <nvm_read_buffer+0x10>
     2fe:	2420      	movs	r4, #32
     300:	34ff      	adds	r4, #255	; 0xff
     302:	4b0e      	ldr	r3, [pc, #56]	; (33c <nvm_read_buffer+0x68>)
     304:	831c      	strh	r4, [r3, #24]
     306:	2a00      	cmp	r2, #0
     308:	d014      	beq.n	334 <nvm_read_buffer+0x60>
     30a:	2301      	movs	r3, #1
     30c:	4398      	bics	r0, r3
     30e:	2300      	movs	r3, #0
     310:	1e56      	subs	r6, r2, #1
     312:	e004      	b.n	31e <nvm_read_buffer+0x4a>
     314:	3302      	adds	r3, #2
     316:	b29b      	uxth	r3, r3
     318:	3002      	adds	r0, #2
     31a:	429a      	cmp	r2, r3
     31c:	d908      	bls.n	330 <nvm_read_buffer+0x5c>
     31e:	8804      	ldrh	r4, [r0, #0]
     320:	b2a4      	uxth	r4, r4
     322:	54cc      	strb	r4, [r1, r3]
     324:	42b3      	cmp	r3, r6
     326:	daf5      	bge.n	314 <nvm_read_buffer+0x40>
     328:	18cd      	adds	r5, r1, r3
     32a:	0a24      	lsrs	r4, r4, #8
     32c:	706c      	strb	r4, [r5, #1]
     32e:	e7f1      	b.n	314 <nvm_read_buffer+0x40>
     330:	2400      	movs	r4, #0
     332:	e7d7      	b.n	2e4 <nvm_read_buffer+0x10>
     334:	2400      	movs	r4, #0
     336:	e7d5      	b.n	2e4 <nvm_read_buffer+0x10>
     338:	200001e8 	.word	0x200001e8
     33c:	41004000 	.word	0x41004000

00000340 <nvm_erase_row>:
     340:	4b13      	ldr	r3, [pc, #76]	; (390 <nvm_erase_row+0x50>)
     342:	881a      	ldrh	r2, [r3, #0]
     344:	885b      	ldrh	r3, [r3, #2]
     346:	4353      	muls	r3, r2
     348:	2118      	movs	r1, #24
     34a:	4283      	cmp	r3, r0
     34c:	d201      	bcs.n	352 <nvm_erase_row+0x12>
     34e:	0008      	movs	r0, r1
     350:	4770      	bx	lr
     352:	0092      	lsls	r2, r2, #2
     354:	3a01      	subs	r2, #1
     356:	4210      	tst	r0, r2
     358:	d1f9      	bne.n	34e <nvm_erase_row+0xe>
     35a:	4b0e      	ldr	r3, [pc, #56]	; (394 <nvm_erase_row+0x54>)
     35c:	7d1b      	ldrb	r3, [r3, #20]
     35e:	3913      	subs	r1, #19
     360:	07db      	lsls	r3, r3, #31
     362:	d5f4      	bpl.n	34e <nvm_erase_row+0xe>
     364:	4b0b      	ldr	r3, [pc, #44]	; (394 <nvm_erase_row+0x54>)
     366:	2220      	movs	r2, #32
     368:	32ff      	adds	r2, #255	; 0xff
     36a:	831a      	strh	r2, [r3, #24]
     36c:	0880      	lsrs	r0, r0, #2
     36e:	0040      	lsls	r0, r0, #1
     370:	61d8      	str	r0, [r3, #28]
     372:	4a09      	ldr	r2, [pc, #36]	; (398 <nvm_erase_row+0x58>)
     374:	801a      	strh	r2, [r3, #0]
     376:	0019      	movs	r1, r3
     378:	2201      	movs	r2, #1
     37a:	7d0b      	ldrb	r3, [r1, #20]
     37c:	4213      	tst	r3, r2
     37e:	d0fc      	beq.n	37a <nvm_erase_row+0x3a>
     380:	4b04      	ldr	r3, [pc, #16]	; (394 <nvm_erase_row+0x54>)
     382:	8b19      	ldrh	r1, [r3, #24]
     384:	201c      	movs	r0, #28
     386:	4001      	ands	r1, r0
     388:	1e48      	subs	r0, r1, #1
     38a:	4181      	sbcs	r1, r0
     38c:	0089      	lsls	r1, r1, #2
     38e:	e7de      	b.n	34e <nvm_erase_row+0xe>
     390:	200001e8 	.word	0x200001e8
     394:	41004000 	.word	0x41004000
     398:	ffffa502 	.word	0xffffa502

0000039c <Cal_list_table_index>:
#include "myDefine.h"



unsigned char Cal_list_table_index(unsigned char tmpA, unsigned char tmpB, unsigned char tmpC)
{
     39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     39e:	000c      	movs	r4, r1
     3a0:	0015      	movs	r5, r2
	return	ascii_to_hex(tmpA) * 100 +
     3a2:	4e08      	ldr	r6, [pc, #32]	; (3c4 <Cal_list_table_index+0x28>)
     3a4:	47b0      	blx	r6
     3a6:	0007      	movs	r7, r0
	ascii_to_hex(tmpB) * 10 +
     3a8:	0020      	movs	r0, r4
     3aa:	47b0      	blx	r6
	return	ascii_to_hex(tmpA) * 100 +
     3ac:	2464      	movs	r4, #100	; 0x64
     3ae:	437c      	muls	r4, r7
	ascii_to_hex(tmpB) * 10 +
     3b0:	0083      	lsls	r3, r0, #2
     3b2:	18c0      	adds	r0, r0, r3
     3b4:	0040      	lsls	r0, r0, #1
	return	ascii_to_hex(tmpA) * 100 +
     3b6:	1824      	adds	r4, r4, r0
     3b8:	b2e4      	uxtb	r4, r4
	ascii_to_hex(tmpC);
     3ba:	0028      	movs	r0, r5
     3bc:	47b0      	blx	r6
	ascii_to_hex(tmpB) * 10 +
     3be:	1820      	adds	r0, r4, r0
     3c0:	b2c0      	uxtb	r0, r0
}
     3c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3c4:	00003b99 	.word	0x00003b99

000003c8 <Set_Lora_Power_Func>:


void Set_Lora_Power_Func(volatile LORA_DEFINE_t *tmp_LORA)
{
     3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3ca:	0005      	movs	r5, r0
	tmp_LORA->MyLoRaTmp[Write_LoRa_Mode_FQ_Index][7] = ((ascii_to_hex(UserKeyInBuf[4]) * 10) + ascii_to_hex(UserKeyInBuf[5]) - 2);
     3cc:	4f0a      	ldr	r7, [pc, #40]	; (3f8 <Set_Lora_Power_Func+0x30>)
     3ce:	7938      	ldrb	r0, [r7, #4]
     3d0:	4e0a      	ldr	r6, [pc, #40]	; (3fc <Set_Lora_Power_Func+0x34>)
     3d2:	47b0      	blx	r6
     3d4:	0004      	movs	r4, r0
     3d6:	7978      	ldrb	r0, [r7, #5]
     3d8:	47b0      	blx	r6
     3da:	00a3      	lsls	r3, r4, #2
     3dc:	18e4      	adds	r4, r4, r3
     3de:	0064      	lsls	r4, r4, #1
     3e0:	3802      	subs	r0, #2
     3e2:	1820      	adds	r0, r4, r0
     3e4:	b2c0      	uxtb	r0, r0
     3e6:	23b9      	movs	r3, #185	; 0xb9
     3e8:	54e8      	strb	r0, [r5, r3]
	tmp_LORA->NowStatus = Write_LoRa_Setting_Index;
     3ea:	2204      	movs	r2, #4
     3ec:	4b04      	ldr	r3, [pc, #16]	; (400 <Set_Lora_Power_Func+0x38>)
     3ee:	54ea      	strb	r2, [r5, r3]
	CMD_Index = CMD_Save_Index;
     3f0:	3204      	adds	r2, #4
     3f2:	4b04      	ldr	r3, [pc, #16]	; (404 <Set_Lora_Power_Func+0x3c>)
     3f4:	701a      	strb	r2, [r3, #0]
}
     3f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3f8:	20000490 	.word	0x20000490
     3fc:	00003b99 	.word	0x00003b99
     400:	00000211 	.word	0x00000211
     404:	2000354b 	.word	0x2000354b

00000408 <Debug_Mode_Func>:

void Debug_Mode_Func(volatile LORA_DEFINE_t *tmp_LORA)
{
     408:	b510      	push	{r4, lr}
	if(tmp_LORA->Lora_Debug_Flag == NeedDebug)
     40a:	2385      	movs	r3, #133	; 0x85
     40c:	009b      	lsls	r3, r3, #2
     40e:	5cc3      	ldrb	r3, [r0, r3]
     410:	2b00      	cmp	r3, #0
     412:	d10b      	bne.n	42c <Debug_Mode_Func+0x24>
		Print_Lora_number(tmp_LORA);
		Print_Debug_Mode_OFF_Msg();
	}
	else
	{
		tmp_LORA->Lora_Debug_Flag = NeedDebug;
     414:	2201      	movs	r2, #1
     416:	2385      	movs	r3, #133	; 0x85
     418:	009b      	lsls	r3, r3, #2
     41a:	54c2      	strb	r2, [r0, r3]
		Print_Lora_number(tmp_LORA);
     41c:	4b08      	ldr	r3, [pc, #32]	; (440 <Debug_Mode_Func+0x38>)
     41e:	4798      	blx	r3
		Print_Debug_Mode_ON_Msg();
     420:	4b08      	ldr	r3, [pc, #32]	; (444 <Debug_Mode_Func+0x3c>)
     422:	4798      	blx	r3
	}
	CMD_Index = CMD_Save_Index;
     424:	2208      	movs	r2, #8
     426:	4b08      	ldr	r3, [pc, #32]	; (448 <Debug_Mode_Func+0x40>)
     428:	701a      	strb	r2, [r3, #0]
}
     42a:	bd10      	pop	{r4, pc}
		tmp_LORA->Lora_Debug_Flag = NoDebug;
     42c:	2200      	movs	r2, #0
     42e:	2385      	movs	r3, #133	; 0x85
     430:	009b      	lsls	r3, r3, #2
     432:	54c2      	strb	r2, [r0, r3]
		Print_Lora_number(tmp_LORA);
     434:	4b02      	ldr	r3, [pc, #8]	; (440 <Debug_Mode_Func+0x38>)
     436:	4798      	blx	r3
		Print_Debug_Mode_OFF_Msg();
     438:	4b04      	ldr	r3, [pc, #16]	; (44c <Debug_Mode_Func+0x44>)
     43a:	4798      	blx	r3
     43c:	e7f2      	b.n	424 <Debug_Mode_Func+0x1c>
     43e:	46c0      	nop			; (mov r8, r8)
     440:	000016f9 	.word	0x000016f9
     444:	00003509 	.word	0x00003509
     448:	2000354b 	.word	0x2000354b
     44c:	00003551 	.word	0x00003551

00000450 <CMD_Save_Func>:

void CMD_Save_Func(volatile LORA_DEFINE_t *tmp_LORA)
{
     450:	b510      	push	{r4, lr}
     452:	0004      	movs	r4, r0
	if(tmp_LORA->Lora_initial_Flag == 1)
     454:	4b08      	ldr	r3, [pc, #32]	; (478 <CMD_Save_Func+0x28>)
     456:	5cc3      	ldrb	r3, [r0, r3]
     458:	2b00      	cmp	r3, #0
     45a:	d100      	bne.n	45e <CMD_Save_Func+0xe>
		Print_Lora_number(tmp_LORA);
		Save_LoRa_Profile_in_NVM(tmp_LORA);
		Load_LoRa_Profile_in_NVM(tmp_LORA);
		CMD_Index = CMD_NOP_Index;
	}
}
     45c:	bd10      	pop	{r4, pc}
		Print_Lora_number(tmp_LORA);
     45e:	4b07      	ldr	r3, [pc, #28]	; (47c <CMD_Save_Func+0x2c>)
     460:	4798      	blx	r3
		Save_LoRa_Profile_in_NVM(tmp_LORA);
     462:	0020      	movs	r0, r4
     464:	4b06      	ldr	r3, [pc, #24]	; (480 <CMD_Save_Func+0x30>)
     466:	4798      	blx	r3
		Load_LoRa_Profile_in_NVM(tmp_LORA);
     468:	0020      	movs	r0, r4
     46a:	4b06      	ldr	r3, [pc, #24]	; (484 <CMD_Save_Func+0x34>)
     46c:	4798      	blx	r3
		CMD_Index = CMD_NOP_Index;
     46e:	2200      	movs	r2, #0
     470:	4b05      	ldr	r3, [pc, #20]	; (488 <CMD_Save_Func+0x38>)
     472:	701a      	strb	r2, [r3, #0]
}
     474:	e7f2      	b.n	45c <CMD_Save_Func+0xc>
     476:	46c0      	nop			; (mov r8, r8)
     478:	00000215 	.word	0x00000215
     47c:	000016f9 	.word	0x000016f9
     480:	000013cd 	.word	0x000013cd
     484:	00001235 	.word	0x00001235
     488:	2000354b 	.word	0x2000354b

0000048c <Set_Lora_FQ_Func>:

void Set_Lora_FQ_Func(volatile LORA_DEFINE_t *tmp_LORA)
{
     48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     48e:	46ce      	mov	lr, r9
     490:	4647      	mov	r7, r8
     492:	b580      	push	{r7, lr}
     494:	0005      	movs	r5, r0
	UINT32u_t tmp_FQ;
	tmp_FQ.dword =  (ascii_to_hex(UserKeyInBuf[4]) * 10000);
     496:	4b21      	ldr	r3, [pc, #132]	; (51c <Set_Lora_FQ_Func+0x90>)
     498:	4698      	mov	r8, r3
     49a:	7918      	ldrb	r0, [r3, #4]
     49c:	4c20      	ldr	r4, [pc, #128]	; (520 <Set_Lora_FQ_Func+0x94>)
     49e:	47a0      	blx	r4
     4a0:	0007      	movs	r7, r0
	tmp_FQ.dword += (ascii_to_hex(UserKeyInBuf[5]) * 1000);
     4a2:	4643      	mov	r3, r8
     4a4:	7958      	ldrb	r0, [r3, #5]
     4a6:	47a0      	blx	r4
	tmp_FQ.dword =  (ascii_to_hex(UserKeyInBuf[4]) * 10000);
     4a8:	4e1e      	ldr	r6, [pc, #120]	; (524 <Set_Lora_FQ_Func+0x98>)
     4aa:	437e      	muls	r6, r7
	tmp_FQ.dword += (ascii_to_hex(UserKeyInBuf[5]) * 1000);
     4ac:	23fa      	movs	r3, #250	; 0xfa
     4ae:	009b      	lsls	r3, r3, #2
     4b0:	4358      	muls	r0, r3
     4b2:	1836      	adds	r6, r6, r0
	tmp_FQ.dword += (ascii_to_hex(UserKeyInBuf[6]) * 100);
     4b4:	4643      	mov	r3, r8
     4b6:	7998      	ldrb	r0, [r3, #6]
     4b8:	47a0      	blx	r4
     4ba:	4681      	mov	r9, r0
	tmp_FQ.dword += (ascii_to_hex(UserKeyInBuf[7]) * 10);
     4bc:	4643      	mov	r3, r8
     4be:	79d8      	ldrb	r0, [r3, #7]
     4c0:	47a0      	blx	r4
     4c2:	0007      	movs	r7, r0
	tmp_FQ.dword +=  ascii_to_hex(UserKeyInBuf[8]);
     4c4:	4643      	mov	r3, r8
     4c6:	7a18      	ldrb	r0, [r3, #8]
     4c8:	47a0      	blx	r4
	tmp_FQ.dword += (ascii_to_hex(UserKeyInBuf[6]) * 100);
     4ca:	2464      	movs	r4, #100	; 0x64
     4cc:	464b      	mov	r3, r9
     4ce:	435c      	muls	r4, r3
	tmp_FQ.dword +=  ascii_to_hex(UserKeyInBuf[8]);
     4d0:	1986      	adds	r6, r0, r6
     4d2:	19a4      	adds	r4, r4, r6
	tmp_FQ.dword += (ascii_to_hex(UserKeyInBuf[7]) * 10);
     4d4:	00bb      	lsls	r3, r7, #2
     4d6:	19db      	adds	r3, r3, r7
     4d8:	005b      	lsls	r3, r3, #1
	tmp_FQ.dword +=  ascii_to_hex(UserKeyInBuf[8]);
     4da:	18e4      	adds	r4, r4, r3
	uart_send_ascii_byte(Debug_COM, tmp_FQ.byte[2]);
     4dc:	0226      	lsls	r6, r4, #8
     4de:	0e36      	lsrs	r6, r6, #24
     4e0:	b2f1      	uxtb	r1, r6
     4e2:	4811      	ldr	r0, [pc, #68]	; (528 <Set_Lora_FQ_Func+0x9c>)
     4e4:	4b11      	ldr	r3, [pc, #68]	; (52c <Set_Lora_FQ_Func+0xa0>)
     4e6:	4699      	mov	r9, r3
     4e8:	4798      	blx	r3
	uart_send_ascii_byte(Debug_COM, tmp_FQ.byte[1]);
     4ea:	0427      	lsls	r7, r4, #16
     4ec:	0e3f      	lsrs	r7, r7, #24
     4ee:	b2f9      	uxtb	r1, r7
     4f0:	480d      	ldr	r0, [pc, #52]	; (528 <Set_Lora_FQ_Func+0x9c>)
     4f2:	47c8      	blx	r9
	uart_send_ascii_byte(Debug_COM, tmp_FQ.byte[0]);
     4f4:	b2e4      	uxtb	r4, r4
     4f6:	0021      	movs	r1, r4
     4f8:	480b      	ldr	r0, [pc, #44]	; (528 <Set_Lora_FQ_Func+0x9c>)
     4fa:	47c8      	blx	r9
	tmp_LORA->MyLoRaTmp[Write_LoRa_Mode_FQ_Index][4] = tmp_FQ.byte[2];
     4fc:	23b6      	movs	r3, #182	; 0xb6
     4fe:	54ee      	strb	r6, [r5, r3]
	tmp_LORA->MyLoRaTmp[Write_LoRa_Mode_FQ_Index][5] = tmp_FQ.byte[1];
     500:	3301      	adds	r3, #1
     502:	54ef      	strb	r7, [r5, r3]
	tmp_LORA->MyLoRaTmp[Write_LoRa_Mode_FQ_Index][6] = tmp_FQ.byte[0];
     504:	3301      	adds	r3, #1
     506:	54ec      	strb	r4, [r5, r3]
	tmp_LORA->NowStatus = Write_LoRa_Setting_Index;
     508:	2204      	movs	r2, #4
     50a:	4b09      	ldr	r3, [pc, #36]	; (530 <Set_Lora_FQ_Func+0xa4>)
     50c:	54ea      	strb	r2, [r5, r3]
	CMD_Index = CMD_Save_Index;
     50e:	3204      	adds	r2, #4
     510:	4b08      	ldr	r3, [pc, #32]	; (534 <Set_Lora_FQ_Func+0xa8>)
     512:	701a      	strb	r2, [r3, #0]
}
     514:	bc0c      	pop	{r2, r3}
     516:	4690      	mov	r8, r2
     518:	4699      	mov	r9, r3
     51a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     51c:	20000490 	.word	0x20000490
     520:	00003b99 	.word	0x00003b99
     524:	00002710 	.word	0x00002710
     528:	2000022c 	.word	0x2000022c
     52c:	00003ae9 	.word	0x00003ae9
     530:	00000211 	.word	0x00000211
     534:	2000354b 	.word	0x2000354b

00000538 <Set_Lora_SF_Func>:

void Set_Lora_SF_Func(volatile LORA_DEFINE_t *tmp_LORA)
{
     538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     53a:	0005      	movs	r5, r0
	tmp_LORA->MyLoRaTmp[Write_LoRa_Setting_Index][5] = ((ascii_to_hex(UserKeyInBuf[4]) * 10) + ascii_to_hex(UserKeyInBuf[5]) - 5);
     53c:	4f0a      	ldr	r7, [pc, #40]	; (568 <Set_Lora_SF_Func+0x30>)
     53e:	7938      	ldrb	r0, [r7, #4]
     540:	4e0a      	ldr	r6, [pc, #40]	; (56c <Set_Lora_SF_Func+0x34>)
     542:	47b0      	blx	r6
     544:	0004      	movs	r4, r0
     546:	7978      	ldrb	r0, [r7, #5]
     548:	47b0      	blx	r6
     54a:	00a3      	lsls	r3, r4, #2
     54c:	18e4      	adds	r4, r4, r3
     54e:	0064      	lsls	r4, r4, #1
     550:	3805      	subs	r0, #5
     552:	1820      	adds	r0, r4, r0
     554:	b2c0      	uxtb	r0, r0
     556:	23d2      	movs	r3, #210	; 0xd2
     558:	54e8      	strb	r0, [r5, r3]
	tmp_LORA->NowStatus = Write_LoRa_Setting_Index;
     55a:	2204      	movs	r2, #4
     55c:	4b04      	ldr	r3, [pc, #16]	; (570 <Set_Lora_SF_Func+0x38>)
     55e:	54ea      	strb	r2, [r5, r3]
	CMD_Index = CMD_Save_Index;
     560:	3204      	adds	r2, #4
     562:	4b04      	ldr	r3, [pc, #16]	; (574 <Set_Lora_SF_Func+0x3c>)
     564:	701a      	strb	r2, [r3, #0]
}
     566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     568:	20000490 	.word	0x20000490
     56c:	00003b99 	.word	0x00003b99
     570:	00000211 	.word	0x00000211
     574:	2000354b 	.word	0x2000354b

00000578 <Print_Lora_FW_ID_Func>:

void Print_Lora_FW_ID_Func(volatile LORA_DEFINE_t *tmp_LORA)
{
     578:	b570      	push	{r4, r5, r6, lr}
     57a:	0004      	movs	r4, r0
	Print_Lora_number(tmp_LORA);
     57c:	4b0f      	ldr	r3, [pc, #60]	; (5bc <Print_Lora_FW_ID_Func+0x44>)
     57e:	4798      	blx	r3
	uTXByte(Debug_COM, 0x0d);
     580:	4e0f      	ldr	r6, [pc, #60]	; (5c0 <Print_Lora_FW_ID_Func+0x48>)
     582:	210d      	movs	r1, #13
     584:	0030      	movs	r0, r6
     586:	4d0f      	ldr	r5, [pc, #60]	; (5c4 <Print_Lora_FW_ID_Func+0x4c>)
     588:	47a8      	blx	r5
	Print_Line_Msg();
     58a:	4b0f      	ldr	r3, [pc, #60]	; (5c8 <Print_Lora_FW_ID_Func+0x50>)
     58c:	4798      	blx	r3
	Print_Catch_LoRa_ID_Msg(tmp_LORA);
     58e:	0020      	movs	r0, r4
     590:	4b0e      	ldr	r3, [pc, #56]	; (5cc <Print_Lora_FW_ID_Func+0x54>)
     592:	4798      	blx	r3
	uTXByte(Debug_COM, ' ');
     594:	2120      	movs	r1, #32
     596:	0030      	movs	r0, r6
     598:	47a8      	blx	r5
	uTXByte(Debug_COM, ' ');
     59a:	2120      	movs	r1, #32
     59c:	0030      	movs	r0, r6
     59e:	47a8      	blx	r5
	uTXByte(Debug_COM, ' ');
     5a0:	2120      	movs	r1, #32
     5a2:	0030      	movs	r0, r6
     5a4:	47a8      	blx	r5
	Load_LoRa_Profile_in_NVM(tmp_LORA);
     5a6:	0020      	movs	r0, r4
     5a8:	4b09      	ldr	r3, [pc, #36]	; (5d0 <Print_Lora_FW_ID_Func+0x58>)
     5aa:	4798      	blx	r3
	Print_Catch_LoRa_Setting_Msg(tmp_LORA);
     5ac:	0020      	movs	r0, r4
     5ae:	4b09      	ldr	r3, [pc, #36]	; (5d4 <Print_Lora_FW_ID_Func+0x5c>)
     5b0:	4798      	blx	r3
	CMD_Index = CMD_NOP_Index;
     5b2:	2200      	movs	r2, #0
     5b4:	4b08      	ldr	r3, [pc, #32]	; (5d8 <Print_Lora_FW_ID_Func+0x60>)
     5b6:	701a      	strb	r2, [r3, #0]
}
     5b8:	bd70      	pop	{r4, r5, r6, pc}
     5ba:	46c0      	nop			; (mov r8, r8)
     5bc:	000016f9 	.word	0x000016f9
     5c0:	2000022c 	.word	0x2000022c
     5c4:	00003ac9 	.word	0x00003ac9
     5c8:	00001771 	.word	0x00001771
     5cc:	00002d75 	.word	0x00002d75
     5d0:	00001235 	.word	0x00001235
     5d4:	00002e15 	.word	0x00002e15
     5d8:	2000354b 	.word	0x2000354b

000005dc <Print_RSSI_Func>:


void Print_RSSI_Func(volatile LORA_DEFINE_t *tmp_LORA)
{
     5dc:	b510      	push	{r4, lr}
     5de:	0004      	movs	r4, r0
	Print_Lora_number(tmp_LORA);
     5e0:	4b07      	ldr	r3, [pc, #28]	; (600 <Print_RSSI_Func+0x24>)
     5e2:	4798      	blx	r3
	uTXByte(Debug_COM, 0x0d);
     5e4:	210d      	movs	r1, #13
     5e6:	4807      	ldr	r0, [pc, #28]	; (604 <Print_RSSI_Func+0x28>)
     5e8:	4b07      	ldr	r3, [pc, #28]	; (608 <Print_RSSI_Func+0x2c>)
     5ea:	4798      	blx	r3
	Print_RSSI_Msg(tmp_LORA);
     5ec:	0020      	movs	r0, r4
     5ee:	4b07      	ldr	r3, [pc, #28]	; (60c <Print_RSSI_Func+0x30>)
     5f0:	4798      	blx	r3
	Print_Lora_RX_Count_Form_Module_Msg(tmp_LORA);
     5f2:	0020      	movs	r0, r4
     5f4:	4b06      	ldr	r3, [pc, #24]	; (610 <Print_RSSI_Func+0x34>)
     5f6:	4798      	blx	r3
	CMD_Index = CMD_NOP_Index;
     5f8:	2200      	movs	r2, #0
     5fa:	4b06      	ldr	r3, [pc, #24]	; (614 <Print_RSSI_Func+0x38>)
     5fc:	701a      	strb	r2, [r3, #0]
}
     5fe:	bd10      	pop	{r4, pc}
     600:	000016f9 	.word	0x000016f9
     604:	2000022c 	.word	0x2000022c
     608:	00003ac9 	.word	0x00003ac9
     60c:	000033cd 	.word	0x000033cd
     610:	00003491 	.word	0x00003491
     614:	2000354b 	.word	0x2000354b

00000618 <CMD_Func>:


void CMD_Func(void)
{
     618:	b510      	push	{r4, lr}
	//UINT32u_t tmp_FQ;
	switch(CMD_Index)
     61a:	4b50      	ldr	r3, [pc, #320]	; (75c <CMD_Func+0x144>)
     61c:	781a      	ldrb	r2, [r3, #0]
     61e:	2a08      	cmp	r2, #8
     620:	d83a      	bhi.n	698 <CMD_Func+0x80>
     622:	0093      	lsls	r3, r2, #2
     624:	4a4e      	ldr	r2, [pc, #312]	; (760 <CMD_Func+0x148>)
     626:	58d3      	ldr	r3, [r2, r3]
     628:	469f      	mov	pc, r3
	{
		case Debug_Mode_Index:
			if(UserKeyInBuf[1] == '1')
     62a:	4b4e      	ldr	r3, [pc, #312]	; (764 <CMD_Func+0x14c>)
     62c:	785b      	ldrb	r3, [r3, #1]
     62e:	2b31      	cmp	r3, #49	; 0x31
     630:	d006      	beq.n	640 <CMD_Func+0x28>
			{
				Debug_Mode_Func(LORA01);		
			}
			else
			if(UserKeyInBuf[1] == '2')
     632:	2b32      	cmp	r3, #50	; 0x32
     634:	d130      	bne.n	698 <CMD_Func+0x80>
			{
				Debug_Mode_Func(LORA02);
     636:	4b4c      	ldr	r3, [pc, #304]	; (768 <CMD_Func+0x150>)
     638:	6818      	ldr	r0, [r3, #0]
     63a:	4b4c      	ldr	r3, [pc, #304]	; (76c <CMD_Func+0x154>)
     63c:	4798      	blx	r3
     63e:	e02b      	b.n	698 <CMD_Func+0x80>
				Debug_Mode_Func(LORA01);		
     640:	4b4b      	ldr	r3, [pc, #300]	; (770 <CMD_Func+0x158>)
     642:	6818      	ldr	r0, [r3, #0]
     644:	4b49      	ldr	r3, [pc, #292]	; (76c <CMD_Func+0x154>)
     646:	4798      	blx	r3
     648:	e026      	b.n	698 <CMD_Func+0x80>
			break;
		

		
		case Print_Lora_FW_ID_Index:
			if(UserKeyInBuf[1] == '1')
     64a:	4b46      	ldr	r3, [pc, #280]	; (764 <CMD_Func+0x14c>)
     64c:	785b      	ldrb	r3, [r3, #1]
     64e:	2b31      	cmp	r3, #49	; 0x31
     650:	d00f      	beq.n	672 <CMD_Func+0x5a>
			{
				Print_Lora_FW_ID_Func(LORA01);
			}
			else
			if(UserKeyInBuf[1] == '2')
     652:	2b32      	cmp	r3, #50	; 0x32
     654:	d012      	beq.n	67c <CMD_Func+0x64>
			{
				Print_Lora_FW_ID_Func(LORA02);
			}
			else
			if(UserKeyInBuf[1] == 0x0d)
     656:	2b0d      	cmp	r3, #13
     658:	d11e      	bne.n	698 <CMD_Func+0x80>
			{
				Print_Lora_FW_ID_Func(LORA01);
     65a:	4b45      	ldr	r3, [pc, #276]	; (770 <CMD_Func+0x158>)
     65c:	6818      	ldr	r0, [r3, #0]
     65e:	4c45      	ldr	r4, [pc, #276]	; (774 <CMD_Func+0x15c>)
     660:	47a0      	blx	r4
				uTXByte(Debug_COM, 0x0d);
     662:	210d      	movs	r1, #13
     664:	4844      	ldr	r0, [pc, #272]	; (778 <CMD_Func+0x160>)
     666:	4b45      	ldr	r3, [pc, #276]	; (77c <CMD_Func+0x164>)
     668:	4798      	blx	r3
				Print_Lora_FW_ID_Func(LORA02);
     66a:	4b3f      	ldr	r3, [pc, #252]	; (768 <CMD_Func+0x150>)
     66c:	6818      	ldr	r0, [r3, #0]
     66e:	47a0      	blx	r4
     670:	e012      	b.n	698 <CMD_Func+0x80>
				Print_Lora_FW_ID_Func(LORA01);
     672:	4b3f      	ldr	r3, [pc, #252]	; (770 <CMD_Func+0x158>)
     674:	6818      	ldr	r0, [r3, #0]
     676:	4b3f      	ldr	r3, [pc, #252]	; (774 <CMD_Func+0x15c>)
     678:	4798      	blx	r3
     67a:	e00d      	b.n	698 <CMD_Func+0x80>
				Print_Lora_FW_ID_Func(LORA02);
     67c:	4b3a      	ldr	r3, [pc, #232]	; (768 <CMD_Func+0x150>)
     67e:	6818      	ldr	r0, [r3, #0]
     680:	4b3c      	ldr	r3, [pc, #240]	; (774 <CMD_Func+0x15c>)
     682:	4798      	blx	r3
     684:	e008      	b.n	698 <CMD_Func+0x80>
			}
			break;
		
		case Print_List_Table_Index:
			Clean_LiSt_Table();
     686:	4b3e      	ldr	r3, [pc, #248]	; (780 <CMD_Func+0x168>)
     688:	4798      	blx	r3
			Load_List_Form_NVM();
     68a:	4b3e      	ldr	r3, [pc, #248]	; (784 <CMD_Func+0x16c>)
     68c:	4798      	blx	r3
			Print_List_Table();
     68e:	4b3e      	ldr	r3, [pc, #248]	; (788 <CMD_Func+0x170>)
     690:	4798      	blx	r3
			CMD_Index = CMD_NOP_Index;
     692:	2200      	movs	r2, #0
     694:	4b31      	ldr	r3, [pc, #196]	; (75c <CMD_Func+0x144>)
     696:	701a      	strb	r2, [r3, #0]
			break;
		
		case CMD_NOP_Index:
			break;
	}
     698:	bd10      	pop	{r4, pc}
			Print_RSSI_Func(LORA01);
     69a:	4b35      	ldr	r3, [pc, #212]	; (770 <CMD_Func+0x158>)
     69c:	6818      	ldr	r0, [r3, #0]
     69e:	4c3b      	ldr	r4, [pc, #236]	; (78c <CMD_Func+0x174>)
     6a0:	47a0      	blx	r4
			uTXByte(Debug_COM, 0x0d);
     6a2:	210d      	movs	r1, #13
     6a4:	4834      	ldr	r0, [pc, #208]	; (778 <CMD_Func+0x160>)
     6a6:	4b35      	ldr	r3, [pc, #212]	; (77c <CMD_Func+0x164>)
     6a8:	4798      	blx	r3
			Print_RSSI_Func(LORA02);
     6aa:	4b2f      	ldr	r3, [pc, #188]	; (768 <CMD_Func+0x150>)
     6ac:	6818      	ldr	r0, [r3, #0]
     6ae:	47a0      	blx	r4
			break;
     6b0:	e7f2      	b.n	698 <CMD_Func+0x80>
			if(UserKeyInBuf[2] == '1')
     6b2:	4b2c      	ldr	r3, [pc, #176]	; (764 <CMD_Func+0x14c>)
     6b4:	789b      	ldrb	r3, [r3, #2]
     6b6:	2b31      	cmp	r3, #49	; 0x31
     6b8:	d006      	beq.n	6c8 <CMD_Func+0xb0>
			if(UserKeyInBuf[2] == '2')
     6ba:	2b32      	cmp	r3, #50	; 0x32
     6bc:	d1ec      	bne.n	698 <CMD_Func+0x80>
				Set_Lora_SF_Func(LORA02);
     6be:	4b2a      	ldr	r3, [pc, #168]	; (768 <CMD_Func+0x150>)
     6c0:	6818      	ldr	r0, [r3, #0]
     6c2:	4b33      	ldr	r3, [pc, #204]	; (790 <CMD_Func+0x178>)
     6c4:	4798      	blx	r3
     6c6:	e7e7      	b.n	698 <CMD_Func+0x80>
				Set_Lora_SF_Func(LORA01);
     6c8:	4b29      	ldr	r3, [pc, #164]	; (770 <CMD_Func+0x158>)
     6ca:	6818      	ldr	r0, [r3, #0]
     6cc:	4b30      	ldr	r3, [pc, #192]	; (790 <CMD_Func+0x178>)
     6ce:	4798      	blx	r3
     6d0:	e7e2      	b.n	698 <CMD_Func+0x80>
			if(UserKeyInBuf[2] == '1')
     6d2:	4b24      	ldr	r3, [pc, #144]	; (764 <CMD_Func+0x14c>)
     6d4:	789b      	ldrb	r3, [r3, #2]
     6d6:	2b31      	cmp	r3, #49	; 0x31
     6d8:	d006      	beq.n	6e8 <CMD_Func+0xd0>
			if(UserKeyInBuf[2] == '2')
     6da:	2b32      	cmp	r3, #50	; 0x32
     6dc:	d1dc      	bne.n	698 <CMD_Func+0x80>
				Set_Lora_Power_Func(LORA02);
     6de:	4b22      	ldr	r3, [pc, #136]	; (768 <CMD_Func+0x150>)
     6e0:	6818      	ldr	r0, [r3, #0]
     6e2:	4b2c      	ldr	r3, [pc, #176]	; (794 <CMD_Func+0x17c>)
     6e4:	4798      	blx	r3
     6e6:	e7d7      	b.n	698 <CMD_Func+0x80>
				Set_Lora_Power_Func(LORA01);
     6e8:	4b21      	ldr	r3, [pc, #132]	; (770 <CMD_Func+0x158>)
     6ea:	6818      	ldr	r0, [r3, #0]
     6ec:	4b29      	ldr	r3, [pc, #164]	; (794 <CMD_Func+0x17c>)
     6ee:	4798      	blx	r3
     6f0:	e7d2      	b.n	698 <CMD_Func+0x80>
			if(UserKeyInBuf[2] == '1')
     6f2:	4b1c      	ldr	r3, [pc, #112]	; (764 <CMD_Func+0x14c>)
     6f4:	789b      	ldrb	r3, [r3, #2]
     6f6:	2b31      	cmp	r3, #49	; 0x31
     6f8:	d006      	beq.n	708 <CMD_Func+0xf0>
			if(UserKeyInBuf[2] == '2')
     6fa:	2b32      	cmp	r3, #50	; 0x32
     6fc:	d1cc      	bne.n	698 <CMD_Func+0x80>
				Set_Lora_FQ_Func(LORA02);
     6fe:	4b1a      	ldr	r3, [pc, #104]	; (768 <CMD_Func+0x150>)
     700:	6818      	ldr	r0, [r3, #0]
     702:	4b25      	ldr	r3, [pc, #148]	; (798 <CMD_Func+0x180>)
     704:	4798      	blx	r3
     706:	e7c7      	b.n	698 <CMD_Func+0x80>
				Set_Lora_FQ_Func(LORA01);
     708:	4b19      	ldr	r3, [pc, #100]	; (770 <CMD_Func+0x158>)
     70a:	6818      	ldr	r0, [r3, #0]
     70c:	4b22      	ldr	r3, [pc, #136]	; (798 <CMD_Func+0x180>)
     70e:	4798      	blx	r3
     710:	e7c2      	b.n	698 <CMD_Func+0x80>
			if(UserKeyInBuf[2] == '1')
     712:	4b14      	ldr	r3, [pc, #80]	; (764 <CMD_Func+0x14c>)
     714:	789b      	ldrb	r3, [r3, #2]
     716:	2b31      	cmp	r3, #49	; 0x31
     718:	d010      	beq.n	73c <CMD_Func+0x124>
			if(UserKeyInBuf[2] == '2')
     71a:	4b12      	ldr	r3, [pc, #72]	; (764 <CMD_Func+0x14c>)
     71c:	789b      	ldrb	r3, [r3, #2]
     71e:	2b32      	cmp	r3, #50	; 0x32
     720:	d011      	beq.n	746 <CMD_Func+0x12e>
			if(UserKeyInBuf[1] == '1')
     722:	4b10      	ldr	r3, [pc, #64]	; (764 <CMD_Func+0x14c>)
     724:	785b      	ldrb	r3, [r3, #1]
     726:	2b31      	cmp	r3, #49	; 0x31
     728:	d012      	beq.n	750 <CMD_Func+0x138>
			if(UserKeyInBuf[1] == '2')
     72a:	4b0e      	ldr	r3, [pc, #56]	; (764 <CMD_Func+0x14c>)
     72c:	785b      	ldrb	r3, [r3, #1]
     72e:	2b32      	cmp	r3, #50	; 0x32
     730:	d1b2      	bne.n	698 <CMD_Func+0x80>
				CMD_Save_Func(LORA02);
     732:	4b0d      	ldr	r3, [pc, #52]	; (768 <CMD_Func+0x150>)
     734:	6818      	ldr	r0, [r3, #0]
     736:	4b19      	ldr	r3, [pc, #100]	; (79c <CMD_Func+0x184>)
     738:	4798      	blx	r3
     73a:	e7ad      	b.n	698 <CMD_Func+0x80>
				CMD_Save_Func(LORA01);
     73c:	4b0c      	ldr	r3, [pc, #48]	; (770 <CMD_Func+0x158>)
     73e:	6818      	ldr	r0, [r3, #0]
     740:	4b16      	ldr	r3, [pc, #88]	; (79c <CMD_Func+0x184>)
     742:	4798      	blx	r3
     744:	e7e9      	b.n	71a <CMD_Func+0x102>
				CMD_Save_Func(LORA02);
     746:	4b08      	ldr	r3, [pc, #32]	; (768 <CMD_Func+0x150>)
     748:	6818      	ldr	r0, [r3, #0]
     74a:	4b14      	ldr	r3, [pc, #80]	; (79c <CMD_Func+0x184>)
     74c:	4798      	blx	r3
     74e:	e7e8      	b.n	722 <CMD_Func+0x10a>
				CMD_Save_Func(LORA01);
     750:	4b07      	ldr	r3, [pc, #28]	; (770 <CMD_Func+0x158>)
     752:	6818      	ldr	r0, [r3, #0]
     754:	4b11      	ldr	r3, [pc, #68]	; (79c <CMD_Func+0x184>)
     756:	4798      	blx	r3
     758:	e7e7      	b.n	72a <CMD_Func+0x112>
     75a:	46c0      	nop			; (mov r8, r8)
     75c:	2000354b 	.word	0x2000354b
     760:	000056a0 	.word	0x000056a0
     764:	20000490 	.word	0x20000490
     768:	200004b4 	.word	0x200004b4
     76c:	00000409 	.word	0x00000409
     770:	20001048 	.word	0x20001048
     774:	00000579 	.word	0x00000579
     778:	2000022c 	.word	0x2000022c
     77c:	00003ac9 	.word	0x00003ac9
     780:	000011d5 	.word	0x000011d5
     784:	00001639 	.word	0x00001639
     788:	00001199 	.word	0x00001199
     78c:	000005dd 	.word	0x000005dd
     790:	00000539 	.word	0x00000539
     794:	000003c9 	.word	0x000003c9
     798:	0000048d 	.word	0x0000048d
     79c:	00000451 	.word	0x00000451

000007a0 <Define_Profile_COPY_TO_RAM>:
	{0xC1, 0x06, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
	{0xC1, 0x07, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}
};

void Define_Profile_COPY_TO_RAM(void)
{
     7a0:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned int i, j;
	
	for(i = 0; i < 15; i++)
	{
		LORA01->MyLoRaTmpCount[i] = Define_MyLoRaTmpCount[i];
     7a2:	4b15      	ldr	r3, [pc, #84]	; (7f8 <Define_Profile_COPY_TO_RAM+0x58>)
     7a4:	681f      	ldr	r7, [r3, #0]
		LORA02->MyLoRaTmpCount[i] = Define_MyLoRaTmpCount[i];
     7a6:	4b15      	ldr	r3, [pc, #84]	; (7fc <Define_Profile_COPY_TO_RAM+0x5c>)
     7a8:	681b      	ldr	r3, [r3, #0]
     7aa:	469c      	mov	ip, r3
	for(i = 0; i < 15; i++)
     7ac:	2300      	movs	r3, #0
		LORA01->MyLoRaTmpCount[i] = Define_MyLoRaTmpCount[i];
     7ae:	4814      	ldr	r0, [pc, #80]	; (800 <Define_Profile_COPY_TO_RAM+0x60>)
     7b0:	5c19      	ldrb	r1, [r3, r0]
     7b2:	18fa      	adds	r2, r7, r3
     7b4:	3251      	adds	r2, #81	; 0x51
     7b6:	7011      	strb	r1, [r2, #0]
		LORA02->MyLoRaTmpCount[i] = Define_MyLoRaTmpCount[i];
     7b8:	4662      	mov	r2, ip
     7ba:	18d2      	adds	r2, r2, r3
     7bc:	3251      	adds	r2, #81	; 0x51
     7be:	7011      	strb	r1, [r2, #0]
	for(i = 0; i < 15; i++)
     7c0:	3301      	adds	r3, #1
     7c2:	2b0f      	cmp	r3, #15
     7c4:	d1f4      	bne.n	7b0 <Define_Profile_COPY_TO_RAM+0x10>
     7c6:	490f      	ldr	r1, [pc, #60]	; (804 <Define_Profile_COPY_TO_RAM+0x64>)
     7c8:	2600      	movs	r6, #0
     7ca:	2300      	movs	r3, #0
	}
	for(i = 0; i < 15; i++)
	{
		for(j = 0; j < 28; j++)
		{
			LORA01->MyLoRaTmp[i][j] = Define_MyLoRaTmp[i][j];
     7cc:	0074      	lsls	r4, r6, #1
     7ce:	19a4      	adds	r4, r4, r6
     7d0:	00e2      	lsls	r2, r4, #3
     7d2:	18a4      	adds	r4, r4, r2
     7d4:	193d      	adds	r5, r7, r4
			LORA02->MyLoRaTmp[i][j] = Define_MyLoRaTmp[i][j];
     7d6:	4464      	add	r4, ip
			LORA01->MyLoRaTmp[i][j] = Define_MyLoRaTmp[i][j];
     7d8:	5cc8      	ldrb	r0, [r1, r3]
     7da:	18ea      	adds	r2, r5, r3
     7dc:	3261      	adds	r2, #97	; 0x61
     7de:	7010      	strb	r0, [r2, #0]
			LORA02->MyLoRaTmp[i][j] = Define_MyLoRaTmp[i][j];
     7e0:	5cc8      	ldrb	r0, [r1, r3]
     7e2:	18e2      	adds	r2, r4, r3
     7e4:	3261      	adds	r2, #97	; 0x61
     7e6:	7010      	strb	r0, [r2, #0]
		for(j = 0; j < 28; j++)
     7e8:	3301      	adds	r3, #1
     7ea:	2b1c      	cmp	r3, #28
     7ec:	d1f4      	bne.n	7d8 <Define_Profile_COPY_TO_RAM+0x38>
	for(i = 0; i < 15; i++)
     7ee:	3601      	adds	r6, #1
     7f0:	311b      	adds	r1, #27
     7f2:	2e0f      	cmp	r6, #15
     7f4:	d1e9      	bne.n	7ca <Define_Profile_COPY_TO_RAM+0x2a>
		}
	}
}
     7f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     7f8:	20001048 	.word	0x20001048
     7fc:	200004b4 	.word	0x200004b4
     800:	200001b0 	.word	0x200001b0
     804:	20000000 	.word	0x20000000

00000808 <Find_Now_And_Next_Wait_Upload_Func>:


void Find_Now_And_Next_Wait_Upload_Func(volatile LORA_DEFINE_t *tmp_LORA)
{
     808:	b570      	push	{r4, r5, r6, lr}
	unsigned char i;
	unsigned char tmp_List_Index;
	
	tmp_LORA->List_Now = tmp_LORA->List_Next;
     80a:	2350      	movs	r3, #80	; 0x50
     80c:	5cc3      	ldrb	r3, [r0, r3]
     80e:	b2db      	uxtb	r3, r3
     810:	224f      	movs	r2, #79	; 0x4f
     812:	5483      	strb	r3, [r0, r2]
	//for(i = 0; i < Dev_Item_MAX; i++)
	for(i = tmp_LORA->List_Now; i < Dev_Item_MAX; i++)
     814:	5c83      	ldrb	r3, [r0, r2]
     816:	b2db      	uxtb	r3, r3
     818:	2bff      	cmp	r3, #255	; 0xff
     81a:	d032      	beq.n	882 <Find_Now_And_Next_Wait_Upload_Func+0x7a>
	{
		if(dev_value[i][dev_value_New_Data_Input] == Dev_Have_New_Data)
     81c:	001e      	movs	r6, r3
     81e:	00da      	lsls	r2, r3, #3
     820:	18d2      	adds	r2, r2, r3
     822:	0092      	lsls	r2, r2, #2
     824:	18d2      	adds	r2, r2, r3
     826:	4939      	ldr	r1, [pc, #228]	; (90c <Find_Now_And_Next_Wait_Upload_Func+0x104>)
     828:	188a      	adds	r2, r1, r2
     82a:	3223      	adds	r2, #35	; 0x23
     82c:	7812      	ldrb	r2, [r2, #0]
     82e:	2a01      	cmp	r2, #1
     830:	d013      	beq.n	85a <Find_Now_And_Next_Wait_Upload_Func+0x52>
     832:	1c5d      	adds	r5, r3, #1
     834:	b2ed      	uxtb	r5, r5
     836:	00ea      	lsls	r2, r5, #3
     838:	1952      	adds	r2, r2, r5
     83a:	0092      	lsls	r2, r2, #2
     83c:	1952      	adds	r2, r2, r5
     83e:	3223      	adds	r2, #35	; 0x23
     840:	4932      	ldr	r1, [pc, #200]	; (90c <Find_Now_And_Next_Wait_Upload_Func+0x104>)
     842:	1852      	adds	r2, r2, r1
     844:	2100      	movs	r1, #0
	for(i = tmp_LORA->List_Now; i < Dev_Item_MAX; i++)
     846:	3301      	adds	r3, #1
     848:	b2db      	uxtb	r3, r3
     84a:	2bff      	cmp	r3, #255	; 0xff
     84c:	d019      	beq.n	882 <Find_Now_And_Next_Wait_Upload_Func+0x7a>
     84e:	194e      	adds	r6, r1, r5
		if(dev_value[i][dev_value_New_Data_Input] == Dev_Have_New_Data)
     850:	7814      	ldrb	r4, [r2, #0]
     852:	3101      	adds	r1, #1
     854:	3225      	adds	r2, #37	; 0x25
     856:	2c01      	cmp	r4, #1
     858:	d1f5      	bne.n	846 <Find_Now_And_Next_Wait_Upload_Func+0x3e>
		{
			tmp_LORA->MyLoRaTmp[Write_LoRa_TxBuffer_Index][3] = dev_value[i][3];
     85a:	00f2      	lsls	r2, r6, #3
     85c:	1992      	adds	r2, r2, r6
     85e:	0092      	lsls	r2, r2, #2
     860:	1996      	adds	r6, r2, r6
     862:	4a2a      	ldr	r2, [pc, #168]	; (90c <Find_Now_And_Next_Wait_Upload_Func+0x104>)
     864:	1996      	adds	r6, r2, r6
     866:	78f1      	ldrb	r1, [r6, #3]
     868:	22eb      	movs	r2, #235	; 0xeb
     86a:	5481      	strb	r1, [r0, r2]
			tmp_LORA->MyLoRaTmp[Write_LoRa_TxBuffer_Index][4] = dev_value[i][4];
     86c:	7931      	ldrb	r1, [r6, #4]
     86e:	3201      	adds	r2, #1
     870:	5481      	strb	r1, [r0, r2]
			tmp_LORA->MyLoRaTmp[Write_LoRa_TxBuffer_Index][5] = dev_value[i][5];
     872:	7971      	ldrb	r1, [r6, #5]
     874:	3201      	adds	r2, #1
     876:	5481      	strb	r1, [r0, r2]
			tmp_LORA->MyLoRaTmp[Write_LoRa_TxBuffer_Index][6] = dev_value[i][6];
     878:	79b1      	ldrb	r1, [r6, #6]
     87a:	3201      	adds	r2, #1
     87c:	5481      	strb	r1, [r0, r2]
			tmp_LORA->List_Now = i;
     87e:	3a9f      	subs	r2, #159	; 0x9f
     880:	5483      	strb	r3, [r0, r2]
			break;
		}
	}
	
	tmp_List_Index = tmp_LORA->List_Now + 1;
     882:	234f      	movs	r3, #79	; 0x4f
     884:	5cc3      	ldrb	r3, [r0, r3]
     886:	3301      	adds	r3, #1
     888:	b2db      	uxtb	r3, r3
	if(tmp_List_Index == 0xFF)
     88a:	2bff      	cmp	r3, #255	; 0xff
     88c:	d027      	beq.n	8de <Find_Now_And_Next_Wait_Upload_Func+0xd6>
	{
		tmp_List_Index = 0;
	}
	
	tmp_LORA->List_Next = 0xFF;
     88e:	21ff      	movs	r1, #255	; 0xff
     890:	2250      	movs	r2, #80	; 0x50
     892:	5481      	strb	r1, [r0, r2]
	for(i = tmp_List_Index; i < Dev_Item_MAX; i++)
	{
		if(dev_value[i][dev_value_New_Data_Input] == Dev_Have_New_Data)
     894:	00da      	lsls	r2, r3, #3
     896:	18d2      	adds	r2, r2, r3
     898:	0092      	lsls	r2, r2, #2
     89a:	18d2      	adds	r2, r2, r3
     89c:	491b      	ldr	r1, [pc, #108]	; (90c <Find_Now_And_Next_Wait_Upload_Func+0x104>)
     89e:	188a      	adds	r2, r1, r2
     8a0:	3223      	adds	r2, #35	; 0x23
     8a2:	7812      	ldrb	r2, [r2, #0]
     8a4:	2a01      	cmp	r2, #1
     8a6:	d012      	beq.n	8ce <Find_Now_And_Next_Wait_Upload_Func+0xc6>
     8a8:	1c59      	adds	r1, r3, #1
     8aa:	b2c9      	uxtb	r1, r1
     8ac:	00ca      	lsls	r2, r1, #3
     8ae:	1852      	adds	r2, r2, r1
     8b0:	0092      	lsls	r2, r2, #2
     8b2:	1852      	adds	r2, r2, r1
     8b4:	3223      	adds	r2, #35	; 0x23
     8b6:	4915      	ldr	r1, [pc, #84]	; (90c <Find_Now_And_Next_Wait_Upload_Func+0x104>)
     8b8:	1852      	adds	r2, r2, r1
	for(i = tmp_List_Index; i < Dev_Item_MAX; i++)
     8ba:	3301      	adds	r3, #1
     8bc:	b2db      	uxtb	r3, r3
     8be:	2bff      	cmp	r3, #255	; 0xff
     8c0:	d007      	beq.n	8d2 <Find_Now_And_Next_Wait_Upload_Func+0xca>
     8c2:	3225      	adds	r2, #37	; 0x25
		if(dev_value[i][dev_value_New_Data_Input] == Dev_Have_New_Data)
     8c4:	0011      	movs	r1, r2
     8c6:	3925      	subs	r1, #37	; 0x25
     8c8:	7809      	ldrb	r1, [r1, #0]
     8ca:	2901      	cmp	r1, #1
     8cc:	d1f5      	bne.n	8ba <Find_Now_And_Next_Wait_Upload_Func+0xb2>
		{
			tmp_LORA->List_Next = i;
     8ce:	2250      	movs	r2, #80	; 0x50
     8d0:	5483      	strb	r3, [r0, r2]
			break;
		}
	}
	
	if(tmp_LORA->List_Next == 0xFF)
     8d2:	2350      	movs	r3, #80	; 0x50
     8d4:	5cc3      	ldrb	r3, [r0, r3]
     8d6:	b2db      	uxtb	r3, r3
     8d8:	2bff      	cmp	r3, #255	; 0xff
     8da:	d002      	beq.n	8e2 <Find_Now_And_Next_Wait_Upload_Func+0xda>
				break;
			}
		}
	}

}
     8dc:	bd70      	pop	{r4, r5, r6, pc}
		tmp_List_Index = 0;
     8de:	2300      	movs	r3, #0
     8e0:	e7d5      	b.n	88e <Find_Now_And_Next_Wait_Upload_Func+0x86>
			if(dev_value[i][dev_value_New_Data_Input] == Dev_Have_New_Data)
     8e2:	3bdc      	subs	r3, #220	; 0xdc
     8e4:	4a09      	ldr	r2, [pc, #36]	; (90c <Find_Now_And_Next_Wait_Upload_Func+0x104>)
     8e6:	5cd3      	ldrb	r3, [r2, r3]
     8e8:	2b01      	cmp	r3, #1
     8ea:	d00a      	beq.n	902 <Find_Now_And_Next_Wait_Upload_Func+0xfa>
     8ec:	4a08      	ldr	r2, [pc, #32]	; (910 <Find_Now_And_Next_Wait_Upload_Func+0x108>)
		for(i = 0; i < Dev_Item_MAX; i++)
     8ee:	2301      	movs	r3, #1
			if(dev_value[i][dev_value_New_Data_Input] == Dev_Have_New_Data)
     8f0:	7811      	ldrb	r1, [r2, #0]
     8f2:	2901      	cmp	r1, #1
     8f4:	d006      	beq.n	904 <Find_Now_And_Next_Wait_Upload_Func+0xfc>
		for(i = 0; i < Dev_Item_MAX; i++)
     8f6:	3301      	adds	r3, #1
     8f8:	b2db      	uxtb	r3, r3
     8fa:	3225      	adds	r2, #37	; 0x25
     8fc:	2bff      	cmp	r3, #255	; 0xff
     8fe:	d1f7      	bne.n	8f0 <Find_Now_And_Next_Wait_Upload_Func+0xe8>
     900:	e7ec      	b.n	8dc <Find_Now_And_Next_Wait_Upload_Func+0xd4>
			if(dev_value[i][dev_value_New_Data_Input] == Dev_Have_New_Data)
     902:	2300      	movs	r3, #0
				tmp_LORA->List_Next = i;
     904:	2250      	movs	r2, #80	; 0x50
     906:	5483      	strb	r3, [r0, r2]
				break;
     908:	e7e8      	b.n	8dc <Find_Now_And_Next_Wait_Upload_Func+0xd4>
     90a:	46c0      	nop			; (mov r8, r8)
     90c:	20001070 	.word	0x20001070
     910:	200010b8 	.word	0x200010b8

00000914 <Find_Now_And_Next_Enable_Func>:


void Find_Now_And_Next_Enable_Func(volatile LORA_DEFINE_t *tmp_LORA)
{
     914:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned char i;
	unsigned char tmp_List_Index;
	
	tmp_LORA->List_Now = tmp_LORA->List_Next;
     916:	2350      	movs	r3, #80	; 0x50
     918:	5cc3      	ldrb	r3, [r0, r3]
     91a:	b2db      	uxtb	r3, r3
     91c:	224f      	movs	r2, #79	; 0x4f
     91e:	5483      	strb	r3, [r0, r2]
	for(i = tmp_LORA->List_Now; i < Dev_Item_MAX; i++)
     920:	5c83      	ldrb	r3, [r0, r2]
     922:	b2db      	uxtb	r3, r3
     924:	2bff      	cmp	r3, #255	; 0xff
     926:	d05d      	beq.n	9e4 <Find_Now_And_Next_Enable_Func+0xd0>
	{
		if(Dev_List[i][1] == Dev_EN)
     928:	001e      	movs	r6, r3
     92a:	005a      	lsls	r2, r3, #1
     92c:	18d2      	adds	r2, r2, r3
     92e:	0052      	lsls	r2, r2, #1
     930:	4937      	ldr	r1, [pc, #220]	; (a10 <Find_Now_And_Next_Enable_Func+0xfc>)
     932:	188a      	adds	r2, r1, r2
     934:	7852      	ldrb	r2, [r2, #1]
     936:	2a01      	cmp	r2, #1
     938:	d012      	beq.n	960 <Find_Now_And_Next_Enable_Func+0x4c>
     93a:	1c5d      	adds	r5, r3, #1
     93c:	b2ed      	uxtb	r5, r5
     93e:	006a      	lsls	r2, r5, #1
     940:	1952      	adds	r2, r2, r5
     942:	0052      	lsls	r2, r2, #1
     944:	3201      	adds	r2, #1
     946:	4932      	ldr	r1, [pc, #200]	; (a10 <Find_Now_And_Next_Enable_Func+0xfc>)
     948:	1852      	adds	r2, r2, r1
     94a:	2100      	movs	r1, #0
	for(i = tmp_LORA->List_Now; i < Dev_Item_MAX; i++)
     94c:	3301      	adds	r3, #1
     94e:	b2db      	uxtb	r3, r3
     950:	2bff      	cmp	r3, #255	; 0xff
     952:	d047      	beq.n	9e4 <Find_Now_And_Next_Enable_Func+0xd0>
     954:	194e      	adds	r6, r1, r5
		if(Dev_List[i][1] == Dev_EN)
     956:	7814      	ldrb	r4, [r2, #0]
     958:	3101      	adds	r1, #1
     95a:	3206      	adds	r2, #6
     95c:	2c01      	cmp	r4, #1
     95e:	d1f5      	bne.n	94c <Find_Now_And_Next_Enable_Func+0x38>
		{
			tmp_LORA->MyLoRaTmp[Write_LoRa_TxBuffer_Index][3] = Dev_List[i][2];
     960:	4c2b      	ldr	r4, [pc, #172]	; (a10 <Find_Now_And_Next_Enable_Func+0xfc>)
     962:	0071      	lsls	r1, r6, #1
     964:	198a      	adds	r2, r1, r6
     966:	0052      	lsls	r2, r2, #1
     968:	18a2      	adds	r2, r4, r2
     96a:	7897      	ldrb	r7, [r2, #2]
     96c:	25eb      	movs	r5, #235	; 0xeb
     96e:	5547      	strb	r7, [r0, r5]
			tmp_LORA->MyLoRaTmp[Write_LoRa_TxBuffer_Index][4] = Dev_List[i][3];
     970:	78d7      	ldrb	r7, [r2, #3]
     972:	3501      	adds	r5, #1
     974:	5547      	strb	r7, [r0, r5]
			tmp_LORA->MyLoRaTmp[Write_LoRa_TxBuffer_Index][5] = Dev_List[i][4];
     976:	7915      	ldrb	r5, [r2, #4]
     978:	22ed      	movs	r2, #237	; 0xed
     97a:	5485      	strb	r5, [r0, r2]
			tmp_LORA->MyLoRaTmp[Write_LoRa_TxBuffer_Index][6] = Dev_List[i][5];
     97c:	1989      	adds	r1, r1, r6
     97e:	0049      	lsls	r1, r1, #1
     980:	1861      	adds	r1, r4, r1
     982:	7949      	ldrb	r1, [r1, #5]
     984:	3201      	adds	r2, #1
     986:	5481      	strb	r1, [r0, r2]
			tmp_LORA->MyLoRaTmp[Write_LoRa_TxBuffer_Index][7] = tmp_LORA->MyLoRaPower;
     988:	7982      	ldrb	r2, [r0, #6]
     98a:	b2d2      	uxtb	r2, r2
     98c:	21ef      	movs	r1, #239	; 0xef
     98e:	5442      	strb	r2, [r0, r1]
			tmp_LORA->List_Now = i;
     990:	224f      	movs	r2, #79	; 0x4f
     992:	5483      	strb	r3, [r0, r2]

			tmp_List_Index = tmp_LORA->List_Now + 1;
     994:	5c83      	ldrb	r3, [r0, r2]
     996:	3301      	adds	r3, #1
     998:	b2db      	uxtb	r3, r3
			if(tmp_List_Index == 0xFF)
     99a:	2bff      	cmp	r3, #255	; 0xff
     99c:	d023      	beq.n	9e6 <Find_Now_And_Next_Enable_Func+0xd2>
			}

			//===============================
			//	從 tmp_LORA->List_Now 開始往後找，直到陣列找完為止
			//===============================
			tmp_LORA->List_Next = 0xFF;
     99e:	21ff      	movs	r1, #255	; 0xff
     9a0:	2250      	movs	r2, #80	; 0x50
     9a2:	5481      	strb	r1, [r0, r2]
			for(i = tmp_List_Index; i < Dev_Item_MAX; i++)
			{
				if(Dev_List[i][1] == Dev_EN)
     9a4:	005a      	lsls	r2, r3, #1
     9a6:	18d2      	adds	r2, r2, r3
     9a8:	0052      	lsls	r2, r2, #1
     9aa:	4919      	ldr	r1, [pc, #100]	; (a10 <Find_Now_And_Next_Enable_Func+0xfc>)
     9ac:	188a      	adds	r2, r1, r2
     9ae:	7852      	ldrb	r2, [r2, #1]
     9b0:	2a01      	cmp	r2, #1
     9b2:	d010      	beq.n	9d6 <Find_Now_And_Next_Enable_Func+0xc2>
     9b4:	1c59      	adds	r1, r3, #1
     9b6:	b2c9      	uxtb	r1, r1
     9b8:	004a      	lsls	r2, r1, #1
     9ba:	1852      	adds	r2, r2, r1
     9bc:	0052      	lsls	r2, r2, #1
     9be:	3201      	adds	r2, #1
     9c0:	4913      	ldr	r1, [pc, #76]	; (a10 <Find_Now_And_Next_Enable_Func+0xfc>)
     9c2:	1852      	adds	r2, r2, r1
			for(i = tmp_List_Index; i < Dev_Item_MAX; i++)
     9c4:	3301      	adds	r3, #1
     9c6:	b2db      	uxtb	r3, r3
     9c8:	2bff      	cmp	r3, #255	; 0xff
     9ca:	d006      	beq.n	9da <Find_Now_And_Next_Enable_Func+0xc6>
     9cc:	3206      	adds	r2, #6
				if(Dev_List[i][1] == Dev_EN)
     9ce:	1f91      	subs	r1, r2, #6
     9d0:	7809      	ldrb	r1, [r1, #0]
     9d2:	2901      	cmp	r1, #1
     9d4:	d1f6      	bne.n	9c4 <Find_Now_And_Next_Enable_Func+0xb0>
				{
					tmp_LORA->List_Next = i;
     9d6:	2250      	movs	r2, #80	; 0x50
     9d8:	5483      	strb	r3, [r0, r2]
			}
			
			//===============================
			//	若找不到，將從陣列起始位置開始找，直到找到  tmp_LORA->List_Now 為止
			//===============================
			if(tmp_LORA->List_Next == 0xFF)
     9da:	2350      	movs	r3, #80	; 0x50
     9dc:	5cc3      	ldrb	r3, [r0, r3]
     9de:	b2db      	uxtb	r3, r3
     9e0:	2bff      	cmp	r3, #255	; 0xff
     9e2:	d002      	beq.n	9ea <Find_Now_And_Next_Enable_Func+0xd6>
			//Print_Now_And_Next_Msg(tmp_LORA);
			break;
		}
	}
	
}
     9e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				tmp_List_Index = 0;
     9e6:	2300      	movs	r3, #0
     9e8:	e7d9      	b.n	99e <Find_Now_And_Next_Enable_Func+0x8a>
					if(Dev_List[i][1] == Dev_EN)
     9ea:	4b09      	ldr	r3, [pc, #36]	; (a10 <Find_Now_And_Next_Enable_Func+0xfc>)
     9ec:	785b      	ldrb	r3, [r3, #1]
     9ee:	2b01      	cmp	r3, #1
     9f0:	d00a      	beq.n	a08 <Find_Now_And_Next_Enable_Func+0xf4>
     9f2:	4a08      	ldr	r2, [pc, #32]	; (a14 <Find_Now_And_Next_Enable_Func+0x100>)
				for(i = 0; i < Dev_Item_MAX; i++)
     9f4:	2301      	movs	r3, #1
					if(Dev_List[i][1] == Dev_EN)
     9f6:	7811      	ldrb	r1, [r2, #0]
     9f8:	2901      	cmp	r1, #1
     9fa:	d006      	beq.n	a0a <Find_Now_And_Next_Enable_Func+0xf6>
				for(i = 0; i < Dev_Item_MAX; i++)
     9fc:	3301      	adds	r3, #1
     9fe:	b2db      	uxtb	r3, r3
     a00:	3206      	adds	r2, #6
     a02:	2bff      	cmp	r3, #255	; 0xff
     a04:	d1f7      	bne.n	9f6 <Find_Now_And_Next_Enable_Func+0xe2>
     a06:	e7ed      	b.n	9e4 <Find_Now_And_Next_Enable_Func+0xd0>
					if(Dev_List[i][1] == Dev_EN)
     a08:	2300      	movs	r3, #0
						tmp_LORA->List_Next = i;
     a0a:	2250      	movs	r2, #80	; 0x50
     a0c:	5483      	strb	r3, [r0, r2]
						break;
     a0e:	e7e9      	b.n	9e4 <Find_Now_And_Next_Enable_Func+0xd0>
     a10:	20000a4c 	.word	0x20000a4c
     a14:	20000a53 	.word	0x20000a53

00000a18 <Catch_Data_Form_RX_Func>:



void Catch_Data_Form_RX_Func(volatile LORA_DEFINE_t *tmp_LORA)
{
     a18:	b570      	push	{r4, r5, r6, lr}
     a1a:	2100      	movs	r1, #0
	for(unsigned char i = 0; i < 30; i++)
	{
		dev_value[tmp_LORA->List_Now][i] = tmp_LORA->MyBuffer[i];
     a1c:	264f      	movs	r6, #79	; 0x4f
     a1e:	4d11      	ldr	r5, [pc, #68]	; (a64 <Catch_Data_Form_RX_Func+0x4c>)
     a20:	5d82      	ldrb	r2, [r0, r6]
     a22:	b2d2      	uxtb	r2, r2
     a24:	1843      	adds	r3, r0, r1
     a26:	7cdc      	ldrb	r4, [r3, #19]
     a28:	00d3      	lsls	r3, r2, #3
     a2a:	189b      	adds	r3, r3, r2
     a2c:	009b      	lsls	r3, r3, #2
     a2e:	189b      	adds	r3, r3, r2
     a30:	18eb      	adds	r3, r5, r3
     a32:	545c      	strb	r4, [r3, r1]
     a34:	3101      	adds	r1, #1
	for(unsigned char i = 0; i < 30; i++)
     a36:	291e      	cmp	r1, #30
     a38:	d1f2      	bne.n	a20 <Catch_Data_Form_RX_Func+0x8>
	}
	dev_value[tmp_LORA->List_Now][dev_value_missnode]		= Dev_Found_Node;
     a3a:	254f      	movs	r5, #79	; 0x4f
     a3c:	5d41      	ldrb	r1, [r0, r5]
     a3e:	b2c9      	uxtb	r1, r1
     a40:	4a08      	ldr	r2, [pc, #32]	; (a64 <Catch_Data_Form_RX_Func+0x4c>)
     a42:	00cb      	lsls	r3, r1, #3
     a44:	185b      	adds	r3, r3, r1
     a46:	009b      	lsls	r3, r3, #2
     a48:	185b      	adds	r3, r3, r1
     a4a:	18d3      	adds	r3, r2, r3
     a4c:	2401      	movs	r4, #1
     a4e:	779c      	strb	r4, [r3, #30]
	dev_value[tmp_LORA->List_Now][dev_value_New_Data_Input] = Dev_Have_New_Data;
     a50:	5d41      	ldrb	r1, [r0, r5]
     a52:	b2c9      	uxtb	r1, r1
     a54:	00cb      	lsls	r3, r1, #3
     a56:	185b      	adds	r3, r3, r1
     a58:	009b      	lsls	r3, r3, #2
     a5a:	185b      	adds	r3, r3, r1
     a5c:	18d3      	adds	r3, r2, r3
     a5e:	3323      	adds	r3, #35	; 0x23
     a60:	701c      	strb	r4, [r3, #0]
}
     a62:	bd70      	pop	{r4, r5, r6, pc}
     a64:	20001070 	.word	0x20001070

00000a68 <Define_Dev_Time_Func>:


void Define_Dev_Time_Func(void)
{
     a68:	b510      	push	{r4, lr}
	Load_Dev_Time_Form_NVM();
     a6a:	4b0a      	ldr	r3, [pc, #40]	; (a94 <Define_Dev_Time_Func+0x2c>)
     a6c:	4798      	blx	r3
	if(Dev_Time[0][0] == 0xff)
     a6e:	4b0a      	ldr	r3, [pc, #40]	; (a98 <Define_Dev_Time_Func+0x30>)
     a70:	781b      	ldrb	r3, [r3, #0]
     a72:	2bff      	cmp	r3, #255	; 0xff
     a74:	d000      	beq.n	a78 <Define_Dev_Time_Func+0x10>
			Dev_Time[i][0] = 0xff;
			Dev_Time[i][1] = 0xff;
		}
		Save_Dev_Time_into_NVM();
	}
}
     a76:	bd10      	pop	{r4, pc}
     a78:	4b07      	ldr	r3, [pc, #28]	; (a98 <Define_Dev_Time_Func+0x30>)
     a7a:	0019      	movs	r1, r3
     a7c:	31ff      	adds	r1, #255	; 0xff
     a7e:	31ff      	adds	r1, #255	; 0xff
			Dev_Time[i][0] = 0xff;
     a80:	22ff      	movs	r2, #255	; 0xff
     a82:	701a      	strb	r2, [r3, #0]
			Dev_Time[i][1] = 0xff;
     a84:	705a      	strb	r2, [r3, #1]
     a86:	3302      	adds	r3, #2
		for ( unsigned char i = 0; i < Dev_Item_MAX; i++)
     a88:	428b      	cmp	r3, r1
     a8a:	d1fa      	bne.n	a82 <Define_Dev_Time_Func+0x1a>
		Save_Dev_Time_into_NVM();
     a8c:	4b03      	ldr	r3, [pc, #12]	; (a9c <Define_Dev_Time_Func+0x34>)
     a8e:	4798      	blx	r3
}
     a90:	e7f1      	b.n	a76 <Define_Dev_Time_Func+0xe>
     a92:	46c0      	nop			; (mov r8, r8)
     a94:	000015a9 	.word	0x000015a9
     a98:	20000250 	.word	0x20000250
     a9c:	00001511 	.word	0x00001511

00000aa0 <Define_Dev_List_Func>:


void Define_Dev_List_Func(void)
{
     aa0:	b510      	push	{r4, lr}
	Load_List_Form_NVM();
     aa2:	4b0c      	ldr	r3, [pc, #48]	; (ad4 <Define_Dev_List_Func+0x34>)
     aa4:	4798      	blx	r3
	if(Dev_List[0][0] == 0xff)
     aa6:	4b0c      	ldr	r3, [pc, #48]	; (ad8 <Define_Dev_List_Func+0x38>)
     aa8:	781b      	ldrb	r3, [r3, #0]
     aaa:	2bff      	cmp	r3, #255	; 0xff
     aac:	d000      	beq.n	ab0 <Define_Dev_List_Func+0x10>
			Dev_List[i][4] = 0;
			Dev_List[i][5] = 0;
		}
		Save_List_in_NVM();
	}
}
     aae:	bd10      	pop	{r4, pc}
     ab0:	4b09      	ldr	r3, [pc, #36]	; (ad8 <Define_Dev_List_Func+0x38>)
	if(Dev_List[0][0] == 0xff)
     ab2:	2200      	movs	r2, #0
			Dev_List[i][Dev_En_Index] = Dev_Dis;
     ab4:	2100      	movs	r1, #0
			Dev_List[i][Dev_No_Index] = i;
     ab6:	701a      	strb	r2, [r3, #0]
			Dev_List[i][Dev_En_Index] = Dev_Dis;
     ab8:	7059      	strb	r1, [r3, #1]
			Dev_List[i][2] = 0;
     aba:	7099      	strb	r1, [r3, #2]
			Dev_List[i][3] = 0;
     abc:	70d9      	strb	r1, [r3, #3]
			Dev_List[i][4] = 0;
     abe:	7119      	strb	r1, [r3, #4]
			Dev_List[i][5] = 0;
     ac0:	7159      	strb	r1, [r3, #5]
		for (unsigned char i = 0; i < Dev_Item_MAX; i++)
     ac2:	3201      	adds	r2, #1
     ac4:	b2d2      	uxtb	r2, r2
     ac6:	3306      	adds	r3, #6
     ac8:	2aff      	cmp	r2, #255	; 0xff
     aca:	d1f4      	bne.n	ab6 <Define_Dev_List_Func+0x16>
		Save_List_in_NVM();
     acc:	4b03      	ldr	r3, [pc, #12]	; (adc <Define_Dev_List_Func+0x3c>)
     ace:	4798      	blx	r3
}
     ad0:	e7ed      	b.n	aae <Define_Dev_List_Func+0xe>
     ad2:	46c0      	nop			; (mov r8, r8)
     ad4:	00001639 	.word	0x00001639
     ad8:	20000a4c 	.word	0x20000a4c
     adc:	00001465 	.word	0x00001465

00000ae0 <Dev_Time_Counter_By_Timer_Func>:
}



void Dev_Time_Counter_By_Timer_Func(unsigned char tmp_start, unsigned char tmp_end)
{
     ae0:	b570      	push	{r4, r5, r6, lr}
	UINT16u_t tmp16;
	for(unsigned char i = tmp_start; i < tmp_end; i++)
     ae2:	4288      	cmp	r0, r1
     ae4:	d227      	bcs.n	b36 <Dev_Time_Counter_By_Timer_Func+0x56>
     ae6:	00c4      	lsls	r4, r0, #3
     ae8:	1824      	adds	r4, r4, r0
     aea:	00a4      	lsls	r4, r4, #2
     aec:	1824      	adds	r4, r4, r0
     aee:	3421      	adds	r4, #33	; 0x21
     af0:	4e11      	ldr	r6, [pc, #68]	; (b38 <Dev_Time_Counter_By_Timer_Func+0x58>)
     af2:	19a4      	adds	r4, r4, r6
     af4:	3901      	subs	r1, #1
     af6:	1a0a      	subs	r2, r1, r0
     af8:	b2d2      	uxtb	r2, r2
     afa:	1810      	adds	r0, r2, r0
     afc:	00c5      	lsls	r5, r0, #3
     afe:	182d      	adds	r5, r5, r0
     b00:	00ad      	lsls	r5, r5, #2
     b02:	182d      	adds	r5, r5, r0
     b04:	3546      	adds	r5, #70	; 0x46
     b06:	19ad      	adds	r5, r5, r6
	{
		tmp16.byte[1] = dev_value[i][dev_value_Count_High];
     b08:	20ff      	movs	r0, #255	; 0xff
		tmp16.byte[0] = dev_value[i][dev_value_Count_Low];
		if(tmp16.word < 10000)
     b0a:	4e0c      	ldr	r6, [pc, #48]	; (b3c <Dev_Time_Counter_By_Timer_Func+0x5c>)
     b0c:	e005      	b.n	b1a <Dev_Time_Counter_By_Timer_Func+0x3a>
		{
			tmp16.word++;
		}
		dev_value[i][dev_value_Count_High]	= tmp16.byte[1];
     b0e:	0a1a      	lsrs	r2, r3, #8
     b10:	700a      	strb	r2, [r1, #0]
		dev_value[i][dev_value_Count_Low]	= tmp16.byte[0];
     b12:	704b      	strb	r3, [r1, #1]
     b14:	3425      	adds	r4, #37	; 0x25
	for(unsigned char i = tmp_start; i < tmp_end; i++)
     b16:	42ac      	cmp	r4, r5
     b18:	d00d      	beq.n	b36 <Dev_Time_Counter_By_Timer_Func+0x56>
     b1a:	0021      	movs	r1, r4
		tmp16.byte[1] = dev_value[i][dev_value_Count_High];
     b1c:	7822      	ldrb	r2, [r4, #0]
     b1e:	0212      	lsls	r2, r2, #8
     b20:	4003      	ands	r3, r0
     b22:	4313      	orrs	r3, r2
		tmp16.byte[0] = dev_value[i][dev_value_Count_Low];
     b24:	7862      	ldrb	r2, [r4, #1]
     b26:	4383      	bics	r3, r0
     b28:	431a      	orrs	r2, r3
     b2a:	1c13      	adds	r3, r2, #0
		if(tmp16.word < 10000)
     b2c:	b292      	uxth	r2, r2
     b2e:	42b2      	cmp	r2, r6
     b30:	d8ed      	bhi.n	b0e <Dev_Time_Counter_By_Timer_Func+0x2e>
			tmp16.word++;
     b32:	1c53      	adds	r3, r2, #1
     b34:	e7eb      	b.n	b0e <Dev_Time_Counter_By_Timer_Func+0x2e>
	}
}
     b36:	bd70      	pop	{r4, r5, r6, pc}
     b38:	20001070 	.word	0x20001070
     b3c:	0000270f 	.word	0x0000270f

00000b40 <Fill_Dev_Time_into_dev_value>:
{
     b40:	b510      	push	{r4, lr}
     b42:	0004      	movs	r4, r0
	if(tmp_LORA->Lora_Dev_Count_IRQ_Flag == 1)
     b44:	4b1f      	ldr	r3, [pc, #124]	; (bc4 <Fill_Dev_Time_into_dev_value+0x84>)
     b46:	5cc3      	ldrb	r3, [r0, r3]
     b48:	2b01      	cmp	r3, #1
     b4a:	d010      	beq.n	b6e <Fill_Dev_Time_into_dev_value+0x2e>
	if(tmp_LORA->Lora_Dev_Count_IRQ_Flag == 2)
     b4c:	4b1d      	ldr	r3, [pc, #116]	; (bc4 <Fill_Dev_Time_into_dev_value+0x84>)
     b4e:	5cc3      	ldrb	r3, [r0, r3]
     b50:	2b02      	cmp	r3, #2
     b52:	d014      	beq.n	b7e <Fill_Dev_Time_into_dev_value+0x3e>
	if(tmp_LORA->Lora_Dev_Count_IRQ_Flag == 3)
     b54:	4b1b      	ldr	r3, [pc, #108]	; (bc4 <Fill_Dev_Time_into_dev_value+0x84>)
     b56:	5cc3      	ldrb	r3, [r0, r3]
     b58:	2b03      	cmp	r3, #3
     b5a:	d018      	beq.n	b8e <Fill_Dev_Time_into_dev_value+0x4e>
	if(tmp_LORA->Lora_Dev_Count_IRQ_Flag == 4)
     b5c:	4b19      	ldr	r3, [pc, #100]	; (bc4 <Fill_Dev_Time_into_dev_value+0x84>)
     b5e:	5cc3      	ldrb	r3, [r0, r3]
     b60:	2b04      	cmp	r3, #4
     b62:	d01c      	beq.n	b9e <Fill_Dev_Time_into_dev_value+0x5e>
	if(tmp_LORA->Lora_Dev_Count_IRQ_Flag == 5)
     b64:	4b17      	ldr	r3, [pc, #92]	; (bc4 <Fill_Dev_Time_into_dev_value+0x84>)
     b66:	5cc3      	ldrb	r3, [r0, r3]
     b68:	2b05      	cmp	r3, #5
     b6a:	d020      	beq.n	bae <Fill_Dev_Time_into_dev_value+0x6e>
}
     b6c:	bd10      	pop	{r4, pc}
		Dev_Time_Counter_By_Timer_Func(0, 50);
     b6e:	2132      	movs	r1, #50	; 0x32
     b70:	2000      	movs	r0, #0
     b72:	4b15      	ldr	r3, [pc, #84]	; (bc8 <Fill_Dev_Time_into_dev_value+0x88>)
     b74:	4798      	blx	r3
		tmp_LORA->Lora_Dev_Count_IRQ_Flag = 2;
     b76:	2202      	movs	r2, #2
     b78:	4b12      	ldr	r3, [pc, #72]	; (bc4 <Fill_Dev_Time_into_dev_value+0x84>)
     b7a:	54e2      	strb	r2, [r4, r3]
     b7c:	e7f6      	b.n	b6c <Fill_Dev_Time_into_dev_value+0x2c>
		Dev_Time_Counter_By_Timer_Func(50, 100);
     b7e:	2164      	movs	r1, #100	; 0x64
     b80:	2032      	movs	r0, #50	; 0x32
     b82:	4b11      	ldr	r3, [pc, #68]	; (bc8 <Fill_Dev_Time_into_dev_value+0x88>)
     b84:	4798      	blx	r3
		tmp_LORA->Lora_Dev_Count_IRQ_Flag = 3;
     b86:	2203      	movs	r2, #3
     b88:	4b0e      	ldr	r3, [pc, #56]	; (bc4 <Fill_Dev_Time_into_dev_value+0x84>)
     b8a:	54e2      	strb	r2, [r4, r3]
     b8c:	e7ee      	b.n	b6c <Fill_Dev_Time_into_dev_value+0x2c>
		Dev_Time_Counter_By_Timer_Func(100, 150);
     b8e:	2196      	movs	r1, #150	; 0x96
     b90:	2064      	movs	r0, #100	; 0x64
     b92:	4b0d      	ldr	r3, [pc, #52]	; (bc8 <Fill_Dev_Time_into_dev_value+0x88>)
     b94:	4798      	blx	r3
		tmp_LORA->Lora_Dev_Count_IRQ_Flag = 4;
     b96:	2204      	movs	r2, #4
     b98:	4b0a      	ldr	r3, [pc, #40]	; (bc4 <Fill_Dev_Time_into_dev_value+0x84>)
     b9a:	54e2      	strb	r2, [r4, r3]
     b9c:	e7e6      	b.n	b6c <Fill_Dev_Time_into_dev_value+0x2c>
		Dev_Time_Counter_By_Timer_Func(150, 200);
     b9e:	21c8      	movs	r1, #200	; 0xc8
     ba0:	2096      	movs	r0, #150	; 0x96
     ba2:	4b09      	ldr	r3, [pc, #36]	; (bc8 <Fill_Dev_Time_into_dev_value+0x88>)
     ba4:	4798      	blx	r3
		tmp_LORA->Lora_Dev_Count_IRQ_Flag = 5;
     ba6:	2205      	movs	r2, #5
     ba8:	4b06      	ldr	r3, [pc, #24]	; (bc4 <Fill_Dev_Time_into_dev_value+0x84>)
     baa:	54e2      	strb	r2, [r4, r3]
     bac:	e7de      	b.n	b6c <Fill_Dev_Time_into_dev_value+0x2c>
		Dev_Time_Counter_By_Timer_Func(200, Dev_Item_MAX);
     bae:	21ff      	movs	r1, #255	; 0xff
     bb0:	20c8      	movs	r0, #200	; 0xc8
     bb2:	4b05      	ldr	r3, [pc, #20]	; (bc8 <Fill_Dev_Time_into_dev_value+0x88>)
     bb4:	4798      	blx	r3
		tmp_LORA->Lora_Dev_Count_IRQ_Flag = 0;
     bb6:	2300      	movs	r3, #0
     bb8:	4a02      	ldr	r2, [pc, #8]	; (bc4 <Fill_Dev_Time_into_dev_value+0x84>)
     bba:	54a3      	strb	r3, [r4, r2]
		tmp_LORA->t2_tmp_count = 0;
     bbc:	3219      	adds	r2, #25
     bbe:	50a3      	str	r3, [r4, r2]
}
     bc0:	e7d4      	b.n	b6c <Fill_Dev_Time_into_dev_value+0x2c>
     bc2:	46c0      	nop			; (mov r8, r8)
     bc4:	0000021b 	.word	0x0000021b
     bc8:	00000ae1 	.word	0x00000ae1

00000bcc <Judg_KEY_S>:



void Judg_KEY_S(void)
{
	if(UserKeyInBuf[0] == 's' || UserKeyInBuf[0] == 'S')		//Print LORA01, LORA02 FW, ID
     bcc:	4b2e      	ldr	r3, [pc, #184]	; (c88 <Judg_KEY_S+0xbc>)
     bce:	781b      	ldrb	r3, [r3, #0]
     bd0:	2220      	movs	r2, #32
     bd2:	4393      	bics	r3, r2
     bd4:	2b53      	cmp	r3, #83	; 0x53
     bd6:	d000      	beq.n	bda <Judg_KEY_S+0xe>
			{
				CMD_Index = Print_Lora_FW_ID_Index;
			}
		}
	}
}
     bd8:	4770      	bx	lr
		if(UserKeyInBufCount == 2 && UserKeyInBuf[1] == 0x0d)
     bda:	4b2c      	ldr	r3, [pc, #176]	; (c8c <Judg_KEY_S+0xc0>)
     bdc:	781a      	ldrb	r2, [r3, #0]
     bde:	2a02      	cmp	r2, #2
     be0:	d019      	beq.n	c16 <Judg_KEY_S+0x4a>
		if(UserKeyInBuf[1] == 's' || UserKeyInBuf[1] == 'S')	//Set Lora SF
     be2:	4b29      	ldr	r3, [pc, #164]	; (c88 <Judg_KEY_S+0xbc>)
     be4:	785b      	ldrb	r3, [r3, #1]
     be6:	2b73      	cmp	r3, #115	; 0x73
     be8:	d021      	beq.n	c2e <Judg_KEY_S+0x62>
     bea:	2b53      	cmp	r3, #83	; 0x53
     bec:	d01f      	beq.n	c2e <Judg_KEY_S+0x62>
		if(UserKeyInBuf[1] == 'p' || UserKeyInBuf[1] == 'P')	//Set Lora POWER
     bee:	2120      	movs	r1, #32
     bf0:	0018      	movs	r0, r3
     bf2:	4388      	bics	r0, r1
     bf4:	2850      	cmp	r0, #80	; 0x50
     bf6:	d029      	beq.n	c4c <Judg_KEY_S+0x80>
		if(UserKeyInBuf[1] == 'f' || UserKeyInBuf[1] == 'F')	//Set Lora FQ
     bf8:	2846      	cmp	r0, #70	; 0x46
     bfa:	d036      	beq.n	c6a <Judg_KEY_S+0x9e>
		if(UserKeyInBufCount == 3 && UserKeyInBuf[2] == 0x0d)	//Print LORA01 or LORA02 FW, ID
     bfc:	2a03      	cmp	r2, #3
     bfe:	d1eb      	bne.n	bd8 <Judg_KEY_S+0xc>
     c00:	4a21      	ldr	r2, [pc, #132]	; (c88 <Judg_KEY_S+0xbc>)
     c02:	7892      	ldrb	r2, [r2, #2]
     c04:	2a0d      	cmp	r2, #13
     c06:	d1e7      	bne.n	bd8 <Judg_KEY_S+0xc>
			if(UserKeyInBuf[1] == '1' || UserKeyInBuf[1] == '2')
     c08:	3b31      	subs	r3, #49	; 0x31
     c0a:	2b01      	cmp	r3, #1
     c0c:	d8e4      	bhi.n	bd8 <Judg_KEY_S+0xc>
				CMD_Index = Print_Lora_FW_ID_Index;
     c0e:	3a0b      	subs	r2, #11
     c10:	4b1f      	ldr	r3, [pc, #124]	; (c90 <Judg_KEY_S+0xc4>)
     c12:	701a      	strb	r2, [r3, #0]
}
     c14:	e7e0      	b.n	bd8 <Judg_KEY_S+0xc>
		if(UserKeyInBufCount == 2 && UserKeyInBuf[1] == 0x0d)
     c16:	4b1c      	ldr	r3, [pc, #112]	; (c88 <Judg_KEY_S+0xbc>)
     c18:	785b      	ldrb	r3, [r3, #1]
     c1a:	2b0d      	cmp	r3, #13
     c1c:	d004      	beq.n	c28 <Judg_KEY_S+0x5c>
		if(UserKeyInBuf[1] == 's' || UserKeyInBuf[1] == 'S')	//Set Lora SF
     c1e:	2b73      	cmp	r3, #115	; 0x73
     c20:	d0da      	beq.n	bd8 <Judg_KEY_S+0xc>
     c22:	2b53      	cmp	r3, #83	; 0x53
     c24:	d1e3      	bne.n	bee <Judg_KEY_S+0x22>
     c26:	e7d7      	b.n	bd8 <Judg_KEY_S+0xc>
			CMD_Index = Print_Lora_FW_ID_Index;
     c28:	4b19      	ldr	r3, [pc, #100]	; (c90 <Judg_KEY_S+0xc4>)
     c2a:	701a      	strb	r2, [r3, #0]
     c2c:	e7d4      	b.n	bd8 <Judg_KEY_S+0xc>
			if(UserKeyInBufCount == 7 && UserKeyInBuf[6] == 0x0d)
     c2e:	2a07      	cmp	r2, #7
     c30:	d1d2      	bne.n	bd8 <Judg_KEY_S+0xc>
     c32:	4b15      	ldr	r3, [pc, #84]	; (c88 <Judg_KEY_S+0xbc>)
     c34:	799b      	ldrb	r3, [r3, #6]
     c36:	2b0d      	cmp	r3, #13
     c38:	d1ce      	bne.n	bd8 <Judg_KEY_S+0xc>
				if(UserKeyInBuf[2] == '1' || UserKeyInBuf[2] == '2')
     c3a:	4b13      	ldr	r3, [pc, #76]	; (c88 <Judg_KEY_S+0xbc>)
     c3c:	789b      	ldrb	r3, [r3, #2]
     c3e:	3b31      	subs	r3, #49	; 0x31
     c40:	2b01      	cmp	r3, #1
     c42:	d8c9      	bhi.n	bd8 <Judg_KEY_S+0xc>
					CMD_Index = Set_Lora_SF_Index;
     c44:	3a02      	subs	r2, #2
     c46:	4b12      	ldr	r3, [pc, #72]	; (c90 <Judg_KEY_S+0xc4>)
     c48:	701a      	strb	r2, [r3, #0]
     c4a:	e7c5      	b.n	bd8 <Judg_KEY_S+0xc>
			if(UserKeyInBufCount == 7 && UserKeyInBuf[6] == 0x0d)
     c4c:	2a07      	cmp	r2, #7
     c4e:	d1c3      	bne.n	bd8 <Judg_KEY_S+0xc>
     c50:	4b0d      	ldr	r3, [pc, #52]	; (c88 <Judg_KEY_S+0xbc>)
     c52:	799b      	ldrb	r3, [r3, #6]
     c54:	2b0d      	cmp	r3, #13
     c56:	d1bf      	bne.n	bd8 <Judg_KEY_S+0xc>
				if(UserKeyInBuf[2] == '1' || UserKeyInBuf[2] == '2')
     c58:	4b0b      	ldr	r3, [pc, #44]	; (c88 <Judg_KEY_S+0xbc>)
     c5a:	789b      	ldrb	r3, [r3, #2]
     c5c:	3b31      	subs	r3, #49	; 0x31
     c5e:	2b01      	cmp	r3, #1
     c60:	d8ba      	bhi.n	bd8 <Judg_KEY_S+0xc>
					CMD_Index = Set_Lora_Power_Index;
     c62:	3a01      	subs	r2, #1
     c64:	4b0a      	ldr	r3, [pc, #40]	; (c90 <Judg_KEY_S+0xc4>)
     c66:	701a      	strb	r2, [r3, #0]
     c68:	e7b6      	b.n	bd8 <Judg_KEY_S+0xc>
			if(UserKeyInBufCount == 10 && UserKeyInBuf[9] == 0x0d)
     c6a:	2a0a      	cmp	r2, #10
     c6c:	d1b4      	bne.n	bd8 <Judg_KEY_S+0xc>
     c6e:	4b06      	ldr	r3, [pc, #24]	; (c88 <Judg_KEY_S+0xbc>)
     c70:	7a5b      	ldrb	r3, [r3, #9]
     c72:	2b0d      	cmp	r3, #13
     c74:	d1b0      	bne.n	bd8 <Judg_KEY_S+0xc>
				if(UserKeyInBuf[2] == '1' || UserKeyInBuf[2] == '2')
     c76:	4b04      	ldr	r3, [pc, #16]	; (c88 <Judg_KEY_S+0xbc>)
     c78:	789b      	ldrb	r3, [r3, #2]
     c7a:	3b31      	subs	r3, #49	; 0x31
     c7c:	2b01      	cmp	r3, #1
     c7e:	d8ab      	bhi.n	bd8 <Judg_KEY_S+0xc>
					CMD_Index = Set_Lora_FQ_Index;
     c80:	3a03      	subs	r2, #3
     c82:	4b03      	ldr	r3, [pc, #12]	; (c90 <Judg_KEY_S+0xc4>)
     c84:	701a      	strb	r2, [r3, #0]
     c86:	e7a7      	b.n	bd8 <Judg_KEY_S+0xc>
     c88:	20000490 	.word	0x20000490
     c8c:	200004b1 	.word	0x200004b1
     c90:	2000354b 	.word	0x2000354b

00000c94 <Judg_KEY_D>:


void Judg_KEY_D(void)
{
	if(UserKeyInBuf[0] == 'd' || UserKeyInBuf[0] == 'D' )	// DEBUG MODE ON/OFF
     c94:	4b0b      	ldr	r3, [pc, #44]	; (cc4 <Judg_KEY_D+0x30>)
     c96:	781b      	ldrb	r3, [r3, #0]
     c98:	2220      	movs	r2, #32
     c9a:	4393      	bics	r3, r2
     c9c:	2b44      	cmp	r3, #68	; 0x44
     c9e:	d000      	beq.n	ca2 <Judg_KEY_D+0xe>
			{
				CMD_Index = Debug_Mode_Index;
			}
		}
	}
}
     ca0:	4770      	bx	lr
		if(UserKeyInBuf[1] == '1' || UserKeyInBuf[1] == '2')// DEBUG MODE ON/OFF TO LORA01 OR LORA02
     ca2:	4b08      	ldr	r3, [pc, #32]	; (cc4 <Judg_KEY_D+0x30>)
     ca4:	785b      	ldrb	r3, [r3, #1]
     ca6:	3b31      	subs	r3, #49	; 0x31
     ca8:	2b01      	cmp	r3, #1
     caa:	d8f9      	bhi.n	ca0 <Judg_KEY_D+0xc>
			if(UserKeyInBufCount == 3 && UserKeyInBuf[2] == 0x0d)
     cac:	4b06      	ldr	r3, [pc, #24]	; (cc8 <Judg_KEY_D+0x34>)
     cae:	781b      	ldrb	r3, [r3, #0]
     cb0:	2b03      	cmp	r3, #3
     cb2:	d1f5      	bne.n	ca0 <Judg_KEY_D+0xc>
     cb4:	4b03      	ldr	r3, [pc, #12]	; (cc4 <Judg_KEY_D+0x30>)
     cb6:	789b      	ldrb	r3, [r3, #2]
     cb8:	2b0d      	cmp	r3, #13
     cba:	d1f1      	bne.n	ca0 <Judg_KEY_D+0xc>
				CMD_Index = Debug_Mode_Index;
     cbc:	3a1f      	subs	r2, #31
     cbe:	4b03      	ldr	r3, [pc, #12]	; (ccc <Judg_KEY_D+0x38>)
     cc0:	701a      	strb	r2, [r3, #0]
}
     cc2:	e7ed      	b.n	ca0 <Judg_KEY_D+0xc>
     cc4:	20000490 	.word	0x20000490
     cc8:	200004b1 	.word	0x200004b1
     ccc:	2000354b 	.word	0x2000354b

00000cd0 <Judg_KEY_L>:

void Judg_KEY_L(void)
{
	if(UserKeyInBuf[0] == 'l' || UserKeyInBuf[0] == 'L') // Print List Table
     cd0:	4b09      	ldr	r3, [pc, #36]	; (cf8 <Judg_KEY_L+0x28>)
     cd2:	781b      	ldrb	r3, [r3, #0]
     cd4:	2220      	movs	r2, #32
     cd6:	4393      	bics	r3, r2
     cd8:	2b4c      	cmp	r3, #76	; 0x4c
     cda:	d000      	beq.n	cde <Judg_KEY_L+0xe>
		if(UserKeyInBufCount == 2 && UserKeyInBuf[1] == 0x0d)
		{
			CMD_Index = Print_List_Table_Index;
		}
	}
}
     cdc:	4770      	bx	lr
		if(UserKeyInBufCount == 2 && UserKeyInBuf[1] == 0x0d)
     cde:	4b07      	ldr	r3, [pc, #28]	; (cfc <Judg_KEY_L+0x2c>)
     ce0:	781b      	ldrb	r3, [r3, #0]
     ce2:	2b02      	cmp	r3, #2
     ce4:	d1fa      	bne.n	cdc <Judg_KEY_L+0xc>
     ce6:	4b04      	ldr	r3, [pc, #16]	; (cf8 <Judg_KEY_L+0x28>)
     ce8:	785b      	ldrb	r3, [r3, #1]
     cea:	2b0d      	cmp	r3, #13
     cec:	d1f6      	bne.n	cdc <Judg_KEY_L+0xc>
			CMD_Index = Print_List_Table_Index;
     cee:	3a1d      	subs	r2, #29
     cf0:	4b03      	ldr	r3, [pc, #12]	; (d00 <Judg_KEY_L+0x30>)
     cf2:	701a      	strb	r2, [r3, #0]
}
     cf4:	e7f2      	b.n	cdc <Judg_KEY_L+0xc>
     cf6:	46c0      	nop			; (mov r8, r8)
     cf8:	20000490 	.word	0x20000490
     cfc:	200004b1 	.word	0x200004b1
     d00:	2000354b 	.word	0x2000354b

00000d04 <Judg_KEY_R>:

void Judg_KEY_R(void)
{
	if(UserKeyInBuf[0] == 'r' || UserKeyInBuf[0] == 'R')	//Print RSSI
     d04:	4b09      	ldr	r3, [pc, #36]	; (d2c <Judg_KEY_R+0x28>)
     d06:	781b      	ldrb	r3, [r3, #0]
     d08:	2220      	movs	r2, #32
     d0a:	4393      	bics	r3, r2
     d0c:	2b52      	cmp	r3, #82	; 0x52
     d0e:	d000      	beq.n	d12 <Judg_KEY_R+0xe>
		if(UserKeyInBufCount == 2 && UserKeyInBuf[1] == 0x0d)
		{
			CMD_Index = Print_RSSI_Index;
		}
	}
}
     d10:	4770      	bx	lr
		if(UserKeyInBufCount == 2 && UserKeyInBuf[1] == 0x0d)
     d12:	4b07      	ldr	r3, [pc, #28]	; (d30 <Judg_KEY_R+0x2c>)
     d14:	781b      	ldrb	r3, [r3, #0]
     d16:	2b02      	cmp	r3, #2
     d18:	d1fa      	bne.n	d10 <Judg_KEY_R+0xc>
     d1a:	4b04      	ldr	r3, [pc, #16]	; (d2c <Judg_KEY_R+0x28>)
     d1c:	785b      	ldrb	r3, [r3, #1]
     d1e:	2b0d      	cmp	r3, #13
     d20:	d1f6      	bne.n	d10 <Judg_KEY_R+0xc>
			CMD_Index = Print_RSSI_Index;
     d22:	3a1c      	subs	r2, #28
     d24:	4b03      	ldr	r3, [pc, #12]	; (d34 <Judg_KEY_R+0x30>)
     d26:	701a      	strb	r2, [r3, #0]
}
     d28:	e7f2      	b.n	d10 <Judg_KEY_R+0xc>
     d2a:	46c0      	nop			; (mov r8, r8)
     d2c:	20000490 	.word	0x20000490
     d30:	200004b1 	.word	0x200004b1
     d34:	2000354b 	.word	0x2000354b

00000d38 <Judg_KEY_E>:



void Judg_KEY_E(void)
{
     d38:	b510      	push	{r4, lr}
	unsigned char tmp_list_table_index;
	
	if(UserKeyInBuf[0] == 'e' || UserKeyInBuf[0] == 'E' )	//enable & disable
     d3a:	4b21      	ldr	r3, [pc, #132]	; (dc0 <Judg_KEY_E+0x88>)
     d3c:	781b      	ldrb	r3, [r3, #0]
     d3e:	2220      	movs	r2, #32
     d40:	4393      	bics	r3, r2
     d42:	2b45      	cmp	r3, #69	; 0x45
     d44:	d000      	beq.n	d48 <Judg_KEY_E+0x10>
				Print_One_Form_List_Table(tmp_list_table_index);
				uTXByte(Debug_COM, 0x0d);
			}
		}
	}
}
     d46:	bd10      	pop	{r4, pc}
		if(UserKeyInBufCount == 6 && UserKeyInBuf[5] == 0x0d)
     d48:	4b1e      	ldr	r3, [pc, #120]	; (dc4 <Judg_KEY_E+0x8c>)
     d4a:	781b      	ldrb	r3, [r3, #0]
     d4c:	2b06      	cmp	r3, #6
     d4e:	d1fa      	bne.n	d46 <Judg_KEY_E+0xe>
     d50:	4b1b      	ldr	r3, [pc, #108]	; (dc0 <Judg_KEY_E+0x88>)
     d52:	795b      	ldrb	r3, [r3, #5]
     d54:	2b0d      	cmp	r3, #13
     d56:	d1f6      	bne.n	d46 <Judg_KEY_E+0xe>
			tmp_list_table_index =	Cal_list_table_index(UserKeyInBuf[2], UserKeyInBuf[3], UserKeyInBuf[4]);
     d58:	4b19      	ldr	r3, [pc, #100]	; (dc0 <Judg_KEY_E+0x88>)
     d5a:	791a      	ldrb	r2, [r3, #4]
     d5c:	78d9      	ldrb	r1, [r3, #3]
     d5e:	7898      	ldrb	r0, [r3, #2]
     d60:	4b19      	ldr	r3, [pc, #100]	; (dc8 <Judg_KEY_E+0x90>)
     d62:	4798      	blx	r3
			tmp_list_table_index = Search_list_table_index(tmp_list_table_index);
     d64:	4b19      	ldr	r3, [pc, #100]	; (dcc <Judg_KEY_E+0x94>)
     d66:	4798      	blx	r3
     d68:	0004      	movs	r4, r0
			if(tmp_list_table_index != Not_found_Index)
     d6a:	28ff      	cmp	r0, #255	; 0xff
     d6c:	d0eb      	beq.n	d46 <Judg_KEY_E+0xe>
				Print_Find_Msg();
     d6e:	4b18      	ldr	r3, [pc, #96]	; (dd0 <Judg_KEY_E+0x98>)
     d70:	4798      	blx	r3
				Print_One_Form_List_Table(tmp_list_table_index);
     d72:	0020      	movs	r0, r4
     d74:	4b17      	ldr	r3, [pc, #92]	; (dd4 <Judg_KEY_E+0x9c>)
     d76:	4798      	blx	r3
				Print_Arrow_Right();
     d78:	4b17      	ldr	r3, [pc, #92]	; (dd8 <Judg_KEY_E+0xa0>)
     d7a:	4798      	blx	r3
				if(Dev_List[tmp_list_table_index][1] == Dev_Dis)
     d7c:	0063      	lsls	r3, r4, #1
     d7e:	191b      	adds	r3, r3, r4
     d80:	005b      	lsls	r3, r3, #1
     d82:	4a16      	ldr	r2, [pc, #88]	; (ddc <Judg_KEY_E+0xa4>)
     d84:	18d3      	adds	r3, r2, r3
     d86:	785b      	ldrb	r3, [r3, #1]
     d88:	2b00      	cmp	r3, #0
     d8a:	d111      	bne.n	db0 <Judg_KEY_E+0x78>
					Dev_List[tmp_list_table_index][1] = Dev_EN;
     d8c:	0063      	lsls	r3, r4, #1
     d8e:	191b      	adds	r3, r3, r4
     d90:	005b      	lsls	r3, r3, #1
     d92:	18d3      	adds	r3, r2, r3
     d94:	2201      	movs	r2, #1
     d96:	705a      	strb	r2, [r3, #1]
				Save_List_in_NVM();
     d98:	4b11      	ldr	r3, [pc, #68]	; (de0 <Judg_KEY_E+0xa8>)
     d9a:	4798      	blx	r3
				Load_List_Form_NVM();
     d9c:	4b11      	ldr	r3, [pc, #68]	; (de4 <Judg_KEY_E+0xac>)
     d9e:	4798      	blx	r3
				Print_One_Form_List_Table(tmp_list_table_index);
     da0:	0020      	movs	r0, r4
     da2:	4b0c      	ldr	r3, [pc, #48]	; (dd4 <Judg_KEY_E+0x9c>)
     da4:	4798      	blx	r3
				uTXByte(Debug_COM, 0x0d);
     da6:	210d      	movs	r1, #13
     da8:	480f      	ldr	r0, [pc, #60]	; (de8 <Judg_KEY_E+0xb0>)
     daa:	4b10      	ldr	r3, [pc, #64]	; (dec <Judg_KEY_E+0xb4>)
     dac:	4798      	blx	r3
}
     dae:	e7ca      	b.n	d46 <Judg_KEY_E+0xe>
					Dev_List[tmp_list_table_index][1] = Dev_Dis;
     db0:	0063      	lsls	r3, r4, #1
     db2:	191b      	adds	r3, r3, r4
     db4:	005b      	lsls	r3, r3, #1
     db6:	4a09      	ldr	r2, [pc, #36]	; (ddc <Judg_KEY_E+0xa4>)
     db8:	18d3      	adds	r3, r2, r3
     dba:	2200      	movs	r2, #0
     dbc:	705a      	strb	r2, [r3, #1]
     dbe:	e7eb      	b.n	d98 <Judg_KEY_E+0x60>
     dc0:	20000490 	.word	0x20000490
     dc4:	200004b1 	.word	0x200004b1
     dc8:	0000039d 	.word	0x0000039d
     dcc:	000016cd 	.word	0x000016cd
     dd0:	00001801 	.word	0x00001801
     dd4:	000018ad 	.word	0x000018ad
     dd8:	000019c1 	.word	0x000019c1
     ddc:	20000a4c 	.word	0x20000a4c
     de0:	00001465 	.word	0x00001465
     de4:	00001639 	.word	0x00001639
     de8:	2000022c 	.word	0x2000022c
     dec:	00003ac9 	.word	0x00003ac9

00000df0 <Judg_KEY_ADD>:



void Judg_KEY_ADD(void)
{
     df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     df2:	46ce      	mov	lr, r9
     df4:	4647      	mov	r7, r8
     df6:	b580      	push	{r7, lr}
	unsigned char tmp_list_table_index;
	
	if(	ascii_to_hex(UserKeyInBuf[0]) == KEYA &&
     df8:	4b33      	ldr	r3, [pc, #204]	; (ec8 <Judg_KEY_ADD+0xd8>)
     dfa:	7818      	ldrb	r0, [r3, #0]
     dfc:	4b33      	ldr	r3, [pc, #204]	; (ecc <Judg_KEY_ADD+0xdc>)
     dfe:	4798      	blx	r3
     e00:	280a      	cmp	r0, #10
     e02:	d003      	beq.n	e0c <Judg_KEY_ADD+0x1c>
				Print_One_Form_List_Table(tmp_list_table_index);
				uTXByte(Debug_COM, 0x0d);
			}
		}
	}
}
     e04:	bc0c      	pop	{r2, r3}
     e06:	4690      	mov	r8, r2
     e08:	4699      	mov	r9, r3
     e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ascii_to_hex(UserKeyInBuf[1]) == KEYD &&
     e0c:	4b2e      	ldr	r3, [pc, #184]	; (ec8 <Judg_KEY_ADD+0xd8>)
     e0e:	7858      	ldrb	r0, [r3, #1]
     e10:	4b2e      	ldr	r3, [pc, #184]	; (ecc <Judg_KEY_ADD+0xdc>)
     e12:	4798      	blx	r3
	if(	ascii_to_hex(UserKeyInBuf[0]) == KEYA &&
     e14:	280d      	cmp	r0, #13
     e16:	d1f5      	bne.n	e04 <Judg_KEY_ADD+0x14>
		ascii_to_hex(UserKeyInBuf[2]) == KEYD )	//	add device
     e18:	4b2b      	ldr	r3, [pc, #172]	; (ec8 <Judg_KEY_ADD+0xd8>)
     e1a:	7898      	ldrb	r0, [r3, #2]
     e1c:	4b2b      	ldr	r3, [pc, #172]	; (ecc <Judg_KEY_ADD+0xdc>)
     e1e:	4798      	blx	r3
		ascii_to_hex(UserKeyInBuf[1]) == KEYD &&
     e20:	280d      	cmp	r0, #13
     e22:	d1ef      	bne.n	e04 <Judg_KEY_ADD+0x14>
		if(UserKeyInBufCount == 17 && UserKeyInBuf[16] == 0x0d)
     e24:	4b2a      	ldr	r3, [pc, #168]	; (ed0 <Judg_KEY_ADD+0xe0>)
     e26:	781b      	ldrb	r3, [r3, #0]
     e28:	2b11      	cmp	r3, #17
     e2a:	d1eb      	bne.n	e04 <Judg_KEY_ADD+0x14>
     e2c:	4b26      	ldr	r3, [pc, #152]	; (ec8 <Judg_KEY_ADD+0xd8>)
     e2e:	7c1b      	ldrb	r3, [r3, #16]
     e30:	2b0d      	cmp	r3, #13
     e32:	d1e7      	bne.n	e04 <Judg_KEY_ADD+0x14>
			tmp_list_table_index =	Cal_list_table_index(UserKeyInBuf[4], UserKeyInBuf[5], UserKeyInBuf[6]);
     e34:	4b24      	ldr	r3, [pc, #144]	; (ec8 <Judg_KEY_ADD+0xd8>)
     e36:	799a      	ldrb	r2, [r3, #6]
     e38:	7959      	ldrb	r1, [r3, #5]
     e3a:	7918      	ldrb	r0, [r3, #4]
     e3c:	4b25      	ldr	r3, [pc, #148]	; (ed4 <Judg_KEY_ADD+0xe4>)
     e3e:	4798      	blx	r3
			tmp_list_table_index = Search_list_table_index(tmp_list_table_index);
     e40:	4b25      	ldr	r3, [pc, #148]	; (ed8 <Judg_KEY_ADD+0xe8>)
     e42:	4798      	blx	r3
     e44:	0007      	movs	r7, r0
			if(tmp_list_table_index != Not_found_Index)
     e46:	28ff      	cmp	r0, #255	; 0xff
     e48:	d0dc      	beq.n	e04 <Judg_KEY_ADD+0x14>
				Print_Find_Msg();
     e4a:	4b24      	ldr	r3, [pc, #144]	; (edc <Judg_KEY_ADD+0xec>)
     e4c:	4798      	blx	r3
				Print_One_Form_List_Table(tmp_list_table_index);
     e4e:	0038      	movs	r0, r7
     e50:	4b23      	ldr	r3, [pc, #140]	; (ee0 <Judg_KEY_ADD+0xf0>)
     e52:	4699      	mov	r9, r3
     e54:	4798      	blx	r3
				Print_Arrow_Right();
     e56:	4b23      	ldr	r3, [pc, #140]	; (ee4 <Judg_KEY_ADD+0xf4>)
     e58:	4798      	blx	r3
				Dev_List[tmp_list_table_index][1] = 0;
     e5a:	2306      	movs	r3, #6
     e5c:	437b      	muls	r3, r7
     e5e:	4e22      	ldr	r6, [pc, #136]	; (ee8 <Judg_KEY_ADD+0xf8>)
     e60:	18f6      	adds	r6, r6, r3
     e62:	2300      	movs	r3, #0
     e64:	7073      	strb	r3, [r6, #1]
				Dev_List[tmp_list_table_index][2] = (ascii_to_hex(UserKeyInBuf[8])  << 4) | (ascii_to_hex(UserKeyInBuf[9] ));
     e66:	4d18      	ldr	r5, [pc, #96]	; (ec8 <Judg_KEY_ADD+0xd8>)
     e68:	7a28      	ldrb	r0, [r5, #8]
     e6a:	4c18      	ldr	r4, [pc, #96]	; (ecc <Judg_KEY_ADD+0xdc>)
     e6c:	47a0      	blx	r4
     e6e:	4680      	mov	r8, r0
     e70:	7a68      	ldrb	r0, [r5, #9]
     e72:	47a0      	blx	r4
     e74:	4643      	mov	r3, r8
     e76:	011b      	lsls	r3, r3, #4
     e78:	4318      	orrs	r0, r3
     e7a:	70b0      	strb	r0, [r6, #2]
				Dev_List[tmp_list_table_index][3] = (ascii_to_hex(UserKeyInBuf[10]) << 4) | (ascii_to_hex(UserKeyInBuf[11]));
     e7c:	7aa8      	ldrb	r0, [r5, #10]
     e7e:	47a0      	blx	r4
     e80:	4680      	mov	r8, r0
     e82:	7ae8      	ldrb	r0, [r5, #11]
     e84:	47a0      	blx	r4
     e86:	4643      	mov	r3, r8
     e88:	011b      	lsls	r3, r3, #4
     e8a:	4318      	orrs	r0, r3
     e8c:	70f0      	strb	r0, [r6, #3]
				Dev_List[tmp_list_table_index][4] = (ascii_to_hex(UserKeyInBuf[12]) << 4) | (ascii_to_hex(UserKeyInBuf[13]));
     e8e:	7b28      	ldrb	r0, [r5, #12]
     e90:	47a0      	blx	r4
     e92:	4680      	mov	r8, r0
     e94:	7b68      	ldrb	r0, [r5, #13]
     e96:	47a0      	blx	r4
     e98:	4643      	mov	r3, r8
     e9a:	011b      	lsls	r3, r3, #4
     e9c:	4318      	orrs	r0, r3
     e9e:	7130      	strb	r0, [r6, #4]
				Dev_List[tmp_list_table_index][5] = (ascii_to_hex(UserKeyInBuf[14]) << 4) | (ascii_to_hex(UserKeyInBuf[15]));
     ea0:	7ba8      	ldrb	r0, [r5, #14]
     ea2:	47a0      	blx	r4
     ea4:	4680      	mov	r8, r0
     ea6:	7be8      	ldrb	r0, [r5, #15]
     ea8:	47a0      	blx	r4
     eaa:	4643      	mov	r3, r8
     eac:	011b      	lsls	r3, r3, #4
     eae:	4318      	orrs	r0, r3
     eb0:	7170      	strb	r0, [r6, #5]
				Save_List_in_NVM();
     eb2:	4b0e      	ldr	r3, [pc, #56]	; (eec <Judg_KEY_ADD+0xfc>)
     eb4:	4798      	blx	r3
				Load_List_Form_NVM();
     eb6:	4b0e      	ldr	r3, [pc, #56]	; (ef0 <Judg_KEY_ADD+0x100>)
     eb8:	4798      	blx	r3
				Print_One_Form_List_Table(tmp_list_table_index);
     eba:	0038      	movs	r0, r7
     ebc:	47c8      	blx	r9
				uTXByte(Debug_COM, 0x0d);
     ebe:	210d      	movs	r1, #13
     ec0:	480c      	ldr	r0, [pc, #48]	; (ef4 <Judg_KEY_ADD+0x104>)
     ec2:	4b0d      	ldr	r3, [pc, #52]	; (ef8 <Judg_KEY_ADD+0x108>)
     ec4:	4798      	blx	r3
}
     ec6:	e79d      	b.n	e04 <Judg_KEY_ADD+0x14>
     ec8:	20000490 	.word	0x20000490
     ecc:	00003b99 	.word	0x00003b99
     ed0:	200004b1 	.word	0x200004b1
     ed4:	0000039d 	.word	0x0000039d
     ed8:	000016cd 	.word	0x000016cd
     edc:	00001801 	.word	0x00001801
     ee0:	000018ad 	.word	0x000018ad
     ee4:	000019c1 	.word	0x000019c1
     ee8:	20000a4c 	.word	0x20000a4c
     eec:	00001465 	.word	0x00001465
     ef0:	00001639 	.word	0x00001639
     ef4:	2000022c 	.word	0x2000022c
     ef8:	00003ac9 	.word	0x00003ac9

00000efc <Judg_KEY_DL>:




void Judg_KEY_DL(void)
{
     efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     efe:	46de      	mov	lr, fp
     f00:	4657      	mov	r7, sl
     f02:	464e      	mov	r6, r9
     f04:	4645      	mov	r5, r8
     f06:	b5e0      	push	{r5, r6, r7, lr}
	UINT16u_t tmp16;
	
	if(	ascii_to_hex(UserKeyInBuf[0]) == KEYD &&
     f08:	4b31      	ldr	r3, [pc, #196]	; (fd0 <Judg_KEY_DL+0xd4>)
     f0a:	7818      	ldrb	r0, [r3, #0]
     f0c:	4b31      	ldr	r3, [pc, #196]	; (fd4 <Judg_KEY_DL+0xd8>)
     f0e:	4798      	blx	r3
     f10:	280d      	cmp	r0, #13
     f12:	d005      	beq.n	f20 <Judg_KEY_DL+0x24>
					uTXByte(Debug_COM, 0x0d);
				}
			}
		}
	}
}
     f14:	bc3c      	pop	{r2, r3, r4, r5}
     f16:	4690      	mov	r8, r2
     f18:	4699      	mov	r9, r3
     f1a:	46a2      	mov	sl, r4
     f1c:	46ab      	mov	fp, r5
     f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ascii_to_hex(UserKeyInBuf[1]) == KEYL )
     f20:	4b2b      	ldr	r3, [pc, #172]	; (fd0 <Judg_KEY_DL+0xd4>)
     f22:	7858      	ldrb	r0, [r3, #1]
     f24:	4b2b      	ldr	r3, [pc, #172]	; (fd4 <Judg_KEY_DL+0xd8>)
     f26:	4798      	blx	r3
	if(	ascii_to_hex(UserKeyInBuf[0]) == KEYD &&
     f28:	2815      	cmp	r0, #21
     f2a:	d1f3      	bne.n	f14 <Judg_KEY_DL+0x18>
		if(UserKeyInBufCount == 3 && UserKeyInBuf[2] == 0x0d)
     f2c:	4b2a      	ldr	r3, [pc, #168]	; (fd8 <Judg_KEY_DL+0xdc>)
     f2e:	781b      	ldrb	r3, [r3, #0]
     f30:	2b03      	cmp	r3, #3
     f32:	d1ef      	bne.n	f14 <Judg_KEY_DL+0x18>
     f34:	4b26      	ldr	r3, [pc, #152]	; (fd0 <Judg_KEY_DL+0xd4>)
     f36:	789b      	ldrb	r3, [r3, #2]
     f38:	2b0d      	cmp	r3, #13
     f3a:	d1eb      	bne.n	f14 <Judg_KEY_DL+0x18>
     f3c:	4b27      	ldr	r3, [pc, #156]	; (fdc <Judg_KEY_DL+0xe0>)
     f3e:	469a      	mov	sl, r3
     f40:	4d27      	ldr	r5, [pc, #156]	; (fe0 <Judg_KEY_DL+0xe4>)
     f42:	4b28      	ldr	r3, [pc, #160]	; (fe4 <Judg_KEY_DL+0xe8>)
     f44:	469b      	mov	fp, r3
     f46:	44ab      	add	fp, r5
					uart_send_word_for_ListNumber(Debug_COM, hex_to_bcd(Dev_List[i][0]));
     f48:	4656      	mov	r6, sl
     f4a:	46a9      	mov	r9, r5
     f4c:	e014      	b.n	f78 <Judg_KEY_DL+0x7c>
     f4e:	4646      	mov	r6, r8
					tmp16.byte[1] = dev_value[i][27];
     f50:	464b      	mov	r3, r9
     f52:	7edb      	ldrb	r3, [r3, #27]
					tmp16.byte[0] = dev_value[i][28];
     f54:	464a      	mov	r2, r9
     f56:	7f10      	ldrb	r0, [r2, #28]
     f58:	021b      	lsls	r3, r3, #8
     f5a:	4318      	orrs	r0, r3
					tmp16.word = 65536 - tmp16.word;
     f5c:	4240      	negs	r0, r0
     f5e:	b280      	uxth	r0, r0
					Print_One_RSSI_Msg(tmp16.word);
     f60:	4b21      	ldr	r3, [pc, #132]	; (fe8 <Judg_KEY_DL+0xec>)
     f62:	4798      	blx	r3
					uTXByte(Debug_COM, 0x0d);
     f64:	210d      	movs	r1, #13
     f66:	4821      	ldr	r0, [pc, #132]	; (fec <Judg_KEY_DL+0xf0>)
     f68:	4b21      	ldr	r3, [pc, #132]	; (ff0 <Judg_KEY_DL+0xf4>)
     f6a:	4798      	blx	r3
     f6c:	3606      	adds	r6, #6
     f6e:	2325      	movs	r3, #37	; 0x25
     f70:	469c      	mov	ip, r3
     f72:	44e1      	add	r9, ip
			for(unsigned char i= 0; i < dev_value_item_max; i++)
     f74:	45d9      	cmp	r9, fp
     f76:	d0cd      	beq.n	f14 <Judg_KEY_DL+0x18>
				if(Dev_List[i][1] == Dev_EN)
     f78:	7873      	ldrb	r3, [r6, #1]
     f7a:	2b01      	cmp	r3, #1
     f7c:	d1f6      	bne.n	f6c <Judg_KEY_DL+0x70>
					uTXByte(Debug_COM, 'N');
     f7e:	214e      	movs	r1, #78	; 0x4e
     f80:	481a      	ldr	r0, [pc, #104]	; (fec <Judg_KEY_DL+0xf0>)
     f82:	4b1b      	ldr	r3, [pc, #108]	; (ff0 <Judg_KEY_DL+0xf4>)
     f84:	4798      	blx	r3
					uTXByte(Debug_COM, 'o');
     f86:	216f      	movs	r1, #111	; 0x6f
     f88:	4818      	ldr	r0, [pc, #96]	; (fec <Judg_KEY_DL+0xf0>)
     f8a:	4b19      	ldr	r3, [pc, #100]	; (ff0 <Judg_KEY_DL+0xf4>)
     f8c:	4798      	blx	r3
					uTXByte(Debug_COM, '.');
     f8e:	212e      	movs	r1, #46	; 0x2e
     f90:	4816      	ldr	r0, [pc, #88]	; (fec <Judg_KEY_DL+0xf0>)
     f92:	4b17      	ldr	r3, [pc, #92]	; (ff0 <Judg_KEY_DL+0xf4>)
     f94:	4798      	blx	r3
					uart_send_word_for_ListNumber(Debug_COM, hex_to_bcd(Dev_List[i][0]));
     f96:	7830      	ldrb	r0, [r6, #0]
     f98:	4b16      	ldr	r3, [pc, #88]	; (ff4 <Judg_KEY_DL+0xf8>)
     f9a:	4798      	blx	r3
     f9c:	0001      	movs	r1, r0
     f9e:	4813      	ldr	r0, [pc, #76]	; (fec <Judg_KEY_DL+0xf0>)
     fa0:	4b15      	ldr	r3, [pc, #84]	; (ff8 <Judg_KEY_DL+0xfc>)
     fa2:	4798      	blx	r3
					uTXByte(Debug_COM, ' ');
     fa4:	2120      	movs	r1, #32
     fa6:	4811      	ldr	r0, [pc, #68]	; (fec <Judg_KEY_DL+0xf0>)
     fa8:	4b11      	ldr	r3, [pc, #68]	; (ff0 <Judg_KEY_DL+0xf4>)
     faa:	4798      	blx	r3
     fac:	2325      	movs	r3, #37	; 0x25
     fae:	444b      	add	r3, r9
     fb0:	464c      	mov	r4, r9
						uart_send_ascii_byte(Debug_COM, dev_value[i][j]);
     fb2:	4d12      	ldr	r5, [pc, #72]	; (ffc <Judg_KEY_DL+0x100>)
						uTXByte(Debug_COM, ' ');
     fb4:	4f0e      	ldr	r7, [pc, #56]	; (ff0 <Judg_KEY_DL+0xf4>)
     fb6:	46b0      	mov	r8, r6
     fb8:	001e      	movs	r6, r3
						uart_send_ascii_byte(Debug_COM, dev_value[i][j]);
     fba:	7821      	ldrb	r1, [r4, #0]
     fbc:	480b      	ldr	r0, [pc, #44]	; (fec <Judg_KEY_DL+0xf0>)
     fbe:	47a8      	blx	r5
						uTXByte(Debug_COM, ' ');
     fc0:	2120      	movs	r1, #32
     fc2:	480a      	ldr	r0, [pc, #40]	; (fec <Judg_KEY_DL+0xf0>)
     fc4:	47b8      	blx	r7
     fc6:	3401      	adds	r4, #1
					for(unsigned char j = 0; j < dev_value_data_max; j++)
     fc8:	42b4      	cmp	r4, r6
     fca:	d1f6      	bne.n	fba <Judg_KEY_DL+0xbe>
     fcc:	e7bf      	b.n	f4e <Judg_KEY_DL+0x52>
     fce:	46c0      	nop			; (mov r8, r8)
     fd0:	20000490 	.word	0x20000490
     fd4:	00003b99 	.word	0x00003b99
     fd8:	200004b1 	.word	0x200004b1
     fdc:	20000a4c 	.word	0x20000a4c
     fe0:	20001070 	.word	0x20001070
     fe4:	000024db 	.word	0x000024db
     fe8:	00003441 	.word	0x00003441
     fec:	2000022c 	.word	0x2000022c
     ff0:	00003ac9 	.word	0x00003ac9
     ff4:	00003d41 	.word	0x00003d41
     ff8:	00003b61 	.word	0x00003b61
     ffc:	00003ae9 	.word	0x00003ae9

00001000 <Judg_KEY_SHOW>:


void Judg_KEY_SHOW(void)
{
    1000:	b510      	push	{r4, lr}
	//UINT16u_t tmp16;
	
	if(	ascii_to_hex(UserKeyInBuf[0]) == KEYS &&
    1002:	4b17      	ldr	r3, [pc, #92]	; (1060 <Judg_KEY_SHOW+0x60>)
    1004:	7818      	ldrb	r0, [r3, #0]
    1006:	4b17      	ldr	r3, [pc, #92]	; (1064 <Judg_KEY_SHOW+0x64>)
    1008:	4798      	blx	r3
    100a:	281c      	cmp	r0, #28
    100c:	d000      	beq.n	1010 <Judg_KEY_SHOW+0x10>
			{
				LORA01->Lora_Show_Flag = true;
			}
		}
	}
}
    100e:	bd10      	pop	{r4, pc}
		ascii_to_hex(UserKeyInBuf[1]) == KEYH &&
    1010:	4b13      	ldr	r3, [pc, #76]	; (1060 <Judg_KEY_SHOW+0x60>)
    1012:	7858      	ldrb	r0, [r3, #1]
    1014:	4b13      	ldr	r3, [pc, #76]	; (1064 <Judg_KEY_SHOW+0x64>)
    1016:	4798      	blx	r3
	if(	ascii_to_hex(UserKeyInBuf[0]) == KEYS &&
    1018:	2811      	cmp	r0, #17
    101a:	d1f8      	bne.n	100e <Judg_KEY_SHOW+0xe>
		ascii_to_hex(UserKeyInBuf[2]) == KEYO &&
    101c:	4b10      	ldr	r3, [pc, #64]	; (1060 <Judg_KEY_SHOW+0x60>)
    101e:	7898      	ldrb	r0, [r3, #2]
    1020:	4b10      	ldr	r3, [pc, #64]	; (1064 <Judg_KEY_SHOW+0x64>)
    1022:	4798      	blx	r3
		ascii_to_hex(UserKeyInBuf[1]) == KEYH &&
    1024:	2818      	cmp	r0, #24
    1026:	d1f2      	bne.n	100e <Judg_KEY_SHOW+0xe>
		ascii_to_hex(UserKeyInBuf[3]) == KEYW)
    1028:	4b0d      	ldr	r3, [pc, #52]	; (1060 <Judg_KEY_SHOW+0x60>)
    102a:	78d8      	ldrb	r0, [r3, #3]
    102c:	4b0d      	ldr	r3, [pc, #52]	; (1064 <Judg_KEY_SHOW+0x64>)
    102e:	4798      	blx	r3
		ascii_to_hex(UserKeyInBuf[2]) == KEYO &&
    1030:	2820      	cmp	r0, #32
    1032:	d1ec      	bne.n	100e <Judg_KEY_SHOW+0xe>
		if(UserKeyInBufCount == 5 && UserKeyInBuf[4] == 0x0d)
    1034:	4b0c      	ldr	r3, [pc, #48]	; (1068 <Judg_KEY_SHOW+0x68>)
    1036:	781b      	ldrb	r3, [r3, #0]
    1038:	2b05      	cmp	r3, #5
    103a:	d1e8      	bne.n	100e <Judg_KEY_SHOW+0xe>
    103c:	4b08      	ldr	r3, [pc, #32]	; (1060 <Judg_KEY_SHOW+0x60>)
    103e:	791b      	ldrb	r3, [r3, #4]
    1040:	2b0d      	cmp	r3, #13
    1042:	d1e4      	bne.n	100e <Judg_KEY_SHOW+0xe>
			if(LORA01->Lora_Show_Flag == true)
    1044:	4b09      	ldr	r3, [pc, #36]	; (106c <Judg_KEY_SHOW+0x6c>)
    1046:	681b      	ldr	r3, [r3, #0]
    1048:	4a09      	ldr	r2, [pc, #36]	; (1070 <Judg_KEY_SHOW+0x70>)
    104a:	5c9a      	ldrb	r2, [r3, r2]
    104c:	2a00      	cmp	r2, #0
    104e:	d003      	beq.n	1058 <Judg_KEY_SHOW+0x58>
				LORA01->Lora_Show_Flag = false;
    1050:	2100      	movs	r1, #0
    1052:	4a07      	ldr	r2, [pc, #28]	; (1070 <Judg_KEY_SHOW+0x70>)
    1054:	5499      	strb	r1, [r3, r2]
    1056:	e7da      	b.n	100e <Judg_KEY_SHOW+0xe>
				LORA01->Lora_Show_Flag = true;
    1058:	2101      	movs	r1, #1
    105a:	4a05      	ldr	r2, [pc, #20]	; (1070 <Judg_KEY_SHOW+0x70>)
    105c:	5499      	strb	r1, [r3, r2]
}
    105e:	e7d6      	b.n	100e <Judg_KEY_SHOW+0xe>
    1060:	20000490 	.word	0x20000490
    1064:	00003b99 	.word	0x00003b99
    1068:	200004b1 	.word	0x200004b1
    106c:	20001048 	.word	0x20001048
    1070:	0000021a 	.word	0x0000021a

00001074 <Judg_KEY_T>:



void Judg_KEY_T(void)
{
    1074:	b5f0      	push	{r4, r5, r6, r7, lr}
    1076:	46c6      	mov	lr, r8
    1078:	b500      	push	{lr}
	UINT16u_t tmp16;
	unsigned int tmp_sec_value;
	unsigned char tmp_list_table_index;
	
	if(	ascii_to_hex(UserKeyInBuf[0]) == KEYT )
    107a:	4b31      	ldr	r3, [pc, #196]	; (1140 <Judg_KEY_T+0xcc>)
    107c:	7818      	ldrb	r0, [r3, #0]
    107e:	4b31      	ldr	r3, [pc, #196]	; (1144 <Judg_KEY_T+0xd0>)
    1080:	4798      	blx	r3
    1082:	281d      	cmp	r0, #29
    1084:	d008      	beq.n	1098 <Judg_KEY_T+0x24>
		{
			Print_Dev_Time_Table();
		}
	}
	
	if(	ascii_to_hex(UserKeyInBuf[0]) == KEYT &&
    1086:	4b2e      	ldr	r3, [pc, #184]	; (1140 <Judg_KEY_T+0xcc>)
    1088:	7818      	ldrb	r0, [r3, #0]
    108a:	4b2e      	ldr	r3, [pc, #184]	; (1144 <Judg_KEY_T+0xd0>)
    108c:	4798      	blx	r3
    108e:	281d      	cmp	r0, #29
    1090:	d00d      	beq.n	10ae <Judg_KEY_T+0x3a>
			Save_Dev_Time_into_NVM();
			Load_List_Form_NVM();
			Load_Dev_Time_Form_NVM();
		}
	}
    1092:	bc04      	pop	{r2}
    1094:	4690      	mov	r8, r2
    1096:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(UserKeyInBufCount == 2 && UserKeyInBuf[1] == 0x0d)
    1098:	4b2b      	ldr	r3, [pc, #172]	; (1148 <Judg_KEY_T+0xd4>)
    109a:	781b      	ldrb	r3, [r3, #0]
    109c:	2b02      	cmp	r3, #2
    109e:	d1f2      	bne.n	1086 <Judg_KEY_T+0x12>
    10a0:	4b27      	ldr	r3, [pc, #156]	; (1140 <Judg_KEY_T+0xcc>)
    10a2:	785b      	ldrb	r3, [r3, #1]
    10a4:	2b0d      	cmp	r3, #13
    10a6:	d1ee      	bne.n	1086 <Judg_KEY_T+0x12>
			Print_Dev_Time_Table();
    10a8:	4b28      	ldr	r3, [pc, #160]	; (114c <Judg_KEY_T+0xd8>)
    10aa:	4798      	blx	r3
    10ac:	e7eb      	b.n	1086 <Judg_KEY_T+0x12>
		UserKeyInBuf[1] == ' ')
    10ae:	4b24      	ldr	r3, [pc, #144]	; (1140 <Judg_KEY_T+0xcc>)
	if(	ascii_to_hex(UserKeyInBuf[0]) == KEYT &&
    10b0:	785b      	ldrb	r3, [r3, #1]
    10b2:	2b20      	cmp	r3, #32
    10b4:	d1ed      	bne.n	1092 <Judg_KEY_T+0x1e>
		if(UserKeyInBufCount == 11 && UserKeyInBuf[10] == 0x0d)
    10b6:	4b24      	ldr	r3, [pc, #144]	; (1148 <Judg_KEY_T+0xd4>)
    10b8:	781b      	ldrb	r3, [r3, #0]
    10ba:	2b0b      	cmp	r3, #11
    10bc:	d1e9      	bne.n	1092 <Judg_KEY_T+0x1e>
    10be:	4b20      	ldr	r3, [pc, #128]	; (1140 <Judg_KEY_T+0xcc>)
    10c0:	7a9b      	ldrb	r3, [r3, #10]
    10c2:	2b0d      	cmp	r3, #13
    10c4:	d1e5      	bne.n	1092 <Judg_KEY_T+0x1e>
			tmp_list_table_index =	Cal_list_table_index(UserKeyInBuf[2], UserKeyInBuf[3], UserKeyInBuf[4]);
    10c6:	4d1e      	ldr	r5, [pc, #120]	; (1140 <Judg_KEY_T+0xcc>)
    10c8:	792a      	ldrb	r2, [r5, #4]
    10ca:	78e9      	ldrb	r1, [r5, #3]
    10cc:	78a8      	ldrb	r0, [r5, #2]
    10ce:	4b20      	ldr	r3, [pc, #128]	; (1150 <Judg_KEY_T+0xdc>)
    10d0:	4798      	blx	r3
    10d2:	0004      	movs	r4, r0
			tmp_sec_value  = ascii_to_hex(UserKeyInBuf[6]) * 1000;
    10d4:	79a8      	ldrb	r0, [r5, #6]
    10d6:	4f1b      	ldr	r7, [pc, #108]	; (1144 <Judg_KEY_T+0xd0>)
    10d8:	47b8      	blx	r7
    10da:	26fa      	movs	r6, #250	; 0xfa
    10dc:	00b6      	lsls	r6, r6, #2
    10de:	4346      	muls	r6, r0
    10e0:	46b0      	mov	r8, r6
			tmp_sec_value += ascii_to_hex(UserKeyInBuf[7]) * 100;
    10e2:	79e8      	ldrb	r0, [r5, #7]
    10e4:	47b8      	blx	r7
    10e6:	2664      	movs	r6, #100	; 0x64
    10e8:	4346      	muls	r6, r0
    10ea:	4446      	add	r6, r8
			tmp_sec_value += ascii_to_hex(UserKeyInBuf[8]) * 10;
    10ec:	7a28      	ldrb	r0, [r5, #8]
    10ee:	47b8      	blx	r7
    10f0:	4680      	mov	r8, r0
			tmp_sec_value += ascii_to_hex(UserKeyInBuf[9]);
    10f2:	7a68      	ldrb	r0, [r5, #9]
    10f4:	47b8      	blx	r7
    10f6:	1986      	adds	r6, r0, r6
			tmp_sec_value += ascii_to_hex(UserKeyInBuf[8]) * 10;
    10f8:	4643      	mov	r3, r8
    10fa:	009b      	lsls	r3, r3, #2
    10fc:	4443      	add	r3, r8
    10fe:	005b      	lsls	r3, r3, #1
			tmp_sec_value += ascii_to_hex(UserKeyInBuf[9]);
    1100:	199b      	adds	r3, r3, r6
			Dev_Time[tmp_list_table_index][0] = tmp16.byte[1];
    1102:	0419      	lsls	r1, r3, #16
    1104:	0e09      	lsrs	r1, r1, #24
    1106:	4a13      	ldr	r2, [pc, #76]	; (1154 <Judg_KEY_T+0xe0>)
    1108:	0060      	lsls	r0, r4, #1
    110a:	5481      	strb	r1, [r0, r2]
			Dev_Time[tmp_list_table_index][1] = tmp16.byte[0];
    110c:	b2db      	uxtb	r3, r3
    110e:	1812      	adds	r2, r2, r0
    1110:	7053      	strb	r3, [r2, #1]
			dev_value[tmp_list_table_index][dev_value_Time_High] = tmp16.byte[1];
    1112:	00e0      	lsls	r0, r4, #3
    1114:	1900      	adds	r0, r0, r4
    1116:	0080      	lsls	r0, r0, #2
    1118:	1904      	adds	r4, r0, r4
    111a:	480f      	ldr	r0, [pc, #60]	; (1158 <Judg_KEY_T+0xe4>)
    111c:	1900      	adds	r0, r0, r4
    111e:	77c1      	strb	r1, [r0, #31]
			dev_value[tmp_list_table_index][dev_value_Time_Low]  = tmp16.byte[0];
    1120:	0002      	movs	r2, r0
    1122:	3220      	adds	r2, #32
    1124:	7013      	strb	r3, [r2, #0]
			dev_value[tmp_list_table_index][dev_value_Count_High] = 0;
    1126:	3201      	adds	r2, #1
    1128:	2300      	movs	r3, #0
    112a:	7013      	strb	r3, [r2, #0]
			dev_value[tmp_list_table_index][dev_value_Count_Low]  = 0;
    112c:	3022      	adds	r0, #34	; 0x22
    112e:	7003      	strb	r3, [r0, #0]
			Save_Dev_Time_into_NVM();
    1130:	4b0a      	ldr	r3, [pc, #40]	; (115c <Judg_KEY_T+0xe8>)
    1132:	4798      	blx	r3
			Load_List_Form_NVM();
    1134:	4b0a      	ldr	r3, [pc, #40]	; (1160 <Judg_KEY_T+0xec>)
    1136:	4798      	blx	r3
			Load_Dev_Time_Form_NVM();
    1138:	4b0a      	ldr	r3, [pc, #40]	; (1164 <Judg_KEY_T+0xf0>)
    113a:	4798      	blx	r3
    113c:	e7a9      	b.n	1092 <Judg_KEY_T+0x1e>
    113e:	46c0      	nop			; (mov r8, r8)
    1140:	20000490 	.word	0x20000490
    1144:	00003b99 	.word	0x00003b99
    1148:	200004b1 	.word	0x200004b1
    114c:	000011f9 	.word	0x000011f9
    1150:	0000039d 	.word	0x0000039d
    1154:	20000250 	.word	0x20000250
    1158:	20001070 	.word	0x20001070
    115c:	00001511 	.word	0x00001511
    1160:	00001639 	.word	0x00001639
    1164:	000015a9 	.word	0x000015a9

00001168 <configure_nvm>:
#include "myDefine.h"


//! [setup]
void configure_nvm(void)
{
    1168:	b500      	push	{lr}
    116a:	b083      	sub	sp, #12
{
	/* Sanity check the parameters */
	Assert(config);

	/* Write the default configuration for the NVM configuration */
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    116c:	2200      	movs	r2, #0
    116e:	466b      	mov	r3, sp
    1170:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    1172:	4b07      	ldr	r3, [pc, #28]	; (1190 <configure_nvm+0x28>)
    1174:	685b      	ldr	r3, [r3, #4]
    1176:	06db      	lsls	r3, r3, #27
    1178:	0f1b      	lsrs	r3, r3, #28
    117a:	4669      	mov	r1, sp
    117c:	708b      	strb	r3, [r1, #2]
	config->disable_cache     = false;
    117e:	70ca      	strb	r2, [r1, #3]
#if (SAMC20) || (SAMC21)
	config->disable_rww_cache = false;
#endif
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    1180:	710a      	strb	r2, [r1, #4]
	//! [setup_2]
	nvm_get_config_defaults(&config_nvm);
	//! [setup_2]

	//! [setup_3]
	config_nvm.manual_page_write = false;
    1182:	704a      	strb	r2, [r1, #1]
	//! [setup_3]

	//! [setup_4]
	nvm_set_config(&config_nvm);
    1184:	4668      	mov	r0, sp
    1186:	4b03      	ldr	r3, [pc, #12]	; (1194 <configure_nvm+0x2c>)
    1188:	4798      	blx	r3
	//! [setup_4]
}
    118a:	b003      	add	sp, #12
    118c:	bd00      	pop	{pc}
    118e:	46c0      	nop			; (mov r8, r8)
    1190:	41004000 	.word	0x41004000
    1194:	00000105 	.word	0x00000105

00001198 <Print_List_Table>:
//! [setup]


void Print_List_Table(void)
{
    1198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned int i, user_count;
	user_count = 0;
    119a:	2500      	movs	r5, #0
	for ( i = 0; i < Dev_Item_MAX; i++)
    119c:	2400      	movs	r4, #0
	{
		Print_One_Form_List_Table(i);
    119e:	4f0a      	ldr	r7, [pc, #40]	; (11c8 <Print_List_Table+0x30>)
			uTXByte(Debug_COM, 0x09);	
			user_count++;
		}
		else
		{
			uTXByte(Debug_COM, 0x0d);	
    11a0:	4e0a      	ldr	r6, [pc, #40]	; (11cc <Print_List_Table+0x34>)
    11a2:	e007      	b.n	11b4 <Print_List_Table+0x1c>
			uTXByte(Debug_COM, 0x09);	
    11a4:	2109      	movs	r1, #9
    11a6:	480a      	ldr	r0, [pc, #40]	; (11d0 <Print_List_Table+0x38>)
    11a8:	4b08      	ldr	r3, [pc, #32]	; (11cc <Print_List_Table+0x34>)
    11aa:	4798      	blx	r3
			user_count++;
    11ac:	3501      	adds	r5, #1
	for ( i = 0; i < Dev_Item_MAX; i++)
    11ae:	3401      	adds	r4, #1
    11b0:	2cff      	cmp	r4, #255	; 0xff
    11b2:	d008      	beq.n	11c6 <Print_List_Table+0x2e>
		Print_One_Form_List_Table(i);
    11b4:	b2e0      	uxtb	r0, r4
    11b6:	47b8      	blx	r7
		if(user_count < 2)
    11b8:	2d01      	cmp	r5, #1
    11ba:	d9f3      	bls.n	11a4 <Print_List_Table+0xc>
			uTXByte(Debug_COM, 0x0d);	
    11bc:	210d      	movs	r1, #13
    11be:	4804      	ldr	r0, [pc, #16]	; (11d0 <Print_List_Table+0x38>)
    11c0:	47b0      	blx	r6
			user_count = 0;
    11c2:	2500      	movs	r5, #0
    11c4:	e7f3      	b.n	11ae <Print_List_Table+0x16>
		}	
	}
}
    11c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    11c8:	000018ad 	.word	0x000018ad
    11cc:	00003ac9 	.word	0x00003ac9
    11d0:	2000022c 	.word	0x2000022c

000011d4 <Clean_LiSt_Table>:


void Clean_LiSt_Table(void)
{
    11d4:	4b06      	ldr	r3, [pc, #24]	; (11f0 <Clean_LiSt_Table+0x1c>)
    11d6:	4a07      	ldr	r2, [pc, #28]	; (11f4 <Clean_LiSt_Table+0x20>)
    11d8:	1899      	adds	r1, r3, r2
	unsigned int i, j;
	for ( i = 0; i < Dev_Item_MAX; i++)
	{
		for ( j = 0; j < Dev_List_Data_Item_Max; j++)
		{
			Dev_List[i][j] = 0xFF;
    11da:	22ff      	movs	r2, #255	; 0xff
    11dc:	701a      	strb	r2, [r3, #0]
    11de:	705a      	strb	r2, [r3, #1]
    11e0:	709a      	strb	r2, [r3, #2]
    11e2:	70da      	strb	r2, [r3, #3]
    11e4:	711a      	strb	r2, [r3, #4]
    11e6:	715a      	strb	r2, [r3, #5]
    11e8:	3306      	adds	r3, #6
	for ( i = 0; i < Dev_Item_MAX; i++)
    11ea:	428b      	cmp	r3, r1
    11ec:	d1f6      	bne.n	11dc <Clean_LiSt_Table+0x8>
		}
	}
}
    11ee:	4770      	bx	lr
    11f0:	20000a4c 	.word	0x20000a4c
    11f4:	000005fa 	.word	0x000005fa

000011f8 <Print_Dev_Time_Table>:

void Print_Dev_Time_Table(void)
{
    11f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned int i, user_count;
	user_count = 0;
    11fa:	2500      	movs	r5, #0
	for ( i = 0; i < Dev_Item_MAX; i++)
    11fc:	2400      	movs	r4, #0
	{
		Print_One_Form_Dev_Time_Table(i);
    11fe:	4f0a      	ldr	r7, [pc, #40]	; (1228 <Print_Dev_Time_Table+0x30>)
			uTXByte(Debug_COM, 0x09);
			user_count++;
		}
		else
		{
			uTXByte(Debug_COM, 0x0d);
    1200:	4e0a      	ldr	r6, [pc, #40]	; (122c <Print_Dev_Time_Table+0x34>)
    1202:	e007      	b.n	1214 <Print_Dev_Time_Table+0x1c>
			uTXByte(Debug_COM, 0x09);
    1204:	2109      	movs	r1, #9
    1206:	480a      	ldr	r0, [pc, #40]	; (1230 <Print_Dev_Time_Table+0x38>)
    1208:	4b08      	ldr	r3, [pc, #32]	; (122c <Print_Dev_Time_Table+0x34>)
    120a:	4798      	blx	r3
			user_count++;
    120c:	3501      	adds	r5, #1
	for ( i = 0; i < Dev_Item_MAX; i++)
    120e:	3401      	adds	r4, #1
    1210:	2cff      	cmp	r4, #255	; 0xff
    1212:	d008      	beq.n	1226 <Print_Dev_Time_Table+0x2e>
		Print_One_Form_Dev_Time_Table(i);
    1214:	b2e0      	uxtb	r0, r4
    1216:	47b8      	blx	r7
		if(user_count < 2)
    1218:	2d01      	cmp	r5, #1
    121a:	d9f3      	bls.n	1204 <Print_Dev_Time_Table+0xc>
			uTXByte(Debug_COM, 0x0d);
    121c:	210d      	movs	r1, #13
    121e:	4804      	ldr	r0, [pc, #16]	; (1230 <Print_Dev_Time_Table+0x38>)
    1220:	47b0      	blx	r6
			user_count = 0;
    1222:	2500      	movs	r5, #0
    1224:	e7f3      	b.n	120e <Print_Dev_Time_Table+0x16>
		}
	}
}
    1226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1228:	00001959 	.word	0x00001959
    122c:	00003ac9 	.word	0x00003ac9
    1230:	2000022c 	.word	0x2000022c

00001234 <Load_LoRa_Profile_in_NVM>:
		}
	}
}

void Load_LoRa_Profile_in_NVM(volatile LORA_DEFINE_t *tmp_LORA)
{
    1234:	b5f0      	push	{r4, r5, r6, r7, lr}
    1236:	b091      	sub	sp, #68	; 0x44
    1238:	0004      	movs	r4, r0
	unsigned char first_time;
	uint8_t tmp_page_buffer[NVMCTRL_PAGE_SIZE];
	do
	{
		error_code = nvm_read_buffer(
    123a:	4e5f      	ldr	r6, [pc, #380]	; (13b8 <Load_LoRa_Profile_in_NVM+0x184>)
    123c:	4d5f      	ldr	r5, [pc, #380]	; (13bc <Load_LoRa_Profile_in_NVM+0x188>)
    123e:	2240      	movs	r2, #64	; 0x40
    1240:	4669      	mov	r1, sp
    1242:	20fa      	movs	r0, #250	; 0xfa
    1244:	01c0      	lsls	r0, r0, #7
    1246:	47b0      	blx	r6
    1248:	7028      	strb	r0, [r5, #0]
		125  * NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE,
		tmp_page_buffer, NVMCTRL_PAGE_SIZE);
	} while (error_code == STATUS_BUSY);
    124a:	2805      	cmp	r0, #5
    124c:	d0f7      	beq.n	123e <Load_LoRa_Profile_in_NVM+0xa>
	
	if(tmp_page_buffer[tmp_LORA->NVM_offset_Value] != 0x55)
    124e:	228b      	movs	r2, #139	; 0x8b
    1250:	0092      	lsls	r2, r2, #2
    1252:	5ca3      	ldrb	r3, [r4, r2]
    1254:	b2db      	uxtb	r3, r3
    1256:	4669      	mov	r1, sp
    1258:	5cc9      	ldrb	r1, [r1, r3]
	else
	{
		first_time = 0;
	}
	
	tmp_LORA->MyLoRaPower = tmp_page_buffer[tmp_LORA->NVM_offset_Value + 1];
    125a:	5ca3      	ldrb	r3, [r4, r2]
    125c:	446b      	add	r3, sp
    125e:	785b      	ldrb	r3, [r3, #1]
    1260:	71a3      	strb	r3, [r4, #6]
	if(first_time == 0)
    1262:	2955      	cmp	r1, #85	; 0x55
    1264:	d000      	beq.n	1268 <Load_LoRa_Profile_in_NVM+0x34>
    1266:	e07e      	b.n	1366 <Load_LoRa_Profile_in_NVM+0x132>
	{
		tmp_LORA->MyLoRaTmp[Write_LoRa_Mode_FQ_Index][7] = tmp_LORA->MyLoRaPower;
    1268:	79a3      	ldrb	r3, [r4, #6]
    126a:	b2db      	uxtb	r3, r3
    126c:	3a74      	subs	r2, #116	; 0x74
    126e:	3aff      	subs	r2, #255	; 0xff
    1270:	54a3      	strb	r3, [r4, r2]
	else
	{
		tmp_LORA->MyLoRaPower = tmp_LORA->MyLoRaTmp[Write_LoRa_Mode_FQ_Index][7];
	}
	
	tmp_LORA->MyLoRaSF = tmp_page_buffer[tmp_LORA->NVM_offset_Value + 2];
    1272:	238b      	movs	r3, #139	; 0x8b
    1274:	009b      	lsls	r3, r3, #2
    1276:	5ce3      	ldrb	r3, [r4, r3]
    1278:	446b      	add	r3, sp
    127a:	789b      	ldrb	r3, [r3, #2]
    127c:	71e3      	strb	r3, [r4, #7]
	if(first_time == 0)
	{
		tmp_LORA->MyLoRaTmp[Write_LoRa_Setting_Index][5] = tmp_LORA->MyLoRaSF;
    127e:	79e3      	ldrb	r3, [r4, #7]
    1280:	b2db      	uxtb	r3, r3
    1282:	3219      	adds	r2, #25
    1284:	54a3      	strb	r3, [r4, r2]
	else
	{
		tmp_LORA->MyLoRaSF = tmp_LORA->MyLoRaTmp[Write_LoRa_Setting_Index][5];
	}
	
	tmp_LORA->MyLoRaFQ.byte[2] = tmp_page_buffer[tmp_LORA->NVM_offset_Value + 3];
    1286:	238b      	movs	r3, #139	; 0x8b
    1288:	009b      	lsls	r3, r3, #2
    128a:	5ce2      	ldrb	r2, [r4, r3]
    128c:	446a      	add	r2, sp
    128e:	78d2      	ldrb	r2, [r2, #3]
    1290:	72a2      	strb	r2, [r4, #10]
	tmp_LORA->MyLoRaFQ.byte[1] = tmp_page_buffer[tmp_LORA->NVM_offset_Value + 4];
    1292:	5ce2      	ldrb	r2, [r4, r3]
    1294:	446a      	add	r2, sp
    1296:	7912      	ldrb	r2, [r2, #4]
    1298:	7262      	strb	r2, [r4, #9]
	tmp_LORA->MyLoRaFQ.byte[0] = tmp_page_buffer[tmp_LORA->NVM_offset_Value + 5];
    129a:	5ce3      	ldrb	r3, [r4, r3]
    129c:	446b      	add	r3, sp
    129e:	795b      	ldrb	r3, [r3, #5]
    12a0:	7223      	strb	r3, [r4, #8]
	if(first_time == 0)
    12a2:	2955      	cmp	r1, #85	; 0x55
    12a4:	d000      	beq.n	12a8 <Load_LoRa_Profile_in_NVM+0x74>
    12a6:	e06d      	b.n	1384 <Load_LoRa_Profile_in_NVM+0x150>
	{
		tmp_LORA->MyLoRaTmp[Write_LoRa_Mode_FQ_Index][4] = tmp_LORA->MyLoRaFQ.byte[2];
    12a8:	7aa3      	ldrb	r3, [r4, #10]
    12aa:	b2db      	uxtb	r3, r3
    12ac:	22b6      	movs	r2, #182	; 0xb6
    12ae:	54a3      	strb	r3, [r4, r2]
	{
		tmp_LORA->MyLoRaFQ.byte[2] = tmp_LORA->MyLoRaTmp[Write_LoRa_Mode_FQ_Index][4];
	}
	if(first_time == 0)
	{
		tmp_LORA->MyLoRaTmp[Write_LoRa_Mode_FQ_Index][5] = tmp_LORA->MyLoRaFQ.byte[1];
    12b0:	7a63      	ldrb	r3, [r4, #9]
    12b2:	b2db      	uxtb	r3, r3
    12b4:	3201      	adds	r2, #1
    12b6:	54a3      	strb	r3, [r4, r2]
	{
		tmp_LORA->MyLoRaFQ.byte[1] = tmp_LORA->MyLoRaTmp[Write_LoRa_Mode_FQ_Index][5];
	}
	if(first_time == 0)
	{
		tmp_LORA->MyLoRaTmp[Write_LoRa_Mode_FQ_Index][6] = tmp_LORA->MyLoRaFQ.byte[0];
    12b8:	7a23      	ldrb	r3, [r4, #8]
    12ba:	b2db      	uxtb	r3, r3
    12bc:	3201      	adds	r2, #1
    12be:	54a3      	strb	r3, [r4, r2]
	else
	{
		tmp_LORA->MyLoRaFQ.byte[0] = tmp_LORA->MyLoRaTmp[Write_LoRa_Mode_FQ_Index][6];
	}
	
	tmp_LORA->Lora_Debug_Flag = tmp_page_buffer[tmp_LORA->NVM_offset_Value + 6];
    12c0:	238b      	movs	r3, #139	; 0x8b
    12c2:	009b      	lsls	r3, r3, #2
    12c4:	5ce3      	ldrb	r3, [r4, r3]
    12c6:	446b      	add	r3, sp
    12c8:	799b      	ldrb	r3, [r3, #6]
    12ca:	1e5a      	subs	r2, r3, #1
    12cc:	4193      	sbcs	r3, r2
    12ce:	b2db      	uxtb	r3, r3
    12d0:	2285      	movs	r2, #133	; 0x85
    12d2:	0092      	lsls	r2, r2, #2
    12d4:	54a3      	strb	r3, [r4, r2]
	{
		tmp_LORA->Lora_Debug_Flag = NeedDebug;
	}
	
	
	uTXByte(Debug_COM, 'N');
    12d6:	214e      	movs	r1, #78	; 0x4e
    12d8:	4839      	ldr	r0, [pc, #228]	; (13c0 <Load_LoRa_Profile_in_NVM+0x18c>)
    12da:	4e3a      	ldr	r6, [pc, #232]	; (13c4 <Load_LoRa_Profile_in_NVM+0x190>)
    12dc:	47b0      	blx	r6
	uTXByte(Debug_COM, 'V');
    12de:	2156      	movs	r1, #86	; 0x56
    12e0:	4837      	ldr	r0, [pc, #220]	; (13c0 <Load_LoRa_Profile_in_NVM+0x18c>)
    12e2:	47b0      	blx	r6
	uTXByte(Debug_COM, 'M');
    12e4:	214d      	movs	r1, #77	; 0x4d
    12e6:	4836      	ldr	r0, [pc, #216]	; (13c0 <Load_LoRa_Profile_in_NVM+0x18c>)
    12e8:	47b0      	blx	r6
	uTXByte(Debug_COM, ':');
    12ea:	213a      	movs	r1, #58	; 0x3a
    12ec:	4834      	ldr	r0, [pc, #208]	; (13c0 <Load_LoRa_Profile_in_NVM+0x18c>)
    12ee:	47b0      	blx	r6
	uTXByte(Debug_COM, ' ');
    12f0:	2120      	movs	r1, #32
    12f2:	4833      	ldr	r0, [pc, #204]	; (13c0 <Load_LoRa_Profile_in_NVM+0x18c>)
    12f4:	47b0      	blx	r6
	uart_send_ascii_byte(Debug_COM, tmp_page_buffer[tmp_LORA->NVM_offset_Value]);
    12f6:	258b      	movs	r5, #139	; 0x8b
    12f8:	00ad      	lsls	r5, r5, #2
    12fa:	5d63      	ldrb	r3, [r4, r5]
    12fc:	b2db      	uxtb	r3, r3
    12fe:	466a      	mov	r2, sp
    1300:	5cd1      	ldrb	r1, [r2, r3]
    1302:	482f      	ldr	r0, [pc, #188]	; (13c0 <Load_LoRa_Profile_in_NVM+0x18c>)
    1304:	4f30      	ldr	r7, [pc, #192]	; (13c8 <Load_LoRa_Profile_in_NVM+0x194>)
    1306:	47b8      	blx	r7
	uTXByte(Debug_COM, ' ');
    1308:	2120      	movs	r1, #32
    130a:	482d      	ldr	r0, [pc, #180]	; (13c0 <Load_LoRa_Profile_in_NVM+0x18c>)
    130c:	47b0      	blx	r6
	uart_send_ascii_byte(Debug_COM, tmp_page_buffer[tmp_LORA->NVM_offset_Value + 1]);
    130e:	5d63      	ldrb	r3, [r4, r5]
    1310:	446b      	add	r3, sp
    1312:	7859      	ldrb	r1, [r3, #1]
    1314:	482a      	ldr	r0, [pc, #168]	; (13c0 <Load_LoRa_Profile_in_NVM+0x18c>)
    1316:	47b8      	blx	r7
	uTXByte(Debug_COM, ' ');
    1318:	2120      	movs	r1, #32
    131a:	4829      	ldr	r0, [pc, #164]	; (13c0 <Load_LoRa_Profile_in_NVM+0x18c>)
    131c:	47b0      	blx	r6
	uart_send_ascii_byte(Debug_COM, tmp_page_buffer[tmp_LORA->NVM_offset_Value + 2]);
    131e:	5d63      	ldrb	r3, [r4, r5]
    1320:	446b      	add	r3, sp
    1322:	7899      	ldrb	r1, [r3, #2]
    1324:	4826      	ldr	r0, [pc, #152]	; (13c0 <Load_LoRa_Profile_in_NVM+0x18c>)
    1326:	47b8      	blx	r7
	uTXByte(Debug_COM, ' ');
    1328:	2120      	movs	r1, #32
    132a:	4825      	ldr	r0, [pc, #148]	; (13c0 <Load_LoRa_Profile_in_NVM+0x18c>)
    132c:	47b0      	blx	r6
	uart_send_ascii_byte(Debug_COM, tmp_page_buffer[tmp_LORA->NVM_offset_Value + 3]);
    132e:	5d63      	ldrb	r3, [r4, r5]
    1330:	446b      	add	r3, sp
    1332:	78d9      	ldrb	r1, [r3, #3]
    1334:	4822      	ldr	r0, [pc, #136]	; (13c0 <Load_LoRa_Profile_in_NVM+0x18c>)
    1336:	47b8      	blx	r7
	uart_send_ascii_byte(Debug_COM, tmp_page_buffer[tmp_LORA->NVM_offset_Value + 4]);
    1338:	5d63      	ldrb	r3, [r4, r5]
    133a:	446b      	add	r3, sp
    133c:	7919      	ldrb	r1, [r3, #4]
    133e:	4820      	ldr	r0, [pc, #128]	; (13c0 <Load_LoRa_Profile_in_NVM+0x18c>)
    1340:	47b8      	blx	r7
	uart_send_ascii_byte(Debug_COM, tmp_page_buffer[tmp_LORA->NVM_offset_Value + 5]);
    1342:	5d63      	ldrb	r3, [r4, r5]
    1344:	446b      	add	r3, sp
    1346:	7959      	ldrb	r1, [r3, #5]
    1348:	481d      	ldr	r0, [pc, #116]	; (13c0 <Load_LoRa_Profile_in_NVM+0x18c>)
    134a:	47b8      	blx	r7
	uTXByte(Debug_COM, ' ');
    134c:	2120      	movs	r1, #32
    134e:	481c      	ldr	r0, [pc, #112]	; (13c0 <Load_LoRa_Profile_in_NVM+0x18c>)
    1350:	47b0      	blx	r6
	uart_send_ascii_byte(Debug_COM, tmp_page_buffer[tmp_LORA->NVM_offset_Value + 6]);
    1352:	5d63      	ldrb	r3, [r4, r5]
    1354:	446b      	add	r3, sp
    1356:	7999      	ldrb	r1, [r3, #6]
    1358:	4819      	ldr	r0, [pc, #100]	; (13c0 <Load_LoRa_Profile_in_NVM+0x18c>)
    135a:	47b8      	blx	r7
	uTXByte(Debug_COM, 0x0d);
    135c:	210d      	movs	r1, #13
    135e:	4818      	ldr	r0, [pc, #96]	; (13c0 <Load_LoRa_Profile_in_NVM+0x18c>)
    1360:	47b0      	blx	r6
	
}
    1362:	b011      	add	sp, #68	; 0x44
    1364:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp_LORA->MyLoRaPower = tmp_LORA->MyLoRaTmp[Write_LoRa_Mode_FQ_Index][7];
    1366:	23b9      	movs	r3, #185	; 0xb9
    1368:	5ce3      	ldrb	r3, [r4, r3]
    136a:	b2db      	uxtb	r3, r3
    136c:	71a3      	strb	r3, [r4, #6]
	tmp_LORA->MyLoRaSF = tmp_page_buffer[tmp_LORA->NVM_offset_Value + 2];
    136e:	238b      	movs	r3, #139	; 0x8b
    1370:	009b      	lsls	r3, r3, #2
    1372:	5ce3      	ldrb	r3, [r4, r3]
    1374:	446b      	add	r3, sp
    1376:	789b      	ldrb	r3, [r3, #2]
    1378:	71e3      	strb	r3, [r4, #7]
		tmp_LORA->MyLoRaSF = tmp_LORA->MyLoRaTmp[Write_LoRa_Setting_Index][5];
    137a:	23d2      	movs	r3, #210	; 0xd2
    137c:	5ce3      	ldrb	r3, [r4, r3]
    137e:	b2db      	uxtb	r3, r3
    1380:	71e3      	strb	r3, [r4, #7]
    1382:	e780      	b.n	1286 <Load_LoRa_Profile_in_NVM+0x52>
		tmp_LORA->MyLoRaFQ.byte[2] = tmp_LORA->MyLoRaTmp[Write_LoRa_Mode_FQ_Index][4];
    1384:	23b6      	movs	r3, #182	; 0xb6
    1386:	5ce3      	ldrb	r3, [r4, r3]
    1388:	b2db      	uxtb	r3, r3
    138a:	72a3      	strb	r3, [r4, #10]
		tmp_LORA->MyLoRaFQ.byte[1] = tmp_LORA->MyLoRaTmp[Write_LoRa_Mode_FQ_Index][5];
    138c:	23b7      	movs	r3, #183	; 0xb7
    138e:	5ce3      	ldrb	r3, [r4, r3]
    1390:	b2db      	uxtb	r3, r3
    1392:	7263      	strb	r3, [r4, #9]
		tmp_LORA->MyLoRaFQ.byte[0] = tmp_LORA->MyLoRaTmp[Write_LoRa_Mode_FQ_Index][6];
    1394:	23b8      	movs	r3, #184	; 0xb8
    1396:	5ce3      	ldrb	r3, [r4, r3]
    1398:	b2db      	uxtb	r3, r3
    139a:	7223      	strb	r3, [r4, #8]
	tmp_LORA->Lora_Debug_Flag = tmp_page_buffer[tmp_LORA->NVM_offset_Value + 6];
    139c:	238b      	movs	r3, #139	; 0x8b
    139e:	009b      	lsls	r3, r3, #2
    13a0:	5ce3      	ldrb	r3, [r4, r3]
    13a2:	446b      	add	r3, sp
    13a4:	799b      	ldrb	r3, [r3, #6]
    13a6:	1e5a      	subs	r2, r3, #1
    13a8:	4193      	sbcs	r3, r2
    13aa:	b2db      	uxtb	r3, r3
    13ac:	2285      	movs	r2, #133	; 0x85
    13ae:	0092      	lsls	r2, r2, #2
    13b0:	54a3      	strb	r3, [r4, r2]
		tmp_LORA->Lora_Debug_Flag = NeedDebug;
    13b2:	2301      	movs	r3, #1
    13b4:	54a3      	strb	r3, [r4, r2]
    13b6:	e78e      	b.n	12d6 <Load_LoRa_Profile_in_NVM+0xa2>
    13b8:	000002d5 	.word	0x000002d5
    13bc:	2000354c 	.word	0x2000354c
    13c0:	2000022c 	.word	0x2000022c
    13c4:	00003ac9 	.word	0x00003ac9
    13c8:	00003ae9 	.word	0x00003ae9

000013cc <Save_LoRa_Profile_in_NVM>:

void Save_LoRa_Profile_in_NVM(volatile LORA_DEFINE_t *tmp_LORA)
{
    13cc:	b570      	push	{r4, r5, r6, lr}
    13ce:	b090      	sub	sp, #64	; 0x40
    13d0:	0004      	movs	r4, r0
	uint8_t tmp_page_buffer[NVMCTRL_PAGE_SIZE];
	do
	{
		error_code = nvm_read_buffer(
    13d2:	4e20      	ldr	r6, [pc, #128]	; (1454 <Save_LoRa_Profile_in_NVM+0x88>)
    13d4:	4d20      	ldr	r5, [pc, #128]	; (1458 <Save_LoRa_Profile_in_NVM+0x8c>)
    13d6:	2240      	movs	r2, #64	; 0x40
    13d8:	4669      	mov	r1, sp
    13da:	20fa      	movs	r0, #250	; 0xfa
    13dc:	01c0      	lsls	r0, r0, #7
    13de:	47b0      	blx	r6
    13e0:	7028      	strb	r0, [r5, #0]
		125  * NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE,
		tmp_page_buffer, NVMCTRL_PAGE_SIZE);
	} while (error_code == STATUS_BUSY);
    13e2:	2805      	cmp	r0, #5
    13e4:	d0f7      	beq.n	13d6 <Save_LoRa_Profile_in_NVM+0xa>
	
	tmp_page_buffer[tmp_LORA->NVM_offset_Value] = 0x55;
    13e6:	238b      	movs	r3, #139	; 0x8b
    13e8:	009b      	lsls	r3, r3, #2
    13ea:	5ce2      	ldrb	r2, [r4, r3]
    13ec:	b2d2      	uxtb	r2, r2
    13ee:	2155      	movs	r1, #85	; 0x55
    13f0:	4668      	mov	r0, sp
    13f2:	5481      	strb	r1, [r0, r2]
	tmp_page_buffer[tmp_LORA->NVM_offset_Value + 1] = tmp_LORA->MyLoRaPower;
    13f4:	5ce2      	ldrb	r2, [r4, r3]
    13f6:	79a1      	ldrb	r1, [r4, #6]
    13f8:	446a      	add	r2, sp
    13fa:	7051      	strb	r1, [r2, #1]
	tmp_page_buffer[tmp_LORA->NVM_offset_Value + 2] = tmp_LORA->MyLoRaSF;
    13fc:	5ce2      	ldrb	r2, [r4, r3]
    13fe:	79e1      	ldrb	r1, [r4, #7]
    1400:	446a      	add	r2, sp
    1402:	7091      	strb	r1, [r2, #2]
	tmp_page_buffer[tmp_LORA->NVM_offset_Value + 3] = tmp_LORA->MyLoRaFQ.byte[2];
    1404:	5ce2      	ldrb	r2, [r4, r3]
    1406:	7aa1      	ldrb	r1, [r4, #10]
    1408:	446a      	add	r2, sp
    140a:	70d1      	strb	r1, [r2, #3]
	tmp_page_buffer[tmp_LORA->NVM_offset_Value + 4] = tmp_LORA->MyLoRaFQ.byte[1];
    140c:	5ce2      	ldrb	r2, [r4, r3]
    140e:	7a61      	ldrb	r1, [r4, #9]
    1410:	446a      	add	r2, sp
    1412:	7111      	strb	r1, [r2, #4]
	tmp_page_buffer[tmp_LORA->NVM_offset_Value + 5] = tmp_LORA->MyLoRaFQ.byte[0];
    1414:	5ce2      	ldrb	r2, [r4, r3]
    1416:	7a21      	ldrb	r1, [r4, #8]
    1418:	446a      	add	r2, sp
    141a:	7151      	strb	r1, [r2, #5]
	tmp_page_buffer[tmp_LORA->NVM_offset_Value + 6] = tmp_LORA->Lora_Debug_Flag;
    141c:	5ce3      	ldrb	r3, [r4, r3]
    141e:	2285      	movs	r2, #133	; 0x85
    1420:	0092      	lsls	r2, r2, #2
    1422:	5ca2      	ldrb	r2, [r4, r2]
    1424:	446b      	add	r3, sp
    1426:	719a      	strb	r2, [r3, #6]
	do
	{
		error_code = nvm_erase_row(
    1428:	26fa      	movs	r6, #250	; 0xfa
    142a:	01f6      	lsls	r6, r6, #7
    142c:	4d0b      	ldr	r5, [pc, #44]	; (145c <Save_LoRa_Profile_in_NVM+0x90>)
    142e:	4c0a      	ldr	r4, [pc, #40]	; (1458 <Save_LoRa_Profile_in_NVM+0x8c>)
    1430:	0030      	movs	r0, r6
    1432:	47a8      	blx	r5
    1434:	7020      	strb	r0, [r4, #0]
		125 * NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE);
	} while (error_code == STATUS_BUSY);
    1436:	2805      	cmp	r0, #5
    1438:	d0fa      	beq.n	1430 <Save_LoRa_Profile_in_NVM+0x64>
	
	do
	{
		error_code = nvm_write_buffer(
    143a:	4d09      	ldr	r5, [pc, #36]	; (1460 <Save_LoRa_Profile_in_NVM+0x94>)
    143c:	4c06      	ldr	r4, [pc, #24]	; (1458 <Save_LoRa_Profile_in_NVM+0x8c>)
    143e:	2240      	movs	r2, #64	; 0x40
    1440:	4669      	mov	r1, sp
    1442:	20fa      	movs	r0, #250	; 0xfa
    1444:	01c0      	lsls	r0, r0, #7
    1446:	47a8      	blx	r5
    1448:	7020      	strb	r0, [r4, #0]
		125  * NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE,
		tmp_page_buffer, NVMCTRL_PAGE_SIZE);
	} while (error_code == STATUS_BUSY);
    144a:	2805      	cmp	r0, #5
    144c:	d0f7      	beq.n	143e <Save_LoRa_Profile_in_NVM+0x72>
}
    144e:	b010      	add	sp, #64	; 0x40
    1450:	bd70      	pop	{r4, r5, r6, pc}
    1452:	46c0      	nop			; (mov r8, r8)
    1454:	000002d5 	.word	0x000002d5
    1458:	2000354c 	.word	0x2000354c
    145c:	00000341 	.word	0x00000341
    1460:	0000022d 	.word	0x0000022d

00001464 <Save_List_in_NVM>:


void Save_List_in_NVM(void)
{
    1464:	b5f0      	push	{r4, r5, r6, r7, lr}
    1466:	46d6      	mov	lr, sl
    1468:	4647      	mov	r7, r8
    146a:	b580      	push	{r7, lr}
    146c:	4c21      	ldr	r4, [pc, #132]	; (14f4 <Save_List_in_NVM+0x90>)
    146e:	44a5      	add	sp, r4
    1470:	4921      	ldr	r1, [pc, #132]	; (14f8 <Save_List_in_NVM+0x94>)
    1472:	ae02      	add	r6, sp, #8
    1474:	4b21      	ldr	r3, [pc, #132]	; (14fc <Save_List_in_NVM+0x98>)
    1476:	18cc      	adds	r4, r1, r3
    1478:	0030      	movs	r0, r6
    147a:	e003      	b.n	1484 <Save_List_in_NVM+0x20>
    147c:	3106      	adds	r1, #6
    147e:	3006      	adds	r0, #6
	uint8_t page_buffer[NVM_Dev_List_MAX];
	//Print_Write_NVM_Msg();
	//======================================
	// Dev_List (二維) 轉換成 page_buffer (一維)
	//======================================
	for( i = 0; i < Dev_Item_MAX; i++)
    1480:	42a1      	cmp	r1, r4
    1482:	d006      	beq.n	1492 <Save_List_in_NVM+0x2e>
{
    1484:	2300      	movs	r3, #0
	{
		for( j = 0; j < Dev_List_Data_Item_Max; j++)
		{
			page_buffer[(j + (i * Dev_List_Data_Item_Max))] = Dev_List[i][j];
    1486:	5cca      	ldrb	r2, [r1, r3]
    1488:	54c2      	strb	r2, [r0, r3]
		for( j = 0; j < Dev_List_Data_Item_Max; j++)
    148a:	3301      	adds	r3, #1
    148c:	2b06      	cmp	r3, #6
    148e:	d1fa      	bne.n	1486 <Save_List_in_NVM+0x22>
    1490:	e7f4      	b.n	147c <Save_List_in_NVM+0x18>
    1492:	23c8      	movs	r3, #200	; 0xc8
    1494:	01db      	lsls	r3, r3, #7
    1496:	9301      	str	r3, [sp, #4]
		//======================================
		// page_buffer 分次存到 tmp_page_buffer，準備存到NVM使用
		//======================================
		for(i = 0; i < NVMCTRL_PAGE_SIZE; i++)
		{
			tmp_page_buffer[i] = page_buffer[i + j];
    1498:	24c0      	movs	r4, #192	; 0xc0
    149a:	00e4      	lsls	r4, r4, #3
    149c:	ab02      	add	r3, sp, #8
    149e:	469c      	mov	ip, r3
    14a0:	4464      	add	r4, ip
		//======================================
		// 儲存前要先erase
		//======================================
		do
		{
			error_code = nvm_erase_row(
    14a2:	4b17      	ldr	r3, [pc, #92]	; (1500 <Save_List_in_NVM+0x9c>)
    14a4:	4698      	mov	r8, r3
    14a6:	4f17      	ldr	r7, [pc, #92]	; (1504 <Save_List_in_NVM+0xa0>)
{
    14a8:	2300      	movs	r3, #0
			tmp_page_buffer[i] = page_buffer[i + j];
    14aa:	5cf2      	ldrb	r2, [r6, r3]
    14ac:	551a      	strb	r2, [r3, r4]
		for(i = 0; i < NVMCTRL_PAGE_SIZE; i++)
    14ae:	3301      	adds	r3, #1
    14b0:	2b40      	cmp	r3, #64	; 0x40
    14b2:	d1fa      	bne.n	14aa <Save_List_in_NVM+0x46>
			error_code = nvm_erase_row(
    14b4:	9801      	ldr	r0, [sp, #4]
    14b6:	47c0      	blx	r8
    14b8:	7038      	strb	r0, [r7, #0]
			(100 + k) * NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE);
		} while (error_code == STATUS_BUSY);
    14ba:	2805      	cmp	r0, #5
    14bc:	d0fa      	beq.n	14b4 <Save_List_in_NVM+0x50>
		//======================================
		// 開始儲存寫入
		//======================================
		do
		{
			error_code = nvm_write_buffer(
    14be:	4b12      	ldr	r3, [pc, #72]	; (1508 <Save_List_in_NVM+0xa4>)
    14c0:	469a      	mov	sl, r3
    14c2:	4d10      	ldr	r5, [pc, #64]	; (1504 <Save_List_in_NVM+0xa0>)
    14c4:	2240      	movs	r2, #64	; 0x40
    14c6:	0021      	movs	r1, r4
    14c8:	9801      	ldr	r0, [sp, #4]
    14ca:	47d0      	blx	sl
    14cc:	7028      	strb	r0, [r5, #0]
			(100 + k)  * NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE,
			tmp_page_buffer, NVMCTRL_PAGE_SIZE);
		} while (error_code == STATUS_BUSY);
    14ce:	2805      	cmp	r0, #5
    14d0:	d0f8      	beq.n	14c4 <Save_List_in_NVM+0x60>
    14d2:	9b01      	ldr	r3, [sp, #4]
    14d4:	3301      	adds	r3, #1
    14d6:	33ff      	adds	r3, #255	; 0xff
    14d8:	001a      	movs	r2, r3
    14da:	9301      	str	r3, [sp, #4]
    14dc:	3640      	adds	r6, #64	; 0x40
	for(j = 0; j < (NVMCTRL_PAGE_SIZE * NVM_Dev_List_Use_Page_MAX); j = j + NVMCTRL_PAGE_SIZE)
    14de:	23f8      	movs	r3, #248	; 0xf8
    14e0:	01db      	lsls	r3, r3, #7
    14e2:	429a      	cmp	r2, r3
    14e4:	d1e0      	bne.n	14a8 <Save_List_in_NVM+0x44>
		// K = page count，每+1 = 256 位置
		// 因為位置計算公式為 NVMCTRL_ROW_PAGES(4) * NVMCTRL_PAGE_SIZE (64) = 256個位置
		//======================================
		k++;
	}
}
    14e6:	4b09      	ldr	r3, [pc, #36]	; (150c <Save_List_in_NVM+0xa8>)
    14e8:	449d      	add	sp, r3
    14ea:	bc0c      	pop	{r2, r3}
    14ec:	4690      	mov	r8, r2
    14ee:	469a      	mov	sl, r3
    14f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14f2:	46c0      	nop			; (mov r8, r8)
    14f4:	fffff9b4 	.word	0xfffff9b4
    14f8:	20000a4c 	.word	0x20000a4c
    14fc:	000005fa 	.word	0x000005fa
    1500:	00000341 	.word	0x00000341
    1504:	2000354c 	.word	0x2000354c
    1508:	0000022d 	.word	0x0000022d
    150c:	0000064c 	.word	0x0000064c

00001510 <Save_Dev_Time_into_NVM>:




void Save_Dev_Time_into_NVM(void)
{
    1510:	b5f0      	push	{r4, r5, r6, r7, lr}
    1512:	46d6      	mov	lr, sl
    1514:	4647      	mov	r7, r8
    1516:	b580      	push	{r7, lr}
    1518:	4c1e      	ldr	r4, [pc, #120]	; (1594 <Save_Dev_Time_into_NVM+0x84>)
    151a:	44a5      	add	sp, r4
    151c:	4a1e      	ldr	r2, [pc, #120]	; (1598 <Save_Dev_Time_into_NVM+0x88>)
    151e:	ae02      	add	r6, sp, #8
    1520:	20ff      	movs	r0, #255	; 0xff
    1522:	0040      	lsls	r0, r0, #1
    1524:	0033      	movs	r3, r6
    1526:	46b4      	mov	ip, r6
    1528:	4460      	add	r0, ip
	//======================================
	for( i = 0; i < Dev_Item_MAX; i++)
	{
		for( j = 0; j < Dev_Time_Data_Item_Max; j++)
		{
			page_buffer[(j + (i * Dev_Time_Data_Item_Max))] = Dev_Time[i][j];
    152a:	7811      	ldrb	r1, [r2, #0]
    152c:	7019      	strb	r1, [r3, #0]
    152e:	7851      	ldrb	r1, [r2, #1]
    1530:	7059      	strb	r1, [r3, #1]
    1532:	3202      	adds	r2, #2
    1534:	3302      	adds	r3, #2
	for( i = 0; i < Dev_Item_MAX; i++)
    1536:	4283      	cmp	r3, r0
    1538:	d1f7      	bne.n	152a <Save_Dev_Time_into_NVM+0x1a>
    153a:	23fc      	movs	r3, #252	; 0xfc
    153c:	01db      	lsls	r3, r3, #7
    153e:	9301      	str	r3, [sp, #4]
		//======================================
		// page_buffer 分次存到 tmp_page_buffer，準備存到NVM使用
		//======================================
		for(i = 0; i < NVMCTRL_PAGE_SIZE; i++)
		{
			tmp_page_buffer[i] = page_buffer[i + j];
    1540:	ac82      	add	r4, sp, #520	; 0x208
		//======================================
		// 儲存前要先erase
		//======================================
		do
		{
			error_code = nvm_erase_row(
    1542:	4b16      	ldr	r3, [pc, #88]	; (159c <Save_Dev_Time_into_NVM+0x8c>)
    1544:	4698      	mov	r8, r3
    1546:	4f16      	ldr	r7, [pc, #88]	; (15a0 <Save_Dev_Time_into_NVM+0x90>)
{
    1548:	2300      	movs	r3, #0
			tmp_page_buffer[i] = page_buffer[i + j];
    154a:	5cf2      	ldrb	r2, [r6, r3]
    154c:	551a      	strb	r2, [r3, r4]
		for(i = 0; i < NVMCTRL_PAGE_SIZE; i++)
    154e:	3301      	adds	r3, #1
    1550:	2b40      	cmp	r3, #64	; 0x40
    1552:	d1fa      	bne.n	154a <Save_Dev_Time_into_NVM+0x3a>
			error_code = nvm_erase_row(
    1554:	9801      	ldr	r0, [sp, #4]
    1556:	47c0      	blx	r8
    1558:	7038      	strb	r0, [r7, #0]
			(126 + k) * NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE);
		} while (error_code == STATUS_BUSY);
    155a:	2805      	cmp	r0, #5
    155c:	d0fa      	beq.n	1554 <Save_Dev_Time_into_NVM+0x44>
		//======================================
		// 開始儲存寫入
		//======================================
		do
		{
			error_code = nvm_write_buffer(
    155e:	4b11      	ldr	r3, [pc, #68]	; (15a4 <Save_Dev_Time_into_NVM+0x94>)
    1560:	469a      	mov	sl, r3
    1562:	4d0f      	ldr	r5, [pc, #60]	; (15a0 <Save_Dev_Time_into_NVM+0x90>)
    1564:	2240      	movs	r2, #64	; 0x40
    1566:	0021      	movs	r1, r4
    1568:	9801      	ldr	r0, [sp, #4]
    156a:	47d0      	blx	sl
    156c:	7028      	strb	r0, [r5, #0]
			(126 + k)  * NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE,
			tmp_page_buffer, NVMCTRL_PAGE_SIZE);
		} while (error_code == STATUS_BUSY);
    156e:	2805      	cmp	r0, #5
    1570:	d0f8      	beq.n	1564 <Save_Dev_Time_into_NVM+0x54>
    1572:	9b01      	ldr	r3, [sp, #4]
    1574:	3301      	adds	r3, #1
    1576:	33ff      	adds	r3, #255	; 0xff
    1578:	001a      	movs	r2, r3
    157a:	9301      	str	r3, [sp, #4]
    157c:	3640      	adds	r6, #64	; 0x40
	for(j = 0; j < (NVMCTRL_PAGE_SIZE * NVM_List_Time_Use_Page_MAX); j = j + NVMCTRL_PAGE_SIZE)
    157e:	2386      	movs	r3, #134	; 0x86
    1580:	021b      	lsls	r3, r3, #8
    1582:	429a      	cmp	r2, r3
    1584:	d1e0      	bne.n	1548 <Save_Dev_Time_into_NVM+0x38>
		// K = page count，每+1 = 256 位置
		// 因為位置計算公式為 NVMCTRL_ROW_PAGES(4) * NVMCTRL_PAGE_SIZE (64) = 256個位置
		//======================================
		k++;
	}
}
    1586:	2393      	movs	r3, #147	; 0x93
    1588:	009b      	lsls	r3, r3, #2
    158a:	449d      	add	sp, r3
    158c:	bc0c      	pop	{r2, r3}
    158e:	4690      	mov	r8, r2
    1590:	469a      	mov	sl, r3
    1592:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1594:	fffffdb4 	.word	0xfffffdb4
    1598:	20000250 	.word	0x20000250
    159c:	00000341 	.word	0x00000341
    15a0:	2000354c 	.word	0x2000354c
    15a4:	0000022d 	.word	0x0000022d

000015a8 <Load_Dev_Time_Form_NVM>:



void Load_Dev_Time_Form_NVM(void)
{
    15a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    15aa:	46ce      	mov	lr, r9
    15ac:	b500      	push	{lr}
    15ae:	4c1d      	ldr	r4, [pc, #116]	; (1624 <Load_Dev_Time_Form_NVM+0x7c>)
    15b0:	44a5      	add	sp, r4
    15b2:	af02      	add	r7, sp, #8
    15b4:	003e      	movs	r6, r7
    15b6:	23fc      	movs	r3, #252	; 0xfc
    15b8:	01db      	lsls	r3, r3, #7
    15ba:	9301      	str	r3, [sp, #4]
	k = 0;
	for(j = 0; j < (NVMCTRL_PAGE_SIZE * NVM_List_Time_Use_Page_MAX); j = j + NVMCTRL_PAGE_SIZE)
	{
		do
		{
			error_code = nvm_read_buffer(
    15bc:	ac82      	add	r4, sp, #520	; 0x208
    15be:	4b1a      	ldr	r3, [pc, #104]	; (1628 <Load_Dev_Time_Form_NVM+0x80>)
    15c0:	4699      	mov	r9, r3
    15c2:	4d1a      	ldr	r5, [pc, #104]	; (162c <Load_Dev_Time_Form_NVM+0x84>)
    15c4:	2240      	movs	r2, #64	; 0x40
    15c6:	0021      	movs	r1, r4
    15c8:	9801      	ldr	r0, [sp, #4]
    15ca:	47c8      	blx	r9
    15cc:	7028      	strb	r0, [r5, #0]
			(126 + k)  * NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE,
			tmp_page_buffer, NVMCTRL_PAGE_SIZE);
		} while (error_code == STATUS_BUSY);
    15ce:	2805      	cmp	r0, #5
    15d0:	d0f8      	beq.n	15c4 <Load_Dev_Time_Form_NVM+0x1c>
    15d2:	2300      	movs	r3, #0
		
		for(i = 0; i < NVMCTRL_PAGE_SIZE; i++)
		{
			page_buffer[i + j] = tmp_page_buffer[i];
    15d4:	5d1a      	ldrb	r2, [r3, r4]
    15d6:	54f2      	strb	r2, [r6, r3]
		for(i = 0; i < NVMCTRL_PAGE_SIZE; i++)
    15d8:	3301      	adds	r3, #1
    15da:	2b40      	cmp	r3, #64	; 0x40
    15dc:	d1fa      	bne.n	15d4 <Load_Dev_Time_Form_NVM+0x2c>
    15de:	3640      	adds	r6, #64	; 0x40
    15e0:	9b01      	ldr	r3, [sp, #4]
    15e2:	3301      	adds	r3, #1
    15e4:	33ff      	adds	r3, #255	; 0xff
    15e6:	001a      	movs	r2, r3
    15e8:	9301      	str	r3, [sp, #4]
	for(j = 0; j < (NVMCTRL_PAGE_SIZE * NVM_List_Time_Use_Page_MAX); j = j + NVMCTRL_PAGE_SIZE)
    15ea:	2386      	movs	r3, #134	; 0x86
    15ec:	021b      	lsls	r3, r3, #8
    15ee:	429a      	cmp	r2, r3
    15f0:	d1e8      	bne.n	15c4 <Load_Dev_Time_Form_NVM+0x1c>
    15f2:	4a0f      	ldr	r2, [pc, #60]	; (1630 <Load_Dev_Time_Form_NVM+0x88>)
    15f4:	4b0f      	ldr	r3, [pc, #60]	; (1634 <Load_Dev_Time_Form_NVM+0x8c>)
    15f6:	20ff      	movs	r0, #255	; 0xff
    15f8:	0040      	lsls	r0, r0, #1
    15fa:	a902      	add	r1, sp, #8
    15fc:	468c      	mov	ip, r1
    15fe:	4460      	add	r0, ip
	
	for( i = 0; i < Dev_Item_MAX; i++)
	{
		for( j = 0; j < Dev_Time_Data_Item_Max; j++)
		{
			Dev_Time[i][j] = page_buffer[(j + (i * Dev_Time_Data_Item_Max))];
    1600:	7839      	ldrb	r1, [r7, #0]
    1602:	7011      	strb	r1, [r2, #0]
			dev_value[i][dev_value_Time_High + j] = Dev_Time[i][j];
    1604:	7019      	strb	r1, [r3, #0]
			Dev_Time[i][j] = page_buffer[(j + (i * Dev_Time_Data_Item_Max))];
    1606:	7879      	ldrb	r1, [r7, #1]
    1608:	7051      	strb	r1, [r2, #1]
			dev_value[i][dev_value_Time_High + j] = Dev_Time[i][j];
    160a:	7059      	strb	r1, [r3, #1]
    160c:	3702      	adds	r7, #2
    160e:	3202      	adds	r2, #2
    1610:	3325      	adds	r3, #37	; 0x25
	for( i = 0; i < Dev_Item_MAX; i++)
    1612:	4287      	cmp	r7, r0
    1614:	d1f4      	bne.n	1600 <Load_Dev_Time_Form_NVM+0x58>
		}
	}
}
    1616:	2392      	movs	r3, #146	; 0x92
    1618:	009b      	lsls	r3, r3, #2
    161a:	449d      	add	sp, r3
    161c:	bc04      	pop	{r2}
    161e:	4691      	mov	r9, r2
    1620:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1622:	46c0      	nop			; (mov r8, r8)
    1624:	fffffdb8 	.word	0xfffffdb8
    1628:	000002d5 	.word	0x000002d5
    162c:	2000354c 	.word	0x2000354c
    1630:	20000250 	.word	0x20000250
    1634:	2000108f 	.word	0x2000108f

00001638 <Load_List_Form_NVM>:



void Load_List_Form_NVM(void)
{
    1638:	b5f0      	push	{r4, r5, r6, r7, lr}
    163a:	46ce      	mov	lr, r9
    163c:	b500      	push	{lr}
    163e:	4c1e      	ldr	r4, [pc, #120]	; (16b8 <Load_List_Form_NVM+0x80>)
    1640:	44a5      	add	sp, r4
    1642:	af02      	add	r7, sp, #8
    1644:	003e      	movs	r6, r7
    1646:	23c8      	movs	r3, #200	; 0xc8
    1648:	01db      	lsls	r3, r3, #7
    164a:	9301      	str	r3, [sp, #4]
	k = 0;
	for(j = 0; j < (NVMCTRL_PAGE_SIZE * NVM_Dev_List_Use_Page_MAX); j = j + NVMCTRL_PAGE_SIZE)
	{
		do
		{
			error_code = nvm_read_buffer(
    164c:	24c0      	movs	r4, #192	; 0xc0
    164e:	00e4      	lsls	r4, r4, #3
    1650:	46bc      	mov	ip, r7
    1652:	4464      	add	r4, ip
    1654:	4b19      	ldr	r3, [pc, #100]	; (16bc <Load_List_Form_NVM+0x84>)
    1656:	4699      	mov	r9, r3
    1658:	4d19      	ldr	r5, [pc, #100]	; (16c0 <Load_List_Form_NVM+0x88>)
    165a:	2240      	movs	r2, #64	; 0x40
    165c:	0021      	movs	r1, r4
    165e:	9801      	ldr	r0, [sp, #4]
    1660:	47c8      	blx	r9
    1662:	7028      	strb	r0, [r5, #0]
			(100 + k)  * NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE,
			tmp_page_buffer, NVMCTRL_PAGE_SIZE);
		} while (error_code == STATUS_BUSY);
    1664:	2805      	cmp	r0, #5
    1666:	d0f8      	beq.n	165a <Load_List_Form_NVM+0x22>
    1668:	2300      	movs	r3, #0
		
		for(i = 0; i < NVMCTRL_PAGE_SIZE; i++)
		{
			page_buffer[i + j] = tmp_page_buffer[i];
    166a:	5d1a      	ldrb	r2, [r3, r4]
    166c:	54f2      	strb	r2, [r6, r3]
		for(i = 0; i < NVMCTRL_PAGE_SIZE; i++)
    166e:	3301      	adds	r3, #1
    1670:	2b40      	cmp	r3, #64	; 0x40
    1672:	d1fa      	bne.n	166a <Load_List_Form_NVM+0x32>
    1674:	3640      	adds	r6, #64	; 0x40
    1676:	9b01      	ldr	r3, [sp, #4]
    1678:	3301      	adds	r3, #1
    167a:	33ff      	adds	r3, #255	; 0xff
    167c:	001a      	movs	r2, r3
    167e:	9301      	str	r3, [sp, #4]
	for(j = 0; j < (NVMCTRL_PAGE_SIZE * NVM_Dev_List_Use_Page_MAX); j = j + NVMCTRL_PAGE_SIZE)
    1680:	23f8      	movs	r3, #248	; 0xf8
    1682:	01db      	lsls	r3, r3, #7
    1684:	429a      	cmp	r2, r3
    1686:	d1e8      	bne.n	165a <Load_List_Form_NVM+0x22>
    1688:	490e      	ldr	r1, [pc, #56]	; (16c4 <Load_List_Form_NVM+0x8c>)
    168a:	480f      	ldr	r0, [pc, #60]	; (16c8 <Load_List_Form_NVM+0x90>)
    168c:	ab02      	add	r3, sp, #8
    168e:	469c      	mov	ip, r3
    1690:	4460      	add	r0, ip
    1692:	e003      	b.n	169c <Load_List_Form_NVM+0x64>
    1694:	3706      	adds	r7, #6
    1696:	3106      	adds	r1, #6
		}
		k++;
	}
	
	for( i = 0; i < Dev_Item_MAX; i++)
    1698:	42b8      	cmp	r0, r7
    169a:	d006      	beq.n	16aa <Load_List_Form_NVM+0x72>
    169c:	2300      	movs	r3, #0
	{
		for( j = 0; j < Dev_List_Data_Item_Max; j++)
		{
			Dev_List[i][j] = page_buffer[(j + (i * Dev_List_Data_Item_Max))];
    169e:	5cfa      	ldrb	r2, [r7, r3]
    16a0:	54ca      	strb	r2, [r1, r3]
		for( j = 0; j < Dev_List_Data_Item_Max; j++)
    16a2:	3301      	adds	r3, #1
    16a4:	2b06      	cmp	r3, #6
    16a6:	d1fa      	bne.n	169e <Load_List_Form_NVM+0x66>
    16a8:	e7f4      	b.n	1694 <Load_List_Form_NVM+0x5c>
		}
	}
}
    16aa:	23c9      	movs	r3, #201	; 0xc9
    16ac:	00db      	lsls	r3, r3, #3
    16ae:	449d      	add	sp, r3
    16b0:	bc04      	pop	{r2}
    16b2:	4691      	mov	r9, r2
    16b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    16b6:	46c0      	nop			; (mov r8, r8)
    16b8:	fffff9b8 	.word	0xfffff9b8
    16bc:	000002d5 	.word	0x000002d5
    16c0:	2000354c 	.word	0x2000354c
    16c4:	20000a4c 	.word	0x20000a4c
    16c8:	000005fa 	.word	0x000005fa

000016cc <Search_list_table_index>:
unsigned char Search_list_table_index(unsigned char tmp_list_table_index)
{
	unsigned int i;
	for(i = 0; i < Dev_Item_MAX; i++)
	{
		if(Dev_List[i][0] == tmp_list_table_index)
    16cc:	4b08      	ldr	r3, [pc, #32]	; (16f0 <Search_list_table_index+0x24>)
    16ce:	781b      	ldrb	r3, [r3, #0]
    16d0:	4283      	cmp	r3, r0
    16d2:	d00a      	beq.n	16ea <Search_list_table_index+0x1e>
    16d4:	4a07      	ldr	r2, [pc, #28]	; (16f4 <Search_list_table_index+0x28>)
	for(i = 0; i < Dev_Item_MAX; i++)
    16d6:	2301      	movs	r3, #1
		if(Dev_List[i][0] == tmp_list_table_index)
    16d8:	7811      	ldrb	r1, [r2, #0]
    16da:	4281      	cmp	r1, r0
    16dc:	d006      	beq.n	16ec <Search_list_table_index+0x20>
	for(i = 0; i < Dev_Item_MAX; i++)
    16de:	3301      	adds	r3, #1
    16e0:	3206      	adds	r2, #6
    16e2:	2bff      	cmp	r3, #255	; 0xff
    16e4:	d1f8      	bne.n	16d8 <Search_list_table_index+0xc>
		{
			return i;
		}
	}
	return Not_found_Index;
    16e6:	20ff      	movs	r0, #255	; 0xff
    16e8:	e001      	b.n	16ee <Search_list_table_index+0x22>
	for(i = 0; i < Dev_Item_MAX; i++)
    16ea:	2300      	movs	r3, #0
			return i;
    16ec:	b2d8      	uxtb	r0, r3
    16ee:	4770      	bx	lr
    16f0:	20000a4c 	.word	0x20000a4c
    16f4:	20000a52 	.word	0x20000a52

000016f8 <Print_Lora_number>:
#include "myDefine.h"



void Print_Lora_number(volatile LORA_DEFINE_t *tmp_LORA)
{
    16f8:	b570      	push	{r4, r5, r6, lr}
	if(tmp_LORA == LORA01)
    16fa:	4b1a      	ldr	r3, [pc, #104]	; (1764 <Print_Lora_number+0x6c>)
    16fc:	681b      	ldr	r3, [r3, #0]
    16fe:	4283      	cmp	r3, r0
    1700:	d017      	beq.n	1732 <Print_Lora_number+0x3a>
		uTXByte(Debug_COM, ']');
		uTXByte(Debug_COM, 0x09);
	}
	else
	{
		uTXByte(Debug_COM, '[');
    1702:	4d19      	ldr	r5, [pc, #100]	; (1768 <Print_Lora_number+0x70>)
    1704:	215b      	movs	r1, #91	; 0x5b
    1706:	0028      	movs	r0, r5
    1708:	4c18      	ldr	r4, [pc, #96]	; (176c <Print_Lora_number+0x74>)
    170a:	47a0      	blx	r4
		uTXByte(Debug_COM, 'L');
    170c:	214c      	movs	r1, #76	; 0x4c
    170e:	0028      	movs	r0, r5
    1710:	47a0      	blx	r4
		uTXByte(Debug_COM, 'R');
    1712:	2152      	movs	r1, #82	; 0x52
    1714:	0028      	movs	r0, r5
    1716:	47a0      	blx	r4
		uTXByte(Debug_COM, '0');
    1718:	2130      	movs	r1, #48	; 0x30
    171a:	0028      	movs	r0, r5
    171c:	47a0      	blx	r4
		uTXByte(Debug_COM, '2');
    171e:	2132      	movs	r1, #50	; 0x32
    1720:	0028      	movs	r0, r5
    1722:	47a0      	blx	r4
		uTXByte(Debug_COM, ']');
    1724:	215d      	movs	r1, #93	; 0x5d
    1726:	0028      	movs	r0, r5
    1728:	47a0      	blx	r4
		uTXByte(Debug_COM, 0x09);
    172a:	2109      	movs	r1, #9
    172c:	0028      	movs	r0, r5
    172e:	47a0      	blx	r4
	}
}
    1730:	bd70      	pop	{r4, r5, r6, pc}
		uTXByte(Debug_COM, '[');
    1732:	4d0d      	ldr	r5, [pc, #52]	; (1768 <Print_Lora_number+0x70>)
    1734:	215b      	movs	r1, #91	; 0x5b
    1736:	0028      	movs	r0, r5
    1738:	4c0c      	ldr	r4, [pc, #48]	; (176c <Print_Lora_number+0x74>)
    173a:	47a0      	blx	r4
		uTXByte(Debug_COM, 'L');
    173c:	214c      	movs	r1, #76	; 0x4c
    173e:	0028      	movs	r0, r5
    1740:	47a0      	blx	r4
		uTXByte(Debug_COM, 'R');
    1742:	2152      	movs	r1, #82	; 0x52
    1744:	0028      	movs	r0, r5
    1746:	47a0      	blx	r4
		uTXByte(Debug_COM, '0');
    1748:	2130      	movs	r1, #48	; 0x30
    174a:	0028      	movs	r0, r5
    174c:	47a0      	blx	r4
		uTXByte(Debug_COM, '1');
    174e:	2131      	movs	r1, #49	; 0x31
    1750:	0028      	movs	r0, r5
    1752:	47a0      	blx	r4
		uTXByte(Debug_COM, ']');
    1754:	215d      	movs	r1, #93	; 0x5d
    1756:	0028      	movs	r0, r5
    1758:	47a0      	blx	r4
		uTXByte(Debug_COM, 0x09);
    175a:	2109      	movs	r1, #9
    175c:	0028      	movs	r0, r5
    175e:	47a0      	blx	r4
    1760:	e7e6      	b.n	1730 <Print_Lora_number+0x38>
    1762:	46c0      	nop			; (mov r8, r8)
    1764:	20001048 	.word	0x20001048
    1768:	2000022c 	.word	0x2000022c
    176c:	00003ac9 	.word	0x00003ac9

00001770 <Print_Line_Msg>:

void Print_Line_Msg(void)
{
    1770:	b570      	push	{r4, r5, r6, lr}
    1772:	240f      	movs	r4, #15
	unsigned char i;
	for(i = 0; i < 15; i++)
	{
		uTXByte(Debug_COM, '-');
    1774:	4e08      	ldr	r6, [pc, #32]	; (1798 <Print_Line_Msg+0x28>)
    1776:	4d09      	ldr	r5, [pc, #36]	; (179c <Print_Line_Msg+0x2c>)
    1778:	212d      	movs	r1, #45	; 0x2d
    177a:	0030      	movs	r0, r6
    177c:	47a8      	blx	r5
		uTXByte(Debug_COM, ' ');
    177e:	2120      	movs	r1, #32
    1780:	0030      	movs	r0, r6
    1782:	47a8      	blx	r5
    1784:	3c01      	subs	r4, #1
    1786:	b2e4      	uxtb	r4, r4
	for(i = 0; i < 15; i++)
    1788:	2c00      	cmp	r4, #0
    178a:	d1f5      	bne.n	1778 <Print_Line_Msg+0x8>
	}
	uTXByte(Debug_COM, 0x0d);
    178c:	210d      	movs	r1, #13
    178e:	4802      	ldr	r0, [pc, #8]	; (1798 <Print_Line_Msg+0x28>)
    1790:	4b02      	ldr	r3, [pc, #8]	; (179c <Print_Line_Msg+0x2c>)
    1792:	4798      	blx	r3
}
    1794:	bd70      	pop	{r4, r5, r6, pc}
    1796:	46c0      	nop			; (mov r8, r8)
    1798:	2000022c 	.word	0x2000022c
    179c:	00003ac9 	.word	0x00003ac9

000017a0 <Print_Start_Msg>:

void Print_Start_Msg(void)
{
    17a0:	b570      	push	{r4, r5, r6, lr}

	uTXByte(Debug_COM, 'S');
    17a2:	4d14      	ldr	r5, [pc, #80]	; (17f4 <Print_Start_Msg+0x54>)
    17a4:	2153      	movs	r1, #83	; 0x53
    17a6:	0028      	movs	r0, r5
    17a8:	4c13      	ldr	r4, [pc, #76]	; (17f8 <Print_Start_Msg+0x58>)
    17aa:	47a0      	blx	r4
	uTXByte(Debug_COM, 'H');
    17ac:	2148      	movs	r1, #72	; 0x48
    17ae:	0028      	movs	r0, r5
    17b0:	47a0      	blx	r4
	uTXByte(Debug_COM, 'H');
    17b2:	2148      	movs	r1, #72	; 0x48
    17b4:	0028      	movs	r0, r5
    17b6:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    17b8:	2120      	movs	r1, #32
    17ba:	0028      	movs	r0, r5
    17bc:	47a0      	blx	r4
	uTXByte(Debug_COM, 'S');
    17be:	2153      	movs	r1, #83	; 0x53
    17c0:	0028      	movs	r0, r5
    17c2:	47a0      	blx	r4
	uTXByte(Debug_COM, 'y');
    17c4:	2179      	movs	r1, #121	; 0x79
    17c6:	0028      	movs	r0, r5
    17c8:	47a0      	blx	r4
	uTXByte(Debug_COM, 's');
    17ca:	2173      	movs	r1, #115	; 0x73
    17cc:	0028      	movs	r0, r5
    17ce:	47a0      	blx	r4
	uTXByte(Debug_COM, 't');
    17d0:	2174      	movs	r1, #116	; 0x74
    17d2:	0028      	movs	r0, r5
    17d4:	47a0      	blx	r4
	uTXByte(Debug_COM, 'e');
    17d6:	2165      	movs	r1, #101	; 0x65
    17d8:	0028      	movs	r0, r5
    17da:	47a0      	blx	r4
	uTXByte(Debug_COM, 'm');
    17dc:	216d      	movs	r1, #109	; 0x6d
    17de:	0028      	movs	r0, r5
    17e0:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);
    17e2:	210d      	movs	r1, #13
    17e4:	0028      	movs	r0, r5
    17e6:	47a0      	blx	r4
	Print_Line_Msg();
    17e8:	4b04      	ldr	r3, [pc, #16]	; (17fc <Print_Start_Msg+0x5c>)
    17ea:	4798      	blx	r3
	uTXByte(Debug_COM, 0x0d);
    17ec:	210d      	movs	r1, #13
    17ee:	0028      	movs	r0, r5
    17f0:	47a0      	blx	r4
}
    17f2:	bd70      	pop	{r4, r5, r6, pc}
    17f4:	2000022c 	.word	0x2000022c
    17f8:	00003ac9 	.word	0x00003ac9
    17fc:	00001771 	.word	0x00001771

00001800 <Print_Find_Msg>:


void Print_Find_Msg(void)
{
    1800:	b570      	push	{r4, r5, r6, lr}
	uTXByte(Debug_COM, '[');
    1802:	4d0c      	ldr	r5, [pc, #48]	; (1834 <Print_Find_Msg+0x34>)
    1804:	215b      	movs	r1, #91	; 0x5b
    1806:	0028      	movs	r0, r5
    1808:	4c0b      	ldr	r4, [pc, #44]	; (1838 <Print_Find_Msg+0x38>)
    180a:	47a0      	blx	r4
	uTXByte(Debug_COM, 'f');
    180c:	2166      	movs	r1, #102	; 0x66
    180e:	0028      	movs	r0, r5
    1810:	47a0      	blx	r4
	uTXByte(Debug_COM, 'i');
    1812:	2169      	movs	r1, #105	; 0x69
    1814:	0028      	movs	r0, r5
    1816:	47a0      	blx	r4
	uTXByte(Debug_COM, 'n');
    1818:	216e      	movs	r1, #110	; 0x6e
    181a:	0028      	movs	r0, r5
    181c:	47a0      	blx	r4
	uTXByte(Debug_COM, 'd');
    181e:	2164      	movs	r1, #100	; 0x64
    1820:	0028      	movs	r0, r5
    1822:	47a0      	blx	r4
	uTXByte(Debug_COM, ']');
    1824:	215d      	movs	r1, #93	; 0x5d
    1826:	0028      	movs	r0, r5
    1828:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);
    182a:	210d      	movs	r1, #13
    182c:	0028      	movs	r0, r5
    182e:	47a0      	blx	r4
}
    1830:	bd70      	pop	{r4, r5, r6, pc}
    1832:	46c0      	nop			; (mov r8, r8)
    1834:	2000022c 	.word	0x2000022c
    1838:	00003ac9 	.word	0x00003ac9

0000183c <Print_Enable_CMD_Msg>:
	uTXByte(Debug_COM, 'D');
	uTXByte(Debug_COM, 0x0d);
}

void Print_Enable_CMD_Msg(void)
{
    183c:	b570      	push	{r4, r5, r6, lr}
	uTXByte(Debug_COM, 'E');
    183e:	4d0a      	ldr	r5, [pc, #40]	; (1868 <Print_Enable_CMD_Msg+0x2c>)
    1840:	2145      	movs	r1, #69	; 0x45
    1842:	0028      	movs	r0, r5
    1844:	4c09      	ldr	r4, [pc, #36]	; (186c <Print_Enable_CMD_Msg+0x30>)
    1846:	47a0      	blx	r4
	uTXByte(Debug_COM, 'n');
    1848:	216e      	movs	r1, #110	; 0x6e
    184a:	0028      	movs	r0, r5
    184c:	47a0      	blx	r4
	uTXByte(Debug_COM, 'a');
    184e:	2161      	movs	r1, #97	; 0x61
    1850:	0028      	movs	r0, r5
    1852:	47a0      	blx	r4
	uTXByte(Debug_COM, 'b');
    1854:	2162      	movs	r1, #98	; 0x62
    1856:	0028      	movs	r0, r5
    1858:	47a0      	blx	r4
	uTXByte(Debug_COM, 'l');
    185a:	216c      	movs	r1, #108	; 0x6c
    185c:	0028      	movs	r0, r5
    185e:	47a0      	blx	r4
	uTXByte(Debug_COM, 'e');
    1860:	2165      	movs	r1, #101	; 0x65
    1862:	0028      	movs	r0, r5
    1864:	47a0      	blx	r4
}
    1866:	bd70      	pop	{r4, r5, r6, pc}
    1868:	2000022c 	.word	0x2000022c
    186c:	00003ac9 	.word	0x00003ac9

00001870 <Print_Disable_CMD_Msg>:

void Print_Disable_CMD_Msg(void)
{
    1870:	b570      	push	{r4, r5, r6, lr}
	uTXByte(Debug_COM, 'D');
    1872:	4d0c      	ldr	r5, [pc, #48]	; (18a4 <Print_Disable_CMD_Msg+0x34>)
    1874:	2144      	movs	r1, #68	; 0x44
    1876:	0028      	movs	r0, r5
    1878:	4c0b      	ldr	r4, [pc, #44]	; (18a8 <Print_Disable_CMD_Msg+0x38>)
    187a:	47a0      	blx	r4
	uTXByte(Debug_COM, 'i');
    187c:	2169      	movs	r1, #105	; 0x69
    187e:	0028      	movs	r0, r5
    1880:	47a0      	blx	r4
	uTXByte(Debug_COM, 's');
    1882:	2173      	movs	r1, #115	; 0x73
    1884:	0028      	movs	r0, r5
    1886:	47a0      	blx	r4
	uTXByte(Debug_COM, 'a');
    1888:	2161      	movs	r1, #97	; 0x61
    188a:	0028      	movs	r0, r5
    188c:	47a0      	blx	r4
	uTXByte(Debug_COM, 'b');
    188e:	2162      	movs	r1, #98	; 0x62
    1890:	0028      	movs	r0, r5
    1892:	47a0      	blx	r4
	uTXByte(Debug_COM, 'l');
    1894:	216c      	movs	r1, #108	; 0x6c
    1896:	0028      	movs	r0, r5
    1898:	47a0      	blx	r4
	uTXByte(Debug_COM, 'e');
    189a:	2165      	movs	r1, #101	; 0x65
    189c:	0028      	movs	r0, r5
    189e:	47a0      	blx	r4
}
    18a0:	bd70      	pop	{r4, r5, r6, pc}
    18a2:	46c0      	nop			; (mov r8, r8)
    18a4:	2000022c 	.word	0x2000022c
    18a8:	00003ac9 	.word	0x00003ac9

000018ac <Print_One_Form_List_Table>:



void Print_One_Form_List_Table(unsigned char tmp_index)
{
    18ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18ae:	46d6      	mov	lr, sl
    18b0:	4647      	mov	r7, r8
    18b2:	b580      	push	{r7, lr}
    18b4:	0004      	movs	r4, r0
	uTXByte(Debug_COM, 'N');
    18b6:	214e      	movs	r1, #78	; 0x4e
    18b8:	481f      	ldr	r0, [pc, #124]	; (1938 <Print_One_Form_List_Table+0x8c>)
    18ba:	4b20      	ldr	r3, [pc, #128]	; (193c <Print_One_Form_List_Table+0x90>)
    18bc:	4698      	mov	r8, r3
    18be:	4798      	blx	r3
	uTXByte(Debug_COM, 'o');
    18c0:	216f      	movs	r1, #111	; 0x6f
    18c2:	481d      	ldr	r0, [pc, #116]	; (1938 <Print_One_Form_List_Table+0x8c>)
    18c4:	47c0      	blx	r8
	uTXByte(Debug_COM, '.');
    18c6:	212e      	movs	r1, #46	; 0x2e
    18c8:	481b      	ldr	r0, [pc, #108]	; (1938 <Print_One_Form_List_Table+0x8c>)
    18ca:	47c0      	blx	r8
	uart_send_word_for_ListNumber(Debug_COM, hex_to_bcd(Dev_List[tmp_index][0]));
    18cc:	4f1c      	ldr	r7, [pc, #112]	; (1940 <Print_One_Form_List_Table+0x94>)
    18ce:	0066      	lsls	r6, r4, #1
    18d0:	1933      	adds	r3, r6, r4
    18d2:	005b      	lsls	r3, r3, #1
    18d4:	5dd8      	ldrb	r0, [r3, r7]
    18d6:	4b1b      	ldr	r3, [pc, #108]	; (1944 <Print_One_Form_List_Table+0x98>)
    18d8:	4798      	blx	r3
    18da:	0001      	movs	r1, r0
    18dc:	4816      	ldr	r0, [pc, #88]	; (1938 <Print_One_Form_List_Table+0x8c>)
    18de:	4b1a      	ldr	r3, [pc, #104]	; (1948 <Print_One_Form_List_Table+0x9c>)
    18e0:	4798      	blx	r3
	uTXByte(Debug_COM, ' ');
    18e2:	2120      	movs	r1, #32
    18e4:	4814      	ldr	r0, [pc, #80]	; (1938 <Print_One_Form_List_Table+0x8c>)
    18e6:	47c0      	blx	r8
	uart_send_ascii_byte(Debug_COM, Dev_List[tmp_index][2]);
    18e8:	1935      	adds	r5, r6, r4
    18ea:	006d      	lsls	r5, r5, #1
    18ec:	197d      	adds	r5, r7, r5
    18ee:	78a9      	ldrb	r1, [r5, #2]
    18f0:	4811      	ldr	r0, [pc, #68]	; (1938 <Print_One_Form_List_Table+0x8c>)
    18f2:	4b16      	ldr	r3, [pc, #88]	; (194c <Print_One_Form_List_Table+0xa0>)
    18f4:	469a      	mov	sl, r3
    18f6:	4798      	blx	r3
	uart_send_ascii_byte(Debug_COM, Dev_List[tmp_index][3]);
    18f8:	78e9      	ldrb	r1, [r5, #3]
    18fa:	480f      	ldr	r0, [pc, #60]	; (1938 <Print_One_Form_List_Table+0x8c>)
    18fc:	47d0      	blx	sl
	uart_send_ascii_byte(Debug_COM, Dev_List[tmp_index][4]);
    18fe:	7929      	ldrb	r1, [r5, #4]
    1900:	480d      	ldr	r0, [pc, #52]	; (1938 <Print_One_Form_List_Table+0x8c>)
    1902:	47d0      	blx	sl
	uart_send_ascii_byte(Debug_COM, Dev_List[tmp_index][5]);
    1904:	7969      	ldrb	r1, [r5, #5]
    1906:	480c      	ldr	r0, [pc, #48]	; (1938 <Print_One_Form_List_Table+0x8c>)
    1908:	47d0      	blx	sl
	uTXByte(Debug_COM, ' ');
    190a:	2120      	movs	r1, #32
    190c:	480a      	ldr	r0, [pc, #40]	; (1938 <Print_One_Form_List_Table+0x8c>)
    190e:	47c0      	blx	r8
	uTXByte(Debug_COM, '[');
    1910:	215b      	movs	r1, #91	; 0x5b
    1912:	4809      	ldr	r0, [pc, #36]	; (1938 <Print_One_Form_List_Table+0x8c>)
    1914:	47c0      	blx	r8
	if(Dev_List[tmp_index][1] == 1)
    1916:	786b      	ldrb	r3, [r5, #1]
    1918:	2b01      	cmp	r3, #1
    191a:	d009      	beq.n	1930 <Print_One_Form_List_Table+0x84>
	{
		Print_Enable_CMD_Msg();
	}
	else
	{
		Print_Disable_CMD_Msg();
    191c:	4b0c      	ldr	r3, [pc, #48]	; (1950 <Print_One_Form_List_Table+0xa4>)
    191e:	4798      	blx	r3
	}
	uTXByte(Debug_COM, ']');
    1920:	215d      	movs	r1, #93	; 0x5d
    1922:	4805      	ldr	r0, [pc, #20]	; (1938 <Print_One_Form_List_Table+0x8c>)
    1924:	4b05      	ldr	r3, [pc, #20]	; (193c <Print_One_Form_List_Table+0x90>)
    1926:	4798      	blx	r3
}
    1928:	bc0c      	pop	{r2, r3}
    192a:	4690      	mov	r8, r2
    192c:	469a      	mov	sl, r3
    192e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Print_Enable_CMD_Msg();
    1930:	4b08      	ldr	r3, [pc, #32]	; (1954 <Print_One_Form_List_Table+0xa8>)
    1932:	4798      	blx	r3
    1934:	e7f4      	b.n	1920 <Print_One_Form_List_Table+0x74>
    1936:	46c0      	nop			; (mov r8, r8)
    1938:	2000022c 	.word	0x2000022c
    193c:	00003ac9 	.word	0x00003ac9
    1940:	20000a4c 	.word	0x20000a4c
    1944:	00003d41 	.word	0x00003d41
    1948:	00003b61 	.word	0x00003b61
    194c:	00003ae9 	.word	0x00003ae9
    1950:	00001871 	.word	0x00001871
    1954:	0000183d 	.word	0x0000183d

00001958 <Print_One_Form_Dev_Time_Table>:

void Print_One_Form_Dev_Time_Table(unsigned char tmp_index)
{
    1958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    195a:	0006      	movs	r6, r0
	UINT16u_t tmp16;
	uTXByte(Debug_COM, 'N');
    195c:	4c12      	ldr	r4, [pc, #72]	; (19a8 <Print_One_Form_Dev_Time_Table+0x50>)
    195e:	214e      	movs	r1, #78	; 0x4e
    1960:	0020      	movs	r0, r4
    1962:	4d12      	ldr	r5, [pc, #72]	; (19ac <Print_One_Form_Dev_Time_Table+0x54>)
    1964:	47a8      	blx	r5
	uTXByte(Debug_COM, 'o');
    1966:	216f      	movs	r1, #111	; 0x6f
    1968:	0020      	movs	r0, r4
    196a:	47a8      	blx	r5
	uTXByte(Debug_COM, '.');
    196c:	212e      	movs	r1, #46	; 0x2e
    196e:	0020      	movs	r0, r4
    1970:	47a8      	blx	r5
	uart_send_word_for_ListNumber(Debug_COM, hex_to_bcd(tmp_index));
    1972:	0030      	movs	r0, r6
    1974:	4f0e      	ldr	r7, [pc, #56]	; (19b0 <Print_One_Form_Dev_Time_Table+0x58>)
    1976:	47b8      	blx	r7
    1978:	0001      	movs	r1, r0
    197a:	0020      	movs	r0, r4
    197c:	4b0d      	ldr	r3, [pc, #52]	; (19b4 <Print_One_Form_Dev_Time_Table+0x5c>)
    197e:	4798      	blx	r3
	uTXByte(Debug_COM, ' ');
    1980:	2120      	movs	r1, #32
    1982:	0020      	movs	r0, r4
    1984:	47a8      	blx	r5
	tmp16.byte[1] = Dev_Time[tmp_index][0];
    1986:	4b0c      	ldr	r3, [pc, #48]	; (19b8 <Print_One_Form_Dev_Time_Table+0x60>)
    1988:	0076      	lsls	r6, r6, #1
    198a:	5cf2      	ldrb	r2, [r6, r3]
	tmp16.byte[0] = Dev_Time[tmp_index][1];
    198c:	199e      	adds	r6, r3, r6
    198e:	7870      	ldrb	r0, [r6, #1]
    1990:	0212      	lsls	r2, r2, #8
	uart_send_word(Debug_COM, hex_to_bcd(tmp16.word));
    1992:	4310      	orrs	r0, r2
    1994:	47b8      	blx	r7
    1996:	0001      	movs	r1, r0
    1998:	0020      	movs	r0, r4
    199a:	4b08      	ldr	r3, [pc, #32]	; (19bc <Print_One_Form_Dev_Time_Table+0x64>)
    199c:	4798      	blx	r3
	uTXByte(Debug_COM, ' ');
    199e:	2120      	movs	r1, #32
    19a0:	0020      	movs	r0, r4
    19a2:	47a8      	blx	r5
}
    19a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19a6:	46c0      	nop			; (mov r8, r8)
    19a8:	2000022c 	.word	0x2000022c
    19ac:	00003ac9 	.word	0x00003ac9
    19b0:	00003d41 	.word	0x00003d41
    19b4:	00003b61 	.word	0x00003b61
    19b8:	20000250 	.word	0x20000250
    19bc:	00003b15 	.word	0x00003b15

000019c0 <Print_Arrow_Right>:

void Print_Arrow_Right(void)
{
    19c0:	b570      	push	{r4, r5, r6, lr}
	uTXByte(Debug_COM, 0x09);
    19c2:	4d09      	ldr	r5, [pc, #36]	; (19e8 <Print_Arrow_Right+0x28>)
    19c4:	2109      	movs	r1, #9
    19c6:	0028      	movs	r0, r5
    19c8:	4c08      	ldr	r4, [pc, #32]	; (19ec <Print_Arrow_Right+0x2c>)
    19ca:	47a0      	blx	r4
	uTXByte(Debug_COM, '-');
    19cc:	212d      	movs	r1, #45	; 0x2d
    19ce:	0028      	movs	r0, r5
    19d0:	47a0      	blx	r4
	uTXByte(Debug_COM, '-');
    19d2:	212d      	movs	r1, #45	; 0x2d
    19d4:	0028      	movs	r0, r5
    19d6:	47a0      	blx	r4
	uTXByte(Debug_COM, '>');
    19d8:	213e      	movs	r1, #62	; 0x3e
    19da:	0028      	movs	r0, r5
    19dc:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x09);
    19de:	2109      	movs	r1, #9
    19e0:	0028      	movs	r0, r5
    19e2:	47a0      	blx	r4
}
    19e4:	bd70      	pop	{r4, r5, r6, pc}
    19e6:	46c0      	nop			; (mov r8, r8)
    19e8:	2000022c 	.word	0x2000022c
    19ec:	00003ac9 	.word	0x00003ac9

000019f0 <Print_MissNode_Form_RX_Msg>:
}



void Print_MissNode_Form_RX_Msg(volatile LORA_DEFINE_t *tmp_LORA)
{
    19f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    19f2:	0006      	movs	r6, r0
	if(tmp_LORA->Lora_Show_Flag == false) return;
    19f4:	4b22      	ldr	r3, [pc, #136]	; (1a80 <Print_MissNode_Form_RX_Msg+0x90>)
    19f6:	5cc3      	ldrb	r3, [r0, r3]
    19f8:	2b00      	cmp	r3, #0
    19fa:	d100      	bne.n	19fe <Print_MissNode_Form_RX_Msg+0xe>
	uTXByte(Debug_COM, 'o');
	uTXByte(Debug_COM, 'd');
	uTXByte(Debug_COM, 'e');
	uTXByte(Debug_COM, 0x0d);
	Print_Line_Msg();
}
    19fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	Print_Line_Msg();
    19fe:	4f21      	ldr	r7, [pc, #132]	; (1a84 <Print_MissNode_Form_RX_Msg+0x94>)
    1a00:	47b8      	blx	r7
	Print_Lora_number(tmp_LORA);
    1a02:	0030      	movs	r0, r6
    1a04:	4b20      	ldr	r3, [pc, #128]	; (1a88 <Print_MissNode_Form_RX_Msg+0x98>)
    1a06:	4798      	blx	r3
	uTXByte(Debug_COM, 'N');
    1a08:	4c20      	ldr	r4, [pc, #128]	; (1a8c <Print_MissNode_Form_RX_Msg+0x9c>)
    1a0a:	214e      	movs	r1, #78	; 0x4e
    1a0c:	0020      	movs	r0, r4
    1a0e:	4d20      	ldr	r5, [pc, #128]	; (1a90 <Print_MissNode_Form_RX_Msg+0xa0>)
    1a10:	47a8      	blx	r5
	uTXByte(Debug_COM, 'o');
    1a12:	216f      	movs	r1, #111	; 0x6f
    1a14:	0020      	movs	r0, r4
    1a16:	47a8      	blx	r5
	uTXByte(Debug_COM, '.');
    1a18:	212e      	movs	r1, #46	; 0x2e
    1a1a:	0020      	movs	r0, r4
    1a1c:	47a8      	blx	r5
	uart_send_word_for_ListNumber(Debug_COM, hex_to_bcd(Dev_List[tmp_LORA->List_Now][0]));
    1a1e:	234f      	movs	r3, #79	; 0x4f
    1a20:	5cf2      	ldrb	r2, [r6, r3]
    1a22:	0053      	lsls	r3, r2, #1
    1a24:	189b      	adds	r3, r3, r2
    1a26:	005b      	lsls	r3, r3, #1
    1a28:	4a1a      	ldr	r2, [pc, #104]	; (1a94 <Print_MissNode_Form_RX_Msg+0xa4>)
    1a2a:	5c98      	ldrb	r0, [r3, r2]
    1a2c:	4b1a      	ldr	r3, [pc, #104]	; (1a98 <Print_MissNode_Form_RX_Msg+0xa8>)
    1a2e:	4798      	blx	r3
    1a30:	0001      	movs	r1, r0
    1a32:	0020      	movs	r0, r4
    1a34:	4b19      	ldr	r3, [pc, #100]	; (1a9c <Print_MissNode_Form_RX_Msg+0xac>)
    1a36:	4798      	blx	r3
	uTXByte(Debug_COM, ' ');
    1a38:	2120      	movs	r1, #32
    1a3a:	0020      	movs	r0, r4
    1a3c:	47a8      	blx	r5
	uTXByte(Debug_COM, 'M');
    1a3e:	214d      	movs	r1, #77	; 0x4d
    1a40:	0020      	movs	r0, r4
    1a42:	47a8      	blx	r5
	uTXByte(Debug_COM, 'i');
    1a44:	2169      	movs	r1, #105	; 0x69
    1a46:	0020      	movs	r0, r4
    1a48:	47a8      	blx	r5
	uTXByte(Debug_COM, 's');
    1a4a:	2173      	movs	r1, #115	; 0x73
    1a4c:	0020      	movs	r0, r4
    1a4e:	47a8      	blx	r5
	uTXByte(Debug_COM, 's');
    1a50:	2173      	movs	r1, #115	; 0x73
    1a52:	0020      	movs	r0, r4
    1a54:	47a8      	blx	r5
	uTXByte(Debug_COM, ' ');
    1a56:	2120      	movs	r1, #32
    1a58:	0020      	movs	r0, r4
    1a5a:	47a8      	blx	r5
	uTXByte(Debug_COM, 'N');
    1a5c:	214e      	movs	r1, #78	; 0x4e
    1a5e:	0020      	movs	r0, r4
    1a60:	47a8      	blx	r5
	uTXByte(Debug_COM, 'o');
    1a62:	216f      	movs	r1, #111	; 0x6f
    1a64:	0020      	movs	r0, r4
    1a66:	47a8      	blx	r5
	uTXByte(Debug_COM, 'd');
    1a68:	2164      	movs	r1, #100	; 0x64
    1a6a:	0020      	movs	r0, r4
    1a6c:	47a8      	blx	r5
	uTXByte(Debug_COM, 'e');
    1a6e:	2165      	movs	r1, #101	; 0x65
    1a70:	0020      	movs	r0, r4
    1a72:	47a8      	blx	r5
	uTXByte(Debug_COM, 0x0d);
    1a74:	210d      	movs	r1, #13
    1a76:	0020      	movs	r0, r4
    1a78:	47a8      	blx	r5
	Print_Line_Msg();
    1a7a:	47b8      	blx	r7
    1a7c:	e7be      	b.n	19fc <Print_MissNode_Form_RX_Msg+0xc>
    1a7e:	46c0      	nop			; (mov r8, r8)
    1a80:	0000021a 	.word	0x0000021a
    1a84:	00001771 	.word	0x00001771
    1a88:	000016f9 	.word	0x000016f9
    1a8c:	2000022c 	.word	0x2000022c
    1a90:	00003ac9 	.word	0x00003ac9
    1a94:	20000a4c 	.word	0x20000a4c
    1a98:	00003d41 	.word	0x00003d41
    1a9c:	00003b61 	.word	0x00003b61

00001aa0 <Print_Catch_Data_Form_RX_Msg>:




void Print_Catch_Data_Form_RX_Msg(volatile LORA_DEFINE_t *tmp_LORA)
{
    1aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1aa2:	0006      	movs	r6, r0
	UINT16u_t tmp16;
	
	if(tmp_LORA->Lora_Show_Flag == false) return;
    1aa4:	4b2c      	ldr	r3, [pc, #176]	; (1b58 <Print_Catch_Data_Form_RX_Msg+0xb8>)
    1aa6:	5cc3      	ldrb	r3, [r0, r3]
    1aa8:	2b00      	cmp	r3, #0
    1aaa:	d100      	bne.n	1aae <Print_Catch_Data_Form_RX_Msg+0xe>
	tmp16.byte[0] = dev_value[tmp_LORA->List_Now][28];
	tmp16.word = 65536 - tmp16.word;
	Print_One_RSSI_Msg(tmp16.word);
	uTXByte(Debug_COM, 0x0d);
	Print_Line_Msg();
}
    1aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	Print_Line_Msg();
    1aae:	4b2b      	ldr	r3, [pc, #172]	; (1b5c <Print_Catch_Data_Form_RX_Msg+0xbc>)
    1ab0:	4798      	blx	r3
	Print_Lora_number(tmp_LORA);
    1ab2:	0030      	movs	r0, r6
    1ab4:	4b2a      	ldr	r3, [pc, #168]	; (1b60 <Print_Catch_Data_Form_RX_Msg+0xc0>)
    1ab6:	4798      	blx	r3
	uTXByte(Debug_COM, 'N');
    1ab8:	4c2a      	ldr	r4, [pc, #168]	; (1b64 <Print_Catch_Data_Form_RX_Msg+0xc4>)
    1aba:	214e      	movs	r1, #78	; 0x4e
    1abc:	0020      	movs	r0, r4
    1abe:	4d2a      	ldr	r5, [pc, #168]	; (1b68 <Print_Catch_Data_Form_RX_Msg+0xc8>)
    1ac0:	47a8      	blx	r5
	uTXByte(Debug_COM, 'o');
    1ac2:	216f      	movs	r1, #111	; 0x6f
    1ac4:	0020      	movs	r0, r4
    1ac6:	47a8      	blx	r5
	uTXByte(Debug_COM, '.');
    1ac8:	212e      	movs	r1, #46	; 0x2e
    1aca:	0020      	movs	r0, r4
    1acc:	47a8      	blx	r5
	uart_send_word_for_ListNumber(Debug_COM, hex_to_bcd(Dev_List[tmp_LORA->List_Now][0]));
    1ace:	234f      	movs	r3, #79	; 0x4f
    1ad0:	5cf2      	ldrb	r2, [r6, r3]
    1ad2:	0053      	lsls	r3, r2, #1
    1ad4:	189b      	adds	r3, r3, r2
    1ad6:	005b      	lsls	r3, r3, #1
    1ad8:	4a24      	ldr	r2, [pc, #144]	; (1b6c <Print_Catch_Data_Form_RX_Msg+0xcc>)
    1ada:	5c98      	ldrb	r0, [r3, r2]
    1adc:	4b24      	ldr	r3, [pc, #144]	; (1b70 <Print_Catch_Data_Form_RX_Msg+0xd0>)
    1ade:	4798      	blx	r3
    1ae0:	0001      	movs	r1, r0
    1ae2:	0020      	movs	r0, r4
    1ae4:	4b23      	ldr	r3, [pc, #140]	; (1b74 <Print_Catch_Data_Form_RX_Msg+0xd4>)
    1ae6:	4798      	blx	r3
	uTXByte(Debug_COM, ' ');
    1ae8:	2120      	movs	r1, #32
    1aea:	0020      	movs	r0, r4
    1aec:	47a8      	blx	r5
    1aee:	2500      	movs	r5, #0
		uart_send_ascii_byte(Debug_COM, dev_value[tmp_LORA->List_Now][i]);
    1af0:	4c21      	ldr	r4, [pc, #132]	; (1b78 <Print_Catch_Data_Form_RX_Msg+0xd8>)
    1af2:	4f22      	ldr	r7, [pc, #136]	; (1b7c <Print_Catch_Data_Form_RX_Msg+0xdc>)
    1af4:	234f      	movs	r3, #79	; 0x4f
    1af6:	5cf2      	ldrb	r2, [r6, r3]
    1af8:	b2d2      	uxtb	r2, r2
    1afa:	00d3      	lsls	r3, r2, #3
    1afc:	189b      	adds	r3, r3, r2
    1afe:	009b      	lsls	r3, r3, #2
    1b00:	189b      	adds	r3, r3, r2
    1b02:	18e3      	adds	r3, r4, r3
    1b04:	5d59      	ldrb	r1, [r3, r5]
    1b06:	4817      	ldr	r0, [pc, #92]	; (1b64 <Print_Catch_Data_Form_RX_Msg+0xc4>)
    1b08:	47b8      	blx	r7
		uTXByte(Debug_COM, ' ');
    1b0a:	2120      	movs	r1, #32
    1b0c:	4815      	ldr	r0, [pc, #84]	; (1b64 <Print_Catch_Data_Form_RX_Msg+0xc4>)
    1b0e:	4b16      	ldr	r3, [pc, #88]	; (1b68 <Print_Catch_Data_Form_RX_Msg+0xc8>)
    1b10:	4798      	blx	r3
    1b12:	3501      	adds	r5, #1
	for(unsigned char i = 0; i < dev_value_data_max; i++)
    1b14:	2d25      	cmp	r5, #37	; 0x25
    1b16:	d1ed      	bne.n	1af4 <Print_Catch_Data_Form_RX_Msg+0x54>
	tmp16.byte[1] = dev_value[tmp_LORA->List_Now][27];
    1b18:	204f      	movs	r0, #79	; 0x4f
    1b1a:	5c32      	ldrb	r2, [r6, r0]
    1b1c:	b2d2      	uxtb	r2, r2
    1b1e:	4916      	ldr	r1, [pc, #88]	; (1b78 <Print_Catch_Data_Form_RX_Msg+0xd8>)
    1b20:	00d3      	lsls	r3, r2, #3
    1b22:	189b      	adds	r3, r3, r2
    1b24:	009b      	lsls	r3, r3, #2
    1b26:	189b      	adds	r3, r3, r2
    1b28:	18cb      	adds	r3, r1, r3
    1b2a:	7edc      	ldrb	r4, [r3, #27]
	tmp16.byte[0] = dev_value[tmp_LORA->List_Now][28];
    1b2c:	5c32      	ldrb	r2, [r6, r0]
    1b2e:	b2d2      	uxtb	r2, r2
    1b30:	00d3      	lsls	r3, r2, #3
    1b32:	189b      	adds	r3, r3, r2
    1b34:	009b      	lsls	r3, r3, #2
    1b36:	189b      	adds	r3, r3, r2
    1b38:	18cb      	adds	r3, r1, r3
    1b3a:	7f18      	ldrb	r0, [r3, #28]
    1b3c:	0224      	lsls	r4, r4, #8
    1b3e:	4320      	orrs	r0, r4
	tmp16.word = 65536 - tmp16.word;
    1b40:	4240      	negs	r0, r0
	Print_One_RSSI_Msg(tmp16.word);
    1b42:	b280      	uxth	r0, r0
    1b44:	4b0e      	ldr	r3, [pc, #56]	; (1b80 <Print_Catch_Data_Form_RX_Msg+0xe0>)
    1b46:	4798      	blx	r3
	uTXByte(Debug_COM, 0x0d);
    1b48:	210d      	movs	r1, #13
    1b4a:	4806      	ldr	r0, [pc, #24]	; (1b64 <Print_Catch_Data_Form_RX_Msg+0xc4>)
    1b4c:	4b06      	ldr	r3, [pc, #24]	; (1b68 <Print_Catch_Data_Form_RX_Msg+0xc8>)
    1b4e:	4798      	blx	r3
	Print_Line_Msg();
    1b50:	4b02      	ldr	r3, [pc, #8]	; (1b5c <Print_Catch_Data_Form_RX_Msg+0xbc>)
    1b52:	4798      	blx	r3
    1b54:	e7aa      	b.n	1aac <Print_Catch_Data_Form_RX_Msg+0xc>
    1b56:	46c0      	nop			; (mov r8, r8)
    1b58:	0000021a 	.word	0x0000021a
    1b5c:	00001771 	.word	0x00001771
    1b60:	000016f9 	.word	0x000016f9
    1b64:	2000022c 	.word	0x2000022c
    1b68:	00003ac9 	.word	0x00003ac9
    1b6c:	20000a4c 	.word	0x20000a4c
    1b70:	00003d41 	.word	0x00003d41
    1b74:	00003b61 	.word	0x00003b61
    1b78:	20001070 	.word	0x20001070
    1b7c:	00003ae9 	.word	0x00003ae9
    1b80:	00003441 	.word	0x00003441

00001b84 <Print_Now_And_Next_Msg>:




void Print_Now_And_Next_Msg(volatile LORA_DEFINE_t *tmp_LORA)
{
    1b84:	b570      	push	{r4, r5, r6, lr}
    1b86:	0006      	movs	r6, r0
	if(tmp_LORA->Lora_Show_Flag == false) return;
    1b88:	4b15      	ldr	r3, [pc, #84]	; (1be0 <Print_Now_And_Next_Msg+0x5c>)
    1b8a:	5cc3      	ldrb	r3, [r0, r3]
    1b8c:	2b00      	cmp	r3, #0
    1b8e:	d100      	bne.n	1b92 <Print_Now_And_Next_Msg+0xe>
	uTXByte(Debug_COM, 'd');
	uTXByte(Debug_COM, ':');
	uTXByte(Debug_COM, ' ');
	uart_send_word_for_ListNumber(Debug_COM, hex_to_bcd(tmp_LORA->List_Now));
	uTXByte(Debug_COM, 0x0d);
}
    1b90:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'U');
    1b92:	4c14      	ldr	r4, [pc, #80]	; (1be4 <Print_Now_And_Next_Msg+0x60>)
    1b94:	2155      	movs	r1, #85	; 0x55
    1b96:	0020      	movs	r0, r4
    1b98:	4d13      	ldr	r5, [pc, #76]	; (1be8 <Print_Now_And_Next_Msg+0x64>)
    1b9a:	47a8      	blx	r5
	uTXByte(Debug_COM, 'p');
    1b9c:	2170      	movs	r1, #112	; 0x70
    1b9e:	0020      	movs	r0, r4
    1ba0:	47a8      	blx	r5
	uTXByte(Debug_COM, 'L');
    1ba2:	214c      	movs	r1, #76	; 0x4c
    1ba4:	0020      	movs	r0, r4
    1ba6:	47a8      	blx	r5
	uTXByte(Debug_COM, 'o');
    1ba8:	216f      	movs	r1, #111	; 0x6f
    1baa:	0020      	movs	r0, r4
    1bac:	47a8      	blx	r5
	uTXByte(Debug_COM, 'a');
    1bae:	2161      	movs	r1, #97	; 0x61
    1bb0:	0020      	movs	r0, r4
    1bb2:	47a8      	blx	r5
	uTXByte(Debug_COM, 'd');
    1bb4:	2164      	movs	r1, #100	; 0x64
    1bb6:	0020      	movs	r0, r4
    1bb8:	47a8      	blx	r5
	uTXByte(Debug_COM, ':');
    1bba:	213a      	movs	r1, #58	; 0x3a
    1bbc:	0020      	movs	r0, r4
    1bbe:	47a8      	blx	r5
	uTXByte(Debug_COM, ' ');
    1bc0:	2120      	movs	r1, #32
    1bc2:	0020      	movs	r0, r4
    1bc4:	47a8      	blx	r5
	uart_send_word_for_ListNumber(Debug_COM, hex_to_bcd(tmp_LORA->List_Now));
    1bc6:	234f      	movs	r3, #79	; 0x4f
    1bc8:	5cf0      	ldrb	r0, [r6, r3]
    1bca:	b2c0      	uxtb	r0, r0
    1bcc:	4b07      	ldr	r3, [pc, #28]	; (1bec <Print_Now_And_Next_Msg+0x68>)
    1bce:	4798      	blx	r3
    1bd0:	0001      	movs	r1, r0
    1bd2:	0020      	movs	r0, r4
    1bd4:	4b06      	ldr	r3, [pc, #24]	; (1bf0 <Print_Now_And_Next_Msg+0x6c>)
    1bd6:	4798      	blx	r3
	uTXByte(Debug_COM, 0x0d);
    1bd8:	210d      	movs	r1, #13
    1bda:	0020      	movs	r0, r4
    1bdc:	47a8      	blx	r5
    1bde:	e7d7      	b.n	1b90 <Print_Now_And_Next_Msg+0xc>
    1be0:	0000021a 	.word	0x0000021a
    1be4:	2000022c 	.word	0x2000022c
    1be8:	00003ac9 	.word	0x00003ac9
    1bec:	00003d41 	.word	0x00003d41
    1bf0:	00003b61 	.word	0x00003b61

00001bf4 <Print_Send_Dev_No_Msg>:



void Print_Send_Dev_No_Msg(volatile LORA_DEFINE_t *tmp_LORA)
{
    1bf4:	b570      	push	{r4, r5, r6, lr}
    1bf6:	0006      	movs	r6, r0
	if(tmp_LORA->Lora_Show_Flag == false) return;
    1bf8:	4b12      	ldr	r3, [pc, #72]	; (1c44 <Print_Send_Dev_No_Msg+0x50>)
    1bfa:	5cc3      	ldrb	r3, [r0, r3]
    1bfc:	2b00      	cmp	r3, #0
    1bfe:	d100      	bne.n	1c02 <Print_Send_Dev_No_Msg+0xe>
	uTXByte(Debug_COM, 'd');
	uTXByte(Debug_COM, ':');
	uTXByte(Debug_COM, ' ');
	uart_send_word_for_ListNumber(Debug_COM, hex_to_bcd(tmp_LORA->List_Now));
	uTXByte(Debug_COM, 0x0d);
    1c00:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'S');
    1c02:	4c11      	ldr	r4, [pc, #68]	; (1c48 <Print_Send_Dev_No_Msg+0x54>)
    1c04:	2153      	movs	r1, #83	; 0x53
    1c06:	0020      	movs	r0, r4
    1c08:	4d10      	ldr	r5, [pc, #64]	; (1c4c <Print_Send_Dev_No_Msg+0x58>)
    1c0a:	47a8      	blx	r5
	uTXByte(Debug_COM, 'e');
    1c0c:	2165      	movs	r1, #101	; 0x65
    1c0e:	0020      	movs	r0, r4
    1c10:	47a8      	blx	r5
	uTXByte(Debug_COM, 'n');
    1c12:	216e      	movs	r1, #110	; 0x6e
    1c14:	0020      	movs	r0, r4
    1c16:	47a8      	blx	r5
	uTXByte(Debug_COM, 'd');
    1c18:	2164      	movs	r1, #100	; 0x64
    1c1a:	0020      	movs	r0, r4
    1c1c:	47a8      	blx	r5
	uTXByte(Debug_COM, ':');
    1c1e:	213a      	movs	r1, #58	; 0x3a
    1c20:	0020      	movs	r0, r4
    1c22:	47a8      	blx	r5
	uTXByte(Debug_COM, ' ');
    1c24:	2120      	movs	r1, #32
    1c26:	0020      	movs	r0, r4
    1c28:	47a8      	blx	r5
	uart_send_word_for_ListNumber(Debug_COM, hex_to_bcd(tmp_LORA->List_Now));
    1c2a:	234f      	movs	r3, #79	; 0x4f
    1c2c:	5cf0      	ldrb	r0, [r6, r3]
    1c2e:	b2c0      	uxtb	r0, r0
    1c30:	4b07      	ldr	r3, [pc, #28]	; (1c50 <Print_Send_Dev_No_Msg+0x5c>)
    1c32:	4798      	blx	r3
    1c34:	0001      	movs	r1, r0
    1c36:	0020      	movs	r0, r4
    1c38:	4b06      	ldr	r3, [pc, #24]	; (1c54 <Print_Send_Dev_No_Msg+0x60>)
    1c3a:	4798      	blx	r3
	uTXByte(Debug_COM, 0x0d);
    1c3c:	210d      	movs	r1, #13
    1c3e:	0020      	movs	r0, r4
    1c40:	47a8      	blx	r5
    1c42:	e7dd      	b.n	1c00 <Print_Send_Dev_No_Msg+0xc>
    1c44:	0000021a 	.word	0x0000021a
    1c48:	2000022c 	.word	0x2000022c
    1c4c:	00003ac9 	.word	0x00003ac9
    1c50:	00003d41 	.word	0x00003d41
    1c54:	00003b61 	.word	0x00003b61

00001c58 <watchdog_early_warning_callback>:


void watchdog_early_warning_callback(void)
{
	
}
    1c58:	4770      	bx	lr
	...

00001c5c <configure_wdt>:

void configure_wdt(void)
{
    1c5c:	b500      	push	{lr}
    1c5e:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->always_on            = false;
    1c60:	2300      	movs	r3, #0
    1c62:	466a      	mov	r2, sp
    1c64:	7013      	strb	r3, [r2, #0]
	config->enable               = true;
    1c66:	2201      	movs	r2, #1
    1c68:	4669      	mov	r1, sp
    1c6a:	704a      	strb	r2, [r1, #1]
#if !(SAML21) && !(SAML22) && !(SAMC20) && !(SAMC21) && !(SAMR30)
	config->clock_source         = GCLK_GENERATOR_4;
    1c6c:	3203      	adds	r2, #3
    1c6e:	708a      	strb	r2, [r1, #2]
#endif
	config->timeout_period       = WDT_PERIOD_16384CLK;
	config->window_period        = WDT_PERIOD_NONE;
    1c70:	710b      	strb	r3, [r1, #4]
	config_wdt.always_on            = false;
#if !((SAML21) || (SAMC21) || (SAML22) || (SAMR30))
	config_wdt.clock_source         = GCLK_GENERATOR_4;
#endif
	//config_wdt.timeout_period       = WDT_PERIOD_4096CLK;
	config_wdt.timeout_period       = WDT_PERIOD_8192CLK;
    1c72:	330b      	adds	r3, #11
    1c74:	70cb      	strb	r3, [r1, #3]
	config_wdt.early_warning_period = WDT_PERIOD_2048CLK;
    1c76:	3b02      	subs	r3, #2
    1c78:	714b      	strb	r3, [r1, #5]
	//! [setup_3]

	/* Initialize and enable the Watchdog with the user settings */
	//! [setup_4]
	wdt_set_config(&config_wdt);
    1c7a:	4668      	mov	r0, sp
    1c7c:	4b01      	ldr	r3, [pc, #4]	; (1c84 <configure_wdt+0x28>)
    1c7e:	4798      	blx	r3
	//! [setup_4]
}
    1c80:	b003      	add	sp, #12
    1c82:	bd00      	pop	{pc}
    1c84:	000021f9 	.word	0x000021f9

00001c88 <configure_wdt_callbacks>:

void configure_wdt_callbacks(void)
{
    1c88:	b510      	push	{r4, lr}
	//! [setup_5]
	wdt_register_callback(watchdog_early_warning_callback,
    1c8a:	2100      	movs	r1, #0
    1c8c:	4803      	ldr	r0, [pc, #12]	; (1c9c <configure_wdt_callbacks+0x14>)
    1c8e:	4b04      	ldr	r3, [pc, #16]	; (1ca0 <configure_wdt_callbacks+0x18>)
    1c90:	4798      	blx	r3
		WDT_CALLBACK_EARLY_WARNING);
	//! [setup_5]

	//! [setup_6]
	wdt_enable_callback(WDT_CALLBACK_EARLY_WARNING);
    1c92:	2000      	movs	r0, #0
    1c94:	4b03      	ldr	r3, [pc, #12]	; (1ca4 <configure_wdt_callbacks+0x1c>)
    1c96:	4798      	blx	r3
	//! [setup_6]
}
    1c98:	bd10      	pop	{r4, pc}
    1c9a:	46c0      	nop			; (mov r8, r8)
    1c9c:	00001c59 	.word	0x00001c59
    1ca0:	00002311 	.word	0x00002311
    1ca4:	00002325 	.word	0x00002325

00001ca8 <extint_register_callback>:
    1ca8:	2317      	movs	r3, #23
    1caa:	2a00      	cmp	r2, #0
    1cac:	d001      	beq.n	1cb2 <extint_register_callback+0xa>
    1cae:	0018      	movs	r0, r3
    1cb0:	4770      	bx	lr
    1cb2:	008b      	lsls	r3, r1, #2
    1cb4:	4a06      	ldr	r2, [pc, #24]	; (1cd0 <extint_register_callback+0x28>)
    1cb6:	589b      	ldr	r3, [r3, r2]
    1cb8:	2b00      	cmp	r3, #0
    1cba:	d003      	beq.n	1cc4 <extint_register_callback+0x1c>
    1cbc:	4283      	cmp	r3, r0
    1cbe:	d005      	beq.n	1ccc <extint_register_callback+0x24>
    1cc0:	231d      	movs	r3, #29
    1cc2:	e7f4      	b.n	1cae <extint_register_callback+0x6>
    1cc4:	0089      	lsls	r1, r1, #2
    1cc6:	5088      	str	r0, [r1, r2]
    1cc8:	2300      	movs	r3, #0
    1cca:	e7f0      	b.n	1cae <extint_register_callback+0x6>
    1ccc:	2300      	movs	r3, #0
    1cce:	e7ee      	b.n	1cae <extint_register_callback+0x6>
    1cd0:	20003580 	.word	0x20003580

00001cd4 <extint_chan_enable_callback>:
    1cd4:	2317      	movs	r3, #23
    1cd6:	2900      	cmp	r1, #0
    1cd8:	d001      	beq.n	1cde <extint_chan_enable_callback+0xa>
    1cda:	0018      	movs	r0, r3
    1cdc:	4770      	bx	lr
    1cde:	2200      	movs	r2, #0
    1ce0:	281f      	cmp	r0, #31
    1ce2:	d800      	bhi.n	1ce6 <extint_chan_enable_callback+0x12>
    1ce4:	4a02      	ldr	r2, [pc, #8]	; (1cf0 <extint_chan_enable_callback+0x1c>)
    1ce6:	2301      	movs	r3, #1
    1ce8:	4083      	lsls	r3, r0
    1cea:	60d3      	str	r3, [r2, #12]
    1cec:	2300      	movs	r3, #0
    1cee:	e7f4      	b.n	1cda <extint_chan_enable_callback+0x6>
    1cf0:	40001800 	.word	0x40001800

00001cf4 <EIC_Handler>:
    1cf4:	b570      	push	{r4, r5, r6, lr}
    1cf6:	2200      	movs	r2, #0
    1cf8:	4b10      	ldr	r3, [pc, #64]	; (1d3c <EIC_Handler+0x48>)
    1cfa:	701a      	strb	r2, [r3, #0]
    1cfc:	2300      	movs	r3, #0
    1cfe:	4910      	ldr	r1, [pc, #64]	; (1d40 <EIC_Handler+0x4c>)
    1d00:	251f      	movs	r5, #31
    1d02:	4e10      	ldr	r6, [pc, #64]	; (1d44 <EIC_Handler+0x50>)
    1d04:	4c0d      	ldr	r4, [pc, #52]	; (1d3c <EIC_Handler+0x48>)
    1d06:	e00a      	b.n	1d1e <EIC_Handler+0x2a>
    1d08:	490d      	ldr	r1, [pc, #52]	; (1d40 <EIC_Handler+0x4c>)
    1d0a:	e008      	b.n	1d1e <EIC_Handler+0x2a>
    1d0c:	7823      	ldrb	r3, [r4, #0]
    1d0e:	3301      	adds	r3, #1
    1d10:	b2db      	uxtb	r3, r3
    1d12:	7023      	strb	r3, [r4, #0]
    1d14:	2b0f      	cmp	r3, #15
    1d16:	d810      	bhi.n	1d3a <EIC_Handler+0x46>
    1d18:	2100      	movs	r1, #0
    1d1a:	2b1f      	cmp	r3, #31
    1d1c:	d9f4      	bls.n	1d08 <EIC_Handler+0x14>
    1d1e:	0028      	movs	r0, r5
    1d20:	4018      	ands	r0, r3
    1d22:	2201      	movs	r2, #1
    1d24:	4082      	lsls	r2, r0
    1d26:	6908      	ldr	r0, [r1, #16]
    1d28:	4210      	tst	r0, r2
    1d2a:	d0ef      	beq.n	1d0c <EIC_Handler+0x18>
    1d2c:	610a      	str	r2, [r1, #16]
    1d2e:	009b      	lsls	r3, r3, #2
    1d30:	599b      	ldr	r3, [r3, r6]
    1d32:	2b00      	cmp	r3, #0
    1d34:	d0ea      	beq.n	1d0c <EIC_Handler+0x18>
    1d36:	4798      	blx	r3
    1d38:	e7e8      	b.n	1d0c <EIC_Handler+0x18>
    1d3a:	bd70      	pop	{r4, r5, r6, pc}
    1d3c:	2000357c 	.word	0x2000357c
    1d40:	40001800 	.word	0x40001800
    1d44:	20003580 	.word	0x20003580

00001d48 <_extint_enable>:
    1d48:	4a04      	ldr	r2, [pc, #16]	; (1d5c <_extint_enable+0x14>)
    1d4a:	7813      	ldrb	r3, [r2, #0]
    1d4c:	2102      	movs	r1, #2
    1d4e:	430b      	orrs	r3, r1
    1d50:	7013      	strb	r3, [r2, #0]
    1d52:	7853      	ldrb	r3, [r2, #1]
    1d54:	b25b      	sxtb	r3, r3
    1d56:	2b00      	cmp	r3, #0
    1d58:	dbfb      	blt.n	1d52 <_extint_enable+0xa>
    1d5a:	4770      	bx	lr
    1d5c:	40001800 	.word	0x40001800

00001d60 <_system_extint_init>:
    1d60:	b500      	push	{lr}
    1d62:	b083      	sub	sp, #12
    1d64:	4a12      	ldr	r2, [pc, #72]	; (1db0 <_system_extint_init+0x50>)
    1d66:	6993      	ldr	r3, [r2, #24]
    1d68:	2140      	movs	r1, #64	; 0x40
    1d6a:	430b      	orrs	r3, r1
    1d6c:	6193      	str	r3, [r2, #24]
    1d6e:	a901      	add	r1, sp, #4
    1d70:	2300      	movs	r3, #0
    1d72:	700b      	strb	r3, [r1, #0]
    1d74:	2003      	movs	r0, #3
    1d76:	4b0f      	ldr	r3, [pc, #60]	; (1db4 <_system_extint_init+0x54>)
    1d78:	4798      	blx	r3
    1d7a:	2003      	movs	r0, #3
    1d7c:	4b0e      	ldr	r3, [pc, #56]	; (1db8 <_system_extint_init+0x58>)
    1d7e:	4798      	blx	r3
    1d80:	4a0e      	ldr	r2, [pc, #56]	; (1dbc <_system_extint_init+0x5c>)
    1d82:	7813      	ldrb	r3, [r2, #0]
    1d84:	2101      	movs	r1, #1
    1d86:	430b      	orrs	r3, r1
    1d88:	7013      	strb	r3, [r2, #0]
    1d8a:	7853      	ldrb	r3, [r2, #1]
    1d8c:	b25b      	sxtb	r3, r3
    1d8e:	2b00      	cmp	r3, #0
    1d90:	dbfb      	blt.n	1d8a <_system_extint_init+0x2a>
    1d92:	4b0b      	ldr	r3, [pc, #44]	; (1dc0 <_system_extint_init+0x60>)
    1d94:	0019      	movs	r1, r3
    1d96:	3140      	adds	r1, #64	; 0x40
    1d98:	2200      	movs	r2, #0
    1d9a:	c304      	stmia	r3!, {r2}
    1d9c:	4299      	cmp	r1, r3
    1d9e:	d1fc      	bne.n	1d9a <_system_extint_init+0x3a>
    1da0:	2210      	movs	r2, #16
    1da2:	4b08      	ldr	r3, [pc, #32]	; (1dc4 <_system_extint_init+0x64>)
    1da4:	601a      	str	r2, [r3, #0]
    1da6:	4b08      	ldr	r3, [pc, #32]	; (1dc8 <_system_extint_init+0x68>)
    1da8:	4798      	blx	r3
    1daa:	b003      	add	sp, #12
    1dac:	bd00      	pop	{pc}
    1dae:	46c0      	nop			; (mov r8, r8)
    1db0:	40000400 	.word	0x40000400
    1db4:	00004ca1 	.word	0x00004ca1
    1db8:	00004c15 	.word	0x00004c15
    1dbc:	40001800 	.word	0x40001800
    1dc0:	20003580 	.word	0x20003580
    1dc4:	e000e100 	.word	0xe000e100
    1dc8:	00001d49 	.word	0x00001d49

00001dcc <extint_chan_get_config_defaults>:
    1dcc:	2300      	movs	r3, #0
    1dce:	6003      	str	r3, [r0, #0]
    1dd0:	6043      	str	r3, [r0, #4]
    1dd2:	2201      	movs	r2, #1
    1dd4:	7202      	strb	r2, [r0, #8]
    1dd6:	7242      	strb	r2, [r0, #9]
    1dd8:	7283      	strb	r3, [r0, #10]
    1dda:	3302      	adds	r3, #2
    1ddc:	72c3      	strb	r3, [r0, #11]
    1dde:	4770      	bx	lr

00001de0 <extint_chan_set_config>:
    1de0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1de2:	b083      	sub	sp, #12
    1de4:	0005      	movs	r5, r0
    1de6:	000c      	movs	r4, r1
    1de8:	a901      	add	r1, sp, #4
    1dea:	2300      	movs	r3, #0
    1dec:	704b      	strb	r3, [r1, #1]
    1dee:	70cb      	strb	r3, [r1, #3]
    1df0:	7923      	ldrb	r3, [r4, #4]
    1df2:	700b      	strb	r3, [r1, #0]
    1df4:	7a23      	ldrb	r3, [r4, #8]
    1df6:	708b      	strb	r3, [r1, #2]
    1df8:	7820      	ldrb	r0, [r4, #0]
    1dfa:	4b15      	ldr	r3, [pc, #84]	; (1e50 <extint_chan_set_config+0x70>)
    1dfc:	4798      	blx	r3
    1dfe:	2000      	movs	r0, #0
    1e00:	2d1f      	cmp	r5, #31
    1e02:	d800      	bhi.n	1e06 <extint_chan_set_config+0x26>
    1e04:	4813      	ldr	r0, [pc, #76]	; (1e54 <extint_chan_set_config+0x74>)
    1e06:	2207      	movs	r2, #7
    1e08:	402a      	ands	r2, r5
    1e0a:	0092      	lsls	r2, r2, #2
    1e0c:	7ae7      	ldrb	r7, [r4, #11]
    1e0e:	7aa3      	ldrb	r3, [r4, #10]
    1e10:	2b00      	cmp	r3, #0
    1e12:	d001      	beq.n	1e18 <extint_chan_set_config+0x38>
    1e14:	2308      	movs	r3, #8
    1e16:	431f      	orrs	r7, r3
    1e18:	08eb      	lsrs	r3, r5, #3
    1e1a:	009b      	lsls	r3, r3, #2
    1e1c:	18c3      	adds	r3, r0, r3
    1e1e:	6999      	ldr	r1, [r3, #24]
    1e20:	260f      	movs	r6, #15
    1e22:	4096      	lsls	r6, r2
    1e24:	43b1      	bics	r1, r6
    1e26:	4097      	lsls	r7, r2
    1e28:	003a      	movs	r2, r7
    1e2a:	430a      	orrs	r2, r1
    1e2c:	619a      	str	r2, [r3, #24]
    1e2e:	7a63      	ldrb	r3, [r4, #9]
    1e30:	2b00      	cmp	r3, #0
    1e32:	d106      	bne.n	1e42 <extint_chan_set_config+0x62>
    1e34:	6943      	ldr	r3, [r0, #20]
    1e36:	2201      	movs	r2, #1
    1e38:	40aa      	lsls	r2, r5
    1e3a:	4393      	bics	r3, r2
    1e3c:	6143      	str	r3, [r0, #20]
    1e3e:	b003      	add	sp, #12
    1e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e42:	6942      	ldr	r2, [r0, #20]
    1e44:	2301      	movs	r3, #1
    1e46:	40ab      	lsls	r3, r5
    1e48:	4313      	orrs	r3, r2
    1e4a:	6143      	str	r3, [r0, #20]
    1e4c:	e7f7      	b.n	1e3e <extint_chan_set_config+0x5e>
    1e4e:	46c0      	nop			; (mov r8, r8)
    1e50:	00004dc9 	.word	0x00004dc9
    1e54:	40001800 	.word	0x40001800

00001e58 <tc_register_callback>:
    1e58:	1c93      	adds	r3, r2, #2
    1e5a:	009b      	lsls	r3, r3, #2
    1e5c:	5019      	str	r1, [r3, r0]
    1e5e:	2a02      	cmp	r2, #2
    1e60:	d009      	beq.n	1e76 <tc_register_callback+0x1e>
    1e62:	2a03      	cmp	r2, #3
    1e64:	d00c      	beq.n	1e80 <tc_register_callback+0x28>
    1e66:	2301      	movs	r3, #1
    1e68:	4093      	lsls	r3, r2
    1e6a:	001a      	movs	r2, r3
    1e6c:	7e03      	ldrb	r3, [r0, #24]
    1e6e:	4313      	orrs	r3, r2
    1e70:	7603      	strb	r3, [r0, #24]
    1e72:	2000      	movs	r0, #0
    1e74:	4770      	bx	lr
    1e76:	7e03      	ldrb	r3, [r0, #24]
    1e78:	2210      	movs	r2, #16
    1e7a:	4313      	orrs	r3, r2
    1e7c:	7603      	strb	r3, [r0, #24]
    1e7e:	e7f8      	b.n	1e72 <tc_register_callback+0x1a>
    1e80:	7e03      	ldrb	r3, [r0, #24]
    1e82:	2220      	movs	r2, #32
    1e84:	4313      	orrs	r3, r2
    1e86:	7603      	strb	r3, [r0, #24]
    1e88:	e7f3      	b.n	1e72 <tc_register_callback+0x1a>
	...

00001e8c <_tc_interrupt_handler>:
    1e8c:	b570      	push	{r4, r5, r6, lr}
    1e8e:	0080      	lsls	r0, r0, #2
    1e90:	4b16      	ldr	r3, [pc, #88]	; (1eec <_tc_interrupt_handler+0x60>)
    1e92:	58c4      	ldr	r4, [r0, r3]
    1e94:	6823      	ldr	r3, [r4, #0]
    1e96:	7b9d      	ldrb	r5, [r3, #14]
    1e98:	7e22      	ldrb	r2, [r4, #24]
    1e9a:	7e63      	ldrb	r3, [r4, #25]
    1e9c:	4013      	ands	r3, r2
    1e9e:	401d      	ands	r5, r3
    1ea0:	07eb      	lsls	r3, r5, #31
    1ea2:	d406      	bmi.n	1eb2 <_tc_interrupt_handler+0x26>
    1ea4:	07ab      	lsls	r3, r5, #30
    1ea6:	d40b      	bmi.n	1ec0 <_tc_interrupt_handler+0x34>
    1ea8:	06eb      	lsls	r3, r5, #27
    1eaa:	d410      	bmi.n	1ece <_tc_interrupt_handler+0x42>
    1eac:	06ab      	lsls	r3, r5, #26
    1eae:	d415      	bmi.n	1edc <_tc_interrupt_handler+0x50>
    1eb0:	bd70      	pop	{r4, r5, r6, pc}
    1eb2:	0020      	movs	r0, r4
    1eb4:	68a3      	ldr	r3, [r4, #8]
    1eb6:	4798      	blx	r3
    1eb8:	2301      	movs	r3, #1
    1eba:	6822      	ldr	r2, [r4, #0]
    1ebc:	7393      	strb	r3, [r2, #14]
    1ebe:	e7f1      	b.n	1ea4 <_tc_interrupt_handler+0x18>
    1ec0:	0020      	movs	r0, r4
    1ec2:	68e3      	ldr	r3, [r4, #12]
    1ec4:	4798      	blx	r3
    1ec6:	2302      	movs	r3, #2
    1ec8:	6822      	ldr	r2, [r4, #0]
    1eca:	7393      	strb	r3, [r2, #14]
    1ecc:	e7ec      	b.n	1ea8 <_tc_interrupt_handler+0x1c>
    1ece:	0020      	movs	r0, r4
    1ed0:	6923      	ldr	r3, [r4, #16]
    1ed2:	4798      	blx	r3
    1ed4:	2310      	movs	r3, #16
    1ed6:	6822      	ldr	r2, [r4, #0]
    1ed8:	7393      	strb	r3, [r2, #14]
    1eda:	e7e7      	b.n	1eac <_tc_interrupt_handler+0x20>
    1edc:	0020      	movs	r0, r4
    1ede:	6963      	ldr	r3, [r4, #20]
    1ee0:	4798      	blx	r3
    1ee2:	6823      	ldr	r3, [r4, #0]
    1ee4:	2220      	movs	r2, #32
    1ee6:	739a      	strb	r2, [r3, #14]
    1ee8:	e7e2      	b.n	1eb0 <_tc_interrupt_handler+0x24>
    1eea:	46c0      	nop			; (mov r8, r8)
    1eec:	200035c0 	.word	0x200035c0

00001ef0 <TC0_Handler>:
    1ef0:	b510      	push	{r4, lr}
    1ef2:	2000      	movs	r0, #0
    1ef4:	4b01      	ldr	r3, [pc, #4]	; (1efc <TC0_Handler+0xc>)
    1ef6:	4798      	blx	r3
    1ef8:	bd10      	pop	{r4, pc}
    1efa:	46c0      	nop			; (mov r8, r8)
    1efc:	00001e8d 	.word	0x00001e8d

00001f00 <TC1_Handler>:
    1f00:	b510      	push	{r4, lr}
    1f02:	2001      	movs	r0, #1
    1f04:	4b01      	ldr	r3, [pc, #4]	; (1f0c <TC1_Handler+0xc>)
    1f06:	4798      	blx	r3
    1f08:	bd10      	pop	{r4, pc}
    1f0a:	46c0      	nop			; (mov r8, r8)
    1f0c:	00001e8d 	.word	0x00001e8d

00001f10 <TC2_Handler>:
    1f10:	b510      	push	{r4, lr}
    1f12:	2002      	movs	r0, #2
    1f14:	4b01      	ldr	r3, [pc, #4]	; (1f1c <TC2_Handler+0xc>)
    1f16:	4798      	blx	r3
    1f18:	bd10      	pop	{r4, pc}
    1f1a:	46c0      	nop			; (mov r8, r8)
    1f1c:	00001e8d 	.word	0x00001e8d

00001f20 <TC3_Handler>:
    1f20:	b510      	push	{r4, lr}
    1f22:	2003      	movs	r0, #3
    1f24:	4b01      	ldr	r3, [pc, #4]	; (1f2c <TC3_Handler+0xc>)
    1f26:	4798      	blx	r3
    1f28:	bd10      	pop	{r4, pc}
    1f2a:	46c0      	nop			; (mov r8, r8)
    1f2c:	00001e8d 	.word	0x00001e8d

00001f30 <TC4_Handler>:
    1f30:	b510      	push	{r4, lr}
    1f32:	2004      	movs	r0, #4
    1f34:	4b01      	ldr	r3, [pc, #4]	; (1f3c <TC4_Handler+0xc>)
    1f36:	4798      	blx	r3
    1f38:	bd10      	pop	{r4, pc}
    1f3a:	46c0      	nop			; (mov r8, r8)
    1f3c:	00001e8d 	.word	0x00001e8d

00001f40 <TC5_Handler>:
    1f40:	b510      	push	{r4, lr}
    1f42:	2005      	movs	r0, #5
    1f44:	4b01      	ldr	r3, [pc, #4]	; (1f4c <TC5_Handler+0xc>)
    1f46:	4798      	blx	r3
    1f48:	bd10      	pop	{r4, pc}
    1f4a:	46c0      	nop			; (mov r8, r8)
    1f4c:	00001e8d 	.word	0x00001e8d

00001f50 <TC6_Handler>:
    1f50:	b510      	push	{r4, lr}
    1f52:	2006      	movs	r0, #6
    1f54:	4b01      	ldr	r3, [pc, #4]	; (1f5c <TC6_Handler+0xc>)
    1f56:	4798      	blx	r3
    1f58:	bd10      	pop	{r4, pc}
    1f5a:	46c0      	nop			; (mov r8, r8)
    1f5c:	00001e8d 	.word	0x00001e8d

00001f60 <TC7_Handler>:
    1f60:	b510      	push	{r4, lr}
    1f62:	2007      	movs	r0, #7
    1f64:	4b01      	ldr	r3, [pc, #4]	; (1f6c <TC7_Handler+0xc>)
    1f66:	4798      	blx	r3
    1f68:	bd10      	pop	{r4, pc}
    1f6a:	46c0      	nop			; (mov r8, r8)
    1f6c:	00001e8d 	.word	0x00001e8d

00001f70 <_tc_get_inst_index>:
    1f70:	b530      	push	{r4, r5, lr}
    1f72:	b089      	sub	sp, #36	; 0x24
    1f74:	4b0c      	ldr	r3, [pc, #48]	; (1fa8 <_tc_get_inst_index+0x38>)
    1f76:	466a      	mov	r2, sp
    1f78:	cb32      	ldmia	r3!, {r1, r4, r5}
    1f7a:	c232      	stmia	r2!, {r1, r4, r5}
    1f7c:	cb32      	ldmia	r3!, {r1, r4, r5}
    1f7e:	c232      	stmia	r2!, {r1, r4, r5}
    1f80:	cb12      	ldmia	r3!, {r1, r4}
    1f82:	c212      	stmia	r2!, {r1, r4}
    1f84:	9b00      	ldr	r3, [sp, #0]
    1f86:	4298      	cmp	r0, r3
    1f88:	d00b      	beq.n	1fa2 <_tc_get_inst_index+0x32>
    1f8a:	2301      	movs	r3, #1
    1f8c:	009a      	lsls	r2, r3, #2
    1f8e:	4669      	mov	r1, sp
    1f90:	5852      	ldr	r2, [r2, r1]
    1f92:	4282      	cmp	r2, r0
    1f94:	d006      	beq.n	1fa4 <_tc_get_inst_index+0x34>
    1f96:	3301      	adds	r3, #1
    1f98:	2b08      	cmp	r3, #8
    1f9a:	d1f7      	bne.n	1f8c <_tc_get_inst_index+0x1c>
    1f9c:	2000      	movs	r0, #0
    1f9e:	b009      	add	sp, #36	; 0x24
    1fa0:	bd30      	pop	{r4, r5, pc}
    1fa2:	2300      	movs	r3, #0
    1fa4:	b2d8      	uxtb	r0, r3
    1fa6:	e7fa      	b.n	1f9e <_tc_get_inst_index+0x2e>
    1fa8:	000056c4 	.word	0x000056c4

00001fac <tc_init>:
    1fac:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fae:	b089      	sub	sp, #36	; 0x24
    1fb0:	0004      	movs	r4, r0
    1fb2:	000d      	movs	r5, r1
    1fb4:	0016      	movs	r6, r2
    1fb6:	0008      	movs	r0, r1
    1fb8:	4b87      	ldr	r3, [pc, #540]	; (21d8 <STACK_SIZE+0x1d8>)
    1fba:	4798      	blx	r3
    1fbc:	0007      	movs	r7, r0
    1fbe:	ab06      	add	r3, sp, #24
    1fc0:	2213      	movs	r2, #19
    1fc2:	701a      	strb	r2, [r3, #0]
    1fc4:	705a      	strb	r2, [r3, #1]
    1fc6:	3201      	adds	r2, #1
    1fc8:	709a      	strb	r2, [r3, #2]
    1fca:	70da      	strb	r2, [r3, #3]
    1fcc:	3201      	adds	r2, #1
    1fce:	711a      	strb	r2, [r3, #4]
    1fd0:	715a      	strb	r2, [r3, #5]
    1fd2:	3201      	adds	r2, #1
    1fd4:	719a      	strb	r2, [r3, #6]
    1fd6:	71da      	strb	r2, [r3, #7]
    1fd8:	3a06      	subs	r2, #6
    1fda:	4980      	ldr	r1, [pc, #512]	; (21dc <STACK_SIZE+0x1dc>)
    1fdc:	3120      	adds	r1, #32
    1fde:	a802      	add	r0, sp, #8
    1fe0:	4b7f      	ldr	r3, [pc, #508]	; (21e0 <STACK_SIZE+0x1e0>)
    1fe2:	4798      	blx	r3
    1fe4:	2300      	movs	r3, #0
    1fe6:	60a3      	str	r3, [r4, #8]
    1fe8:	60e3      	str	r3, [r4, #12]
    1fea:	6123      	str	r3, [r4, #16]
    1fec:	6163      	str	r3, [r4, #20]
    1fee:	7623      	strb	r3, [r4, #24]
    1ff0:	7663      	strb	r3, [r4, #25]
    1ff2:	00ba      	lsls	r2, r7, #2
    1ff4:	4b7b      	ldr	r3, [pc, #492]	; (21e4 <STACK_SIZE+0x1e4>)
    1ff6:	50d4      	str	r4, [r2, r3]
    1ff8:	6025      	str	r5, [r4, #0]
    1ffa:	78b3      	ldrb	r3, [r6, #2]
    1ffc:	2b08      	cmp	r3, #8
    1ffe:	d006      	beq.n	200e <STACK_SIZE+0xe>
    2000:	7123      	strb	r3, [r4, #4]
    2002:	882b      	ldrh	r3, [r5, #0]
    2004:	2005      	movs	r0, #5
    2006:	07db      	lsls	r3, r3, #31
    2008:	d505      	bpl.n	2016 <STACK_SIZE+0x16>
    200a:	b009      	add	sp, #36	; 0x24
    200c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    200e:	2017      	movs	r0, #23
    2010:	07fa      	lsls	r2, r7, #31
    2012:	d4fa      	bmi.n	200a <STACK_SIZE+0xa>
    2014:	e7f4      	b.n	2000 <STACK_SIZE>
    2016:	7beb      	ldrb	r3, [r5, #15]
    2018:	3017      	adds	r0, #23
    201a:	06db      	lsls	r3, r3, #27
    201c:	d4f5      	bmi.n	200a <STACK_SIZE+0xa>
    201e:	882b      	ldrh	r3, [r5, #0]
    2020:	079b      	lsls	r3, r3, #30
    2022:	d4f2      	bmi.n	200a <STACK_SIZE+0xa>
    2024:	7c33      	ldrb	r3, [r6, #16]
    2026:	2b00      	cmp	r3, #0
    2028:	d000      	beq.n	202c <STACK_SIZE+0x2c>
    202a:	e07a      	b.n	2122 <STACK_SIZE+0x122>
    202c:	7f33      	ldrb	r3, [r6, #28]
    202e:	2b00      	cmp	r3, #0
    2030:	d000      	beq.n	2034 <STACK_SIZE+0x34>
    2032:	e082      	b.n	213a <STACK_SIZE+0x13a>
    2034:	496c      	ldr	r1, [pc, #432]	; (21e8 <STACK_SIZE+0x1e8>)
    2036:	6a08      	ldr	r0, [r1, #32]
    2038:	007a      	lsls	r2, r7, #1
    203a:	ab02      	add	r3, sp, #8
    203c:	5ad3      	ldrh	r3, [r2, r3]
    203e:	4303      	orrs	r3, r0
    2040:	620b      	str	r3, [r1, #32]
    2042:	78b3      	ldrb	r3, [r6, #2]
    2044:	2b08      	cmp	r3, #8
    2046:	d100      	bne.n	204a <STACK_SIZE+0x4a>
    2048:	e087      	b.n	215a <STACK_SIZE+0x15a>
    204a:	7833      	ldrb	r3, [r6, #0]
    204c:	466a      	mov	r2, sp
    204e:	7013      	strb	r3, [r2, #0]
    2050:	ab06      	add	r3, sp, #24
    2052:	5ddf      	ldrb	r7, [r3, r7]
    2054:	4669      	mov	r1, sp
    2056:	0038      	movs	r0, r7
    2058:	4b64      	ldr	r3, [pc, #400]	; (21ec <STACK_SIZE+0x1ec>)
    205a:	4798      	blx	r3
    205c:	0038      	movs	r0, r7
    205e:	4b64      	ldr	r3, [pc, #400]	; (21f0 <STACK_SIZE+0x1f0>)
    2060:	4798      	blx	r3
    2062:	8931      	ldrh	r1, [r6, #8]
    2064:	88b3      	ldrh	r3, [r6, #4]
    2066:	430b      	orrs	r3, r1
    2068:	78b1      	ldrb	r1, [r6, #2]
    206a:	79b2      	ldrb	r2, [r6, #6]
    206c:	4311      	orrs	r1, r2
    206e:	4319      	orrs	r1, r3
    2070:	7873      	ldrb	r3, [r6, #1]
    2072:	2b00      	cmp	r3, #0
    2074:	d002      	beq.n	207c <STACK_SIZE+0x7c>
    2076:	2380      	movs	r3, #128	; 0x80
    2078:	011b      	lsls	r3, r3, #4
    207a:	4319      	orrs	r1, r3
    207c:	6822      	ldr	r2, [r4, #0]
    207e:	7bd3      	ldrb	r3, [r2, #15]
    2080:	b25b      	sxtb	r3, r3
    2082:	2b00      	cmp	r3, #0
    2084:	dbfb      	blt.n	207e <STACK_SIZE+0x7e>
    2086:	8029      	strh	r1, [r5, #0]
    2088:	7b71      	ldrb	r1, [r6, #13]
    208a:	1e4b      	subs	r3, r1, #1
    208c:	4199      	sbcs	r1, r3
    208e:	0089      	lsls	r1, r1, #2
    2090:	7bb3      	ldrb	r3, [r6, #14]
    2092:	2b00      	cmp	r3, #0
    2094:	d001      	beq.n	209a <STACK_SIZE+0x9a>
    2096:	2301      	movs	r3, #1
    2098:	4319      	orrs	r1, r3
    209a:	6822      	ldr	r2, [r4, #0]
    209c:	7bd3      	ldrb	r3, [r2, #15]
    209e:	b25b      	sxtb	r3, r3
    20a0:	2b00      	cmp	r3, #0
    20a2:	dbfb      	blt.n	209c <STACK_SIZE+0x9c>
    20a4:	23ff      	movs	r3, #255	; 0xff
    20a6:	712b      	strb	r3, [r5, #4]
    20a8:	2900      	cmp	r1, #0
    20aa:	d005      	beq.n	20b8 <STACK_SIZE+0xb8>
    20ac:	6822      	ldr	r2, [r4, #0]
    20ae:	7bd3      	ldrb	r3, [r2, #15]
    20b0:	b25b      	sxtb	r3, r3
    20b2:	2b00      	cmp	r3, #0
    20b4:	dbfb      	blt.n	20ae <STACK_SIZE+0xae>
    20b6:	7169      	strb	r1, [r5, #5]
    20b8:	7ab1      	ldrb	r1, [r6, #10]
    20ba:	7af3      	ldrb	r3, [r6, #11]
    20bc:	2b00      	cmp	r3, #0
    20be:	d001      	beq.n	20c4 <STACK_SIZE+0xc4>
    20c0:	2310      	movs	r3, #16
    20c2:	4319      	orrs	r1, r3
    20c4:	7b33      	ldrb	r3, [r6, #12]
    20c6:	2b00      	cmp	r3, #0
    20c8:	d001      	beq.n	20ce <STACK_SIZE+0xce>
    20ca:	2320      	movs	r3, #32
    20cc:	4319      	orrs	r1, r3
    20ce:	6822      	ldr	r2, [r4, #0]
    20d0:	7bd3      	ldrb	r3, [r2, #15]
    20d2:	b25b      	sxtb	r3, r3
    20d4:	2b00      	cmp	r3, #0
    20d6:	dbfb      	blt.n	20d0 <STACK_SIZE+0xd0>
    20d8:	71a9      	strb	r1, [r5, #6]
    20da:	6822      	ldr	r2, [r4, #0]
    20dc:	7bd3      	ldrb	r3, [r2, #15]
    20de:	b25b      	sxtb	r3, r3
    20e0:	2b00      	cmp	r3, #0
    20e2:	dbfb      	blt.n	20dc <STACK_SIZE+0xdc>
    20e4:	7923      	ldrb	r3, [r4, #4]
    20e6:	2b04      	cmp	r3, #4
    20e8:	d03f      	beq.n	216a <STACK_SIZE+0x16a>
    20ea:	2b08      	cmp	r3, #8
    20ec:	d05e      	beq.n	21ac <STACK_SIZE+0x1ac>
    20ee:	2017      	movs	r0, #23
    20f0:	2b00      	cmp	r3, #0
    20f2:	d000      	beq.n	20f6 <STACK_SIZE+0xf6>
    20f4:	e789      	b.n	200a <STACK_SIZE+0xa>
    20f6:	7bd3      	ldrb	r3, [r2, #15]
    20f8:	b25b      	sxtb	r3, r3
    20fa:	2b00      	cmp	r3, #0
    20fc:	dbfb      	blt.n	20f6 <STACK_SIZE+0xf6>
    20fe:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    2100:	822b      	strh	r3, [r5, #16]
    2102:	6822      	ldr	r2, [r4, #0]
    2104:	7bd3      	ldrb	r3, [r2, #15]
    2106:	b25b      	sxtb	r3, r3
    2108:	2b00      	cmp	r3, #0
    210a:	dbfb      	blt.n	2104 <STACK_SIZE+0x104>
    210c:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
    210e:	832b      	strh	r3, [r5, #24]
    2110:	6822      	ldr	r2, [r4, #0]
    2112:	7bd3      	ldrb	r3, [r2, #15]
    2114:	b25b      	sxtb	r3, r3
    2116:	2b00      	cmp	r3, #0
    2118:	dbfb      	blt.n	2112 <STACK_SIZE+0x112>
    211a:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
    211c:	836b      	strh	r3, [r5, #26]
    211e:	2000      	movs	r0, #0
    2120:	e773      	b.n	200a <STACK_SIZE+0xa>
    2122:	a901      	add	r1, sp, #4
    2124:	2301      	movs	r3, #1
    2126:	708b      	strb	r3, [r1, #2]
    2128:	2200      	movs	r2, #0
    212a:	70ca      	strb	r2, [r1, #3]
    212c:	7e32      	ldrb	r2, [r6, #24]
    212e:	700a      	strb	r2, [r1, #0]
    2130:	704b      	strb	r3, [r1, #1]
    2132:	7d30      	ldrb	r0, [r6, #20]
    2134:	4b2f      	ldr	r3, [pc, #188]	; (21f4 <STACK_SIZE+0x1f4>)
    2136:	4798      	blx	r3
    2138:	e778      	b.n	202c <STACK_SIZE+0x2c>
    213a:	a901      	add	r1, sp, #4
    213c:	2301      	movs	r3, #1
    213e:	708b      	strb	r3, [r1, #2]
    2140:	2200      	movs	r2, #0
    2142:	70ca      	strb	r2, [r1, #3]
    2144:	3224      	adds	r2, #36	; 0x24
    2146:	18b2      	adds	r2, r6, r2
    2148:	7812      	ldrb	r2, [r2, #0]
    214a:	700a      	strb	r2, [r1, #0]
    214c:	704b      	strb	r3, [r1, #1]
    214e:	331f      	adds	r3, #31
    2150:	18f3      	adds	r3, r6, r3
    2152:	7818      	ldrb	r0, [r3, #0]
    2154:	4b27      	ldr	r3, [pc, #156]	; (21f4 <STACK_SIZE+0x1f4>)
    2156:	4798      	blx	r3
    2158:	e76c      	b.n	2034 <STACK_SIZE+0x34>
    215a:	6a08      	ldr	r0, [r1, #32]
    215c:	1c7a      	adds	r2, r7, #1
    215e:	0052      	lsls	r2, r2, #1
    2160:	ab02      	add	r3, sp, #8
    2162:	5ad3      	ldrh	r3, [r2, r3]
    2164:	4303      	orrs	r3, r0
    2166:	620b      	str	r3, [r1, #32]
    2168:	e76f      	b.n	204a <STACK_SIZE+0x4a>
    216a:	7bd3      	ldrb	r3, [r2, #15]
    216c:	b25b      	sxtb	r3, r3
    216e:	2b00      	cmp	r3, #0
    2170:	dbfb      	blt.n	216a <STACK_SIZE+0x16a>
    2172:	2328      	movs	r3, #40	; 0x28
    2174:	5cf3      	ldrb	r3, [r6, r3]
    2176:	742b      	strb	r3, [r5, #16]
    2178:	6822      	ldr	r2, [r4, #0]
    217a:	7bd3      	ldrb	r3, [r2, #15]
    217c:	b25b      	sxtb	r3, r3
    217e:	2b00      	cmp	r3, #0
    2180:	dbfb      	blt.n	217a <STACK_SIZE+0x17a>
    2182:	2329      	movs	r3, #41	; 0x29
    2184:	5cf3      	ldrb	r3, [r6, r3]
    2186:	752b      	strb	r3, [r5, #20]
    2188:	6822      	ldr	r2, [r4, #0]
    218a:	7bd3      	ldrb	r3, [r2, #15]
    218c:	b25b      	sxtb	r3, r3
    218e:	2b00      	cmp	r3, #0
    2190:	dbfb      	blt.n	218a <STACK_SIZE+0x18a>
    2192:	232a      	movs	r3, #42	; 0x2a
    2194:	5cf3      	ldrb	r3, [r6, r3]
    2196:	762b      	strb	r3, [r5, #24]
    2198:	6822      	ldr	r2, [r4, #0]
    219a:	7bd3      	ldrb	r3, [r2, #15]
    219c:	b25b      	sxtb	r3, r3
    219e:	2b00      	cmp	r3, #0
    21a0:	dbfb      	blt.n	219a <STACK_SIZE+0x19a>
    21a2:	232b      	movs	r3, #43	; 0x2b
    21a4:	5cf3      	ldrb	r3, [r6, r3]
    21a6:	766b      	strb	r3, [r5, #25]
    21a8:	2000      	movs	r0, #0
    21aa:	e72e      	b.n	200a <STACK_SIZE+0xa>
    21ac:	7bd3      	ldrb	r3, [r2, #15]
    21ae:	b25b      	sxtb	r3, r3
    21b0:	2b00      	cmp	r3, #0
    21b2:	dbfb      	blt.n	21ac <STACK_SIZE+0x1ac>
    21b4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    21b6:	612b      	str	r3, [r5, #16]
    21b8:	6822      	ldr	r2, [r4, #0]
    21ba:	7bd3      	ldrb	r3, [r2, #15]
    21bc:	b25b      	sxtb	r3, r3
    21be:	2b00      	cmp	r3, #0
    21c0:	dbfb      	blt.n	21ba <STACK_SIZE+0x1ba>
    21c2:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    21c4:	61ab      	str	r3, [r5, #24]
    21c6:	6822      	ldr	r2, [r4, #0]
    21c8:	7bd3      	ldrb	r3, [r2, #15]
    21ca:	b25b      	sxtb	r3, r3
    21cc:	2b00      	cmp	r3, #0
    21ce:	dbfb      	blt.n	21c8 <STACK_SIZE+0x1c8>
    21d0:	6b33      	ldr	r3, [r6, #48]	; 0x30
    21d2:	61eb      	str	r3, [r5, #28]
    21d4:	2000      	movs	r0, #0
    21d6:	e718      	b.n	200a <STACK_SIZE+0xa>
    21d8:	00001f71 	.word	0x00001f71
    21dc:	000056c4 	.word	0x000056c4
    21e0:	00005575 	.word	0x00005575
    21e4:	200035c0 	.word	0x200035c0
    21e8:	40000400 	.word	0x40000400
    21ec:	00004ca1 	.word	0x00004ca1
    21f0:	00004c15 	.word	0x00004c15
    21f4:	00004dc9 	.word	0x00004dc9

000021f8 <wdt_set_config>:
    21f8:	b510      	push	{r4, lr}
    21fa:	b082      	sub	sp, #8
    21fc:	0004      	movs	r4, r0
    21fe:	4a39      	ldr	r2, [pc, #228]	; (22e4 <wdt_set_config+0xec>)
    2200:	6993      	ldr	r3, [r2, #24]
    2202:	2110      	movs	r1, #16
    2204:	430b      	orrs	r3, r1
    2206:	6193      	str	r3, [r2, #24]
    2208:	4b37      	ldr	r3, [pc, #220]	; (22e8 <wdt_set_config+0xf0>)
    220a:	781b      	ldrb	r3, [r3, #0]
    220c:	b25b      	sxtb	r3, r3
    220e:	2010      	movs	r0, #16
    2210:	2b00      	cmp	r3, #0
    2212:	db03      	blt.n	221c <wdt_set_config+0x24>
    2214:	78e3      	ldrb	r3, [r4, #3]
    2216:	3007      	adds	r0, #7
    2218:	2b00      	cmp	r3, #0
    221a:	d101      	bne.n	2220 <wdt_set_config+0x28>
    221c:	b002      	add	sp, #8
    221e:	bd10      	pop	{r4, pc}
    2220:	7922      	ldrb	r2, [r4, #4]
    2222:	429a      	cmp	r2, r3
    2224:	d8fa      	bhi.n	221c <wdt_set_config+0x24>
    2226:	7962      	ldrb	r2, [r4, #5]
    2228:	429a      	cmp	r2, r3
    222a:	d8f7      	bhi.n	221c <wdt_set_config+0x24>
    222c:	4a2e      	ldr	r2, [pc, #184]	; (22e8 <wdt_set_config+0xf0>)
    222e:	7813      	ldrb	r3, [r2, #0]
    2230:	390e      	subs	r1, #14
    2232:	438b      	bics	r3, r1
    2234:	7013      	strb	r3, [r2, #0]
    2236:	79d3      	ldrb	r3, [r2, #7]
    2238:	b25b      	sxtb	r3, r3
    223a:	2b00      	cmp	r3, #0
    223c:	dbfb      	blt.n	2236 <wdt_set_config+0x3e>
    223e:	7863      	ldrb	r3, [r4, #1]
    2240:	2000      	movs	r0, #0
    2242:	2b00      	cmp	r3, #0
    2244:	d0ea      	beq.n	221c <wdt_set_config+0x24>
    2246:	a901      	add	r1, sp, #4
    2248:	78a3      	ldrb	r3, [r4, #2]
    224a:	700b      	strb	r3, [r1, #0]
    224c:	3001      	adds	r0, #1
    224e:	4b27      	ldr	r3, [pc, #156]	; (22ec <wdt_set_config+0xf4>)
    2250:	4798      	blx	r3
    2252:	2001      	movs	r0, #1
    2254:	4b26      	ldr	r3, [pc, #152]	; (22f0 <wdt_set_config+0xf8>)
    2256:	4798      	blx	r3
    2258:	7823      	ldrb	r3, [r4, #0]
    225a:	2b00      	cmp	r3, #0
    225c:	d127      	bne.n	22ae <wdt_set_config+0xb6>
    225e:	78e3      	ldrb	r3, [r4, #3]
    2260:	3b01      	subs	r3, #1
    2262:	7922      	ldrb	r2, [r4, #4]
    2264:	2a00      	cmp	r2, #0
    2266:	d026      	beq.n	22b6 <wdt_set_config+0xbe>
    2268:	491f      	ldr	r1, [pc, #124]	; (22e8 <wdt_set_config+0xf0>)
    226a:	780a      	ldrb	r2, [r1, #0]
    226c:	2004      	movs	r0, #4
    226e:	4302      	orrs	r2, r0
    2270:	700a      	strb	r2, [r1, #0]
    2272:	7922      	ldrb	r2, [r4, #4]
    2274:	3a01      	subs	r2, #1
    2276:	4082      	lsls	r2, r0
    2278:	4313      	orrs	r3, r2
    227a:	491b      	ldr	r1, [pc, #108]	; (22e8 <wdt_set_config+0xf0>)
    227c:	79ca      	ldrb	r2, [r1, #7]
    227e:	b252      	sxtb	r2, r2
    2280:	2a00      	cmp	r2, #0
    2282:	dbfb      	blt.n	227c <wdt_set_config+0x84>
    2284:	b2db      	uxtb	r3, r3
    2286:	4a18      	ldr	r2, [pc, #96]	; (22e8 <wdt_set_config+0xf0>)
    2288:	7053      	strb	r3, [r2, #1]
    228a:	7963      	ldrb	r3, [r4, #5]
    228c:	2b00      	cmp	r3, #0
    228e:	d118      	bne.n	22c2 <wdt_set_config+0xca>
    2290:	7823      	ldrb	r3, [r4, #0]
    2292:	2b00      	cmp	r3, #0
    2294:	d01f      	beq.n	22d6 <wdt_set_config+0xde>
    2296:	4a14      	ldr	r2, [pc, #80]	; (22e8 <wdt_set_config+0xf0>)
    2298:	7813      	ldrb	r3, [r2, #0]
    229a:	2180      	movs	r1, #128	; 0x80
    229c:	430b      	orrs	r3, r1
    229e:	7013      	strb	r3, [r2, #0]
    22a0:	4a11      	ldr	r2, [pc, #68]	; (22e8 <wdt_set_config+0xf0>)
    22a2:	79d3      	ldrb	r3, [r2, #7]
    22a4:	b25b      	sxtb	r3, r3
    22a6:	2b00      	cmp	r3, #0
    22a8:	dbfb      	blt.n	22a2 <wdt_set_config+0xaa>
    22aa:	2000      	movs	r0, #0
    22ac:	e7b6      	b.n	221c <wdt_set_config+0x24>
    22ae:	2001      	movs	r0, #1
    22b0:	4b10      	ldr	r3, [pc, #64]	; (22f4 <wdt_set_config+0xfc>)
    22b2:	4798      	blx	r3
    22b4:	e7d3      	b.n	225e <wdt_set_config+0x66>
    22b6:	490c      	ldr	r1, [pc, #48]	; (22e8 <wdt_set_config+0xf0>)
    22b8:	780a      	ldrb	r2, [r1, #0]
    22ba:	2004      	movs	r0, #4
    22bc:	4382      	bics	r2, r0
    22be:	700a      	strb	r2, [r1, #0]
    22c0:	e7db      	b.n	227a <wdt_set_config+0x82>
    22c2:	0011      	movs	r1, r2
    22c4:	79ca      	ldrb	r2, [r1, #7]
    22c6:	b252      	sxtb	r2, r2
    22c8:	2a00      	cmp	r2, #0
    22ca:	dbfb      	blt.n	22c4 <wdt_set_config+0xcc>
    22cc:	3b01      	subs	r3, #1
    22ce:	b2db      	uxtb	r3, r3
    22d0:	4a05      	ldr	r2, [pc, #20]	; (22e8 <wdt_set_config+0xf0>)
    22d2:	7093      	strb	r3, [r2, #2]
    22d4:	e7dc      	b.n	2290 <wdt_set_config+0x98>
    22d6:	4a04      	ldr	r2, [pc, #16]	; (22e8 <wdt_set_config+0xf0>)
    22d8:	7813      	ldrb	r3, [r2, #0]
    22da:	2102      	movs	r1, #2
    22dc:	430b      	orrs	r3, r1
    22de:	7013      	strb	r3, [r2, #0]
    22e0:	e7de      	b.n	22a0 <wdt_set_config+0xa8>
    22e2:	46c0      	nop			; (mov r8, r8)
    22e4:	40000400 	.word	0x40000400
    22e8:	40001000 	.word	0x40001000
    22ec:	00004ca1 	.word	0x00004ca1
    22f0:	00004c15 	.word	0x00004c15
    22f4:	00004cbd 	.word	0x00004cbd

000022f8 <wdt_reset_count>:
    22f8:	22a5      	movs	r2, #165	; 0xa5
    22fa:	4b04      	ldr	r3, [pc, #16]	; (230c <wdt_reset_count+0x14>)
    22fc:	721a      	strb	r2, [r3, #8]
    22fe:	001a      	movs	r2, r3
    2300:	79d3      	ldrb	r3, [r2, #7]
    2302:	b25b      	sxtb	r3, r3
    2304:	2b00      	cmp	r3, #0
    2306:	dbfb      	blt.n	2300 <wdt_reset_count+0x8>
    2308:	4770      	bx	lr
    230a:	46c0      	nop			; (mov r8, r8)
    230c:	40001000 	.word	0x40001000

00002310 <wdt_register_callback>:
    2310:	2900      	cmp	r1, #0
    2312:	d001      	beq.n	2318 <wdt_register_callback+0x8>
    2314:	2017      	movs	r0, #23
    2316:	4770      	bx	lr
    2318:	4b01      	ldr	r3, [pc, #4]	; (2320 <wdt_register_callback+0x10>)
    231a:	6018      	str	r0, [r3, #0]
    231c:	2000      	movs	r0, #0
    231e:	e7fa      	b.n	2316 <wdt_register_callback+0x6>
    2320:	200035e0 	.word	0x200035e0

00002324 <wdt_enable_callback>:
    2324:	2800      	cmp	r0, #0
    2326:	d001      	beq.n	232c <wdt_enable_callback+0x8>
    2328:	2017      	movs	r0, #23
    232a:	4770      	bx	lr
    232c:	2201      	movs	r2, #1
    232e:	4b03      	ldr	r3, [pc, #12]	; (233c <wdt_enable_callback+0x18>)
    2330:	715a      	strb	r2, [r3, #5]
    2332:	3203      	adds	r2, #3
    2334:	4b02      	ldr	r3, [pc, #8]	; (2340 <wdt_enable_callback+0x1c>)
    2336:	601a      	str	r2, [r3, #0]
    2338:	e7f7      	b.n	232a <wdt_enable_callback+0x6>
    233a:	46c0      	nop			; (mov r8, r8)
    233c:	40001000 	.word	0x40001000
    2340:	e000e100 	.word	0xe000e100

00002344 <WDT_Handler>:
    2344:	b510      	push	{r4, lr}
    2346:	2201      	movs	r2, #1
    2348:	4b03      	ldr	r3, [pc, #12]	; (2358 <WDT_Handler+0x14>)
    234a:	719a      	strb	r2, [r3, #6]
    234c:	4b03      	ldr	r3, [pc, #12]	; (235c <WDT_Handler+0x18>)
    234e:	681b      	ldr	r3, [r3, #0]
    2350:	2b00      	cmp	r3, #0
    2352:	d000      	beq.n	2356 <WDT_Handler+0x12>
    2354:	4798      	blx	r3
    2356:	bd10      	pop	{r4, pc}
    2358:	40001000 	.word	0x40001000
    235c:	200035e0 	.word	0x200035e0

00002360 <LORA01_extint_detection_callback>:

}

void LORA01_extint_detection_callback(void)
{
	if(LORA01->LoRa_IRQ_Flag == 0)
    2360:	4b04      	ldr	r3, [pc, #16]	; (2374 <LORA01_extint_detection_callback+0x14>)
    2362:	681b      	ldr	r3, [r3, #0]
    2364:	4a04      	ldr	r2, [pc, #16]	; (2378 <LORA01_extint_detection_callback+0x18>)
    2366:	5c9a      	ldrb	r2, [r3, r2]
    2368:	2a00      	cmp	r2, #0
    236a:	d102      	bne.n	2372 <LORA01_extint_detection_callback+0x12>
	{
		LORA01->LoRa_IRQ_Flag = 1;
    236c:	2101      	movs	r1, #1
    236e:	4a02      	ldr	r2, [pc, #8]	; (2378 <LORA01_extint_detection_callback+0x18>)
    2370:	5499      	strb	r1, [r3, r2]
	}
}
    2372:	4770      	bx	lr
    2374:	20001048 	.word	0x20001048
    2378:	00000217 	.word	0x00000217

0000237c <LORA02_extint_detection_callback>:

void LORA02_extint_detection_callback(void)
{
	if(LORA02->LoRa_IRQ_Flag == 0)
    237c:	4b04      	ldr	r3, [pc, #16]	; (2390 <LORA02_extint_detection_callback+0x14>)
    237e:	681b      	ldr	r3, [r3, #0]
    2380:	4a04      	ldr	r2, [pc, #16]	; (2394 <LORA02_extint_detection_callback+0x18>)
    2382:	5c9a      	ldrb	r2, [r3, r2]
    2384:	2a00      	cmp	r2, #0
    2386:	d102      	bne.n	238e <LORA02_extint_detection_callback+0x12>
	{
		LORA02->LoRa_IRQ_Flag = 1;
    2388:	2101      	movs	r1, #1
    238a:	4a02      	ldr	r2, [pc, #8]	; (2394 <LORA02_extint_detection_callback+0x18>)
    238c:	5499      	strb	r1, [r3, r2]
	}
}
    238e:	4770      	bx	lr
    2390:	200004b4 	.word	0x200004b4
    2394:	00000217 	.word	0x00000217

00002398 <configure_extint_channel>:
{
    2398:	b5f0      	push	{r4, r5, r6, r7, lr}
    239a:	b085      	sub	sp, #20
	extint_chan_get_config_defaults(&config_extint_chan);
    239c:	ac01      	add	r4, sp, #4
    239e:	0020      	movs	r0, r4
    23a0:	4b0b      	ldr	r3, [pc, #44]	; (23d0 <configure_extint_channel+0x38>)
    23a2:	4798      	blx	r3
	config_extint_chan.gpio_pin           = PIN_PA11A_EIC_EXTINT11;
    23a4:	230b      	movs	r3, #11
    23a6:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux       = MUX_PA11A_EIC_EXTINT11;
    23a8:	2500      	movs	r5, #0
    23aa:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    23ac:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    23ae:	2701      	movs	r7, #1
    23b0:	72e7      	strb	r7, [r4, #11]
	extint_chan_set_config(PIN_PA11, &config_extint_chan);
    23b2:	0021      	movs	r1, r4
    23b4:	200b      	movs	r0, #11
    23b6:	4e07      	ldr	r6, [pc, #28]	; (23d4 <configure_extint_channel+0x3c>)
    23b8:	47b0      	blx	r6
	config_extint_chan.gpio_pin           = PIN_PA07A_EIC_EXTINT7;
    23ba:	2307      	movs	r3, #7
    23bc:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux       = MUX_PA07A_EIC_EXTINT7;
    23be:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    23c0:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    23c2:	72e7      	strb	r7, [r4, #11]
	extint_chan_set_config(PIN_PA07, &config_extint_chan);
    23c4:	0021      	movs	r1, r4
    23c6:	2007      	movs	r0, #7
    23c8:	47b0      	blx	r6
}
    23ca:	b005      	add	sp, #20
    23cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23ce:	46c0      	nop			; (mov r8, r8)
    23d0:	00001dcd 	.word	0x00001dcd
    23d4:	00001de1 	.word	0x00001de1

000023d8 <configure_extint_callbacks>:
{
    23d8:	b570      	push	{r4, r5, r6, lr}
	extint_register_callback(LORA01_extint_detection_callback, PIN_PA11, EXTINT_CALLBACK_TYPE_DETECT);
    23da:	2200      	movs	r2, #0
    23dc:	210b      	movs	r1, #11
    23de:	4807      	ldr	r0, [pc, #28]	; (23fc <configure_extint_callbacks+0x24>)
    23e0:	4d07      	ldr	r5, [pc, #28]	; (2400 <configure_extint_callbacks+0x28>)
    23e2:	47a8      	blx	r5
	extint_chan_enable_callback(PIN_PA11, EXTINT_CALLBACK_TYPE_DETECT);
    23e4:	2100      	movs	r1, #0
    23e6:	200b      	movs	r0, #11
    23e8:	4c06      	ldr	r4, [pc, #24]	; (2404 <configure_extint_callbacks+0x2c>)
    23ea:	47a0      	blx	r4
	extint_register_callback(LORA02_extint_detection_callback, PIN_PA07, EXTINT_CALLBACK_TYPE_DETECT);
    23ec:	2200      	movs	r2, #0
    23ee:	2107      	movs	r1, #7
    23f0:	4805      	ldr	r0, [pc, #20]	; (2408 <configure_extint_callbacks+0x30>)
    23f2:	47a8      	blx	r5
	extint_chan_enable_callback(PIN_PA07, EXTINT_CALLBACK_TYPE_DETECT);
    23f4:	2100      	movs	r1, #0
    23f6:	2007      	movs	r0, #7
    23f8:	47a0      	blx	r4
}
    23fa:	bd70      	pop	{r4, r5, r6, pc}
    23fc:	00002361 	.word	0x00002361
    2400:	00001ca9 	.word	0x00001ca9
    2404:	00001cd5 	.word	0x00001cd5
    2408:	0000237d 	.word	0x0000237d

0000240c <Setting_Lora_To_Tx_Mode_Func>:
#include <stdio.h>
#include "myDefine.h"

void Setting_Lora_To_Tx_Mode_Func(volatile LORA_DEFINE_t *tmp_LORA)
{
	tmp_LORA->NowStatus = Write_LoRa_Setting_Index;
    240c:	2204      	movs	r2, #4
    240e:	4b04      	ldr	r3, [pc, #16]	; (2420 <Setting_Lora_To_Tx_Mode_Func+0x14>)
    2410:	54c2      	strb	r2, [r0, r3]
	tmp_LORA->LoRa_TxRx_Mode_Flag = SetTx;
    2412:	3a02      	subs	r2, #2
    2414:	4b03      	ldr	r3, [pc, #12]	; (2424 <Setting_Lora_To_Tx_Mode_Func+0x18>)
    2416:	54c2      	strb	r2, [r0, r3]
	tmp_LORA->LoRa_Rx_Flag = LoraRxNoData;
    2418:	2200      	movs	r2, #0
    241a:	3b05      	subs	r3, #5
    241c:	54c2      	strb	r2, [r0, r3]
}
    241e:	4770      	bx	lr
    2420:	00000211 	.word	0x00000211
    2424:	0000021d 	.word	0x0000021d

00002428 <WaitRxData_Func>:

void WaitRxData_Func(volatile LORA_DEFINE_t *tmp_LORA)
{
    2428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    242a:	0004      	movs	r4, r0
	tmp_LORA->f_count = 0;
    242c:	2200      	movs	r2, #0
    242e:	238c      	movs	r3, #140	; 0x8c
    2430:	009b      	lsls	r3, r3, #2
    2432:	50c2      	str	r2, [r0, r3]
	while(1)
	{
		usart_read_buffer_job(tmp_LORA->DevUART, (uint8_t *)tmp_LORA->rx_buffer, MAX_RX_BUFFER_LENGTH);
    2434:	0005      	movs	r5, r0
    2436:	3510      	adds	r5, #16
    2438:	4f17      	ldr	r7, [pc, #92]	; (2498 <WaitRxData_Func+0x70>)
		if(tmp_LORA->f_count < 2000) //尚未Time Out
    243a:	001e      	movs	r6, r3
		usart_read_buffer_job(tmp_LORA->DevUART, (uint8_t *)tmp_LORA->rx_buffer, MAX_RX_BUFFER_LENGTH);
    243c:	68e0      	ldr	r0, [r4, #12]
    243e:	2201      	movs	r2, #1
    2440:	0029      	movs	r1, r5
    2442:	47b8      	blx	r7
		if(tmp_LORA->f_count < 2000) //尚未Time Out
    2444:	59a2      	ldr	r2, [r4, r6]
    2446:	4b15      	ldr	r3, [pc, #84]	; (249c <WaitRxData_Func+0x74>)
    2448:	429a      	cmp	r2, r3
    244a:	d80c      	bhi.n	2466 <WaitRxData_Func+0x3e>
		{
			if(tmp_LORA->MyBufferCount == tmp_LORA->UserRxCountMax) //若資料長度如預期長度
    244c:	7ca3      	ldrb	r3, [r4, #18]
    244e:	7c62      	ldrb	r2, [r4, #17]
    2450:	b2db      	uxtb	r3, r3
    2452:	4293      	cmp	r3, r2
    2454:	d1f2      	bne.n	243c <WaitRxData_Func+0x14>
			{
				tmp_LORA->Lora_TimeOut_Count = 0; //清除TimeOutCount
    2456:	2200      	movs	r2, #0
    2458:	238a      	movs	r3, #138	; 0x8a
    245a:	009b      	lsls	r3, r3, #2
    245c:	50e2      	str	r2, [r4, r3]
				tmp_LORA->NowStatus = CheckRxCRC;	//進入CRC檢查
    245e:	3268      	adds	r2, #104	; 0x68
    2460:	4b0f      	ldr	r3, [pc, #60]	; (24a0 <WaitRxData_Func+0x78>)
    2462:	54e2      	strb	r2, [r4, r3]
				break;
    2464:	e010      	b.n	2488 <WaitRxData_Func+0x60>
			}
		}
		else  //Time Out
		{
			tmp_LORA->Lora_TimeOut_Count++;
    2466:	238a      	movs	r3, #138	; 0x8a
    2468:	009b      	lsls	r3, r3, #2
    246a:	58e2      	ldr	r2, [r4, r3]
    246c:	3201      	adds	r2, #1
    246e:	50e2      	str	r2, [r4, r3]
			if(tmp_LORA->Lora_TimeOut_Count > 3)	//若Time Out三次
    2470:	58e3      	ldr	r3, [r4, r3]
    2472:	2b03      	cmp	r3, #3
    2474:	d909      	bls.n	248a <WaitRxData_Func+0x62>
			{
				tmp_LORA->NowStatus = Read_LoRa_ID_Index;
    2476:	2200      	movs	r2, #0
    2478:	4b09      	ldr	r3, [pc, #36]	; (24a0 <WaitRxData_Func+0x78>)
    247a:	54e2      	strb	r2, [r4, r3]
			}
			else //Time Out再三次內
			{
				tmp_LORA->NowStatus = tmp_LORA->LastStatus;	//重傳上一次的指令
			}
			Print_Who_Lora(tmp_LORA);
    247c:	0020      	movs	r0, r4
    247e:	4b09      	ldr	r3, [pc, #36]	; (24a4 <WaitRxData_Func+0x7c>)
    2480:	4798      	blx	r3
			Print_Time_Out_Msg(tmp_LORA);
    2482:	0020      	movs	r0, r4
    2484:	4b08      	ldr	r3, [pc, #32]	; (24a8 <WaitRxData_Func+0x80>)
    2486:	4798      	blx	r3
			break;
		}
	}
}
    2488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				tmp_LORA->NowStatus = tmp_LORA->LastStatus;	//重傳上一次的指令
    248a:	4b08      	ldr	r3, [pc, #32]	; (24ac <WaitRxData_Func+0x84>)
    248c:	5ce3      	ldrb	r3, [r4, r3]
    248e:	b2db      	uxtb	r3, r3
    2490:	4a03      	ldr	r2, [pc, #12]	; (24a0 <WaitRxData_Func+0x78>)
    2492:	54a3      	strb	r3, [r4, r2]
    2494:	e7f2      	b.n	247c <WaitRxData_Func+0x54>
    2496:	46c0      	nop			; (mov r8, r8)
    2498:	00004709 	.word	0x00004709
    249c:	000007cf 	.word	0x000007cf
    24a0:	00000211 	.word	0x00000211
    24a4:	00002c09 	.word	0x00002c09
    24a8:	00002d21 	.word	0x00002d21
    24ac:	00000212 	.word	0x00000212

000024b0 <UartToLora>:
	//delay_us(10);
	return (tmpA ^ tmpB);
}

void UartToLora(volatile LORA_DEFINE_t *tmp_LORA, unsigned char Myindex)
{
    24b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    24b2:	46ce      	mov	lr, r9
    24b4:	4647      	mov	r7, r8
    24b6:	b580      	push	{r7, lr}
    24b8:	0005      	movs	r5, r0
    24ba:	4689      	mov	r9, r1
	unsigned char XORtmp;
	unsigned char i;
	//計算要傳給Lora模組的CRC
	XORtmp = 0x00;
	for(i = 0; i < tmp_LORA->MyLoRaTmpCount[Myindex]; i++)
    24bc:	1843      	adds	r3, r0, r1
    24be:	3351      	adds	r3, #81	; 0x51
    24c0:	781e      	ldrb	r6, [r3, #0]
    24c2:	b2f6      	uxtb	r6, r6
    24c4:	2e00      	cmp	r6, #0
    24c6:	d013      	beq.n	24f0 <UartToLora+0x40>
    24c8:	2300      	movs	r3, #0
    24ca:	2600      	movs	r6, #0
	{
		XORtmp = MyXORFunc(XORtmp, tmp_LORA->MyLoRaTmp[Myindex][i]);
    24cc:	0049      	lsls	r1, r1, #1
    24ce:	4449      	add	r1, r9
    24d0:	00ca      	lsls	r2, r1, #3
    24d2:	1889      	adds	r1, r1, r2
    24d4:	1841      	adds	r1, r0, r1
	for(i = 0; i < tmp_LORA->MyLoRaTmpCount[Myindex]; i++)
    24d6:	464a      	mov	r2, r9
    24d8:	1880      	adds	r0, r0, r2
    24da:	3051      	adds	r0, #81	; 0x51
		XORtmp = MyXORFunc(XORtmp, tmp_LORA->MyLoRaTmp[Myindex][i]);
    24dc:	18ca      	adds	r2, r1, r3
    24de:	3261      	adds	r2, #97	; 0x61
    24e0:	7812      	ldrb	r2, [r2, #0]
	return (tmpA ^ tmpB);
    24e2:	4056      	eors	r6, r2
	for(i = 0; i < tmp_LORA->MyLoRaTmpCount[Myindex]; i++)
    24e4:	3301      	adds	r3, #1
    24e6:	b2db      	uxtb	r3, r3
    24e8:	7802      	ldrb	r2, [r0, #0]
    24ea:	b2d2      	uxtb	r2, r2
    24ec:	429a      	cmp	r2, r3
    24ee:	d8f5      	bhi.n	24dc <UartToLora+0x2c>
	}
	
	//開始將資料傳給Lora模組
	for(i = 0; i < tmp_LORA->MyLoRaTmpCount[Myindex]; i++)
    24f0:	464b      	mov	r3, r9
    24f2:	18eb      	adds	r3, r5, r3
    24f4:	3351      	adds	r3, #81	; 0x51
    24f6:	781b      	ldrb	r3, [r3, #0]
    24f8:	2b00      	cmp	r3, #0
    24fa:	d02b      	beq.n	2554 <UartToLora+0xa4>
    24fc:	2400      	movs	r4, #0
	{
		
		uTXByte(tmp_LORA->DevUART, tmp_LORA->MyLoRaTmp[Myindex][i]);
    24fe:	464b      	mov	r3, r9
    2500:	005b      	lsls	r3, r3, #1
    2502:	444b      	add	r3, r9
    2504:	00da      	lsls	r2, r3, #3
    2506:	189b      	adds	r3, r3, r2
    2508:	4698      	mov	r8, r3
    250a:	44a8      	add	r8, r5
    250c:	4f1d      	ldr	r7, [pc, #116]	; (2584 <UartToLora+0xd4>)
    250e:	e008      	b.n	2522 <UartToLora+0x72>
	for(i = 0; i < tmp_LORA->MyLoRaTmpCount[Myindex]; i++)
    2510:	3401      	adds	r4, #1
    2512:	b2e4      	uxtb	r4, r4
    2514:	464b      	mov	r3, r9
    2516:	18eb      	adds	r3, r5, r3
    2518:	3351      	adds	r3, #81	; 0x51
    251a:	781b      	ldrb	r3, [r3, #0]
    251c:	b2db      	uxtb	r3, r3
    251e:	42a3      	cmp	r3, r4
    2520:	d918      	bls.n	2554 <UartToLora+0xa4>
		uTXByte(tmp_LORA->DevUART, tmp_LORA->MyLoRaTmp[Myindex][i]);
    2522:	68e8      	ldr	r0, [r5, #12]
    2524:	4643      	mov	r3, r8
    2526:	191b      	adds	r3, r3, r4
    2528:	3361      	adds	r3, #97	; 0x61
    252a:	7819      	ldrb	r1, [r3, #0]
    252c:	b2c9      	uxtb	r1, r1
    252e:	47b8      	blx	r7
		if(tmp_LORA->Lora_Debug_Flag == 1)
    2530:	2385      	movs	r3, #133	; 0x85
    2532:	009b      	lsls	r3, r3, #2
    2534:	5ceb      	ldrb	r3, [r5, r3]
    2536:	2b00      	cmp	r3, #0
    2538:	d0ea      	beq.n	2510 <UartToLora+0x60>
		{
			uart_send_ascii_byte(Debug_COM, tmp_LORA->MyLoRaTmp[Myindex][i]);
    253a:	4643      	mov	r3, r8
    253c:	191b      	adds	r3, r3, r4
    253e:	3361      	adds	r3, #97	; 0x61
    2540:	7819      	ldrb	r1, [r3, #0]
    2542:	b2c9      	uxtb	r1, r1
    2544:	4810      	ldr	r0, [pc, #64]	; (2588 <UartToLora+0xd8>)
    2546:	4b11      	ldr	r3, [pc, #68]	; (258c <UartToLora+0xdc>)
    2548:	4798      	blx	r3
			uTXByte(Debug_COM, ' ');
    254a:	2120      	movs	r1, #32
    254c:	480e      	ldr	r0, [pc, #56]	; (2588 <UartToLora+0xd8>)
    254e:	4b0d      	ldr	r3, [pc, #52]	; (2584 <UartToLora+0xd4>)
    2550:	4798      	blx	r3
    2552:	e7dd      	b.n	2510 <UartToLora+0x60>
		}
	}
	//傳送資料的CRC
	uTXByte(tmp_LORA->DevUART, XORtmp);
    2554:	68e8      	ldr	r0, [r5, #12]
    2556:	0031      	movs	r1, r6
    2558:	4b0a      	ldr	r3, [pc, #40]	; (2584 <UartToLora+0xd4>)
    255a:	4798      	blx	r3
	if(tmp_LORA->Lora_Debug_Flag == 1)
    255c:	2385      	movs	r3, #133	; 0x85
    255e:	009b      	lsls	r3, r3, #2
    2560:	5ceb      	ldrb	r3, [r5, r3]
    2562:	2b00      	cmp	r3, #0
    2564:	d103      	bne.n	256e <UartToLora+0xbe>
	{
		uart_send_ascii_byte(Debug_COM, XORtmp);
		uTXByte(Debug_COM, 0x0d);
	}
}
    2566:	bc0c      	pop	{r2, r3}
    2568:	4690      	mov	r8, r2
    256a:	4699      	mov	r9, r3
    256c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_send_ascii_byte(Debug_COM, XORtmp);
    256e:	4c06      	ldr	r4, [pc, #24]	; (2588 <UartToLora+0xd8>)
    2570:	0031      	movs	r1, r6
    2572:	0020      	movs	r0, r4
    2574:	4b05      	ldr	r3, [pc, #20]	; (258c <UartToLora+0xdc>)
    2576:	4798      	blx	r3
		uTXByte(Debug_COM, 0x0d);
    2578:	210d      	movs	r1, #13
    257a:	0020      	movs	r0, r4
    257c:	4b01      	ldr	r3, [pc, #4]	; (2584 <UartToLora+0xd4>)
    257e:	4798      	blx	r3
}
    2580:	e7f1      	b.n	2566 <UartToLora+0xb6>
    2582:	46c0      	nop			; (mov r8, r8)
    2584:	00003ac9 	.word	0x00003ac9
    2588:	2000022c 	.word	0x2000022c
    258c:	00003ae9 	.word	0x00003ae9

00002590 <Write_LoRa_TxBuffer>:

//寫入資料
void Write_LoRa_TxBuffer(volatile LORA_DEFINE_t *tmp_LORA)
{
    2590:	b510      	push	{r4, lr}
    2592:	0004      	movs	r4, r0
	tmp_LORA->MyBufferCount = 0;
    2594:	2300      	movs	r3, #0
    2596:	7483      	strb	r3, [r0, #18]
	tmp_LORA->UserRxCountMax = 4;
    2598:	3304      	adds	r3, #4
    259a:	7443      	strb	r3, [r0, #17]
	UartToLora(tmp_LORA, Write_LoRa_TxBuffer_Index);
    259c:	2105      	movs	r1, #5
    259e:	4b03      	ldr	r3, [pc, #12]	; (25ac <Write_LoRa_TxBuffer+0x1c>)
    25a0:	4798      	blx	r3
	WaitRxData_Func(tmp_LORA);
    25a2:	0020      	movs	r0, r4
    25a4:	4b02      	ldr	r3, [pc, #8]	; (25b0 <Write_LoRa_TxBuffer+0x20>)
    25a6:	4798      	blx	r3
}
    25a8:	bd10      	pop	{r4, pc}
    25aa:	46c0      	nop			; (mov r8, r8)
    25ac:	000024b1 	.word	0x000024b1
    25b0:	00002429 	.word	0x00002429

000025b4 <Read_LoRa_RxBuffer>:


//讀取資料
void Read_LoRa_RxBuffer(volatile LORA_DEFINE_t *tmp_LORA)
{
    25b4:	b510      	push	{r4, lr}
    25b6:	0004      	movs	r4, r0
	tmp_LORA->MyBufferCount = 0;
    25b8:	2300      	movs	r3, #0
    25ba:	7483      	strb	r3, [r0, #18]
	tmp_LORA->UserRxCountMax = 29;
    25bc:	331d      	adds	r3, #29
    25be:	7443      	strb	r3, [r0, #17]
	UartToLora(tmp_LORA, Read_LoRa_RxBuffer_Index);
    25c0:	2106      	movs	r1, #6
    25c2:	4b03      	ldr	r3, [pc, #12]	; (25d0 <Read_LoRa_RxBuffer+0x1c>)
    25c4:	4798      	blx	r3
	WaitRxData_Func(tmp_LORA);
    25c6:	0020      	movs	r0, r4
    25c8:	4b02      	ldr	r3, [pc, #8]	; (25d4 <Read_LoRa_RxBuffer+0x20>)
    25ca:	4798      	blx	r3
}
    25cc:	bd10      	pop	{r4, pc}
    25ce:	46c0      	nop			; (mov r8, r8)
    25d0:	000024b1 	.word	0x000024b1
    25d4:	00002429 	.word	0x00002429

000025d8 <Read_LoRa_RxCount>:

//讀取接收計數器
void Read_LoRa_RxCount(volatile LORA_DEFINE_t *tmp_LORA)
{
    25d8:	b510      	push	{r4, lr}
    25da:	0004      	movs	r4, r0
	tmp_LORA->MyBufferCount = 0;
    25dc:	2300      	movs	r3, #0
    25de:	7483      	strb	r3, [r0, #18]
	tmp_LORA->UserRxCountMax = 5;
    25e0:	3305      	adds	r3, #5
    25e2:	7443      	strb	r3, [r0, #17]
	UartToLora(tmp_LORA, Read_LoRa_RxCount_Index);
    25e4:	2107      	movs	r1, #7
    25e6:	4b03      	ldr	r3, [pc, #12]	; (25f4 <Read_LoRa_RxCount+0x1c>)
    25e8:	4798      	blx	r3
	WaitRxData_Func(tmp_LORA);
    25ea:	0020      	movs	r0, r4
    25ec:	4b02      	ldr	r3, [pc, #8]	; (25f8 <Read_LoRa_RxCount+0x20>)
    25ee:	4798      	blx	r3
}
    25f0:	bd10      	pop	{r4, pc}
    25f2:	46c0      	nop			; (mov r8, r8)
    25f4:	000024b1 	.word	0x000024b1
    25f8:	00002429 	.word	0x00002429

000025fc <Write_LoRa_Mode_FQ>:

//設定模式與頻率
void Write_LoRa_Mode_FQ(volatile LORA_DEFINE_t *tmp_LORA, unsigned char tmpMode)
{
    25fc:	b510      	push	{r4, lr}
    25fe:	0004      	movs	r4, r0
	tmp_LORA->MyBufferCount = 0;
    2600:	2300      	movs	r3, #0
    2602:	7483      	strb	r3, [r0, #18]
	tmp_LORA->UserRxCountMax = 4;
    2604:	3304      	adds	r3, #4
    2606:	7443      	strb	r3, [r0, #17]
	tmp_LORA->MyLoRaTmp[Write_LoRa_Mode_FQ_Index][3] = tmpMode;	
    2608:	33b1      	adds	r3, #177	; 0xb1
    260a:	54c1      	strb	r1, [r0, r3]
	UartToLora(tmp_LORA, Write_LoRa_Mode_FQ_Index);
    260c:	2103      	movs	r1, #3
    260e:	4b03      	ldr	r3, [pc, #12]	; (261c <Write_LoRa_Mode_FQ+0x20>)
    2610:	4798      	blx	r3
	WaitRxData_Func(tmp_LORA);
    2612:	0020      	movs	r0, r4
    2614:	4b02      	ldr	r3, [pc, #8]	; (2620 <Write_LoRa_Mode_FQ+0x24>)
    2616:	4798      	blx	r3
}
    2618:	bd10      	pop	{r4, pc}
    261a:	46c0      	nop			; (mov r8, r8)
    261c:	000024b1 	.word	0x000024b1
    2620:	00002429 	.word	0x00002429

00002624 <Write_LoRa_Setting>:

//設定Lora參數
void Write_LoRa_Setting(volatile LORA_DEFINE_t *tmp_LORA)
{
    2624:	b510      	push	{r4, lr}
    2626:	0004      	movs	r4, r0
	tmp_LORA->MyBufferCount = 0;
    2628:	2300      	movs	r3, #0
    262a:	7483      	strb	r3, [r0, #18]
	tmp_LORA->UserRxCountMax = 4;
    262c:	3304      	adds	r3, #4
    262e:	7443      	strb	r3, [r0, #17]
	UartToLora(tmp_LORA, Write_LoRa_Setting_Index);
    2630:	2104      	movs	r1, #4
    2632:	4b03      	ldr	r3, [pc, #12]	; (2640 <Write_LoRa_Setting+0x1c>)
    2634:	4798      	blx	r3
	WaitRxData_Func(tmp_LORA);
    2636:	0020      	movs	r0, r4
    2638:	4b02      	ldr	r3, [pc, #8]	; (2644 <Write_LoRa_Setting+0x20>)
    263a:	4798      	blx	r3
}
    263c:	bd10      	pop	{r4, pc}
    263e:	46c0      	nop			; (mov r8, r8)
    2640:	000024b1 	.word	0x000024b1
    2644:	00002429 	.word	0x00002429

00002648 <Read_LoRa_Setting>:

//讀取設定狀態
void Read_LoRa_Setting(volatile LORA_DEFINE_t *tmp_LORA)
{
    2648:	b510      	push	{r4, lr}
    264a:	0004      	movs	r4, r0
	tmp_LORA->MyBufferCount = 0;
    264c:	2300      	movs	r3, #0
    264e:	7483      	strb	r3, [r0, #18]
	tmp_LORA->UserRxCountMax = 11;
    2650:	330b      	adds	r3, #11
    2652:	7443      	strb	r3, [r0, #17]
	UartToLora(tmp_LORA, Read_LoRa_Setting_Index);
    2654:	2102      	movs	r1, #2
    2656:	4b03      	ldr	r3, [pc, #12]	; (2664 <Read_LoRa_Setting+0x1c>)
    2658:	4798      	blx	r3
	WaitRxData_Func(tmp_LORA);
    265a:	0020      	movs	r0, r4
    265c:	4b02      	ldr	r3, [pc, #8]	; (2668 <Read_LoRa_Setting+0x20>)
    265e:	4798      	blx	r3
}
    2660:	bd10      	pop	{r4, pc}
    2662:	46c0      	nop			; (mov r8, r8)
    2664:	000024b1 	.word	0x000024b1
    2668:	00002429 	.word	0x00002429

0000266c <Read_LoRa_ID>:

//讀取FW版本、Chip ID
void Read_LoRa_ID(volatile LORA_DEFINE_t *tmp_LORA)
{
    266c:	b510      	push	{r4, lr}
    266e:	0004      	movs	r4, r0
	tmp_LORA->MyBufferCount = 0;
    2670:	2300      	movs	r3, #0
    2672:	7483      	strb	r3, [r0, #18]
	tmp_LORA->UserRxCountMax = 9;
    2674:	3309      	adds	r3, #9
    2676:	7443      	strb	r3, [r0, #17]
	UartToLora(tmp_LORA, Read_LoRa_ID_Index);	
    2678:	2100      	movs	r1, #0
    267a:	4b03      	ldr	r3, [pc, #12]	; (2688 <Read_LoRa_ID+0x1c>)
    267c:	4798      	blx	r3
	WaitRxData_Func(tmp_LORA);
    267e:	0020      	movs	r0, r4
    2680:	4b02      	ldr	r3, [pc, #8]	; (268c <Read_LoRa_ID+0x20>)
    2682:	4798      	blx	r3
}
    2684:	bd10      	pop	{r4, pc}
    2686:	46c0      	nop			; (mov r8, r8)
    2688:	000024b1 	.word	0x000024b1
    268c:	00002429 	.word	0x00002429

00002690 <Reset_LoRa>:



//重置、初始化
void Reset_LoRa(volatile LORA_DEFINE_t *tmp_LORA)
{
    2690:	b510      	push	{r4, lr}
    2692:	0004      	movs	r4, r0
	tmp_LORA->MyBufferCount = 0;
    2694:	2300      	movs	r3, #0
    2696:	7483      	strb	r3, [r0, #18]
	tmp_LORA->UserRxCountMax = 4;
    2698:	3304      	adds	r3, #4
    269a:	7443      	strb	r3, [r0, #17]
	UartToLora(tmp_LORA, Reset_LoRa_Index);	
    269c:	2101      	movs	r1, #1
    269e:	4b03      	ldr	r3, [pc, #12]	; (26ac <Reset_LoRa+0x1c>)
    26a0:	4798      	blx	r3
	WaitRxData_Func(tmp_LORA);
    26a2:	0020      	movs	r0, r4
    26a4:	4b02      	ldr	r3, [pc, #8]	; (26b0 <Reset_LoRa+0x20>)
    26a6:	4798      	blx	r3
	//tmp_LORA->NowStatus = WaitRxData;
	//tmp_LORA->f_count = 0;
}
    26a8:	bd10      	pop	{r4, pc}
    26aa:	46c0      	nop			; (mov r8, r8)
    26ac:	000024b1 	.word	0x000024b1
    26b0:	00002429 	.word	0x00002429

000026b4 <Catch_Lora_RX_Count_Form_Module>:
}

void Catch_Lora_RX_Count_Form_Module(volatile LORA_DEFINE_t *tmp_LORA)
{
	UINT16u_t	tmp16;
	tmp16.byte[1] = tmp_LORA->MyBuffer[3];
    26b4:	7d82      	ldrb	r2, [r0, #22]
	tmp16.byte[0] = tmp_LORA->MyBuffer[4];
    26b6:	7dc3      	ldrb	r3, [r0, #23]
    26b8:	0212      	lsls	r2, r2, #8
	tmp_LORA->Lora_RX_Count_Form_Module = tmp16.word;
    26ba:	4313      	orrs	r3, r2
    26bc:	2289      	movs	r2, #137	; 0x89
    26be:	0092      	lsls	r2, r2, #2
    26c0:	5083      	str	r3, [r0, r2]
}
    26c2:	4770      	bx	lr

000026c4 <Catch_LoRa_ID>:
}


void Catch_LoRa_ID(volatile LORA_DEFINE_t *tmp_LORA)
{
	tmp_LORA->MyLoRaFW = tmp_LORA->MyBuffer[4];
    26c4:	7dc3      	ldrb	r3, [r0, #23]
    26c6:	b2db      	uxtb	r3, r3
    26c8:	7003      	strb	r3, [r0, #0]
	tmp_LORA->MyLoRaID[0] = tmp_LORA->MyBuffer[5];
    26ca:	7e03      	ldrb	r3, [r0, #24]
    26cc:	b2db      	uxtb	r3, r3
    26ce:	7043      	strb	r3, [r0, #1]
	tmp_LORA->MyLoRaID[1] = tmp_LORA->MyBuffer[6];
    26d0:	7e43      	ldrb	r3, [r0, #25]
    26d2:	b2db      	uxtb	r3, r3
    26d4:	7083      	strb	r3, [r0, #2]
	tmp_LORA->MyLoRaID[2] = tmp_LORA->MyBuffer[7];
    26d6:	7e83      	ldrb	r3, [r0, #26]
    26d8:	b2db      	uxtb	r3, r3
    26da:	70c3      	strb	r3, [r0, #3]
	tmp_LORA->MyLoRaID[3] = tmp_LORA->MyBuffer[8];
    26dc:	7ec3      	ldrb	r3, [r0, #27]
    26de:	b2db      	uxtb	r3, r3
    26e0:	7103      	strb	r3, [r0, #4]
	tmp_LORA->MyLoRaTmp[Write_LoRa_TxBuffer_Index][3] = tmp_LORA->MyLoRaID[0];
	tmp_LORA->MyLoRaTmp[Write_LoRa_TxBuffer_Index][4] = tmp_LORA->MyLoRaID[1];
	tmp_LORA->MyLoRaTmp[Write_LoRa_TxBuffer_Index][5] = tmp_LORA->MyLoRaID[2];
	tmp_LORA->MyLoRaTmp[Write_LoRa_TxBuffer_Index][6] = tmp_LORA->MyLoRaID[3];
	*/
}
    26e2:	4770      	bx	lr

000026e4 <Catch_LoRa_Setting>:

void Catch_LoRa_Setting(volatile LORA_DEFINE_t *tmp_LORA)
{
	tmp_LORA->MyLoRaMode =	tmp_LORA->MyBuffer[3];
    26e4:	7d83      	ldrb	r3, [r0, #22]
    26e6:	b2db      	uxtb	r3, r3
    26e8:	7143      	strb	r3, [r0, #5]
	tmp_LORA->MyLoRaPower = tmp_LORA->MyBuffer[7];
    26ea:	7e83      	ldrb	r3, [r0, #26]
    26ec:	b2db      	uxtb	r3, r3
    26ee:	7183      	strb	r3, [r0, #6]
	tmp_LORA->MyLoRaSF =	tmp_LORA->MyBuffer[10];
    26f0:	7f43      	ldrb	r3, [r0, #29]
    26f2:	b2db      	uxtb	r3, r3
    26f4:	71c3      	strb	r3, [r0, #7]
	tmp_LORA->MyLoRaFQ.byte[3] = 0;
    26f6:	2300      	movs	r3, #0
    26f8:	72c3      	strb	r3, [r0, #11]
	tmp_LORA->MyLoRaFQ.byte[2] = tmp_LORA->MyBuffer[4];
    26fa:	7dc3      	ldrb	r3, [r0, #23]
    26fc:	b2db      	uxtb	r3, r3
    26fe:	7283      	strb	r3, [r0, #10]
	tmp_LORA->MyLoRaFQ.byte[1] = tmp_LORA->MyBuffer[5];
    2700:	7e03      	ldrb	r3, [r0, #24]
    2702:	b2db      	uxtb	r3, r3
    2704:	7243      	strb	r3, [r0, #9]
	tmp_LORA->MyLoRaFQ.byte[0] = tmp_LORA->MyBuffer[6];
    2706:	7e43      	ldrb	r3, [r0, #25]
    2708:	b2db      	uxtb	r3, r3
    270a:	7203      	strb	r3, [r0, #8]
}
    270c:	4770      	bx	lr
	...

00002710 <Lora_CMD_Func>:
{
    2710:	b5f0      	push	{r4, r5, r6, r7, lr}
    2712:	b083      	sub	sp, #12
    2714:	0004      	movs	r4, r0
	switch(tmp_LORA->NowStatus)
    2716:	4bd3      	ldr	r3, [pc, #844]	; (2a64 <Lora_CMD_Func+0x354>)
    2718:	5cc3      	ldrb	r3, [r0, r3]
    271a:	b2db      	uxtb	r3, r3
    271c:	2b71      	cmp	r3, #113	; 0x71
    271e:	d80b      	bhi.n	2738 <Lora_CMD_Func+0x28>
    2720:	009b      	lsls	r3, r3, #2
    2722:	4ad1      	ldr	r2, [pc, #836]	; (2a68 <Lora_CMD_Func+0x358>)
    2724:	58d3      	ldr	r3, [r2, r3]
    2726:	469f      	mov	pc, r3
			Print_Who_Lora(tmp_LORA);
    2728:	4bd0      	ldr	r3, [pc, #832]	; (2a6c <Lora_CMD_Func+0x35c>)
    272a:	4798      	blx	r3
			Print_Delay_LoRa_CMD_Msg(tmp_LORA);
    272c:	0020      	movs	r0, r4
    272e:	4bd0      	ldr	r3, [pc, #832]	; (2a70 <Lora_CMD_Func+0x360>)
    2730:	4798      	blx	r3
			tmp_LORA->NowStatus = Lora_CMD_Delay_Index;	
    2732:	226b      	movs	r2, #107	; 0x6b
    2734:	4bcb      	ldr	r3, [pc, #812]	; (2a64 <Lora_CMD_Func+0x354>)
    2736:	54e2      	strb	r2, [r4, r3]
}
    2738:	b003      	add	sp, #12
    273a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(tmp_LORA->f_count > Lora_CMD_Delay_Count_Max)
    273c:	238c      	movs	r3, #140	; 0x8c
    273e:	009b      	lsls	r3, r3, #2
    2740:	58c3      	ldr	r3, [r0, r3]
    2742:	2b32      	cmp	r3, #50	; 0x32
    2744:	d9f8      	bls.n	2738 <Lora_CMD_Func+0x28>
				if(tmp_LORA->Lora_CRC_Flag == CRCisOK)
    2746:	4bcb      	ldr	r3, [pc, #812]	; (2a74 <Lora_CMD_Func+0x364>)
    2748:	5cc3      	ldrb	r3, [r0, r3]
    274a:	2b00      	cmp	r3, #0
    274c:	d105      	bne.n	275a <Lora_CMD_Func+0x4a>
					tmp_LORA->NowStatus = tmp_LORA->NextStatus;	
    274e:	4bca      	ldr	r3, [pc, #808]	; (2a78 <Lora_CMD_Func+0x368>)
    2750:	5cc3      	ldrb	r3, [r0, r3]
    2752:	b2db      	uxtb	r3, r3
    2754:	4ac3      	ldr	r2, [pc, #780]	; (2a64 <Lora_CMD_Func+0x354>)
    2756:	5483      	strb	r3, [r0, r2]
    2758:	e7ee      	b.n	2738 <Lora_CMD_Func+0x28>
					tmp_LORA->NowStatus = tmp_LORA->LastStatus;	
    275a:	4bc8      	ldr	r3, [pc, #800]	; (2a7c <Lora_CMD_Func+0x36c>)
    275c:	5cc3      	ldrb	r3, [r0, r3]
    275e:	b2db      	uxtb	r3, r3
    2760:	4ac0      	ldr	r2, [pc, #768]	; (2a64 <Lora_CMD_Func+0x354>)
    2762:	5483      	strb	r3, [r0, r2]
    2764:	e7e8      	b.n	2738 <Lora_CMD_Func+0x28>
			Print_Who_Lora(tmp_LORA);
    2766:	4bc1      	ldr	r3, [pc, #772]	; (2a6c <Lora_CMD_Func+0x35c>)
    2768:	4798      	blx	r3
			if(tmp_LORA->Lora_Debug_Flag == 1)
    276a:	2385      	movs	r3, #133	; 0x85
    276c:	009b      	lsls	r3, r3, #2
    276e:	5ce3      	ldrb	r3, [r4, r3]
    2770:	2b00      	cmp	r3, #0
    2772:	d10a      	bne.n	278a <Lora_CMD_Func+0x7a>
			XORtmp = 0x00;
    2774:	2200      	movs	r2, #0
    2776:	466b      	mov	r3, sp
    2778:	71da      	strb	r2, [r3, #7]
			for(i = 0; i < (tmp_LORA->MyBufferCount - 1); i++)
    277a:	7ca3      	ldrb	r3, [r4, #18]
    277c:	3b01      	subs	r3, #1
    277e:	2b00      	cmp	r3, #0
    2780:	dd25      	ble.n	27ce <Lora_CMD_Func+0xbe>
    2782:	2600      	movs	r6, #0
    2784:	2500      	movs	r5, #0
					uart_send_ascii_byte(Debug_COM, tmp_LORA->MyBuffer[i]);
    2786:	4fbe      	ldr	r7, [pc, #760]	; (2a80 <Lora_CMD_Func+0x370>)
    2788:	e012      	b.n	27b0 <Lora_CMD_Func+0xa0>
				uTXByte(Debug_COM, 0x09);
    278a:	2109      	movs	r1, #9
    278c:	48bd      	ldr	r0, [pc, #756]	; (2a84 <Lora_CMD_Func+0x374>)
    278e:	4bbe      	ldr	r3, [pc, #760]	; (2a88 <Lora_CMD_Func+0x378>)
    2790:	4798      	blx	r3
    2792:	e7ef      	b.n	2774 <Lora_CMD_Func+0x64>
				XORtmp = XORtmp ^ tmp_LORA->MyBuffer[i];
    2794:	19a6      	adds	r6, r4, r6
    2796:	7cf1      	ldrb	r1, [r6, #19]
    2798:	466b      	mov	r3, sp
    279a:	1dda      	adds	r2, r3, #7
    279c:	79db      	ldrb	r3, [r3, #7]
    279e:	404b      	eors	r3, r1
    27a0:	7013      	strb	r3, [r2, #0]
			for(i = 0; i < (tmp_LORA->MyBufferCount - 1); i++)
    27a2:	3501      	adds	r5, #1
    27a4:	b2ed      	uxtb	r5, r5
    27a6:	002e      	movs	r6, r5
    27a8:	7ca3      	ldrb	r3, [r4, #18]
    27aa:	3b01      	subs	r3, #1
    27ac:	429d      	cmp	r5, r3
    27ae:	da0e      	bge.n	27ce <Lora_CMD_Func+0xbe>
				if(tmp_LORA->Lora_Debug_Flag == 1)
    27b0:	2385      	movs	r3, #133	; 0x85
    27b2:	009b      	lsls	r3, r3, #2
    27b4:	5ce3      	ldrb	r3, [r4, r3]
    27b6:	2b00      	cmp	r3, #0
    27b8:	d0ec      	beq.n	2794 <Lora_CMD_Func+0x84>
					uart_send_ascii_byte(Debug_COM, tmp_LORA->MyBuffer[i]);
    27ba:	19a3      	adds	r3, r4, r6
    27bc:	7cd9      	ldrb	r1, [r3, #19]
    27be:	b2c9      	uxtb	r1, r1
    27c0:	48b0      	ldr	r0, [pc, #704]	; (2a84 <Lora_CMD_Func+0x374>)
    27c2:	47b8      	blx	r7
					uTXByte(Debug_COM, ' ');
    27c4:	2120      	movs	r1, #32
    27c6:	48af      	ldr	r0, [pc, #700]	; (2a84 <Lora_CMD_Func+0x374>)
    27c8:	4baf      	ldr	r3, [pc, #700]	; (2a88 <Lora_CMD_Func+0x378>)
    27ca:	4798      	blx	r3
    27cc:	e7e2      	b.n	2794 <Lora_CMD_Func+0x84>
			if(tmp_LORA->Lora_Debug_Flag == 1)
    27ce:	2385      	movs	r3, #133	; 0x85
    27d0:	009b      	lsls	r3, r3, #2
    27d2:	5ce3      	ldrb	r3, [r4, r3]
    27d4:	2b00      	cmp	r3, #0
    27d6:	d117      	bne.n	2808 <Lora_CMD_Func+0xf8>
			if(tmp_LORA->MyBuffer[(tmp_LORA->MyBufferCount - 1)] != XORtmp) //如果CRC錯誤
    27d8:	7ca3      	ldrb	r3, [r4, #18]
    27da:	3b01      	subs	r3, #1
    27dc:	18e3      	adds	r3, r4, r3
    27de:	7cdb      	ldrb	r3, [r3, #19]
    27e0:	466a      	mov	r2, sp
    27e2:	3207      	adds	r2, #7
    27e4:	7812      	ldrb	r2, [r2, #0]
    27e6:	b2db      	uxtb	r3, r3
    27e8:	4293      	cmp	r3, r2
    27ea:	d030      	beq.n	284e <Lora_CMD_Func+0x13e>
				Print_CRC_ERROR(tmp_LORA);	
    27ec:	0020      	movs	r0, r4
    27ee:	4ba7      	ldr	r3, [pc, #668]	; (2a8c <Lora_CMD_Func+0x37c>)
    27f0:	4798      	blx	r3
				tmp_LORA->Lora_CRC_Flag = CRCisErr;
    27f2:	2201      	movs	r2, #1
    27f4:	4b9f      	ldr	r3, [pc, #636]	; (2a74 <Lora_CMD_Func+0x364>)
    27f6:	54e2      	strb	r2, [r4, r3]
			tmp_LORA->f_count = 0;
    27f8:	2200      	movs	r2, #0
    27fa:	238c      	movs	r3, #140	; 0x8c
    27fc:	009b      	lsls	r3, r3, #2
    27fe:	50e2      	str	r2, [r4, r3]
			tmp_LORA->NowStatus = Print_Lora_CMD_Delay_Index;	//進入DelayTime，再進行資料傳輸
    2800:	3271      	adds	r2, #113	; 0x71
    2802:	4b98      	ldr	r3, [pc, #608]	; (2a64 <Lora_CMD_Func+0x354>)
    2804:	54e2      	strb	r2, [r4, r3]
			break;
    2806:	e797      	b.n	2738 <Lora_CMD_Func+0x28>
				uTXByte(Debug_COM, '-');
    2808:	4d9e      	ldr	r5, [pc, #632]	; (2a84 <Lora_CMD_Func+0x374>)
    280a:	212d      	movs	r1, #45	; 0x2d
    280c:	0028      	movs	r0, r5
    280e:	4e9e      	ldr	r6, [pc, #632]	; (2a88 <Lora_CMD_Func+0x378>)
    2810:	47b0      	blx	r6
				uTXByte(Debug_COM, ' ');
    2812:	2120      	movs	r1, #32
    2814:	0028      	movs	r0, r5
    2816:	47b0      	blx	r6
				uart_send_ascii_byte(Debug_COM, tmp_LORA->MyBuffer[(tmp_LORA->MyBufferCount-1)]);
    2818:	7ca3      	ldrb	r3, [r4, #18]
    281a:	3b01      	subs	r3, #1
    281c:	18e3      	adds	r3, r4, r3
    281e:	7cd9      	ldrb	r1, [r3, #19]
    2820:	b2c9      	uxtb	r1, r1
    2822:	0028      	movs	r0, r5
    2824:	4f96      	ldr	r7, [pc, #600]	; (2a80 <Lora_CMD_Func+0x370>)
    2826:	47b8      	blx	r7
				uTXByte(Debug_COM, ' ');
    2828:	2120      	movs	r1, #32
    282a:	0028      	movs	r0, r5
    282c:	47b0      	blx	r6
				uart_send_ascii_byte(Debug_COM, tmp_LORA->MyBufferCount);
    282e:	7ca1      	ldrb	r1, [r4, #18]
    2830:	b2c9      	uxtb	r1, r1
    2832:	0028      	movs	r0, r5
    2834:	47b8      	blx	r7
				uTXByte(Debug_COM, ' ');
    2836:	2120      	movs	r1, #32
    2838:	0028      	movs	r0, r5
    283a:	47b0      	blx	r6
				uart_send_ascii_byte(Debug_COM, XORtmp);
    283c:	466b      	mov	r3, sp
    283e:	79d9      	ldrb	r1, [r3, #7]
    2840:	b2c9      	uxtb	r1, r1
    2842:	0028      	movs	r0, r5
    2844:	47b8      	blx	r7
				uTXByte(Debug_COM, ' ');
    2846:	2120      	movs	r1, #32
    2848:	0028      	movs	r0, r5
    284a:	47b0      	blx	r6
    284c:	e7c4      	b.n	27d8 <Lora_CMD_Func+0xc8>
				Print_CRC_OK(tmp_LORA);
    284e:	0020      	movs	r0, r4
    2850:	4b8f      	ldr	r3, [pc, #572]	; (2a90 <Lora_CMD_Func+0x380>)
    2852:	4798      	blx	r3
				tmp_LORA->Lora_CRC_Flag = CRCisOK;
    2854:	2200      	movs	r2, #0
    2856:	4b87      	ldr	r3, [pc, #540]	; (2a74 <Lora_CMD_Func+0x364>)
    2858:	54e2      	strb	r2, [r4, r3]
				tmp16.byte[1] = tmp_LORA->MyBuffer[27];
    285a:	3be9      	subs	r3, #233	; 0xe9
    285c:	3bff      	subs	r3, #255	; 0xff
    285e:	5ce3      	ldrb	r3, [r4, r3]
				tmp16.byte[0] = tmp_LORA->MyBuffer[28];
    2860:	322f      	adds	r2, #47	; 0x2f
    2862:	5ca2      	ldrb	r2, [r4, r2]
    2864:	021b      	lsls	r3, r3, #8
				tmp_LORA->RSSIValue = tmp16.word;
    2866:	431a      	orrs	r2, r3
    2868:	2388      	movs	r3, #136	; 0x88
    286a:	009b      	lsls	r3, r3, #2
    286c:	50e2      	str	r2, [r4, r3]
				tmp_LORA->RSSIValue = 65536 - tmp_LORA->RSSIValue;
    286e:	58e1      	ldr	r1, [r4, r3]
    2870:	2280      	movs	r2, #128	; 0x80
    2872:	0252      	lsls	r2, r2, #9
    2874:	1a52      	subs	r2, r2, r1
    2876:	50e2      	str	r2, [r4, r3]
    2878:	e7be      	b.n	27f8 <Lora_CMD_Func+0xe8>
			tmp_LORA->Lora_initial_Flag = 0;
    287a:	2300      	movs	r3, #0
    287c:	4a85      	ldr	r2, [pc, #532]	; (2a94 <Lora_CMD_Func+0x384>)
    287e:	5483      	strb	r3, [r0, r2]
			tmp_LORA->LastStatus = Read_LoRa_ID_Index;	//記得現在位置
    2880:	4a7e      	ldr	r2, [pc, #504]	; (2a7c <Lora_CMD_Func+0x36c>)
    2882:	5483      	strb	r3, [r0, r2]
			tmp_LORA->NextStatus = Catch_LoRa_ID_Index;	//CRC OK後，要去的位置
    2884:	3aaa      	subs	r2, #170	; 0xaa
    2886:	3aff      	subs	r2, #255	; 0xff
    2888:	4b7b      	ldr	r3, [pc, #492]	; (2a78 <Lora_CMD_Func+0x368>)
    288a:	54c2      	strb	r2, [r0, r3]
				Print_Who_Lora(tmp_LORA);
    288c:	4b77      	ldr	r3, [pc, #476]	; (2a6c <Lora_CMD_Func+0x35c>)
    288e:	4798      	blx	r3
				Print_Read_LoRa_ID_Msg(tmp_LORA);
    2890:	0020      	movs	r0, r4
    2892:	4b81      	ldr	r3, [pc, #516]	; (2a98 <Lora_CMD_Func+0x388>)
    2894:	4798      	blx	r3
			Read_LoRa_ID(tmp_LORA);			//送出Read_LoRa_ID後，再進入WaitRxData等待Uart回傳
    2896:	0020      	movs	r0, r4
    2898:	4b80      	ldr	r3, [pc, #512]	; (2a9c <Lora_CMD_Func+0x38c>)
    289a:	4798      	blx	r3
			break;
    289c:	e74c      	b.n	2738 <Lora_CMD_Func+0x28>
			tmp_LORA->Lora_initial_Flag = 0;
    289e:	2200      	movs	r2, #0
    28a0:	4b7c      	ldr	r3, [pc, #496]	; (2a94 <Lora_CMD_Func+0x384>)
    28a2:	54c2      	strb	r2, [r0, r3]
			Catch_LoRa_ID(tmp_LORA);
    28a4:	4b7e      	ldr	r3, [pc, #504]	; (2aa0 <Lora_CMD_Func+0x390>)
    28a6:	4798      	blx	r3
				Print_Lora_number(tmp_LORA);
    28a8:	0020      	movs	r0, r4
    28aa:	4b7e      	ldr	r3, [pc, #504]	; (2aa4 <Lora_CMD_Func+0x394>)
    28ac:	4798      	blx	r3
				uTXByte(Debug_COM, 0x0d);
    28ae:	210d      	movs	r1, #13
    28b0:	4874      	ldr	r0, [pc, #464]	; (2a84 <Lora_CMD_Func+0x374>)
    28b2:	4b75      	ldr	r3, [pc, #468]	; (2a88 <Lora_CMD_Func+0x378>)
    28b4:	4798      	blx	r3
				Print_Catch_LoRa_ID_Msg(tmp_LORA);	
    28b6:	0020      	movs	r0, r4
    28b8:	4b7b      	ldr	r3, [pc, #492]	; (2aa8 <Lora_CMD_Func+0x398>)
    28ba:	4798      	blx	r3
			tmp_LORA->NowStatus = Reset_LoRa_Index;
    28bc:	2201      	movs	r2, #1
    28be:	4b69      	ldr	r3, [pc, #420]	; (2a64 <Lora_CMD_Func+0x354>)
    28c0:	54e2      	strb	r2, [r4, r3]
			break;
    28c2:	e739      	b.n	2738 <Lora_CMD_Func+0x28>
			tmp_LORA->Lora_initial_Flag = 0;
    28c4:	2200      	movs	r2, #0
    28c6:	4b73      	ldr	r3, [pc, #460]	; (2a94 <Lora_CMD_Func+0x384>)
    28c8:	54c2      	strb	r2, [r0, r3]
			tmp_LORA->LastStatus = Reset_LoRa_Index;
    28ca:	3201      	adds	r2, #1
    28cc:	4b6b      	ldr	r3, [pc, #428]	; (2a7c <Lora_CMD_Func+0x36c>)
    28ce:	54c2      	strb	r2, [r0, r3]
			tmp_LORA->NextStatus = Write_LoRa_Setting_Index;
    28d0:	3203      	adds	r2, #3
    28d2:	4b69      	ldr	r3, [pc, #420]	; (2a78 <Lora_CMD_Func+0x368>)
    28d4:	54c2      	strb	r2, [r0, r3]
				Print_Who_Lora(tmp_LORA);
    28d6:	4b65      	ldr	r3, [pc, #404]	; (2a6c <Lora_CMD_Func+0x35c>)
    28d8:	4798      	blx	r3
				Print_Reset_LoRa_Msg(tmp_LORA);
    28da:	0020      	movs	r0, r4
    28dc:	4b73      	ldr	r3, [pc, #460]	; (2aac <Lora_CMD_Func+0x39c>)
    28de:	4798      	blx	r3
			Reset_LoRa(tmp_LORA);
    28e0:	0020      	movs	r0, r4
    28e2:	4b73      	ldr	r3, [pc, #460]	; (2ab0 <Lora_CMD_Func+0x3a0>)
    28e4:	4798      	blx	r3
			break;
    28e6:	e727      	b.n	2738 <Lora_CMD_Func+0x28>
			tmp_LORA->Lora_initial_Flag = 0;
    28e8:	2200      	movs	r2, #0
    28ea:	4b6a      	ldr	r3, [pc, #424]	; (2a94 <Lora_CMD_Func+0x384>)
    28ec:	54c2      	strb	r2, [r0, r3]
			tmp_LORA->LastStatus = Write_LoRa_Setting_Index;
    28ee:	3204      	adds	r2, #4
    28f0:	4b62      	ldr	r3, [pc, #392]	; (2a7c <Lora_CMD_Func+0x36c>)
    28f2:	54c2      	strb	r2, [r0, r3]
			tmp_LORA->NextStatus = Write_LoRa_Mode_FQ_Index;	
    28f4:	3a01      	subs	r2, #1
    28f6:	4b60      	ldr	r3, [pc, #384]	; (2a78 <Lora_CMD_Func+0x368>)
    28f8:	54c2      	strb	r2, [r0, r3]
				Print_Who_Lora(tmp_LORA);		
    28fa:	4b5c      	ldr	r3, [pc, #368]	; (2a6c <Lora_CMD_Func+0x35c>)
    28fc:	4798      	blx	r3
				Print_Write_LoRa_Setting_Msg(tmp_LORA);
    28fe:	0020      	movs	r0, r4
    2900:	4b6c      	ldr	r3, [pc, #432]	; (2ab4 <Lora_CMD_Func+0x3a4>)
    2902:	4798      	blx	r3
			Write_LoRa_Setting(tmp_LORA);
    2904:	0020      	movs	r0, r4
    2906:	4b6c      	ldr	r3, [pc, #432]	; (2ab8 <Lora_CMD_Func+0x3a8>)
    2908:	4798      	blx	r3
			break;
    290a:	e715      	b.n	2738 <Lora_CMD_Func+0x28>
			tmp_LORA->Lora_initial_Flag = 0;
    290c:	2200      	movs	r2, #0
    290e:	4b61      	ldr	r3, [pc, #388]	; (2a94 <Lora_CMD_Func+0x384>)
    2910:	54c2      	strb	r2, [r0, r3]
			tmp_LORA->LastStatus = Write_LoRa_Mode_FQ_Index;
    2912:	3203      	adds	r2, #3
    2914:	4b59      	ldr	r3, [pc, #356]	; (2a7c <Lora_CMD_Func+0x36c>)
    2916:	54c2      	strb	r2, [r0, r3]
			tmp_LORA->NextStatus = Read_LoRa_Setting_Index;
    2918:	3a01      	subs	r2, #1
    291a:	4b57      	ldr	r3, [pc, #348]	; (2a78 <Lora_CMD_Func+0x368>)
    291c:	54c2      	strb	r2, [r0, r3]
				Print_Who_Lora(tmp_LORA);
    291e:	4b53      	ldr	r3, [pc, #332]	; (2a6c <Lora_CMD_Func+0x35c>)
    2920:	4798      	blx	r3
				Print_Write_LoRa_Mode_FQ_Msg(tmp_LORA);
    2922:	0020      	movs	r0, r4
    2924:	4b65      	ldr	r3, [pc, #404]	; (2abc <Lora_CMD_Func+0x3ac>)
    2926:	4798      	blx	r3
			if(tmp_LORA->LoRa_TxRx_Mode_Flag == SetRx)
    2928:	4b65      	ldr	r3, [pc, #404]	; (2ac0 <Lora_CMD_Func+0x3b0>)
    292a:	5ce3      	ldrb	r3, [r4, r3]
    292c:	2b03      	cmp	r3, #3
    292e:	d004      	beq.n	293a <Lora_CMD_Func+0x22a>
				Write_LoRa_Mode_FQ(tmp_LORA, SetTx);
    2930:	2102      	movs	r1, #2
    2932:	0020      	movs	r0, r4
    2934:	4b63      	ldr	r3, [pc, #396]	; (2ac4 <Lora_CMD_Func+0x3b4>)
    2936:	4798      	blx	r3
    2938:	e6fe      	b.n	2738 <Lora_CMD_Func+0x28>
				Write_LoRa_Mode_FQ(tmp_LORA, SetRx);
    293a:	2103      	movs	r1, #3
    293c:	0020      	movs	r0, r4
    293e:	4b61      	ldr	r3, [pc, #388]	; (2ac4 <Lora_CMD_Func+0x3b4>)
    2940:	4798      	blx	r3
    2942:	e6f9      	b.n	2738 <Lora_CMD_Func+0x28>
			tmp_LORA->Lora_initial_Flag = 0;
    2944:	2200      	movs	r2, #0
    2946:	4b53      	ldr	r3, [pc, #332]	; (2a94 <Lora_CMD_Func+0x384>)
    2948:	54c2      	strb	r2, [r0, r3]
			tmp_LORA->LastStatus = Read_LoRa_Setting_Index;
    294a:	3202      	adds	r2, #2
    294c:	4b4b      	ldr	r3, [pc, #300]	; (2a7c <Lora_CMD_Func+0x36c>)
    294e:	54c2      	strb	r2, [r0, r3]
			tmp_LORA->NextStatus = Catch_LoRa_Setting_Index;
    2950:	326c      	adds	r2, #108	; 0x6c
    2952:	4b49      	ldr	r3, [pc, #292]	; (2a78 <Lora_CMD_Func+0x368>)
    2954:	54c2      	strb	r2, [r0, r3]
			Print_Who_Lora(tmp_LORA);
    2956:	4b45      	ldr	r3, [pc, #276]	; (2a6c <Lora_CMD_Func+0x35c>)
    2958:	4798      	blx	r3
			Print_Read_LoRa_Setting_Msg(tmp_LORA);
    295a:	0020      	movs	r0, r4
    295c:	4b5a      	ldr	r3, [pc, #360]	; (2ac8 <Lora_CMD_Func+0x3b8>)
    295e:	4798      	blx	r3
			Read_LoRa_Setting(tmp_LORA);
    2960:	0020      	movs	r0, r4
    2962:	4b5a      	ldr	r3, [pc, #360]	; (2acc <Lora_CMD_Func+0x3bc>)
    2964:	4798      	blx	r3
			break;
    2966:	e6e7      	b.n	2738 <Lora_CMD_Func+0x28>
			Catch_LoRa_Setting(tmp_LORA);
    2968:	4b59      	ldr	r3, [pc, #356]	; (2ad0 <Lora_CMD_Func+0x3c0>)
    296a:	4798      	blx	r3
			if(tmp_LORA->LoRa_TxRx_Mode_Flag == SetRx)
    296c:	4b54      	ldr	r3, [pc, #336]	; (2ac0 <Lora_CMD_Func+0x3b0>)
    296e:	5ce3      	ldrb	r3, [r4, r3]
    2970:	2b03      	cmp	r3, #3
    2972:	d00f      	beq.n	2994 <Lora_CMD_Func+0x284>
			if(tmp_LORA->LoRa_TxRx_Mode_Flag == SetTx)
    2974:	4b52      	ldr	r3, [pc, #328]	; (2ac0 <Lora_CMD_Func+0x3b0>)
    2976:	5ce3      	ldrb	r3, [r4, r3]
    2978:	2b02      	cmp	r3, #2
    297a:	d015      	beq.n	29a8 <Lora_CMD_Func+0x298>
			if(tmp_LORA->LoRa_TxRx_Mode_Flag == SetNOP)
    297c:	4b50      	ldr	r3, [pc, #320]	; (2ac0 <Lora_CMD_Func+0x3b0>)
    297e:	5ce3      	ldrb	r3, [r4, r3]
    2980:	2b04      	cmp	r3, #4
    2982:	d000      	beq.n	2986 <Lora_CMD_Func+0x276>
    2984:	e6d8      	b.n	2738 <Lora_CMD_Func+0x28>
				tmp_LORA->NowStatus = NOP_Index;
    2986:	2266      	movs	r2, #102	; 0x66
    2988:	4b36      	ldr	r3, [pc, #216]	; (2a64 <Lora_CMD_Func+0x354>)
    298a:	54e2      	strb	r2, [r4, r3]
				tmp_LORA->Lora_initial_Flag = 1;
    298c:	3a65      	subs	r2, #101	; 0x65
    298e:	4b41      	ldr	r3, [pc, #260]	; (2a94 <Lora_CMD_Func+0x384>)
    2990:	54e2      	strb	r2, [r4, r3]
    2992:	e6d1      	b.n	2738 <Lora_CMD_Func+0x28>
				tmp_LORA->NowStatus = Read_LoRa_RxCount_Index;
    2994:	2207      	movs	r2, #7
    2996:	4b33      	ldr	r3, [pc, #204]	; (2a64 <Lora_CMD_Func+0x354>)
    2998:	54e2      	strb	r2, [r4, r3]
				tmp_LORA->f_count = 0;
    299a:	2200      	movs	r2, #0
    299c:	331f      	adds	r3, #31
    299e:	50e2      	str	r2, [r4, r3]
				tmp_LORA->Lora_initial_Flag = 1;
    29a0:	3201      	adds	r2, #1
    29a2:	4b3c      	ldr	r3, [pc, #240]	; (2a94 <Lora_CMD_Func+0x384>)
    29a4:	54e2      	strb	r2, [r4, r3]
    29a6:	e6c7      	b.n	2738 <Lora_CMD_Func+0x28>
				tmp_LORA->NowStatus = Write_LoRa_TxBuffer_Index;
    29a8:	2205      	movs	r2, #5
    29aa:	4b2e      	ldr	r3, [pc, #184]	; (2a64 <Lora_CMD_Func+0x354>)
    29ac:	54e2      	strb	r2, [r4, r3]
				tmp_LORA->Lora_initial_Flag = 1;
    29ae:	3a04      	subs	r2, #4
    29b0:	4b38      	ldr	r3, [pc, #224]	; (2a94 <Lora_CMD_Func+0x384>)
    29b2:	54e2      	strb	r2, [r4, r3]
    29b4:	e6c0      	b.n	2738 <Lora_CMD_Func+0x28>
			if(LORA01->f_count > Lora_Wait_RX_Delay_1000ms)
    29b6:	4b47      	ldr	r3, [pc, #284]	; (2ad4 <Lora_CMD_Func+0x3c4>)
    29b8:	681a      	ldr	r2, [r3, #0]
    29ba:	238c      	movs	r3, #140	; 0x8c
    29bc:	009b      	lsls	r3, r3, #2
    29be:	58d2      	ldr	r2, [r2, r3]
    29c0:	4b45      	ldr	r3, [pc, #276]	; (2ad8 <Lora_CMD_Func+0x3c8>)
    29c2:	429a      	cmp	r2, r3
    29c4:	d909      	bls.n	29da <Lora_CMD_Func+0x2ca>
				if(tmp_LORA->LoRa_Tx_Send_Time_Out_Count < 2)
    29c6:	2387      	movs	r3, #135	; 0x87
    29c8:	009b      	lsls	r3, r3, #2
    29ca:	5cc3      	ldrb	r3, [r0, r3]
    29cc:	b2db      	uxtb	r3, r3
    29ce:	2b01      	cmp	r3, #1
    29d0:	d91e      	bls.n	2a10 <Lora_CMD_Func+0x300>
					tmp_LORA->LoRa_Rx_Flag = LoraRxNoData;
    29d2:	2200      	movs	r2, #0
    29d4:	2386      	movs	r3, #134	; 0x86
    29d6:	009b      	lsls	r3, r3, #2
    29d8:	54c2      	strb	r2, [r0, r3]
			if(tmp_LORA->LoRa_IRQ_Flag == 1)
    29da:	4b40      	ldr	r3, [pc, #256]	; (2adc <Lora_CMD_Func+0x3cc>)
    29dc:	5ce3      	ldrb	r3, [r4, r3]
    29de:	2b00      	cmp	r3, #0
    29e0:	d100      	bne.n	29e4 <Lora_CMD_Func+0x2d4>
    29e2:	e6a9      	b.n	2738 <Lora_CMD_Func+0x28>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    29e4:	2280      	movs	r2, #128	; 0x80
    29e6:	0552      	lsls	r2, r2, #21
    29e8:	4b3d      	ldr	r3, [pc, #244]	; (2ae0 <Lora_CMD_Func+0x3d0>)
    29ea:	615a      	str	r2, [r3, #20]
				wdt_reset_count();
    29ec:	4b3d      	ldr	r3, [pc, #244]	; (2ae4 <Lora_CMD_Func+0x3d4>)
    29ee:	4798      	blx	r3
				tmp_LORA->LastStatus = Read_LoRa_RxCount_Index;
    29f0:	2207      	movs	r2, #7
    29f2:	4b22      	ldr	r3, [pc, #136]	; (2a7c <Lora_CMD_Func+0x36c>)
    29f4:	54e2      	strb	r2, [r4, r3]
				tmp_LORA->NextStatus = Catch_Lora_RX_Count_Form_Module_Index;
    29f6:	3266      	adds	r2, #102	; 0x66
    29f8:	4b1f      	ldr	r3, [pc, #124]	; (2a78 <Lora_CMD_Func+0x368>)
    29fa:	54e2      	strb	r2, [r4, r3]
					Print_Who_Lora(tmp_LORA);
    29fc:	0020      	movs	r0, r4
    29fe:	4b1b      	ldr	r3, [pc, #108]	; (2a6c <Lora_CMD_Func+0x35c>)
    2a00:	4798      	blx	r3
					Print_Read_LoRa_RxCount_Msg(tmp_LORA);
    2a02:	0020      	movs	r0, r4
    2a04:	4b38      	ldr	r3, [pc, #224]	; (2ae8 <Lora_CMD_Func+0x3d8>)
    2a06:	4798      	blx	r3
				Read_LoRa_RxCount(tmp_LORA);
    2a08:	0020      	movs	r0, r4
    2a0a:	4b38      	ldr	r3, [pc, #224]	; (2aec <Lora_CMD_Func+0x3dc>)
    2a0c:	4798      	blx	r3
    2a0e:	e693      	b.n	2738 <Lora_CMD_Func+0x28>
					tmp_LORA->LoRa_Tx_Send_Time_Out_Count++;
    2a10:	2287      	movs	r2, #135	; 0x87
    2a12:	0092      	lsls	r2, r2, #2
    2a14:	5c83      	ldrb	r3, [r0, r2]
    2a16:	3301      	adds	r3, #1
    2a18:	b2db      	uxtb	r3, r3
    2a1a:	5483      	strb	r3, [r0, r2]
	tmp_LORA->NowStatus = Write_LoRa_Setting_Index;
    2a1c:	2204      	movs	r2, #4
    2a1e:	4b11      	ldr	r3, [pc, #68]	; (2a64 <Lora_CMD_Func+0x354>)
    2a20:	54c2      	strb	r2, [r0, r3]
	tmp_LORA->LoRa_TxRx_Mode_Flag = SetTx;
    2a22:	3a02      	subs	r2, #2
    2a24:	4b26      	ldr	r3, [pc, #152]	; (2ac0 <Lora_CMD_Func+0x3b0>)
    2a26:	54c2      	strb	r2, [r0, r3]
	tmp_LORA->LoRa_Rx_Flag = LoraRxNoData;
    2a28:	2200      	movs	r2, #0
    2a2a:	3b05      	subs	r3, #5
    2a2c:	54c2      	strb	r2, [r0, r3]
    2a2e:	e7d4      	b.n	29da <Lora_CMD_Func+0x2ca>
		port_base->OUTSET.reg = pin_mask;
    2a30:	2280      	movs	r2, #128	; 0x80
    2a32:	0552      	lsls	r2, r2, #21
    2a34:	4b2a      	ldr	r3, [pc, #168]	; (2ae0 <Lora_CMD_Func+0x3d0>)
    2a36:	619a      	str	r2, [r3, #24]
			Catch_Lora_RX_Count_Form_Module(tmp_LORA);
    2a38:	4b2d      	ldr	r3, [pc, #180]	; (2af0 <Lora_CMD_Func+0x3e0>)
    2a3a:	4798      	blx	r3
			tmp_LORA->NowStatus = Read_LoRa_RxBuffer_Index;
    2a3c:	2206      	movs	r2, #6
    2a3e:	4b09      	ldr	r3, [pc, #36]	; (2a64 <Lora_CMD_Func+0x354>)
    2a40:	54e2      	strb	r2, [r4, r3]
			break;
    2a42:	e679      	b.n	2738 <Lora_CMD_Func+0x28>
			tmp_LORA->LastStatus = Read_LoRa_RxBuffer_Index;
    2a44:	2206      	movs	r2, #6
    2a46:	4b0d      	ldr	r3, [pc, #52]	; (2a7c <Lora_CMD_Func+0x36c>)
    2a48:	54c2      	strb	r2, [r0, r3]
			tmp_LORA->NextStatus = Reset_IRQ_Flag_Index;
    2a4a:	325e      	adds	r2, #94	; 0x5e
    2a4c:	4b0a      	ldr	r3, [pc, #40]	; (2a78 <Lora_CMD_Func+0x368>)
    2a4e:	54c2      	strb	r2, [r0, r3]
				Print_Who_Lora(tmp_LORA);
    2a50:	4b06      	ldr	r3, [pc, #24]	; (2a6c <Lora_CMD_Func+0x35c>)
    2a52:	4798      	blx	r3
				Print_Read_LoRa_RxBuffer_Msg(tmp_LORA);
    2a54:	0020      	movs	r0, r4
    2a56:	4b27      	ldr	r3, [pc, #156]	; (2af4 <Lora_CMD_Func+0x3e4>)
    2a58:	4798      	blx	r3
			Read_LoRa_RxBuffer(tmp_LORA);
    2a5a:	0020      	movs	r0, r4
    2a5c:	4b26      	ldr	r3, [pc, #152]	; (2af8 <Lora_CMD_Func+0x3e8>)
    2a5e:	4798      	blx	r3
			break;
    2a60:	e66a      	b.n	2738 <Lora_CMD_Func+0x28>
    2a62:	46c0      	nop			; (mov r8, r8)
    2a64:	00000211 	.word	0x00000211
    2a68:	000056f4 	.word	0x000056f4
    2a6c:	00002c09 	.word	0x00002c09
    2a70:	00002cc9 	.word	0x00002cc9
    2a74:	00000216 	.word	0x00000216
    2a78:	00000213 	.word	0x00000213
    2a7c:	00000212 	.word	0x00000212
    2a80:	00003ae9 	.word	0x00003ae9
    2a84:	2000022c 	.word	0x2000022c
    2a88:	00003ac9 	.word	0x00003ac9
    2a8c:	00003339 	.word	0x00003339
    2a90:	00003385 	.word	0x00003385
    2a94:	00000215 	.word	0x00000215
    2a98:	00002c89 	.word	0x00002c89
    2a9c:	0000266d 	.word	0x0000266d
    2aa0:	000026c5 	.word	0x000026c5
    2aa4:	000016f9 	.word	0x000016f9
    2aa8:	00002d75 	.word	0x00002d75
    2aac:	00003061 	.word	0x00003061
    2ab0:	00002691 	.word	0x00002691
    2ab4:	00003129 	.word	0x00003129
    2ab8:	00002625 	.word	0x00002625
    2abc:	000030e9 	.word	0x000030e9
    2ac0:	0000021d 	.word	0x0000021d
    2ac4:	000025fd 	.word	0x000025fd
    2ac8:	000030a9 	.word	0x000030a9
    2acc:	00002649 	.word	0x00002649
    2ad0:	000026e5 	.word	0x000026e5
    2ad4:	20001048 	.word	0x20001048
    2ad8:	00001388 	.word	0x00001388
    2adc:	00000217 	.word	0x00000217
    2ae0:	41004400 	.word	0x41004400
    2ae4:	000022f9 	.word	0x000022f9
    2ae8:	00003169 	.word	0x00003169
    2aec:	000025d9 	.word	0x000025d9
    2af0:	000026b5 	.word	0x000026b5
    2af4:	000031a9 	.word	0x000031a9
    2af8:	000025b5 	.word	0x000025b5
			tmp_LORA->LoRa_IRQ_Flag = 0;
    2afc:	2500      	movs	r5, #0
    2afe:	4b33      	ldr	r3, [pc, #204]	; (2bcc <Lora_CMD_Func+0x4bc>)
    2b00:	54c5      	strb	r5, [r0, r3]
			tmp_LORA->LoRa_Rx_Flag = LoraRxDataReady;
    2b02:	2201      	movs	r2, #1
    2b04:	3301      	adds	r3, #1
    2b06:	54c2      	strb	r2, [r0, r3]
				Print_Who_Lora(tmp_LORA);
    2b08:	4b31      	ldr	r3, [pc, #196]	; (2bd0 <Lora_CMD_Func+0x4c0>)
    2b0a:	4798      	blx	r3
				Print_Reset_IRQ_Flag_Msg(tmp_LORA);
    2b0c:	0020      	movs	r0, r4
    2b0e:	4b31      	ldr	r3, [pc, #196]	; (2bd4 <Lora_CMD_Func+0x4c4>)
    2b10:	4798      	blx	r3
			tmp_LORA->NowStatus = Read_LoRa_RxCount_Index;
    2b12:	2207      	movs	r2, #7
    2b14:	4b30      	ldr	r3, [pc, #192]	; (2bd8 <Lora_CMD_Func+0x4c8>)
    2b16:	54e2      	strb	r2, [r4, r3]
			tmp_LORA->f_count = 0;
    2b18:	331f      	adds	r3, #31
    2b1a:	50e5      	str	r5, [r4, r3]
			break;
    2b1c:	e60c      	b.n	2738 <Lora_CMD_Func+0x28>
		port_base->OUTCLR.reg = pin_mask;
    2b1e:	2280      	movs	r2, #128	; 0x80
    2b20:	0512      	lsls	r2, r2, #20
    2b22:	4b2e      	ldr	r3, [pc, #184]	; (2bdc <Lora_CMD_Func+0x4cc>)
    2b24:	615a      	str	r2, [r3, #20]
			tmp_LORA->LastStatus = Write_LoRa_TxBuffer_Index;
    2b26:	2205      	movs	r2, #5
    2b28:	4b2d      	ldr	r3, [pc, #180]	; (2be0 <Lora_CMD_Func+0x4d0>)
    2b2a:	54c2      	strb	r2, [r0, r3]
			tmp_LORA->NextStatus = Wait_TX_Finish_Index;
    2b2c:	3267      	adds	r2, #103	; 0x67
    2b2e:	4b2d      	ldr	r3, [pc, #180]	; (2be4 <Lora_CMD_Func+0x4d4>)
    2b30:	54c2      	strb	r2, [r0, r3]
				Print_Who_Lora(tmp_LORA);
    2b32:	4b27      	ldr	r3, [pc, #156]	; (2bd0 <Lora_CMD_Func+0x4c0>)
    2b34:	4798      	blx	r3
				Print_Write_LoRa_TxBuffer_Msg(tmp_LORA);
    2b36:	0020      	movs	r0, r4
    2b38:	4b2b      	ldr	r3, [pc, #172]	; (2be8 <Lora_CMD_Func+0x4d8>)
    2b3a:	4798      	blx	r3
			Write_LoRa_TxBuffer(tmp_LORA);
    2b3c:	0020      	movs	r0, r4
    2b3e:	4b2b      	ldr	r3, [pc, #172]	; (2bec <Lora_CMD_Func+0x4dc>)
    2b40:	4798      	blx	r3
			tmp_LORA->LoRa_Send_Tx_Flag = LoraTxNoSend;
    2b42:	2200      	movs	r2, #0
    2b44:	4b2a      	ldr	r3, [pc, #168]	; (2bf0 <Lora_CMD_Func+0x4e0>)
    2b46:	54e2      	strb	r2, [r4, r3]
			break;
    2b48:	e5f6      	b.n	2738 <Lora_CMD_Func+0x28>
			if(tmp_LORA->LoRa_IRQ_Flag == 1)
    2b4a:	4b20      	ldr	r3, [pc, #128]	; (2bcc <Lora_CMD_Func+0x4bc>)
    2b4c:	5cc3      	ldrb	r3, [r0, r3]
    2b4e:	2b00      	cmp	r3, #0
    2b50:	d100      	bne.n	2b54 <Lora_CMD_Func+0x444>
    2b52:	e5f1      	b.n	2738 <Lora_CMD_Func+0x28>
				tmp_LORA->LoRa_Send_Tx_Flag = LoraTxSendOK;
    2b54:	2201      	movs	r2, #1
    2b56:	4b26      	ldr	r3, [pc, #152]	; (2bf0 <Lora_CMD_Func+0x4e0>)
    2b58:	54c2      	strb	r2, [r0, r3]
				wdt_reset_count();
    2b5a:	4b26      	ldr	r3, [pc, #152]	; (2bf4 <Lora_CMD_Func+0x4e4>)
    2b5c:	4798      	blx	r3
					Print_Who_Lora(tmp_LORA);
    2b5e:	0020      	movs	r0, r4
    2b60:	4b1b      	ldr	r3, [pc, #108]	; (2bd0 <Lora_CMD_Func+0x4c0>)
    2b62:	4798      	blx	r3
					Print_Wait_TX_Finish_Msg(tmp_LORA);
    2b64:	0020      	movs	r0, r4
    2b66:	4b24      	ldr	r3, [pc, #144]	; (2bf8 <Lora_CMD_Func+0x4e8>)
    2b68:	4798      	blx	r3
				tmp_LORA->LoRa_IRQ_Flag = 0;
    2b6a:	2300      	movs	r3, #0
    2b6c:	4a17      	ldr	r2, [pc, #92]	; (2bcc <Lora_CMD_Func+0x4bc>)
    2b6e:	54a3      	strb	r3, [r4, r2]
				tmp_LORA->NowStatus = Print_Delay_Some_Time_Index;
    2b70:	216f      	movs	r1, #111	; 0x6f
    2b72:	4a19      	ldr	r2, [pc, #100]	; (2bd8 <Lora_CMD_Func+0x4c8>)
    2b74:	54a1      	strb	r1, [r4, r2]
				tmp_LORA->f_count = 0;
    2b76:	321f      	adds	r2, #31
    2b78:	50a3      	str	r3, [r4, r2]
    2b7a:	e5dd      	b.n	2738 <Lora_CMD_Func+0x28>
				Print_Who_Lora(tmp_LORA);
    2b7c:	4b14      	ldr	r3, [pc, #80]	; (2bd0 <Lora_CMD_Func+0x4c0>)
    2b7e:	4798      	blx	r3
				Print_Delay_Some_Time_Msg(tmp_LORA);
    2b80:	0020      	movs	r0, r4
    2b82:	4b1e      	ldr	r3, [pc, #120]	; (2bfc <Lora_CMD_Func+0x4ec>)
    2b84:	4798      	blx	r3
			tmp_LORA->NowStatus = Leave_LoRa_Tx_Mode_Index;
    2b86:	2265      	movs	r2, #101	; 0x65
    2b88:	4b13      	ldr	r3, [pc, #76]	; (2bd8 <Lora_CMD_Func+0x4c8>)
    2b8a:	54e2      	strb	r2, [r4, r3]
			break;
    2b8c:	e5d4      	b.n	2738 <Lora_CMD_Func+0x28>
			if(tmp_LORA->f_count > Lora_Delay_Some_Time)
    2b8e:	238c      	movs	r3, #140	; 0x8c
    2b90:	009b      	lsls	r3, r3, #2
    2b92:	58c3      	ldr	r3, [r0, r3]
    2b94:	2b32      	cmp	r3, #50	; 0x32
    2b96:	d800      	bhi.n	2b9a <Lora_CMD_Func+0x48a>
    2b98:	e5ce      	b.n	2738 <Lora_CMD_Func+0x28>
				tmp_LORA->NowStatus = Leave_LoRa_Tx_Mode_Index;
    2b9a:	2265      	movs	r2, #101	; 0x65
    2b9c:	4b0e      	ldr	r3, [pc, #56]	; (2bd8 <Lora_CMD_Func+0x4c8>)
    2b9e:	54c2      	strb	r2, [r0, r3]
    2ba0:	e5ca      	b.n	2738 <Lora_CMD_Func+0x28>
		port_base->OUTSET.reg = pin_mask;
    2ba2:	2280      	movs	r2, #128	; 0x80
    2ba4:	0512      	lsls	r2, r2, #20
    2ba6:	4b0d      	ldr	r3, [pc, #52]	; (2bdc <Lora_CMD_Func+0x4cc>)
    2ba8:	619a      	str	r2, [r3, #24]
				Print_Who_Lora(tmp_LORA);
    2baa:	4b09      	ldr	r3, [pc, #36]	; (2bd0 <Lora_CMD_Func+0x4c0>)
    2bac:	4798      	blx	r3
				Print_Leave_LoRa_Tx_Mode_Msg(tmp_LORA);
    2bae:	0020      	movs	r0, r4
    2bb0:	4b13      	ldr	r3, [pc, #76]	; (2c00 <Lora_CMD_Func+0x4f0>)
    2bb2:	4798      	blx	r3
			tmp_LORA->NowStatus = Write_LoRa_Setting_Index;
    2bb4:	2204      	movs	r2, #4
    2bb6:	4b08      	ldr	r3, [pc, #32]	; (2bd8 <Lora_CMD_Func+0x4c8>)
    2bb8:	54e2      	strb	r2, [r4, r3]
			tmp_LORA->LoRa_TxRx_Mode_Flag = SetRx;
    2bba:	3a01      	subs	r2, #1
    2bbc:	4b11      	ldr	r3, [pc, #68]	; (2c04 <Lora_CMD_Func+0x4f4>)
    2bbe:	54e2      	strb	r2, [r4, r3]
			break;
    2bc0:	e5ba      	b.n	2738 <Lora_CMD_Func+0x28>
			tmp_LORA->NowStatus = Write_LoRa_Setting_Index;
    2bc2:	2204      	movs	r2, #4
    2bc4:	4b04      	ldr	r3, [pc, #16]	; (2bd8 <Lora_CMD_Func+0x4c8>)
    2bc6:	54c2      	strb	r2, [r0, r3]
}
    2bc8:	e5b6      	b.n	2738 <Lora_CMD_Func+0x28>
    2bca:	46c0      	nop			; (mov r8, r8)
    2bcc:	00000217 	.word	0x00000217
    2bd0:	00002c09 	.word	0x00002c09
    2bd4:	000031e9 	.word	0x000031e9
    2bd8:	00000211 	.word	0x00000211
    2bdc:	41004400 	.word	0x41004400
    2be0:	00000212 	.word	0x00000212
    2be4:	00000213 	.word	0x00000213
    2be8:	00003235 	.word	0x00003235
    2bec:	00002591 	.word	0x00002591
    2bf0:	00000219 	.word	0x00000219
    2bf4:	000022f9 	.word	0x000022f9
    2bf8:	0000359d 	.word	0x0000359d
    2bfc:	000032bd 	.word	0x000032bd
    2c00:	00003275 	.word	0x00003275
    2c04:	0000021d 	.word	0x0000021d

00002c08 <Print_Who_Lora>:
#include <stdio.h>
#include "myDefine.h"


void Print_Who_Lora(volatile LORA_DEFINE_t *tmp_LORA)
{
    2c08:	b570      	push	{r4, r5, r6, lr}
	if(tmp_LORA == LORA01)
    2c0a:	4b1b      	ldr	r3, [pc, #108]	; (2c78 <Print_Who_Lora+0x70>)
    2c0c:	681b      	ldr	r3, [r3, #0]
    2c0e:	4283      	cmp	r3, r0
    2c10:	d004      	beq.n	2c1c <Print_Who_Lora+0x14>
		uTXByte(Debug_COM, '0');
		uTXByte(Debug_COM, '1');
		uTXByte(Debug_COM, 0x09);
	}
	else
	if(tmp_LORA == LORA02)
    2c12:	4b1a      	ldr	r3, [pc, #104]	; (2c7c <Print_Who_Lora+0x74>)
    2c14:	681b      	ldr	r3, [r3, #0]
    2c16:	4298      	cmp	r0, r3
    2c18:	d017      	beq.n	2c4a <Print_Who_Lora+0x42>
		uTXByte(Debug_COM, 'R');
		uTXByte(Debug_COM, '0');
		uTXByte(Debug_COM, '2');
		uTXByte(Debug_COM, 0x09);
	}
}
    2c1a:	bd70      	pop	{r4, r5, r6, pc}
		if(LORA01->Lora_Debug_Flag == NoDebug) return;
    2c1c:	2285      	movs	r2, #133	; 0x85
    2c1e:	0092      	lsls	r2, r2, #2
    2c20:	5c9b      	ldrb	r3, [r3, r2]
    2c22:	2b00      	cmp	r3, #0
    2c24:	d0f9      	beq.n	2c1a <Print_Who_Lora+0x12>
		uTXByte(Debug_COM, 'L');
    2c26:	4d16      	ldr	r5, [pc, #88]	; (2c80 <Print_Who_Lora+0x78>)
    2c28:	214c      	movs	r1, #76	; 0x4c
    2c2a:	0028      	movs	r0, r5
    2c2c:	4c15      	ldr	r4, [pc, #84]	; (2c84 <Print_Who_Lora+0x7c>)
    2c2e:	47a0      	blx	r4
		uTXByte(Debug_COM, 'R');
    2c30:	2152      	movs	r1, #82	; 0x52
    2c32:	0028      	movs	r0, r5
    2c34:	47a0      	blx	r4
		uTXByte(Debug_COM, '0');
    2c36:	2130      	movs	r1, #48	; 0x30
    2c38:	0028      	movs	r0, r5
    2c3a:	47a0      	blx	r4
		uTXByte(Debug_COM, '1');
    2c3c:	2131      	movs	r1, #49	; 0x31
    2c3e:	0028      	movs	r0, r5
    2c40:	47a0      	blx	r4
		uTXByte(Debug_COM, 0x09);
    2c42:	2109      	movs	r1, #9
    2c44:	0028      	movs	r0, r5
    2c46:	47a0      	blx	r4
    2c48:	e7e7      	b.n	2c1a <Print_Who_Lora+0x12>
		if(LORA02->Lora_Debug_Flag == NoDebug) return;
    2c4a:	2385      	movs	r3, #133	; 0x85
    2c4c:	009b      	lsls	r3, r3, #2
    2c4e:	5cc3      	ldrb	r3, [r0, r3]
    2c50:	2b00      	cmp	r3, #0
    2c52:	d0e2      	beq.n	2c1a <Print_Who_Lora+0x12>
		uTXByte(Debug_COM, 'L');
    2c54:	4d0a      	ldr	r5, [pc, #40]	; (2c80 <Print_Who_Lora+0x78>)
    2c56:	214c      	movs	r1, #76	; 0x4c
    2c58:	0028      	movs	r0, r5
    2c5a:	4c0a      	ldr	r4, [pc, #40]	; (2c84 <Print_Who_Lora+0x7c>)
    2c5c:	47a0      	blx	r4
		uTXByte(Debug_COM, 'R');
    2c5e:	2152      	movs	r1, #82	; 0x52
    2c60:	0028      	movs	r0, r5
    2c62:	47a0      	blx	r4
		uTXByte(Debug_COM, '0');
    2c64:	2130      	movs	r1, #48	; 0x30
    2c66:	0028      	movs	r0, r5
    2c68:	47a0      	blx	r4
		uTXByte(Debug_COM, '2');
    2c6a:	2132      	movs	r1, #50	; 0x32
    2c6c:	0028      	movs	r0, r5
    2c6e:	47a0      	blx	r4
		uTXByte(Debug_COM, 0x09);
    2c70:	2109      	movs	r1, #9
    2c72:	0028      	movs	r0, r5
    2c74:	47a0      	blx	r4
    2c76:	e7d0      	b.n	2c1a <Print_Who_Lora+0x12>
    2c78:	20001048 	.word	0x20001048
    2c7c:	200004b4 	.word	0x200004b4
    2c80:	2000022c 	.word	0x2000022c
    2c84:	00003ac9 	.word	0x00003ac9

00002c88 <Print_Read_LoRa_ID_Msg>:

void Print_Read_LoRa_ID_Msg(volatile LORA_DEFINE_t *tmp_LORA)
{
    2c88:	b570      	push	{r4, r5, r6, lr}
	if(tmp_LORA->Lora_Debug_Flag == NoDebug) return;
    2c8a:	2385      	movs	r3, #133	; 0x85
    2c8c:	009b      	lsls	r3, r3, #2
    2c8e:	5cc3      	ldrb	r3, [r0, r3]
    2c90:	2b00      	cmp	r3, #0
    2c92:	d100      	bne.n	2c96 <Print_Read_LoRa_ID_Msg+0xe>
	uTXByte(Debug_COM, 'd');
	uTXByte(Debug_COM, ' ');
	uTXByte(Debug_COM, 'I');
	uTXByte(Debug_COM, 'D');
	uTXByte(Debug_COM, 0x09);
}
    2c94:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'R');
    2c96:	4d0a      	ldr	r5, [pc, #40]	; (2cc0 <Print_Read_LoRa_ID_Msg+0x38>)
    2c98:	2152      	movs	r1, #82	; 0x52
    2c9a:	0028      	movs	r0, r5
    2c9c:	4c09      	ldr	r4, [pc, #36]	; (2cc4 <Print_Read_LoRa_ID_Msg+0x3c>)
    2c9e:	47a0      	blx	r4
	uTXByte(Debug_COM, 'd');
    2ca0:	2164      	movs	r1, #100	; 0x64
    2ca2:	0028      	movs	r0, r5
    2ca4:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    2ca6:	2120      	movs	r1, #32
    2ca8:	0028      	movs	r0, r5
    2caa:	47a0      	blx	r4
	uTXByte(Debug_COM, 'I');
    2cac:	2149      	movs	r1, #73	; 0x49
    2cae:	0028      	movs	r0, r5
    2cb0:	47a0      	blx	r4
	uTXByte(Debug_COM, 'D');
    2cb2:	2144      	movs	r1, #68	; 0x44
    2cb4:	0028      	movs	r0, r5
    2cb6:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x09);
    2cb8:	2109      	movs	r1, #9
    2cba:	0028      	movs	r0, r5
    2cbc:	47a0      	blx	r4
    2cbe:	e7e9      	b.n	2c94 <Print_Read_LoRa_ID_Msg+0xc>
    2cc0:	2000022c 	.word	0x2000022c
    2cc4:	00003ac9 	.word	0x00003ac9

00002cc8 <Print_Delay_LoRa_CMD_Msg>:

void Print_Delay_LoRa_CMD_Msg(volatile LORA_DEFINE_t *tmp_LORA)
{
    2cc8:	b570      	push	{r4, r5, r6, lr}
	if(tmp_LORA->Lora_Debug_Flag == 0) return;
    2cca:	2385      	movs	r3, #133	; 0x85
    2ccc:	009b      	lsls	r3, r3, #2
    2cce:	5cc3      	ldrb	r3, [r0, r3]
    2cd0:	2b00      	cmp	r3, #0
    2cd2:	d100      	bne.n	2cd6 <Print_Delay_LoRa_CMD_Msg+0xe>
	uTXByte(Debug_COM, 'e');
	uTXByte(Debug_COM, 'l');
	uTXByte(Debug_COM, 'a');
	uTXByte(Debug_COM, 'y');
	uTXByte(Debug_COM, 0x0d);	
}
    2cd4:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'C');
    2cd6:	4d10      	ldr	r5, [pc, #64]	; (2d18 <Print_Delay_LoRa_CMD_Msg+0x50>)
    2cd8:	2143      	movs	r1, #67	; 0x43
    2cda:	0028      	movs	r0, r5
    2cdc:	4c0f      	ldr	r4, [pc, #60]	; (2d1c <Print_Delay_LoRa_CMD_Msg+0x54>)
    2cde:	47a0      	blx	r4
	uTXByte(Debug_COM, 'M');
    2ce0:	214d      	movs	r1, #77	; 0x4d
    2ce2:	0028      	movs	r0, r5
    2ce4:	47a0      	blx	r4
	uTXByte(Debug_COM, 'D');
    2ce6:	2144      	movs	r1, #68	; 0x44
    2ce8:	0028      	movs	r0, r5
    2cea:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    2cec:	2120      	movs	r1, #32
    2cee:	0028      	movs	r0, r5
    2cf0:	47a0      	blx	r4
	uTXByte(Debug_COM, 'D');
    2cf2:	2144      	movs	r1, #68	; 0x44
    2cf4:	0028      	movs	r0, r5
    2cf6:	47a0      	blx	r4
	uTXByte(Debug_COM, 'e');
    2cf8:	2165      	movs	r1, #101	; 0x65
    2cfa:	0028      	movs	r0, r5
    2cfc:	47a0      	blx	r4
	uTXByte(Debug_COM, 'l');
    2cfe:	216c      	movs	r1, #108	; 0x6c
    2d00:	0028      	movs	r0, r5
    2d02:	47a0      	blx	r4
	uTXByte(Debug_COM, 'a');
    2d04:	2161      	movs	r1, #97	; 0x61
    2d06:	0028      	movs	r0, r5
    2d08:	47a0      	blx	r4
	uTXByte(Debug_COM, 'y');
    2d0a:	2179      	movs	r1, #121	; 0x79
    2d0c:	0028      	movs	r0, r5
    2d0e:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);	
    2d10:	210d      	movs	r1, #13
    2d12:	0028      	movs	r0, r5
    2d14:	47a0      	blx	r4
    2d16:	e7dd      	b.n	2cd4 <Print_Delay_LoRa_CMD_Msg+0xc>
    2d18:	2000022c 	.word	0x2000022c
    2d1c:	00003ac9 	.word	0x00003ac9

00002d20 <Print_Time_Out_Msg>:

void Print_Time_Out_Msg(volatile LORA_DEFINE_t *tmp_LORA)
{
    2d20:	b570      	push	{r4, r5, r6, lr}
	if(tmp_LORA->Lora_Debug_Flag == NoDebug) return;
    2d22:	2385      	movs	r3, #133	; 0x85
    2d24:	009b      	lsls	r3, r3, #2
    2d26:	5cc3      	ldrb	r3, [r0, r3]
    2d28:	2b00      	cmp	r3, #0
    2d2a:	d100      	bne.n	2d2e <Print_Time_Out_Msg+0xe>
	uTXByte(Debug_COM, ' ');
	uTXByte(Debug_COM, 'O');
	uTXByte(Debug_COM, 'u');
	uTXByte(Debug_COM, 't');
	uTXByte(Debug_COM, 0x0d);
}
    2d2c:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'T');
    2d2e:	4d0f      	ldr	r5, [pc, #60]	; (2d6c <Print_Time_Out_Msg+0x4c>)
    2d30:	2154      	movs	r1, #84	; 0x54
    2d32:	0028      	movs	r0, r5
    2d34:	4c0e      	ldr	r4, [pc, #56]	; (2d70 <Print_Time_Out_Msg+0x50>)
    2d36:	47a0      	blx	r4
	uTXByte(Debug_COM, 'i');
    2d38:	2169      	movs	r1, #105	; 0x69
    2d3a:	0028      	movs	r0, r5
    2d3c:	47a0      	blx	r4
	uTXByte(Debug_COM, 'm');
    2d3e:	216d      	movs	r1, #109	; 0x6d
    2d40:	0028      	movs	r0, r5
    2d42:	47a0      	blx	r4
	uTXByte(Debug_COM, 'e');
    2d44:	2165      	movs	r1, #101	; 0x65
    2d46:	0028      	movs	r0, r5
    2d48:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    2d4a:	2120      	movs	r1, #32
    2d4c:	0028      	movs	r0, r5
    2d4e:	47a0      	blx	r4
	uTXByte(Debug_COM, 'O');
    2d50:	214f      	movs	r1, #79	; 0x4f
    2d52:	0028      	movs	r0, r5
    2d54:	47a0      	blx	r4
	uTXByte(Debug_COM, 'u');
    2d56:	2175      	movs	r1, #117	; 0x75
    2d58:	0028      	movs	r0, r5
    2d5a:	47a0      	blx	r4
	uTXByte(Debug_COM, 't');
    2d5c:	2174      	movs	r1, #116	; 0x74
    2d5e:	0028      	movs	r0, r5
    2d60:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);
    2d62:	210d      	movs	r1, #13
    2d64:	0028      	movs	r0, r5
    2d66:	47a0      	blx	r4
    2d68:	e7e0      	b.n	2d2c <Print_Time_Out_Msg+0xc>
    2d6a:	46c0      	nop			; (mov r8, r8)
    2d6c:	2000022c 	.word	0x2000022c
    2d70:	00003ac9 	.word	0x00003ac9

00002d74 <Print_Catch_LoRa_ID_Msg>:

void Print_Catch_LoRa_ID_Msg(volatile LORA_DEFINE_t *tmp_LORA)
{
    2d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d76:	0007      	movs	r7, r0
	uTXByte(Debug_COM, ' ');
    2d78:	4c23      	ldr	r4, [pc, #140]	; (2e08 <Print_Catch_LoRa_ID_Msg+0x94>)
    2d7a:	2120      	movs	r1, #32
    2d7c:	0020      	movs	r0, r4
    2d7e:	4d23      	ldr	r5, [pc, #140]	; (2e0c <Print_Catch_LoRa_ID_Msg+0x98>)
    2d80:	47a8      	blx	r5
	uTXByte(Debug_COM, ' ');
    2d82:	2120      	movs	r1, #32
    2d84:	0020      	movs	r0, r4
    2d86:	47a8      	blx	r5
	uTXByte(Debug_COM, ' ');
    2d88:	2120      	movs	r1, #32
    2d8a:	0020      	movs	r0, r4
    2d8c:	47a8      	blx	r5
	uTXByte(Debug_COM, 'F');
    2d8e:	2146      	movs	r1, #70	; 0x46
    2d90:	0020      	movs	r0, r4
    2d92:	47a8      	blx	r5
	uTXByte(Debug_COM, 'W');
    2d94:	2157      	movs	r1, #87	; 0x57
    2d96:	0020      	movs	r0, r4
    2d98:	47a8      	blx	r5
	uTXByte(Debug_COM, ':');
    2d9a:	213a      	movs	r1, #58	; 0x3a
    2d9c:	0020      	movs	r0, r4
    2d9e:	47a8      	blx	r5
	uTXByte(Debug_COM, ' ');
    2da0:	2120      	movs	r1, #32
    2da2:	0020      	movs	r0, r4
    2da4:	47a8      	blx	r5
	uart_send_ascii_byte(Debug_COM, tmp_LORA->MyLoRaFW);
    2da6:	7839      	ldrb	r1, [r7, #0]
    2da8:	b2c9      	uxtb	r1, r1
    2daa:	0020      	movs	r0, r4
    2dac:	4e18      	ldr	r6, [pc, #96]	; (2e10 <Print_Catch_LoRa_ID_Msg+0x9c>)
    2dae:	47b0      	blx	r6
	uTXByte(Debug_COM, 0x0d);
    2db0:	210d      	movs	r1, #13
    2db2:	0020      	movs	r0, r4
    2db4:	47a8      	blx	r5

	uTXByte(Debug_COM, ' ');
    2db6:	2120      	movs	r1, #32
    2db8:	0020      	movs	r0, r4
    2dba:	47a8      	blx	r5
	uTXByte(Debug_COM, ' ');
    2dbc:	2120      	movs	r1, #32
    2dbe:	0020      	movs	r0, r4
    2dc0:	47a8      	blx	r5
	uTXByte(Debug_COM, ' ');	
    2dc2:	2120      	movs	r1, #32
    2dc4:	0020      	movs	r0, r4
    2dc6:	47a8      	blx	r5
	uTXByte(Debug_COM, 'I');
    2dc8:	2149      	movs	r1, #73	; 0x49
    2dca:	0020      	movs	r0, r4
    2dcc:	47a8      	blx	r5
	uTXByte(Debug_COM, 'D');
    2dce:	2144      	movs	r1, #68	; 0x44
    2dd0:	0020      	movs	r0, r4
    2dd2:	47a8      	blx	r5
	uTXByte(Debug_COM, ':');
    2dd4:	213a      	movs	r1, #58	; 0x3a
    2dd6:	0020      	movs	r0, r4
    2dd8:	47a8      	blx	r5
	uTXByte(Debug_COM, ' ');
    2dda:	2120      	movs	r1, #32
    2ddc:	0020      	movs	r0, r4
    2dde:	47a8      	blx	r5
	uart_send_ascii_byte(Debug_COM, tmp_LORA->MyLoRaID[0]);
    2de0:	7879      	ldrb	r1, [r7, #1]
    2de2:	b2c9      	uxtb	r1, r1
    2de4:	0020      	movs	r0, r4
    2de6:	47b0      	blx	r6
	uart_send_ascii_byte(Debug_COM, tmp_LORA->MyLoRaID[1]);
    2de8:	78b9      	ldrb	r1, [r7, #2]
    2dea:	b2c9      	uxtb	r1, r1
    2dec:	0020      	movs	r0, r4
    2dee:	47b0      	blx	r6
	uart_send_ascii_byte(Debug_COM, tmp_LORA->MyLoRaID[2]);
    2df0:	78f9      	ldrb	r1, [r7, #3]
    2df2:	b2c9      	uxtb	r1, r1
    2df4:	0020      	movs	r0, r4
    2df6:	47b0      	blx	r6
	uart_send_ascii_byte(Debug_COM, tmp_LORA->MyLoRaID[3]);
    2df8:	7939      	ldrb	r1, [r7, #4]
    2dfa:	b2c9      	uxtb	r1, r1
    2dfc:	0020      	movs	r0, r4
    2dfe:	47b0      	blx	r6
	uTXByte(Debug_COM, 0x0d);
    2e00:	210d      	movs	r1, #13
    2e02:	0020      	movs	r0, r4
    2e04:	47a8      	blx	r5
}
    2e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e08:	2000022c 	.word	0x2000022c
    2e0c:	00003ac9 	.word	0x00003ac9
    2e10:	00003ae9 	.word	0x00003ae9

00002e14 <Print_Catch_LoRa_Setting_Msg>:

void Print_Catch_LoRa_Setting_Msg(volatile LORA_DEFINE_t *tmp_LORA)
{
    2e14:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e16:	46c6      	mov	lr, r8
    2e18:	b500      	push	{lr}
    2e1a:	0006      	movs	r6, r0
	UINT32u_t tmp_FQ;
	
	
	uTXByte(Debug_COM, ' ');
    2e1c:	4d8a      	ldr	r5, [pc, #552]	; (3048 <Print_Catch_LoRa_Setting_Msg+0x234>)
    2e1e:	2120      	movs	r1, #32
    2e20:	0028      	movs	r0, r5
    2e22:	4c8a      	ldr	r4, [pc, #552]	; (304c <Print_Catch_LoRa_Setting_Msg+0x238>)
    2e24:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    2e26:	2120      	movs	r1, #32
    2e28:	0028      	movs	r0, r5
    2e2a:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    2e2c:	2120      	movs	r1, #32
    2e2e:	0028      	movs	r0, r5
    2e30:	47a0      	blx	r4
	uTXByte(Debug_COM, 'D');
    2e32:	2144      	movs	r1, #68	; 0x44
    2e34:	0028      	movs	r0, r5
    2e36:	47a0      	blx	r4
	uTXByte(Debug_COM, 'e');
    2e38:	2165      	movs	r1, #101	; 0x65
    2e3a:	0028      	movs	r0, r5
    2e3c:	47a0      	blx	r4
	uTXByte(Debug_COM, 'b');
    2e3e:	2162      	movs	r1, #98	; 0x62
    2e40:	0028      	movs	r0, r5
    2e42:	47a0      	blx	r4
	uTXByte(Debug_COM, 'u');
    2e44:	2175      	movs	r1, #117	; 0x75
    2e46:	0028      	movs	r0, r5
    2e48:	47a0      	blx	r4
	uTXByte(Debug_COM, 'g');
    2e4a:	2167      	movs	r1, #103	; 0x67
    2e4c:	0028      	movs	r0, r5
    2e4e:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    2e50:	2120      	movs	r1, #32
    2e52:	0028      	movs	r0, r5
    2e54:	47a0      	blx	r4
	uTXByte(Debug_COM, 'M');
    2e56:	214d      	movs	r1, #77	; 0x4d
    2e58:	0028      	movs	r0, r5
    2e5a:	47a0      	blx	r4
	uTXByte(Debug_COM, 'o');
    2e5c:	216f      	movs	r1, #111	; 0x6f
    2e5e:	0028      	movs	r0, r5
    2e60:	47a0      	blx	r4
	uTXByte(Debug_COM, 'd');
    2e62:	2164      	movs	r1, #100	; 0x64
    2e64:	0028      	movs	r0, r5
    2e66:	47a0      	blx	r4
	uTXByte(Debug_COM, 'e');
    2e68:	2165      	movs	r1, #101	; 0x65
    2e6a:	0028      	movs	r0, r5
    2e6c:	47a0      	blx	r4
	uTXByte(Debug_COM, ':');
    2e6e:	213a      	movs	r1, #58	; 0x3a
    2e70:	0028      	movs	r0, r5
    2e72:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    2e74:	2120      	movs	r1, #32
    2e76:	0028      	movs	r0, r5
    2e78:	47a0      	blx	r4
	if(tmp_LORA->Lora_Debug_Flag == NeedDebug)
    2e7a:	2385      	movs	r3, #133	; 0x85
    2e7c:	009b      	lsls	r3, r3, #2
    2e7e:	5cf3      	ldrb	r3, [r6, r3]
    2e80:	2b00      	cmp	r3, #0
    2e82:	d100      	bne.n	2e86 <Print_Catch_LoRa_Setting_Msg+0x72>
    2e84:	e0ca      	b.n	301c <Print_Catch_LoRa_Setting_Msg+0x208>
	{
		uTXByte(Debug_COM, 'O');
    2e86:	4d70      	ldr	r5, [pc, #448]	; (3048 <Print_Catch_LoRa_Setting_Msg+0x234>)
    2e88:	214f      	movs	r1, #79	; 0x4f
    2e8a:	0028      	movs	r0, r5
    2e8c:	4c6f      	ldr	r4, [pc, #444]	; (304c <Print_Catch_LoRa_Setting_Msg+0x238>)
    2e8e:	47a0      	blx	r4
		uTXByte(Debug_COM, 'n');
    2e90:	216e      	movs	r1, #110	; 0x6e
    2e92:	0028      	movs	r0, r5
    2e94:	47a0      	blx	r4
	{
		uTXByte(Debug_COM, 'O');
		uTXByte(Debug_COM, 'F');
		uTXByte(Debug_COM, 'F');
	}
	uTXByte(Debug_COM, 0x0d);
    2e96:	4d6c      	ldr	r5, [pc, #432]	; (3048 <Print_Catch_LoRa_Setting_Msg+0x234>)
    2e98:	210d      	movs	r1, #13
    2e9a:	0028      	movs	r0, r5
    2e9c:	4c6b      	ldr	r4, [pc, #428]	; (304c <Print_Catch_LoRa_Setting_Msg+0x238>)
    2e9e:	47a0      	blx	r4
	
	uTXByte(Debug_COM, ' ');
    2ea0:	2120      	movs	r1, #32
    2ea2:	0028      	movs	r0, r5
    2ea4:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    2ea6:	2120      	movs	r1, #32
    2ea8:	0028      	movs	r0, r5
    2eaa:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    2eac:	2120      	movs	r1, #32
    2eae:	0028      	movs	r0, r5
    2eb0:	47a0      	blx	r4
	uTXByte(Debug_COM, 'M');
    2eb2:	214d      	movs	r1, #77	; 0x4d
    2eb4:	0028      	movs	r0, r5
    2eb6:	47a0      	blx	r4
	uTXByte(Debug_COM, 'o');
    2eb8:	216f      	movs	r1, #111	; 0x6f
    2eba:	0028      	movs	r0, r5
    2ebc:	47a0      	blx	r4
	uTXByte(Debug_COM, 'd');
    2ebe:	2164      	movs	r1, #100	; 0x64
    2ec0:	0028      	movs	r0, r5
    2ec2:	47a0      	blx	r4
	uTXByte(Debug_COM, 'e');
    2ec4:	2165      	movs	r1, #101	; 0x65
    2ec6:	0028      	movs	r0, r5
    2ec8:	47a0      	blx	r4
	uTXByte(Debug_COM, ':');
    2eca:	213a      	movs	r1, #58	; 0x3a
    2ecc:	0028      	movs	r0, r5
    2ece:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    2ed0:	2120      	movs	r1, #32
    2ed2:	0028      	movs	r0, r5
    2ed4:	47a0      	blx	r4
	if(tmp_LORA->MyLoRaMode == SetTx)
    2ed6:	7973      	ldrb	r3, [r6, #5]
    2ed8:	2b02      	cmp	r3, #2
    2eda:	d100      	bne.n	2ede <Print_Catch_LoRa_Setting_Msg+0xca>
    2edc:	e0aa      	b.n	3034 <Print_Catch_LoRa_Setting_Msg+0x220>
		uTXByte(Debug_COM, 'T');
		uTXByte(Debug_COM, 'x');
	}
	else
	{
		uTXByte(Debug_COM, 'R');
    2ede:	4d5a      	ldr	r5, [pc, #360]	; (3048 <Print_Catch_LoRa_Setting_Msg+0x234>)
    2ee0:	2152      	movs	r1, #82	; 0x52
    2ee2:	0028      	movs	r0, r5
    2ee4:	4c59      	ldr	r4, [pc, #356]	; (304c <Print_Catch_LoRa_Setting_Msg+0x238>)
    2ee6:	47a0      	blx	r4
		uTXByte(Debug_COM, 'x');
    2ee8:	2178      	movs	r1, #120	; 0x78
    2eea:	0028      	movs	r0, r5
    2eec:	47a0      	blx	r4
	}
	uTXByte(Debug_COM, 0x0d);
    2eee:	4c56      	ldr	r4, [pc, #344]	; (3048 <Print_Catch_LoRa_Setting_Msg+0x234>)
    2ef0:	210d      	movs	r1, #13
    2ef2:	0020      	movs	r0, r4
    2ef4:	4d55      	ldr	r5, [pc, #340]	; (304c <Print_Catch_LoRa_Setting_Msg+0x238>)
    2ef6:	47a8      	blx	r5
	
	uTXByte(Debug_COM, '[');
    2ef8:	215b      	movs	r1, #91	; 0x5b
    2efa:	0020      	movs	r0, r4
    2efc:	47a8      	blx	r5
	uTXByte(Debug_COM, 'f');
    2efe:	2166      	movs	r1, #102	; 0x66
    2f00:	0020      	movs	r0, r4
    2f02:	47a8      	blx	r5
	uTXByte(Debug_COM, ']');
    2f04:	215d      	movs	r1, #93	; 0x5d
    2f06:	0020      	movs	r0, r4
    2f08:	47a8      	blx	r5
	uTXByte(Debug_COM, 'F');
    2f0a:	2146      	movs	r1, #70	; 0x46
    2f0c:	0020      	movs	r0, r4
    2f0e:	47a8      	blx	r5
	uTXByte(Debug_COM, 'Q');
    2f10:	2151      	movs	r1, #81	; 0x51
    2f12:	0020      	movs	r0, r4
    2f14:	47a8      	blx	r5
	uTXByte(Debug_COM, ':');
    2f16:	213a      	movs	r1, #58	; 0x3a
    2f18:	0020      	movs	r0, r4
    2f1a:	47a8      	blx	r5
	uTXByte(Debug_COM, ' ');
    2f1c:	2120      	movs	r1, #32
    2f1e:	0020      	movs	r0, r4
    2f20:	47a8      	blx	r5
	/*
	uart_send_ascii_byte(Debug_COM, MyLoRaFQ.byte[2]);
	uart_send_ascii_byte(Debug_COM, MyLoRaFQ.byte[1]);
	uart_send_ascii_byte(Debug_COM, MyLoRaFQ.byte[0]);
	*/
	tmp_FQ.dword = long_to_bcd(tmp_LORA->MyLoRaFQ.dword);
    2f22:	68b0      	ldr	r0, [r6, #8]
    2f24:	4b4a      	ldr	r3, [pc, #296]	; (3050 <Print_Catch_LoRa_Setting_Msg+0x23c>)
    2f26:	4798      	blx	r3
    2f28:	0007      	movs	r7, r0
	uart_send_ascii_byte(Debug_COM, tmp_FQ.byte[2]);
    2f2a:	0201      	lsls	r1, r0, #8
    2f2c:	0e09      	lsrs	r1, r1, #24
    2f2e:	0020      	movs	r0, r4
    2f30:	4b48      	ldr	r3, [pc, #288]	; (3054 <Print_Catch_LoRa_Setting_Msg+0x240>)
    2f32:	4698      	mov	r8, r3
    2f34:	4798      	blx	r3
	uart_send_ascii_byte(Debug_COM, tmp_FQ.byte[1]);
    2f36:	0439      	lsls	r1, r7, #16
    2f38:	0e09      	lsrs	r1, r1, #24
    2f3a:	0020      	movs	r0, r4
    2f3c:	47c0      	blx	r8
	uTXByte(Debug_COM, '.');
    2f3e:	212e      	movs	r1, #46	; 0x2e
    2f40:	0020      	movs	r0, r4
    2f42:	47a8      	blx	r5
	uart_send_ascii_byte(Debug_COM, tmp_FQ.byte[0]);
    2f44:	b2f9      	uxtb	r1, r7
    2f46:	0020      	movs	r0, r4
    2f48:	47c0      	blx	r8
	uTXByte(Debug_COM, ' ');
    2f4a:	2120      	movs	r1, #32
    2f4c:	0020      	movs	r0, r4
    2f4e:	47a8      	blx	r5
	uTXByte(Debug_COM, 'M');
    2f50:	214d      	movs	r1, #77	; 0x4d
    2f52:	0020      	movs	r0, r4
    2f54:	47a8      	blx	r5
	uTXByte(Debug_COM, 'H');
    2f56:	2148      	movs	r1, #72	; 0x48
    2f58:	0020      	movs	r0, r4
    2f5a:	47a8      	blx	r5
	uTXByte(Debug_COM, 'z');
    2f5c:	217a      	movs	r1, #122	; 0x7a
    2f5e:	0020      	movs	r0, r4
    2f60:	47a8      	blx	r5
	uTXByte(Debug_COM, 0x0d);
    2f62:	210d      	movs	r1, #13
    2f64:	0020      	movs	r0, r4
    2f66:	47a8      	blx	r5
	
	uTXByte(Debug_COM, '[');
    2f68:	215b      	movs	r1, #91	; 0x5b
    2f6a:	0020      	movs	r0, r4
    2f6c:	47a8      	blx	r5
	uTXByte(Debug_COM, 'p');
    2f6e:	2170      	movs	r1, #112	; 0x70
    2f70:	0020      	movs	r0, r4
    2f72:	47a8      	blx	r5
	uTXByte(Debug_COM, ']');
    2f74:	215d      	movs	r1, #93	; 0x5d
    2f76:	0020      	movs	r0, r4
    2f78:	47a8      	blx	r5
	uTXByte(Debug_COM, 'P');
    2f7a:	2150      	movs	r1, #80	; 0x50
    2f7c:	0020      	movs	r0, r4
    2f7e:	47a8      	blx	r5
	uTXByte(Debug_COM, 'o');
    2f80:	216f      	movs	r1, #111	; 0x6f
    2f82:	0020      	movs	r0, r4
    2f84:	47a8      	blx	r5
	uTXByte(Debug_COM, 'w');
    2f86:	2177      	movs	r1, #119	; 0x77
    2f88:	0020      	movs	r0, r4
    2f8a:	47a8      	blx	r5
	uTXByte(Debug_COM, 'e');
    2f8c:	2165      	movs	r1, #101	; 0x65
    2f8e:	0020      	movs	r0, r4
    2f90:	47a8      	blx	r5
	uTXByte(Debug_COM, 'r');
    2f92:	2172      	movs	r1, #114	; 0x72
    2f94:	0020      	movs	r0, r4
    2f96:	47a8      	blx	r5
	uTXByte(Debug_COM, ':');
    2f98:	213a      	movs	r1, #58	; 0x3a
    2f9a:	0020      	movs	r0, r4
    2f9c:	47a8      	blx	r5
	uTXByte(Debug_COM, ' ');
    2f9e:	2120      	movs	r1, #32
    2fa0:	0020      	movs	r0, r4
    2fa2:	47a8      	blx	r5
	uTXByte(Debug_COM, '+');
    2fa4:	212b      	movs	r1, #43	; 0x2b
    2fa6:	0020      	movs	r0, r4
    2fa8:	47a8      	blx	r5
	uart_send_word(Debug_COM, hex_to_bcd(tmp_LORA->MyLoRaPower + 2));
    2faa:	79b0      	ldrb	r0, [r6, #6]
    2fac:	3002      	adds	r0, #2
    2fae:	4b2a      	ldr	r3, [pc, #168]	; (3058 <Print_Catch_LoRa_Setting_Msg+0x244>)
    2fb0:	4698      	mov	r8, r3
    2fb2:	4798      	blx	r3
    2fb4:	0001      	movs	r1, r0
    2fb6:	0020      	movs	r0, r4
    2fb8:	4f28      	ldr	r7, [pc, #160]	; (305c <Print_Catch_LoRa_Setting_Msg+0x248>)
    2fba:	47b8      	blx	r7
	uTXByte(Debug_COM, ' ');
    2fbc:	2120      	movs	r1, #32
    2fbe:	0020      	movs	r0, r4
    2fc0:	47a8      	blx	r5
	uTXByte(Debug_COM, 'd');
    2fc2:	2164      	movs	r1, #100	; 0x64
    2fc4:	0020      	movs	r0, r4
    2fc6:	47a8      	blx	r5
	uTXByte(Debug_COM, 'B');
    2fc8:	2142      	movs	r1, #66	; 0x42
    2fca:	0020      	movs	r0, r4
    2fcc:	47a8      	blx	r5
	uTXByte(Debug_COM, 'm');
    2fce:	216d      	movs	r1, #109	; 0x6d
    2fd0:	0020      	movs	r0, r4
    2fd2:	47a8      	blx	r5
	uTXByte(Debug_COM, 0x0d);
    2fd4:	210d      	movs	r1, #13
    2fd6:	0020      	movs	r0, r4
    2fd8:	47a8      	blx	r5
	
	uTXByte(Debug_COM, '[');
    2fda:	215b      	movs	r1, #91	; 0x5b
    2fdc:	0020      	movs	r0, r4
    2fde:	47a8      	blx	r5
	uTXByte(Debug_COM, 's');
    2fe0:	2173      	movs	r1, #115	; 0x73
    2fe2:	0020      	movs	r0, r4
    2fe4:	47a8      	blx	r5
	uTXByte(Debug_COM, ']');
    2fe6:	215d      	movs	r1, #93	; 0x5d
    2fe8:	0020      	movs	r0, r4
    2fea:	47a8      	blx	r5
	uTXByte(Debug_COM, 'S');
    2fec:	2153      	movs	r1, #83	; 0x53
    2fee:	0020      	movs	r0, r4
    2ff0:	47a8      	blx	r5
	uTXByte(Debug_COM, 'F');
    2ff2:	2146      	movs	r1, #70	; 0x46
    2ff4:	0020      	movs	r0, r4
    2ff6:	47a8      	blx	r5
	uTXByte(Debug_COM, ':');
    2ff8:	213a      	movs	r1, #58	; 0x3a
    2ffa:	0020      	movs	r0, r4
    2ffc:	47a8      	blx	r5
	uTXByte(Debug_COM, ' ');
    2ffe:	2120      	movs	r1, #32
    3000:	0020      	movs	r0, r4
    3002:	47a8      	blx	r5
	uart_send_word(Debug_COM, hex_to_bcd(tmp_LORA->MyLoRaSF + 5));
    3004:	79f0      	ldrb	r0, [r6, #7]
    3006:	3005      	adds	r0, #5
    3008:	47c0      	blx	r8
    300a:	0001      	movs	r1, r0
    300c:	0020      	movs	r0, r4
    300e:	47b8      	blx	r7
	uTXByte(Debug_COM, 0x0d);
    3010:	210d      	movs	r1, #13
    3012:	0020      	movs	r0, r4
    3014:	47a8      	blx	r5
}
    3016:	bc04      	pop	{r2}
    3018:	4690      	mov	r8, r2
    301a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uTXByte(Debug_COM, 'O');
    301c:	4d0a      	ldr	r5, [pc, #40]	; (3048 <Print_Catch_LoRa_Setting_Msg+0x234>)
    301e:	214f      	movs	r1, #79	; 0x4f
    3020:	0028      	movs	r0, r5
    3022:	4c0a      	ldr	r4, [pc, #40]	; (304c <Print_Catch_LoRa_Setting_Msg+0x238>)
    3024:	47a0      	blx	r4
		uTXByte(Debug_COM, 'F');
    3026:	2146      	movs	r1, #70	; 0x46
    3028:	0028      	movs	r0, r5
    302a:	47a0      	blx	r4
		uTXByte(Debug_COM, 'F');
    302c:	2146      	movs	r1, #70	; 0x46
    302e:	0028      	movs	r0, r5
    3030:	47a0      	blx	r4
    3032:	e730      	b.n	2e96 <Print_Catch_LoRa_Setting_Msg+0x82>
		uTXByte(Debug_COM, 'T');
    3034:	4d04      	ldr	r5, [pc, #16]	; (3048 <Print_Catch_LoRa_Setting_Msg+0x234>)
    3036:	2154      	movs	r1, #84	; 0x54
    3038:	0028      	movs	r0, r5
    303a:	4c04      	ldr	r4, [pc, #16]	; (304c <Print_Catch_LoRa_Setting_Msg+0x238>)
    303c:	47a0      	blx	r4
		uTXByte(Debug_COM, 'x');
    303e:	2178      	movs	r1, #120	; 0x78
    3040:	0028      	movs	r0, r5
    3042:	47a0      	blx	r4
    3044:	e753      	b.n	2eee <Print_Catch_LoRa_Setting_Msg+0xda>
    3046:	46c0      	nop			; (mov r8, r8)
    3048:	2000022c 	.word	0x2000022c
    304c:	00003ac9 	.word	0x00003ac9
    3050:	00003db1 	.word	0x00003db1
    3054:	00003ae9 	.word	0x00003ae9
    3058:	00003d41 	.word	0x00003d41
    305c:	00003b15 	.word	0x00003b15

00003060 <Print_Reset_LoRa_Msg>:

void Print_Reset_LoRa_Msg(volatile LORA_DEFINE_t *tmp_LORA)
{
    3060:	b570      	push	{r4, r5, r6, lr}
	if(tmp_LORA->Lora_Debug_Flag == NoDebug) return;
    3062:	2385      	movs	r3, #133	; 0x85
    3064:	009b      	lsls	r3, r3, #2
    3066:	5cc3      	ldrb	r3, [r0, r3]
    3068:	2b00      	cmp	r3, #0
    306a:	d100      	bne.n	306e <Print_Reset_LoRa_Msg+0xe>
	uTXByte(Debug_COM, ' ');
	uTXByte(Debug_COM, 'R');
	uTXByte(Debug_COM, 'S');
	uTXByte(Debug_COM, 'T');
	uTXByte(Debug_COM, 0x09);
}
    306c:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'L');
    306e:	4d0c      	ldr	r5, [pc, #48]	; (30a0 <Print_Reset_LoRa_Msg+0x40>)
    3070:	214c      	movs	r1, #76	; 0x4c
    3072:	0028      	movs	r0, r5
    3074:	4c0b      	ldr	r4, [pc, #44]	; (30a4 <Print_Reset_LoRa_Msg+0x44>)
    3076:	47a0      	blx	r4
	uTXByte(Debug_COM, 'R');
    3078:	2152      	movs	r1, #82	; 0x52
    307a:	0028      	movs	r0, r5
    307c:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    307e:	2120      	movs	r1, #32
    3080:	0028      	movs	r0, r5
    3082:	47a0      	blx	r4
	uTXByte(Debug_COM, 'R');
    3084:	2152      	movs	r1, #82	; 0x52
    3086:	0028      	movs	r0, r5
    3088:	47a0      	blx	r4
	uTXByte(Debug_COM, 'S');
    308a:	2153      	movs	r1, #83	; 0x53
    308c:	0028      	movs	r0, r5
    308e:	47a0      	blx	r4
	uTXByte(Debug_COM, 'T');
    3090:	2154      	movs	r1, #84	; 0x54
    3092:	0028      	movs	r0, r5
    3094:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x09);
    3096:	2109      	movs	r1, #9
    3098:	0028      	movs	r0, r5
    309a:	47a0      	blx	r4
    309c:	e7e6      	b.n	306c <Print_Reset_LoRa_Msg+0xc>
    309e:	46c0      	nop			; (mov r8, r8)
    30a0:	2000022c 	.word	0x2000022c
    30a4:	00003ac9 	.word	0x00003ac9

000030a8 <Print_Read_LoRa_Setting_Msg>:

void Print_Read_LoRa_Setting_Msg(volatile LORA_DEFINE_t *tmp_LORA)
{
    30a8:	b570      	push	{r4, r5, r6, lr}
	if(tmp_LORA->Lora_Debug_Flag == NoDebug) return;
    30aa:	2385      	movs	r3, #133	; 0x85
    30ac:	009b      	lsls	r3, r3, #2
    30ae:	5cc3      	ldrb	r3, [r0, r3]
    30b0:	2b00      	cmp	r3, #0
    30b2:	d100      	bne.n	30b6 <Print_Read_LoRa_Setting_Msg+0xe>
	uTXByte(Debug_COM, 'd');
	uTXByte(Debug_COM, ' ');
	uTXByte(Debug_COM, 'S');
	uTXByte(Debug_COM, 't');
	uTXByte(Debug_COM, 0x09);	
}
    30b4:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'R');
    30b6:	4d0a      	ldr	r5, [pc, #40]	; (30e0 <Print_Read_LoRa_Setting_Msg+0x38>)
    30b8:	2152      	movs	r1, #82	; 0x52
    30ba:	0028      	movs	r0, r5
    30bc:	4c09      	ldr	r4, [pc, #36]	; (30e4 <Print_Read_LoRa_Setting_Msg+0x3c>)
    30be:	47a0      	blx	r4
	uTXByte(Debug_COM, 'd');
    30c0:	2164      	movs	r1, #100	; 0x64
    30c2:	0028      	movs	r0, r5
    30c4:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    30c6:	2120      	movs	r1, #32
    30c8:	0028      	movs	r0, r5
    30ca:	47a0      	blx	r4
	uTXByte(Debug_COM, 'S');
    30cc:	2153      	movs	r1, #83	; 0x53
    30ce:	0028      	movs	r0, r5
    30d0:	47a0      	blx	r4
	uTXByte(Debug_COM, 't');
    30d2:	2174      	movs	r1, #116	; 0x74
    30d4:	0028      	movs	r0, r5
    30d6:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x09);	
    30d8:	2109      	movs	r1, #9
    30da:	0028      	movs	r0, r5
    30dc:	47a0      	blx	r4
    30de:	e7e9      	b.n	30b4 <Print_Read_LoRa_Setting_Msg+0xc>
    30e0:	2000022c 	.word	0x2000022c
    30e4:	00003ac9 	.word	0x00003ac9

000030e8 <Print_Write_LoRa_Mode_FQ_Msg>:

void Print_Write_LoRa_Mode_FQ_Msg(volatile LORA_DEFINE_t *tmp_LORA)
{
    30e8:	b570      	push	{r4, r5, r6, lr}
	if(tmp_LORA->Lora_Debug_Flag == NoDebug) return;
    30ea:	2385      	movs	r3, #133	; 0x85
    30ec:	009b      	lsls	r3, r3, #2
    30ee:	5cc3      	ldrb	r3, [r0, r3]
    30f0:	2b00      	cmp	r3, #0
    30f2:	d100      	bne.n	30f6 <Print_Write_LoRa_Mode_FQ_Msg+0xe>
	uTXByte(Debug_COM, 'r');
	uTXByte(Debug_COM, ' ');
	uTXByte(Debug_COM, 'F');
	uTXByte(Debug_COM, 'Q');
	uTXByte(Debug_COM, 0x09);
}
    30f4:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'W');
    30f6:	4d0a      	ldr	r5, [pc, #40]	; (3120 <Print_Write_LoRa_Mode_FQ_Msg+0x38>)
    30f8:	2157      	movs	r1, #87	; 0x57
    30fa:	0028      	movs	r0, r5
    30fc:	4c09      	ldr	r4, [pc, #36]	; (3124 <Print_Write_LoRa_Mode_FQ_Msg+0x3c>)
    30fe:	47a0      	blx	r4
	uTXByte(Debug_COM, 'r');
    3100:	2172      	movs	r1, #114	; 0x72
    3102:	0028      	movs	r0, r5
    3104:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    3106:	2120      	movs	r1, #32
    3108:	0028      	movs	r0, r5
    310a:	47a0      	blx	r4
	uTXByte(Debug_COM, 'F');
    310c:	2146      	movs	r1, #70	; 0x46
    310e:	0028      	movs	r0, r5
    3110:	47a0      	blx	r4
	uTXByte(Debug_COM, 'Q');
    3112:	2151      	movs	r1, #81	; 0x51
    3114:	0028      	movs	r0, r5
    3116:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x09);
    3118:	2109      	movs	r1, #9
    311a:	0028      	movs	r0, r5
    311c:	47a0      	blx	r4
    311e:	e7e9      	b.n	30f4 <Print_Write_LoRa_Mode_FQ_Msg+0xc>
    3120:	2000022c 	.word	0x2000022c
    3124:	00003ac9 	.word	0x00003ac9

00003128 <Print_Write_LoRa_Setting_Msg>:
void Print_Write_LoRa_Setting_Msg(volatile LORA_DEFINE_t *tmp_LORA)
{
    3128:	b570      	push	{r4, r5, r6, lr}
	if(tmp_LORA->Lora_Debug_Flag == NoDebug) return;
    312a:	2385      	movs	r3, #133	; 0x85
    312c:	009b      	lsls	r3, r3, #2
    312e:	5cc3      	ldrb	r3, [r0, r3]
    3130:	2b00      	cmp	r3, #0
    3132:	d100      	bne.n	3136 <Print_Write_LoRa_Setting_Msg+0xe>
	uTXByte(Debug_COM, 'r');
	uTXByte(Debug_COM, ' ');
	uTXByte(Debug_COM, 'S');
	uTXByte(Debug_COM, 't');
	uTXByte(Debug_COM, 0x09);	
}
    3134:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'W');
    3136:	4d0a      	ldr	r5, [pc, #40]	; (3160 <Print_Write_LoRa_Setting_Msg+0x38>)
    3138:	2157      	movs	r1, #87	; 0x57
    313a:	0028      	movs	r0, r5
    313c:	4c09      	ldr	r4, [pc, #36]	; (3164 <Print_Write_LoRa_Setting_Msg+0x3c>)
    313e:	47a0      	blx	r4
	uTXByte(Debug_COM, 'r');
    3140:	2172      	movs	r1, #114	; 0x72
    3142:	0028      	movs	r0, r5
    3144:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    3146:	2120      	movs	r1, #32
    3148:	0028      	movs	r0, r5
    314a:	47a0      	blx	r4
	uTXByte(Debug_COM, 'S');
    314c:	2153      	movs	r1, #83	; 0x53
    314e:	0028      	movs	r0, r5
    3150:	47a0      	blx	r4
	uTXByte(Debug_COM, 't');
    3152:	2174      	movs	r1, #116	; 0x74
    3154:	0028      	movs	r0, r5
    3156:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x09);	
    3158:	2109      	movs	r1, #9
    315a:	0028      	movs	r0, r5
    315c:	47a0      	blx	r4
    315e:	e7e9      	b.n	3134 <Print_Write_LoRa_Setting_Msg+0xc>
    3160:	2000022c 	.word	0x2000022c
    3164:	00003ac9 	.word	0x00003ac9

00003168 <Print_Read_LoRa_RxCount_Msg>:

void Print_Read_LoRa_RxCount_Msg(volatile LORA_DEFINE_t *tmp_LORA)
{
    3168:	b570      	push	{r4, r5, r6, lr}
	if(tmp_LORA->Lora_Debug_Flag == NoDebug) return;
    316a:	2385      	movs	r3, #133	; 0x85
    316c:	009b      	lsls	r3, r3, #2
    316e:	5cc3      	ldrb	r3, [r0, r3]
    3170:	2b00      	cmp	r3, #0
    3172:	d100      	bne.n	3176 <Print_Read_LoRa_RxCount_Msg+0xe>
	uTXByte(Debug_COM, 'd');
	uTXByte(Debug_COM, ' ');
	uTXByte(Debug_COM, 'C');
	uTXByte(Debug_COM, 'T');
	uTXByte(Debug_COM, 0x09);	
}
    3174:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'R');
    3176:	4d0a      	ldr	r5, [pc, #40]	; (31a0 <Print_Read_LoRa_RxCount_Msg+0x38>)
    3178:	2152      	movs	r1, #82	; 0x52
    317a:	0028      	movs	r0, r5
    317c:	4c09      	ldr	r4, [pc, #36]	; (31a4 <Print_Read_LoRa_RxCount_Msg+0x3c>)
    317e:	47a0      	blx	r4
	uTXByte(Debug_COM, 'd');
    3180:	2164      	movs	r1, #100	; 0x64
    3182:	0028      	movs	r0, r5
    3184:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    3186:	2120      	movs	r1, #32
    3188:	0028      	movs	r0, r5
    318a:	47a0      	blx	r4
	uTXByte(Debug_COM, 'C');
    318c:	2143      	movs	r1, #67	; 0x43
    318e:	0028      	movs	r0, r5
    3190:	47a0      	blx	r4
	uTXByte(Debug_COM, 'T');
    3192:	2154      	movs	r1, #84	; 0x54
    3194:	0028      	movs	r0, r5
    3196:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x09);	
    3198:	2109      	movs	r1, #9
    319a:	0028      	movs	r0, r5
    319c:	47a0      	blx	r4
    319e:	e7e9      	b.n	3174 <Print_Read_LoRa_RxCount_Msg+0xc>
    31a0:	2000022c 	.word	0x2000022c
    31a4:	00003ac9 	.word	0x00003ac9

000031a8 <Print_Read_LoRa_RxBuffer_Msg>:

void Print_Read_LoRa_RxBuffer_Msg(volatile LORA_DEFINE_t *tmp_LORA)
{
    31a8:	b570      	push	{r4, r5, r6, lr}
	if(tmp_LORA->Lora_Debug_Flag == NoDebug) return;
    31aa:	2385      	movs	r3, #133	; 0x85
    31ac:	009b      	lsls	r3, r3, #2
    31ae:	5cc3      	ldrb	r3, [r0, r3]
    31b0:	2b00      	cmp	r3, #0
    31b2:	d100      	bne.n	31b6 <Print_Read_LoRa_RxBuffer_Msg+0xe>
	uTXByte(Debug_COM, 'd');
	uTXByte(Debug_COM, ' ');
	uTXByte(Debug_COM, 'B');
	uTXByte(Debug_COM, 'F');
	uTXByte(Debug_COM, 0x09);
}
    31b4:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'R');
    31b6:	4d0a      	ldr	r5, [pc, #40]	; (31e0 <Print_Read_LoRa_RxBuffer_Msg+0x38>)
    31b8:	2152      	movs	r1, #82	; 0x52
    31ba:	0028      	movs	r0, r5
    31bc:	4c09      	ldr	r4, [pc, #36]	; (31e4 <Print_Read_LoRa_RxBuffer_Msg+0x3c>)
    31be:	47a0      	blx	r4
	uTXByte(Debug_COM, 'd');
    31c0:	2164      	movs	r1, #100	; 0x64
    31c2:	0028      	movs	r0, r5
    31c4:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    31c6:	2120      	movs	r1, #32
    31c8:	0028      	movs	r0, r5
    31ca:	47a0      	blx	r4
	uTXByte(Debug_COM, 'B');
    31cc:	2142      	movs	r1, #66	; 0x42
    31ce:	0028      	movs	r0, r5
    31d0:	47a0      	blx	r4
	uTXByte(Debug_COM, 'F');
    31d2:	2146      	movs	r1, #70	; 0x46
    31d4:	0028      	movs	r0, r5
    31d6:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x09);
    31d8:	2109      	movs	r1, #9
    31da:	0028      	movs	r0, r5
    31dc:	47a0      	blx	r4
    31de:	e7e9      	b.n	31b4 <Print_Read_LoRa_RxBuffer_Msg+0xc>
    31e0:	2000022c 	.word	0x2000022c
    31e4:	00003ac9 	.word	0x00003ac9

000031e8 <Print_Reset_IRQ_Flag_Msg>:

void Print_Reset_IRQ_Flag_Msg(volatile LORA_DEFINE_t *tmp_LORA)
{
    31e8:	b570      	push	{r4, r5, r6, lr}
	if(tmp_LORA->Lora_Debug_Flag == NoDebug) return;
    31ea:	2385      	movs	r3, #133	; 0x85
    31ec:	009b      	lsls	r3, r3, #2
    31ee:	5cc3      	ldrb	r3, [r0, r3]
    31f0:	2b00      	cmp	r3, #0
    31f2:	d100      	bne.n	31f6 <Print_Reset_IRQ_Flag_Msg+0xe>
	uTXByte(Debug_COM, ' ');
	uTXByte(Debug_COM, 'I');
	uTXByte(Debug_COM, 'R');
	uTXByte(Debug_COM, 'Q');
	uTXByte(Debug_COM, 0x0d);	
}
    31f4:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'R');
    31f6:	4d0d      	ldr	r5, [pc, #52]	; (322c <Print_Reset_IRQ_Flag_Msg+0x44>)
    31f8:	2152      	movs	r1, #82	; 0x52
    31fa:	0028      	movs	r0, r5
    31fc:	4c0c      	ldr	r4, [pc, #48]	; (3230 <Print_Reset_IRQ_Flag_Msg+0x48>)
    31fe:	47a0      	blx	r4
	uTXByte(Debug_COM, 'S');
    3200:	2153      	movs	r1, #83	; 0x53
    3202:	0028      	movs	r0, r5
    3204:	47a0      	blx	r4
	uTXByte(Debug_COM, 'T');
    3206:	2154      	movs	r1, #84	; 0x54
    3208:	0028      	movs	r0, r5
    320a:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    320c:	2120      	movs	r1, #32
    320e:	0028      	movs	r0, r5
    3210:	47a0      	blx	r4
	uTXByte(Debug_COM, 'I');
    3212:	2149      	movs	r1, #73	; 0x49
    3214:	0028      	movs	r0, r5
    3216:	47a0      	blx	r4
	uTXByte(Debug_COM, 'R');
    3218:	2152      	movs	r1, #82	; 0x52
    321a:	0028      	movs	r0, r5
    321c:	47a0      	blx	r4
	uTXByte(Debug_COM, 'Q');
    321e:	2151      	movs	r1, #81	; 0x51
    3220:	0028      	movs	r0, r5
    3222:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);	
    3224:	210d      	movs	r1, #13
    3226:	0028      	movs	r0, r5
    3228:	47a0      	blx	r4
    322a:	e7e3      	b.n	31f4 <Print_Reset_IRQ_Flag_Msg+0xc>
    322c:	2000022c 	.word	0x2000022c
    3230:	00003ac9 	.word	0x00003ac9

00003234 <Print_Write_LoRa_TxBuffer_Msg>:
void Print_Write_LoRa_TxBuffer_Msg(volatile LORA_DEFINE_t *tmp_LORA)
{
    3234:	b570      	push	{r4, r5, r6, lr}
	if(tmp_LORA->Lora_Debug_Flag == NoDebug) return;
    3236:	2385      	movs	r3, #133	; 0x85
    3238:	009b      	lsls	r3, r3, #2
    323a:	5cc3      	ldrb	r3, [r0, r3]
    323c:	2b00      	cmp	r3, #0
    323e:	d100      	bne.n	3242 <Print_Write_LoRa_TxBuffer_Msg+0xe>
	uTXByte(Debug_COM, 'r');
	uTXByte(Debug_COM, ' ');
	uTXByte(Debug_COM, 'B');
	uTXByte(Debug_COM, 'F');
	uTXByte(Debug_COM, 0x09);	
}
    3240:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'W');
    3242:	4d0a      	ldr	r5, [pc, #40]	; (326c <Print_Write_LoRa_TxBuffer_Msg+0x38>)
    3244:	2157      	movs	r1, #87	; 0x57
    3246:	0028      	movs	r0, r5
    3248:	4c09      	ldr	r4, [pc, #36]	; (3270 <Print_Write_LoRa_TxBuffer_Msg+0x3c>)
    324a:	47a0      	blx	r4
	uTXByte(Debug_COM, 'r');
    324c:	2172      	movs	r1, #114	; 0x72
    324e:	0028      	movs	r0, r5
    3250:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    3252:	2120      	movs	r1, #32
    3254:	0028      	movs	r0, r5
    3256:	47a0      	blx	r4
	uTXByte(Debug_COM, 'B');
    3258:	2142      	movs	r1, #66	; 0x42
    325a:	0028      	movs	r0, r5
    325c:	47a0      	blx	r4
	uTXByte(Debug_COM, 'F');
    325e:	2146      	movs	r1, #70	; 0x46
    3260:	0028      	movs	r0, r5
    3262:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x09);	
    3264:	2109      	movs	r1, #9
    3266:	0028      	movs	r0, r5
    3268:	47a0      	blx	r4
    326a:	e7e9      	b.n	3240 <Print_Write_LoRa_TxBuffer_Msg+0xc>
    326c:	2000022c 	.word	0x2000022c
    3270:	00003ac9 	.word	0x00003ac9

00003274 <Print_Leave_LoRa_Tx_Mode_Msg>:

void Print_Leave_LoRa_Tx_Mode_Msg(volatile LORA_DEFINE_t *tmp_LORA)
{
    3274:	b570      	push	{r4, r5, r6, lr}
	if(tmp_LORA->Lora_Debug_Flag == NoDebug) return;
    3276:	2385      	movs	r3, #133	; 0x85
    3278:	009b      	lsls	r3, r3, #2
    327a:	5cc3      	ldrb	r3, [r0, r3]
    327c:	2b00      	cmp	r3, #0
    327e:	d100      	bne.n	3282 <Print_Leave_LoRa_Tx_Mode_Msg+0xe>
	uTXByte(Debug_COM, 'v');
	uTXByte(Debug_COM, ' ');
	uTXByte(Debug_COM, 'T');
	uTXByte(Debug_COM, 'X');
	uTXByte(Debug_COM, 0x0d);	
}
    3280:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'L');
    3282:	4d0c      	ldr	r5, [pc, #48]	; (32b4 <Print_Leave_LoRa_Tx_Mode_Msg+0x40>)
    3284:	214c      	movs	r1, #76	; 0x4c
    3286:	0028      	movs	r0, r5
    3288:	4c0b      	ldr	r4, [pc, #44]	; (32b8 <Print_Leave_LoRa_Tx_Mode_Msg+0x44>)
    328a:	47a0      	blx	r4
	uTXByte(Debug_COM, 'e');
    328c:	2165      	movs	r1, #101	; 0x65
    328e:	0028      	movs	r0, r5
    3290:	47a0      	blx	r4
	uTXByte(Debug_COM, 'v');
    3292:	2176      	movs	r1, #118	; 0x76
    3294:	0028      	movs	r0, r5
    3296:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    3298:	2120      	movs	r1, #32
    329a:	0028      	movs	r0, r5
    329c:	47a0      	blx	r4
	uTXByte(Debug_COM, 'T');
    329e:	2154      	movs	r1, #84	; 0x54
    32a0:	0028      	movs	r0, r5
    32a2:	47a0      	blx	r4
	uTXByte(Debug_COM, 'X');
    32a4:	2158      	movs	r1, #88	; 0x58
    32a6:	0028      	movs	r0, r5
    32a8:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);	
    32aa:	210d      	movs	r1, #13
    32ac:	0028      	movs	r0, r5
    32ae:	47a0      	blx	r4
    32b0:	e7e6      	b.n	3280 <Print_Leave_LoRa_Tx_Mode_Msg+0xc>
    32b2:	46c0      	nop			; (mov r8, r8)
    32b4:	2000022c 	.word	0x2000022c
    32b8:	00003ac9 	.word	0x00003ac9

000032bc <Print_Delay_Some_Time_Msg>:

void Print_Delay_Some_Time_Msg(volatile LORA_DEFINE_t *tmp_LORA)
{
    32bc:	b570      	push	{r4, r5, r6, lr}
	if(tmp_LORA->Lora_Debug_Flag == NoDebug) return;
    32be:	2385      	movs	r3, #133	; 0x85
    32c0:	009b      	lsls	r3, r3, #2
    32c2:	5cc3      	ldrb	r3, [r0, r3]
    32c4:	2b00      	cmp	r3, #0
    32c6:	d100      	bne.n	32ca <Print_Delay_Some_Time_Msg+0xe>
	uTXByte(Debug_COM, 'T');
	uTXByte(Debug_COM, 'i');
	uTXByte(Debug_COM, 'm');
	uTXByte(Debug_COM, 'e');
	uTXByte(Debug_COM, 0x0d);
}
    32c8:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'D');
    32ca:	4d19      	ldr	r5, [pc, #100]	; (3330 <Print_Delay_Some_Time_Msg+0x74>)
    32cc:	2144      	movs	r1, #68	; 0x44
    32ce:	0028      	movs	r0, r5
    32d0:	4c18      	ldr	r4, [pc, #96]	; (3334 <Print_Delay_Some_Time_Msg+0x78>)
    32d2:	47a0      	blx	r4
	uTXByte(Debug_COM, 'e');
    32d4:	2165      	movs	r1, #101	; 0x65
    32d6:	0028      	movs	r0, r5
    32d8:	47a0      	blx	r4
	uTXByte(Debug_COM, 'l');
    32da:	216c      	movs	r1, #108	; 0x6c
    32dc:	0028      	movs	r0, r5
    32de:	47a0      	blx	r4
	uTXByte(Debug_COM, 'a');
    32e0:	2161      	movs	r1, #97	; 0x61
    32e2:	0028      	movs	r0, r5
    32e4:	47a0      	blx	r4
	uTXByte(Debug_COM, 'y');
    32e6:	2179      	movs	r1, #121	; 0x79
    32e8:	0028      	movs	r0, r5
    32ea:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    32ec:	2120      	movs	r1, #32
    32ee:	0028      	movs	r0, r5
    32f0:	47a0      	blx	r4
	uTXByte(Debug_COM, 'S');
    32f2:	2153      	movs	r1, #83	; 0x53
    32f4:	0028      	movs	r0, r5
    32f6:	47a0      	blx	r4
	uTXByte(Debug_COM, 'o');
    32f8:	216f      	movs	r1, #111	; 0x6f
    32fa:	0028      	movs	r0, r5
    32fc:	47a0      	blx	r4
	uTXByte(Debug_COM, 'm');
    32fe:	216d      	movs	r1, #109	; 0x6d
    3300:	0028      	movs	r0, r5
    3302:	47a0      	blx	r4
	uTXByte(Debug_COM, 'e');
    3304:	2165      	movs	r1, #101	; 0x65
    3306:	0028      	movs	r0, r5
    3308:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    330a:	2120      	movs	r1, #32
    330c:	0028      	movs	r0, r5
    330e:	47a0      	blx	r4
	uTXByte(Debug_COM, 'T');
    3310:	2154      	movs	r1, #84	; 0x54
    3312:	0028      	movs	r0, r5
    3314:	47a0      	blx	r4
	uTXByte(Debug_COM, 'i');
    3316:	2169      	movs	r1, #105	; 0x69
    3318:	0028      	movs	r0, r5
    331a:	47a0      	blx	r4
	uTXByte(Debug_COM, 'm');
    331c:	216d      	movs	r1, #109	; 0x6d
    331e:	0028      	movs	r0, r5
    3320:	47a0      	blx	r4
	uTXByte(Debug_COM, 'e');
    3322:	2165      	movs	r1, #101	; 0x65
    3324:	0028      	movs	r0, r5
    3326:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);
    3328:	210d      	movs	r1, #13
    332a:	0028      	movs	r0, r5
    332c:	47a0      	blx	r4
    332e:	e7cb      	b.n	32c8 <Print_Delay_Some_Time_Msg+0xc>
    3330:	2000022c 	.word	0x2000022c
    3334:	00003ac9 	.word	0x00003ac9

00003338 <Print_CRC_ERROR>:
	uTXByte(Debug_COM, 'P');
	uTXByte(Debug_COM, 0x0d);
}
					
void Print_CRC_ERROR(volatile LORA_DEFINE_t *tmp_LORA)				
{
    3338:	b570      	push	{r4, r5, r6, lr}
	if(tmp_LORA->Lora_Debug_Flag == NoDebug) return;
    333a:	2385      	movs	r3, #133	; 0x85
    333c:	009b      	lsls	r3, r3, #2
    333e:	5cc3      	ldrb	r3, [r0, r3]
    3340:	2b00      	cmp	r3, #0
    3342:	d100      	bne.n	3346 <Print_CRC_ERROR+0xe>
	uTXByte(Debug_COM, ' ');
	uTXByte(Debug_COM, 'E');
	uTXByte(Debug_COM, 'r');
	uTXByte(Debug_COM, 'r');
	uTXByte(Debug_COM, 0x0d);
}
    3344:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'C');
    3346:	4d0d      	ldr	r5, [pc, #52]	; (337c <Print_CRC_ERROR+0x44>)
    3348:	2143      	movs	r1, #67	; 0x43
    334a:	0028      	movs	r0, r5
    334c:	4c0c      	ldr	r4, [pc, #48]	; (3380 <Print_CRC_ERROR+0x48>)
    334e:	47a0      	blx	r4
	uTXByte(Debug_COM, 'R');
    3350:	2152      	movs	r1, #82	; 0x52
    3352:	0028      	movs	r0, r5
    3354:	47a0      	blx	r4
	uTXByte(Debug_COM, 'C');
    3356:	2143      	movs	r1, #67	; 0x43
    3358:	0028      	movs	r0, r5
    335a:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    335c:	2120      	movs	r1, #32
    335e:	0028      	movs	r0, r5
    3360:	47a0      	blx	r4
	uTXByte(Debug_COM, 'E');
    3362:	2145      	movs	r1, #69	; 0x45
    3364:	0028      	movs	r0, r5
    3366:	47a0      	blx	r4
	uTXByte(Debug_COM, 'r');
    3368:	2172      	movs	r1, #114	; 0x72
    336a:	0028      	movs	r0, r5
    336c:	47a0      	blx	r4
	uTXByte(Debug_COM, 'r');
    336e:	2172      	movs	r1, #114	; 0x72
    3370:	0028      	movs	r0, r5
    3372:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);
    3374:	210d      	movs	r1, #13
    3376:	0028      	movs	r0, r5
    3378:	47a0      	blx	r4
    337a:	e7e3      	b.n	3344 <Print_CRC_ERROR+0xc>
    337c:	2000022c 	.word	0x2000022c
    3380:	00003ac9 	.word	0x00003ac9

00003384 <Print_CRC_OK>:


void Print_CRC_OK(volatile LORA_DEFINE_t *tmp_LORA)
{
    3384:	b570      	push	{r4, r5, r6, lr}
	if(tmp_LORA->Lora_Debug_Flag == NoDebug) return;
    3386:	2385      	movs	r3, #133	; 0x85
    3388:	009b      	lsls	r3, r3, #2
    338a:	5cc3      	ldrb	r3, [r0, r3]
    338c:	2b00      	cmp	r3, #0
    338e:	d100      	bne.n	3392 <Print_CRC_OK+0xe>
	uTXByte(Debug_COM, 'C');
	uTXByte(Debug_COM, ' ');
	uTXByte(Debug_COM, 'O');
	uTXByte(Debug_COM, 'K');
	uTXByte(Debug_COM, 0x0d);
}
    3390:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'C');
    3392:	4d0c      	ldr	r5, [pc, #48]	; (33c4 <Print_CRC_OK+0x40>)
    3394:	2143      	movs	r1, #67	; 0x43
    3396:	0028      	movs	r0, r5
    3398:	4c0b      	ldr	r4, [pc, #44]	; (33c8 <Print_CRC_OK+0x44>)
    339a:	47a0      	blx	r4
	uTXByte(Debug_COM, 'R');
    339c:	2152      	movs	r1, #82	; 0x52
    339e:	0028      	movs	r0, r5
    33a0:	47a0      	blx	r4
	uTXByte(Debug_COM, 'C');
    33a2:	2143      	movs	r1, #67	; 0x43
    33a4:	0028      	movs	r0, r5
    33a6:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    33a8:	2120      	movs	r1, #32
    33aa:	0028      	movs	r0, r5
    33ac:	47a0      	blx	r4
	uTXByte(Debug_COM, 'O');
    33ae:	214f      	movs	r1, #79	; 0x4f
    33b0:	0028      	movs	r0, r5
    33b2:	47a0      	blx	r4
	uTXByte(Debug_COM, 'K');
    33b4:	214b      	movs	r1, #75	; 0x4b
    33b6:	0028      	movs	r0, r5
    33b8:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);
    33ba:	210d      	movs	r1, #13
    33bc:	0028      	movs	r0, r5
    33be:	47a0      	blx	r4
    33c0:	e7e6      	b.n	3390 <Print_CRC_OK+0xc>
    33c2:	46c0      	nop			; (mov r8, r8)
    33c4:	2000022c 	.word	0x2000022c
    33c8:	00003ac9 	.word	0x00003ac9

000033cc <Print_RSSI_Msg>:




void Print_RSSI_Msg(volatile LORA_DEFINE_t *tmp_LORA)
{
    33cc:	b570      	push	{r4, r5, r6, lr}
    33ce:	0006      	movs	r6, r0
	uTXByte(Debug_COM, 'R');
    33d0:	4c17      	ldr	r4, [pc, #92]	; (3430 <Print_RSSI_Msg+0x64>)
    33d2:	2152      	movs	r1, #82	; 0x52
    33d4:	0020      	movs	r0, r4
    33d6:	4d17      	ldr	r5, [pc, #92]	; (3434 <Print_RSSI_Msg+0x68>)
    33d8:	47a8      	blx	r5
	uTXByte(Debug_COM, 's');
    33da:	2173      	movs	r1, #115	; 0x73
    33dc:	0020      	movs	r0, r4
    33de:	47a8      	blx	r5
	uTXByte(Debug_COM, 's');
    33e0:	2173      	movs	r1, #115	; 0x73
    33e2:	0020      	movs	r0, r4
    33e4:	47a8      	blx	r5
	uTXByte(Debug_COM, 'i');
    33e6:	2169      	movs	r1, #105	; 0x69
    33e8:	0020      	movs	r0, r4
    33ea:	47a8      	blx	r5
	uTXByte(Debug_COM, ':');
    33ec:	213a      	movs	r1, #58	; 0x3a
    33ee:	0020      	movs	r0, r4
    33f0:	47a8      	blx	r5
	uTXByte(Debug_COM, ' ');
    33f2:	2120      	movs	r1, #32
    33f4:	0020      	movs	r0, r4
    33f6:	47a8      	blx	r5
	uTXByte(Debug_COM, '-');
    33f8:	212d      	movs	r1, #45	; 0x2d
    33fa:	0020      	movs	r0, r4
    33fc:	47a8      	blx	r5
	uart_send_word(Debug_COM, hex_to_bcd(tmp_LORA->RSSIValue));
    33fe:	2388      	movs	r3, #136	; 0x88
    3400:	009b      	lsls	r3, r3, #2
    3402:	58f0      	ldr	r0, [r6, r3]
    3404:	4b0c      	ldr	r3, [pc, #48]	; (3438 <Print_RSSI_Msg+0x6c>)
    3406:	4798      	blx	r3
    3408:	0001      	movs	r1, r0
    340a:	0020      	movs	r0, r4
    340c:	4b0b      	ldr	r3, [pc, #44]	; (343c <Print_RSSI_Msg+0x70>)
    340e:	4798      	blx	r3
	uTXByte(Debug_COM, ' ');
    3410:	2120      	movs	r1, #32
    3412:	0020      	movs	r0, r4
    3414:	47a8      	blx	r5
	uTXByte(Debug_COM, 'd');
    3416:	2164      	movs	r1, #100	; 0x64
    3418:	0020      	movs	r0, r4
    341a:	47a8      	blx	r5
	uTXByte(Debug_COM, 'B');
    341c:	2142      	movs	r1, #66	; 0x42
    341e:	0020      	movs	r0, r4
    3420:	47a8      	blx	r5
	uTXByte(Debug_COM, 'm');
    3422:	216d      	movs	r1, #109	; 0x6d
    3424:	0020      	movs	r0, r4
    3426:	47a8      	blx	r5
	uTXByte(Debug_COM, 0x0d);
    3428:	210d      	movs	r1, #13
    342a:	0020      	movs	r0, r4
    342c:	47a8      	blx	r5
}
    342e:	bd70      	pop	{r4, r5, r6, pc}
    3430:	2000022c 	.word	0x2000022c
    3434:	00003ac9 	.word	0x00003ac9
    3438:	00003d41 	.word	0x00003d41
    343c:	00003b15 	.word	0x00003b15

00003440 <Print_One_RSSI_Msg>:

void Print_One_RSSI_Msg(volatile unsigned tmp_rssi)
{
    3440:	b530      	push	{r4, r5, lr}
    3442:	b083      	sub	sp, #12
    3444:	9001      	str	r0, [sp, #4]
	uTXByte(Debug_COM, ' ');
    3446:	4c0e      	ldr	r4, [pc, #56]	; (3480 <Print_One_RSSI_Msg+0x40>)
    3448:	2120      	movs	r1, #32
    344a:	0020      	movs	r0, r4
    344c:	4d0d      	ldr	r5, [pc, #52]	; (3484 <Print_One_RSSI_Msg+0x44>)
    344e:	47a8      	blx	r5
	uTXByte(Debug_COM, '-');
    3450:	212d      	movs	r1, #45	; 0x2d
    3452:	0020      	movs	r0, r4
    3454:	47a8      	blx	r5
	uart_send_word(Debug_COM, hex_to_bcd(tmp_rssi));
    3456:	9801      	ldr	r0, [sp, #4]
    3458:	4b0b      	ldr	r3, [pc, #44]	; (3488 <Print_One_RSSI_Msg+0x48>)
    345a:	4798      	blx	r3
    345c:	0001      	movs	r1, r0
    345e:	0020      	movs	r0, r4
    3460:	4b0a      	ldr	r3, [pc, #40]	; (348c <Print_One_RSSI_Msg+0x4c>)
    3462:	4798      	blx	r3
	uTXByte(Debug_COM, ' ');
    3464:	2120      	movs	r1, #32
    3466:	0020      	movs	r0, r4
    3468:	47a8      	blx	r5
	uTXByte(Debug_COM, 'd');
    346a:	2164      	movs	r1, #100	; 0x64
    346c:	0020      	movs	r0, r4
    346e:	47a8      	blx	r5
	uTXByte(Debug_COM, 'B');
    3470:	2142      	movs	r1, #66	; 0x42
    3472:	0020      	movs	r0, r4
    3474:	47a8      	blx	r5
	uTXByte(Debug_COM, 'm');
    3476:	216d      	movs	r1, #109	; 0x6d
    3478:	0020      	movs	r0, r4
    347a:	47a8      	blx	r5
}
    347c:	b003      	add	sp, #12
    347e:	bd30      	pop	{r4, r5, pc}
    3480:	2000022c 	.word	0x2000022c
    3484:	00003ac9 	.word	0x00003ac9
    3488:	00003d41 	.word	0x00003d41
    348c:	00003b15 	.word	0x00003b15

00003490 <Print_Lora_RX_Count_Form_Module_Msg>:

void Print_Lora_RX_Count_Form_Module_Msg(volatile LORA_DEFINE_t *tmp_LORA)
{
    3490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	UINT16u_t	tmp16;
	tmp16.word = tmp_LORA->Lora_RX_Count_Form_Module;
    3492:	2389      	movs	r3, #137	; 0x89
    3494:	009b      	lsls	r3, r3, #2
    3496:	58c6      	ldr	r6, [r0, r3]
	uTXByte(Debug_COM, 'R');
    3498:	4c18      	ldr	r4, [pc, #96]	; (34fc <Print_Lora_RX_Count_Form_Module_Msg+0x6c>)
    349a:	2152      	movs	r1, #82	; 0x52
    349c:	0020      	movs	r0, r4
    349e:	4d18      	ldr	r5, [pc, #96]	; (3500 <Print_Lora_RX_Count_Form_Module_Msg+0x70>)
    34a0:	47a8      	blx	r5
	uTXByte(Debug_COM, 'X');
    34a2:	2158      	movs	r1, #88	; 0x58
    34a4:	0020      	movs	r0, r4
    34a6:	47a8      	blx	r5
	uTXByte(Debug_COM, ' ');
    34a8:	2120      	movs	r1, #32
    34aa:	0020      	movs	r0, r4
    34ac:	47a8      	blx	r5
	uTXByte(Debug_COM, 'C');
    34ae:	2143      	movs	r1, #67	; 0x43
    34b0:	0020      	movs	r0, r4
    34b2:	47a8      	blx	r5
	uTXByte(Debug_COM, 'o');
    34b4:	216f      	movs	r1, #111	; 0x6f
    34b6:	0020      	movs	r0, r4
    34b8:	47a8      	blx	r5
	uTXByte(Debug_COM, 'u');
    34ba:	2175      	movs	r1, #117	; 0x75
    34bc:	0020      	movs	r0, r4
    34be:	47a8      	blx	r5
	uTXByte(Debug_COM, 'n');
    34c0:	216e      	movs	r1, #110	; 0x6e
    34c2:	0020      	movs	r0, r4
    34c4:	47a8      	blx	r5
	uTXByte(Debug_COM, 't');
    34c6:	2174      	movs	r1, #116	; 0x74
    34c8:	0020      	movs	r0, r4
    34ca:	47a8      	blx	r5
	uTXByte(Debug_COM, ':');
    34cc:	213a      	movs	r1, #58	; 0x3a
    34ce:	0020      	movs	r0, r4
    34d0:	47a8      	blx	r5
	uTXByte(Debug_COM, ' ');
    34d2:	2120      	movs	r1, #32
    34d4:	0020      	movs	r0, r4
    34d6:	47a8      	blx	r5
	uTXByte(Debug_COM, '0');
    34d8:	2130      	movs	r1, #48	; 0x30
    34da:	0020      	movs	r0, r4
    34dc:	47a8      	blx	r5
	uTXByte(Debug_COM, 'x');
    34de:	2178      	movs	r1, #120	; 0x78
    34e0:	0020      	movs	r0, r4
    34e2:	47a8      	blx	r5
	uart_send_ascii_byte(Debug_COM, tmp16.byte[1]);
    34e4:	0431      	lsls	r1, r6, #16
    34e6:	0e09      	lsrs	r1, r1, #24
    34e8:	0020      	movs	r0, r4
    34ea:	4f06      	ldr	r7, [pc, #24]	; (3504 <Print_Lora_RX_Count_Form_Module_Msg+0x74>)
    34ec:	47b8      	blx	r7
	uart_send_ascii_byte(Debug_COM, tmp16.byte[0]);
    34ee:	b2f1      	uxtb	r1, r6
    34f0:	0020      	movs	r0, r4
    34f2:	47b8      	blx	r7
	uTXByte(Debug_COM, 0x0d);
    34f4:	210d      	movs	r1, #13
    34f6:	0020      	movs	r0, r4
    34f8:	47a8      	blx	r5
}
    34fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    34fc:	2000022c 	.word	0x2000022c
    3500:	00003ac9 	.word	0x00003ac9
    3504:	00003ae9 	.word	0x00003ae9

00003508 <Print_Debug_Mode_ON_Msg>:



void Print_Debug_Mode_ON_Msg(void)
{
    3508:	b570      	push	{r4, r5, r6, lr}
	uTXByte(Debug_COM, 'D');
    350a:	4d0f      	ldr	r5, [pc, #60]	; (3548 <Print_Debug_Mode_ON_Msg+0x40>)
    350c:	2144      	movs	r1, #68	; 0x44
    350e:	0028      	movs	r0, r5
    3510:	4c0e      	ldr	r4, [pc, #56]	; (354c <Print_Debug_Mode_ON_Msg+0x44>)
    3512:	47a0      	blx	r4
	uTXByte(Debug_COM, 'e');
    3514:	2165      	movs	r1, #101	; 0x65
    3516:	0028      	movs	r0, r5
    3518:	47a0      	blx	r4
	uTXByte(Debug_COM, 'B');
    351a:	2142      	movs	r1, #66	; 0x42
    351c:	0028      	movs	r0, r5
    351e:	47a0      	blx	r4
	uTXByte(Debug_COM, 'u');
    3520:	2175      	movs	r1, #117	; 0x75
    3522:	0028      	movs	r0, r5
    3524:	47a0      	blx	r4
	uTXByte(Debug_COM, 'g');
    3526:	2167      	movs	r1, #103	; 0x67
    3528:	0028      	movs	r0, r5
    352a:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    352c:	2120      	movs	r1, #32
    352e:	0028      	movs	r0, r5
    3530:	47a0      	blx	r4
	uTXByte(Debug_COM, 'O');
    3532:	214f      	movs	r1, #79	; 0x4f
    3534:	0028      	movs	r0, r5
    3536:	47a0      	blx	r4
	uTXByte(Debug_COM, 'N');
    3538:	214e      	movs	r1, #78	; 0x4e
    353a:	0028      	movs	r0, r5
    353c:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);
    353e:	210d      	movs	r1, #13
    3540:	0028      	movs	r0, r5
    3542:	47a0      	blx	r4
}
    3544:	bd70      	pop	{r4, r5, r6, pc}
    3546:	46c0      	nop			; (mov r8, r8)
    3548:	2000022c 	.word	0x2000022c
    354c:	00003ac9 	.word	0x00003ac9

00003550 <Print_Debug_Mode_OFF_Msg>:

void Print_Debug_Mode_OFF_Msg(void)
{
    3550:	b570      	push	{r4, r5, r6, lr}
	uTXByte(Debug_COM, 'D');
    3552:	4d10      	ldr	r5, [pc, #64]	; (3594 <Print_Debug_Mode_OFF_Msg+0x44>)
    3554:	2144      	movs	r1, #68	; 0x44
    3556:	0028      	movs	r0, r5
    3558:	4c0f      	ldr	r4, [pc, #60]	; (3598 <Print_Debug_Mode_OFF_Msg+0x48>)
    355a:	47a0      	blx	r4
	uTXByte(Debug_COM, 'e');
    355c:	2165      	movs	r1, #101	; 0x65
    355e:	0028      	movs	r0, r5
    3560:	47a0      	blx	r4
	uTXByte(Debug_COM, 'B');
    3562:	2142      	movs	r1, #66	; 0x42
    3564:	0028      	movs	r0, r5
    3566:	47a0      	blx	r4
	uTXByte(Debug_COM, 'u');
    3568:	2175      	movs	r1, #117	; 0x75
    356a:	0028      	movs	r0, r5
    356c:	47a0      	blx	r4
	uTXByte(Debug_COM, 'g');
    356e:	2167      	movs	r1, #103	; 0x67
    3570:	0028      	movs	r0, r5
    3572:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    3574:	2120      	movs	r1, #32
    3576:	0028      	movs	r0, r5
    3578:	47a0      	blx	r4
	uTXByte(Debug_COM, 'O');
    357a:	214f      	movs	r1, #79	; 0x4f
    357c:	0028      	movs	r0, r5
    357e:	47a0      	blx	r4
	uTXByte(Debug_COM, 'F');
    3580:	2146      	movs	r1, #70	; 0x46
    3582:	0028      	movs	r0, r5
    3584:	47a0      	blx	r4
	uTXByte(Debug_COM, 'F');
    3586:	2146      	movs	r1, #70	; 0x46
    3588:	0028      	movs	r0, r5
    358a:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);
    358c:	210d      	movs	r1, #13
    358e:	0028      	movs	r0, r5
    3590:	47a0      	blx	r4
}
    3592:	bd70      	pop	{r4, r5, r6, pc}
    3594:	2000022c 	.word	0x2000022c
    3598:	00003ac9 	.word	0x00003ac9

0000359c <Print_Wait_TX_Finish_Msg>:

void Print_Wait_TX_Finish_Msg(volatile LORA_DEFINE_t *tmp_LORA)
{
    359c:	b570      	push	{r4, r5, r6, lr}
	if(tmp_LORA->Lora_Debug_Flag == 0) return;
    359e:	2385      	movs	r3, #133	; 0x85
    35a0:	009b      	lsls	r3, r3, #2
    35a2:	5cc3      	ldrb	r3, [r0, r3]
    35a4:	2b00      	cmp	r3, #0
    35a6:	d100      	bne.n	35aa <Print_Wait_TX_Finish_Msg+0xe>
	uTXByte(Debug_COM, ' ');
	uTXByte(Debug_COM, 'I');
	uTXByte(Debug_COM, 'R');
	uTXByte(Debug_COM, 'Q');
	uTXByte(Debug_COM, 0x0d);
}
    35a8:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'W');
    35aa:	4d13      	ldr	r5, [pc, #76]	; (35f8 <Print_Wait_TX_Finish_Msg+0x5c>)
    35ac:	2157      	movs	r1, #87	; 0x57
    35ae:	0028      	movs	r0, r5
    35b0:	4c12      	ldr	r4, [pc, #72]	; (35fc <Print_Wait_TX_Finish_Msg+0x60>)
    35b2:	47a0      	blx	r4
	uTXByte(Debug_COM, 'a');
    35b4:	2161      	movs	r1, #97	; 0x61
    35b6:	0028      	movs	r0, r5
    35b8:	47a0      	blx	r4
	uTXByte(Debug_COM, 'i');
    35ba:	2169      	movs	r1, #105	; 0x69
    35bc:	0028      	movs	r0, r5
    35be:	47a0      	blx	r4
	uTXByte(Debug_COM, 't');
    35c0:	2174      	movs	r1, #116	; 0x74
    35c2:	0028      	movs	r0, r5
    35c4:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    35c6:	2120      	movs	r1, #32
    35c8:	0028      	movs	r0, r5
    35ca:	47a0      	blx	r4
	uTXByte(Debug_COM, 'T');
    35cc:	2154      	movs	r1, #84	; 0x54
    35ce:	0028      	movs	r0, r5
    35d0:	47a0      	blx	r4
	uTXByte(Debug_COM, 'X');
    35d2:	2158      	movs	r1, #88	; 0x58
    35d4:	0028      	movs	r0, r5
    35d6:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    35d8:	2120      	movs	r1, #32
    35da:	0028      	movs	r0, r5
    35dc:	47a0      	blx	r4
	uTXByte(Debug_COM, 'I');
    35de:	2149      	movs	r1, #73	; 0x49
    35e0:	0028      	movs	r0, r5
    35e2:	47a0      	blx	r4
	uTXByte(Debug_COM, 'R');
    35e4:	2152      	movs	r1, #82	; 0x52
    35e6:	0028      	movs	r0, r5
    35e8:	47a0      	blx	r4
	uTXByte(Debug_COM, 'Q');
    35ea:	2151      	movs	r1, #81	; 0x51
    35ec:	0028      	movs	r0, r5
    35ee:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);
    35f0:	210d      	movs	r1, #13
    35f2:	0028      	movs	r0, r5
    35f4:	47a0      	blx	r4
    35f6:	e7d7      	b.n	35a8 <Print_Wait_TX_Finish_Msg+0xc>
    35f8:	2000022c 	.word	0x2000022c
    35fc:	00003ac9 	.word	0x00003ac9

00003600 <tc_callback_to_to_period_51200us>:



void tc_callback_to_to_period_51200us(struct tc_module *const module_inst)
{
	if(LORA01->Lora_Dev_Count_IRQ_Flag == 0)
    3600:	4b0a      	ldr	r3, [pc, #40]	; (362c <tc_callback_to_to_period_51200us+0x2c>)
    3602:	681b      	ldr	r3, [r3, #0]
    3604:	4a0a      	ldr	r2, [pc, #40]	; (3630 <tc_callback_to_to_period_51200us+0x30>)
    3606:	5c9a      	ldrb	r2, [r3, r2]
    3608:	2a00      	cmp	r2, #0
    360a:	d109      	bne.n	3620 <tc_callback_to_to_period_51200us+0x20>
	{
		if(LORA01->t2_tmp_count > 19)
    360c:	228d      	movs	r2, #141	; 0x8d
    360e:	0092      	lsls	r2, r2, #2
    3610:	589a      	ldr	r2, [r3, r2]
    3612:	2a13      	cmp	r2, #19
    3614:	d805      	bhi.n	3622 <tc_callback_to_to_period_51200us+0x22>
		{
			LORA01->Lora_Dev_Count_IRQ_Flag = 1;
		}
		else
		{
			LORA01->t2_tmp_count++;
    3616:	218d      	movs	r1, #141	; 0x8d
    3618:	0089      	lsls	r1, r1, #2
    361a:	585a      	ldr	r2, [r3, r1]
    361c:	3201      	adds	r2, #1
    361e:	505a      	str	r2, [r3, r1]
		}	
	}
}
    3620:	4770      	bx	lr
			LORA01->Lora_Dev_Count_IRQ_Flag = 1;
    3622:	2101      	movs	r1, #1
    3624:	4a02      	ldr	r2, [pc, #8]	; (3630 <tc_callback_to_to_period_51200us+0x30>)
    3626:	5499      	strb	r1, [r3, r2]
    3628:	e7fa      	b.n	3620 <tc_callback_to_to_period_51200us+0x20>
    362a:	46c0      	nop			; (mov r8, r8)
    362c:	20001048 	.word	0x20001048
    3630:	0000021b 	.word	0x0000021b

00003634 <tc_callback_to_to_period_200us>:


void tc_callback_to_to_period_200us(struct tc_module *const module_inst)
{
	if(	LORA01->NowStatus == Lora_CMD_Delay_Index		||
    3634:	4b1f      	ldr	r3, [pc, #124]	; (36b4 <tc_callback_to_to_period_200us+0x80>)
    3636:	681b      	ldr	r3, [r3, #0]
    3638:	4a1f      	ldr	r2, [pc, #124]	; (36b8 <tc_callback_to_to_period_200us+0x84>)
    363a:	5c9a      	ldrb	r2, [r3, r2]
    363c:	2a6b      	cmp	r2, #107	; 0x6b
    363e:	d014      	beq.n	366a <tc_callback_to_to_period_200us+0x36>
		LORA01->NowStatus == WaitRxData					|| 
    3640:	4a1d      	ldr	r2, [pc, #116]	; (36b8 <tc_callback_to_to_period_200us+0x84>)
    3642:	5c9a      	ldrb	r2, [r3, r2]
	if(	LORA01->NowStatus == Lora_CMD_Delay_Index		||
    3644:	2a67      	cmp	r2, #103	; 0x67
    3646:	d010      	beq.n	366a <tc_callback_to_to_period_200us+0x36>
		LORA01->NowStatus == Leave_LoRa_Tx_Mode_Index	||
    3648:	4a1b      	ldr	r2, [pc, #108]	; (36b8 <tc_callback_to_to_period_200us+0x84>)
    364a:	5c9a      	ldrb	r2, [r3, r2]
		LORA01->NowStatus == WaitRxData					|| 
    364c:	2a65      	cmp	r2, #101	; 0x65
    364e:	d00c      	beq.n	366a <tc_callback_to_to_period_200us+0x36>
		LORA01->LoRa_Rx_Flag == LoraRxDataReady			||
    3650:	2286      	movs	r2, #134	; 0x86
    3652:	0092      	lsls	r2, r2, #2
    3654:	5c9a      	ldrb	r2, [r3, r2]
		LORA01->NowStatus == Leave_LoRa_Tx_Mode_Index	||
    3656:	2a00      	cmp	r2, #0
    3658:	d107      	bne.n	366a <tc_callback_to_to_period_200us+0x36>
		LORA01->NowStatus == Read_LoRa_RxCount_Index	||
    365a:	4a17      	ldr	r2, [pc, #92]	; (36b8 <tc_callback_to_to_period_200us+0x84>)
    365c:	5c9a      	ldrb	r2, [r3, r2]
		LORA01->LoRa_Rx_Flag == LoraRxDataReady			||
    365e:	2a07      	cmp	r2, #7
    3660:	d003      	beq.n	366a <tc_callback_to_to_period_200us+0x36>
		LORA01->NowStatus == Delay_Some_Time_Index		)
    3662:	4a15      	ldr	r2, [pc, #84]	; (36b8 <tc_callback_to_to_period_200us+0x84>)
    3664:	5c9a      	ldrb	r2, [r3, r2]
		LORA01->NowStatus == Read_LoRa_RxCount_Index	||
    3666:	2a70      	cmp	r2, #112	; 0x70
    3668:	d10a      	bne.n	3680 <tc_callback_to_to_period_200us+0x4c>
	{
		if(LORA01->f_count < 12000)
    366a:	228c      	movs	r2, #140	; 0x8c
    366c:	0092      	lsls	r2, r2, #2
    366e:	5899      	ldr	r1, [r3, r2]
    3670:	4a12      	ldr	r2, [pc, #72]	; (36bc <tc_callback_to_to_period_200us+0x88>)
    3672:	4291      	cmp	r1, r2
    3674:	d804      	bhi.n	3680 <tc_callback_to_to_period_200us+0x4c>
		{
			LORA01->f_count++;
    3676:	218c      	movs	r1, #140	; 0x8c
    3678:	0089      	lsls	r1, r1, #2
    367a:	585a      	ldr	r2, [r3, r1]
    367c:	3201      	adds	r2, #1
    367e:	505a      	str	r2, [r3, r1]
		}	
	}
	
	if(LORA02->NowStatus == Lora_CMD_Delay_Index || LORA02->NowStatus == WaitRxData || LORA02->NowStatus == Leave_LoRa_Tx_Mode_Index)
    3680:	4b0f      	ldr	r3, [pc, #60]	; (36c0 <tc_callback_to_to_period_200us+0x8c>)
    3682:	681b      	ldr	r3, [r3, #0]
    3684:	4a0c      	ldr	r2, [pc, #48]	; (36b8 <tc_callback_to_to_period_200us+0x84>)
    3686:	5c9a      	ldrb	r2, [r3, r2]
    3688:	2a6b      	cmp	r2, #107	; 0x6b
    368a:	d007      	beq.n	369c <tc_callback_to_to_period_200us+0x68>
    368c:	4a0a      	ldr	r2, [pc, #40]	; (36b8 <tc_callback_to_to_period_200us+0x84>)
    368e:	5c9a      	ldrb	r2, [r3, r2]
    3690:	2a67      	cmp	r2, #103	; 0x67
    3692:	d003      	beq.n	369c <tc_callback_to_to_period_200us+0x68>
    3694:	4a08      	ldr	r2, [pc, #32]	; (36b8 <tc_callback_to_to_period_200us+0x84>)
    3696:	5c9a      	ldrb	r2, [r3, r2]
    3698:	2a65      	cmp	r2, #101	; 0x65
    369a:	d10a      	bne.n	36b2 <tc_callback_to_to_period_200us+0x7e>
	{
		if(LORA02->f_count < 12000)
    369c:	228c      	movs	r2, #140	; 0x8c
    369e:	0092      	lsls	r2, r2, #2
    36a0:	5899      	ldr	r1, [r3, r2]
    36a2:	4a06      	ldr	r2, [pc, #24]	; (36bc <tc_callback_to_to_period_200us+0x88>)
    36a4:	4291      	cmp	r1, r2
    36a6:	d804      	bhi.n	36b2 <tc_callback_to_to_period_200us+0x7e>
		{
			LORA02->f_count++;
    36a8:	218c      	movs	r1, #140	; 0x8c
    36aa:	0089      	lsls	r1, r1, #2
    36ac:	585a      	ldr	r2, [r3, r1]
    36ae:	3201      	adds	r2, #1
    36b0:	505a      	str	r2, [r3, r1]
		}
	}
}
    36b2:	4770      	bx	lr
    36b4:	20001048 	.word	0x20001048
    36b8:	00000211 	.word	0x00000211
    36bc:	00002edf 	.word	0x00002edf
    36c0:	200004b4 	.word	0x200004b4

000036c4 <configure_tc>:

//! [setup]
void configure_tc(void)
{
    36c4:	b510      	push	{r4, lr}
    36c6:	b08e      	sub	sp, #56	; 0x38
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    36c8:	aa01      	add	r2, sp, #4
    36ca:	2300      	movs	r3, #0
    36cc:	2100      	movs	r1, #0
    36ce:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    36d0:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    36d2:	2000      	movs	r0, #0
    36d4:	7050      	strb	r0, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    36d6:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    36d8:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    36da:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    36dc:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    36de:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    36e0:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    36e2:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    36e4:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    36e6:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    36e8:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    36ea:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    36ec:	8513      	strh	r3, [r2, #40]	; 0x28
	//! [setup_config_defaults]
	tc_get_config_defaults(&config_tc);
	//! [setup_config_defaults]

	//! [setup_change_config]
	config_tc.clock_source    = GCLK_GENERATOR_1;
    36ee:	3301      	adds	r3, #1
    36f0:	7013      	strb	r3, [r2, #0]
	config_tc.counter_size    = TC_COUNTER_SIZE_16BIT;
	config_tc.clock_prescaler  =TC_CLOCK_PRESCALER_DIV4;
    36f2:	2380      	movs	r3, #128	; 0x80
    36f4:	009b      	lsls	r3, r3, #2
    36f6:	8093      	strh	r3, [r2, #4]
	config_tc.wave_generation = TC_WAVE_GENERATION_MATCH_FREQ;
    36f8:	3be1      	subs	r3, #225	; 0xe1
    36fa:	3bff      	subs	r3, #255	; 0xff
    36fc:	7193      	strb	r3, [r2, #6]
	config_tc.counter_16_bit.compare_capture_channel[0] = 50;
    36fe:	3312      	adds	r3, #18
    3700:	8553      	strh	r3, [r2, #42]	; 0x2a
	config_tc.counter_16_bit.compare_capture_channel[1] = 50;
    3702:	8593      	strh	r3, [r2, #44]	; 0x2c
	
	tc_init(&MyTimer02, TC2, &config_tc);
    3704:	4c13      	ldr	r4, [pc, #76]	; (3754 <configure_tc+0x90>)
    3706:	4914      	ldr	r1, [pc, #80]	; (3758 <configure_tc+0x94>)
    3708:	0020      	movs	r0, r4
    370a:	4b14      	ldr	r3, [pc, #80]	; (375c <configure_tc+0x98>)
    370c:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    370e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    3710:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    3712:	b25b      	sxtb	r3, r3
    3714:	2b00      	cmp	r3, #0
    3716:	dbfb      	blt.n	3710 <configure_tc+0x4c>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    3718:	8813      	ldrh	r3, [r2, #0]
    371a:	2102      	movs	r1, #2
    371c:	430b      	orrs	r3, r1
    371e:	8013      	strh	r3, [r2, #0]
	tc_enable(&MyTimer02);

	config_tc.clock_prescaler  =TC_CLOCK_PRESCALER_DIV1024;
    3720:	aa01      	add	r2, sp, #4
    3722:	23e0      	movs	r3, #224	; 0xe0
    3724:	00db      	lsls	r3, r3, #3
    3726:	8093      	strh	r3, [r2, #4]
	config_tc.wave_generation = TC_WAVE_GENERATION_MATCH_FREQ;
    3728:	2320      	movs	r3, #32
    372a:	7193      	strb	r3, [r2, #6]
	config_tc.counter_16_bit.compare_capture_channel[0] = 50;
    372c:	3312      	adds	r3, #18
    372e:	8553      	strh	r3, [r2, #42]	; 0x2a
	config_tc.counter_16_bit.compare_capture_channel[1] = 50;
    3730:	8593      	strh	r3, [r2, #44]	; 0x2c
	tc_init(&MyTimer01, TC1, &config_tc);
    3732:	4c0b      	ldr	r4, [pc, #44]	; (3760 <configure_tc+0x9c>)
    3734:	490b      	ldr	r1, [pc, #44]	; (3764 <configure_tc+0xa0>)
    3736:	0020      	movs	r0, r4
    3738:	4b08      	ldr	r3, [pc, #32]	; (375c <configure_tc+0x98>)
    373a:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    373c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    373e:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    3740:	b25b      	sxtb	r3, r3
    3742:	2b00      	cmp	r3, #0
    3744:	dbfb      	blt.n	373e <configure_tc+0x7a>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    3746:	8813      	ldrh	r3, [r2, #0]
    3748:	2102      	movs	r1, #2
    374a:	430b      	orrs	r3, r1
    374c:	8013      	strh	r3, [r2, #0]
	tc_enable(&MyTimer01);
	
	//! [setup_enable]
	
}
    374e:	b00e      	add	sp, #56	; 0x38
    3750:	bd10      	pop	{r4, pc}
    3752:	46c0      	nop			; (mov r8, r8)
    3754:	20000450 	.word	0x20000450
    3758:	42002800 	.word	0x42002800
    375c:	00001fad 	.word	0x00001fad
    3760:	200007f4 	.word	0x200007f4
    3764:	42002400 	.word	0x42002400

00003768 <configure_tc_callbacks>:
//! [setup]
void configure_tc_callbacks(void)
{
    3768:	b5f0      	push	{r4, r5, r6, r7, lr}
    376a:	46d6      	mov	lr, sl
    376c:	464f      	mov	r7, r9
    376e:	4646      	mov	r6, r8
    3770:	b5c0      	push	{r6, r7, lr}
	tc_register_callback(&MyTimer02, tc_callback_to_to_period_200us, TC_CALLBACK_CC_CHANNEL1);
    3772:	4c1a      	ldr	r4, [pc, #104]	; (37dc <configure_tc_callbacks+0x74>)
    3774:	2203      	movs	r2, #3
    3776:	491a      	ldr	r1, [pc, #104]	; (37e0 <configure_tc_callbacks+0x78>)
    3778:	0020      	movs	r0, r4
    377a:	4b1a      	ldr	r3, [pc, #104]	; (37e4 <configure_tc_callbacks+0x7c>)
    377c:	469a      	mov	sl, r3
    377e:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    3780:	6820      	ldr	r0, [r4, #0]
    3782:	4b19      	ldr	r3, [pc, #100]	; (37e8 <configure_tc_callbacks+0x80>)
    3784:	4699      	mov	r9, r3
    3786:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    3788:	4b18      	ldr	r3, [pc, #96]	; (37ec <configure_tc_callbacks+0x84>)
    378a:	4698      	mov	r8, r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    378c:	5c1b      	ldrb	r3, [r3, r0]
    378e:	261f      	movs	r6, #31
    3790:	4033      	ands	r3, r6
    3792:	2501      	movs	r5, #1
    3794:	002a      	movs	r2, r5
    3796:	409a      	lsls	r2, r3
    3798:	4f15      	ldr	r7, [pc, #84]	; (37f0 <configure_tc_callbacks+0x88>)
    379a:	603a      	str	r2, [r7, #0]
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
    379c:	7e63      	ldrb	r3, [r4, #25]
    379e:	2220      	movs	r2, #32
    37a0:	4313      	orrs	r3, r2
    37a2:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
    37a4:	6823      	ldr	r3, [r4, #0]
    37a6:	2220      	movs	r2, #32
    37a8:	735a      	strb	r2, [r3, #13]
	tc_enable_callback(&MyTimer02, TC_CALLBACK_CC_CHANNEL1);
	
	tc_register_callback(&MyTimer01, tc_callback_to_to_period_51200us, TC_CALLBACK_CC_CHANNEL0);
    37aa:	4c12      	ldr	r4, [pc, #72]	; (37f4 <configure_tc_callbacks+0x8c>)
    37ac:	3a1e      	subs	r2, #30
    37ae:	4912      	ldr	r1, [pc, #72]	; (37f8 <configure_tc_callbacks+0x90>)
    37b0:	0020      	movs	r0, r4
    37b2:	47d0      	blx	sl
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    37b4:	6820      	ldr	r0, [r4, #0]
    37b6:	47c8      	blx	r9
    37b8:	4643      	mov	r3, r8
    37ba:	5c1b      	ldrb	r3, [r3, r0]
    37bc:	401e      	ands	r6, r3
    37be:	40b5      	lsls	r5, r6
    37c0:	603d      	str	r5, [r7, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    37c2:	7e63      	ldrb	r3, [r4, #25]
    37c4:	2210      	movs	r2, #16
    37c6:	4313      	orrs	r3, r2
    37c8:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    37ca:	6823      	ldr	r3, [r4, #0]
    37cc:	2210      	movs	r2, #16
    37ce:	735a      	strb	r2, [r3, #13]
	tc_enable_callback(&MyTimer01, TC_CALLBACK_CC_CHANNEL0);
}
    37d0:	bc1c      	pop	{r2, r3, r4}
    37d2:	4690      	mov	r8, r2
    37d4:	4699      	mov	r9, r3
    37d6:	46a2      	mov	sl, r4
    37d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    37da:	46c0      	nop			; (mov r8, r8)
    37dc:	20000450 	.word	0x20000450
    37e0:	00003635 	.word	0x00003635
    37e4:	00001e59 	.word	0x00001e59
    37e8:	00001f71 	.word	0x00001f71
    37ec:	000058bc 	.word	0x000058bc
    37f0:	e000e100 	.word	0xe000e100
    37f4:	200007f4 	.word	0x200007f4
    37f8:	00003601 	.word	0x00003601

000037fc <timer_configure>:

void timer_configure(void)
{
    37fc:	b510      	push	{r4, lr}
	configure_tc();
    37fe:	4b02      	ldr	r3, [pc, #8]	; (3808 <timer_configure+0xc>)
    3800:	4798      	blx	r3
	configure_tc_callbacks();
    3802:	4b02      	ldr	r3, [pc, #8]	; (380c <timer_configure+0x10>)
    3804:	4798      	blx	r3
    3806:	bd10      	pop	{r4, pc}
    3808:	000036c5 	.word	0x000036c5
    380c:	00003769 	.word	0x00003769

00003810 <Uart_Form_LORA01_callback>:
//! [rx_buffer_var]

//! [callback_funcs]
void Uart_Form_LORA01_callback(struct usart_module *const usart_module)
{
	if(LORA01->MyBufferCount <= LORA01->UserRxCountMax)
    3810:	4b08      	ldr	r3, [pc, #32]	; (3834 <Uart_Form_LORA01_callback+0x24>)
    3812:	681b      	ldr	r3, [r3, #0]
    3814:	7c9a      	ldrb	r2, [r3, #18]
    3816:	7c59      	ldrb	r1, [r3, #17]
    3818:	b2d2      	uxtb	r2, r2
    381a:	428a      	cmp	r2, r1
    381c:	d808      	bhi.n	3830 <Uart_Form_LORA01_callback+0x20>
	{
		LORA01->MyBuffer[LORA01->MyBufferCount] = LORA01->rx_buffer[0];
    381e:	7c9a      	ldrb	r2, [r3, #18]
    3820:	7c19      	ldrb	r1, [r3, #16]
    3822:	b2c9      	uxtb	r1, r1
    3824:	189a      	adds	r2, r3, r2
    3826:	74d1      	strb	r1, [r2, #19]
		LORA01->MyBufferCount++;	
    3828:	7c9a      	ldrb	r2, [r3, #18]
    382a:	3201      	adds	r2, #1
    382c:	b2d2      	uxtb	r2, r2
    382e:	749a      	strb	r2, [r3, #18]
	}
}
    3830:	4770      	bx	lr
    3832:	46c0      	nop			; (mov r8, r8)
    3834:	20001048 	.word	0x20001048

00003838 <Uart_Form_LORA02_callback>:

void Uart_Form_LORA02_callback(struct usart_module *const usart_module)
{
	if(LORA02->MyBufferCount <= LORA02->UserRxCountMax)
    3838:	4b08      	ldr	r3, [pc, #32]	; (385c <Uart_Form_LORA02_callback+0x24>)
    383a:	681b      	ldr	r3, [r3, #0]
    383c:	7c9a      	ldrb	r2, [r3, #18]
    383e:	7c59      	ldrb	r1, [r3, #17]
    3840:	b2d2      	uxtb	r2, r2
    3842:	428a      	cmp	r2, r1
    3844:	d808      	bhi.n	3858 <Uart_Form_LORA02_callback+0x20>
	{
		LORA02->MyBuffer[LORA02->MyBufferCount] = LORA02->rx_buffer[0];
    3846:	7c9a      	ldrb	r2, [r3, #18]
    3848:	7c19      	ldrb	r1, [r3, #16]
    384a:	b2c9      	uxtb	r1, r1
    384c:	189a      	adds	r2, r3, r2
    384e:	74d1      	strb	r1, [r2, #19]
		LORA02->MyBufferCount++;
    3850:	7c9a      	ldrb	r2, [r3, #18]
    3852:	3201      	adds	r2, #1
    3854:	b2d2      	uxtb	r2, r2
    3856:	749a      	strb	r2, [r3, #18]
	}
}
    3858:	4770      	bx	lr
    385a:	46c0      	nop			; (mov r8, r8)
    385c:	200004b4 	.word	0x200004b4

00003860 <usart_read_callback>:



void usart_read_callback(struct usart_module *const usart_module)
{
	if(UserKeyInStauts == NOP)
    3860:	4b17      	ldr	r3, [pc, #92]	; (38c0 <usart_read_callback+0x60>)
    3862:	781b      	ldrb	r3, [r3, #0]
    3864:	2b00      	cmp	r3, #0
    3866:	d110      	bne.n	388a <usart_read_callback+0x2a>
	{
		//uTXByte(Debug_COM, user_rx_buffer[0]);
		UserKeyInBuf[UserKeyInBufCount] = user_rx_buffer[0];
    3868:	4b16      	ldr	r3, [pc, #88]	; (38c4 <usart_read_callback+0x64>)
    386a:	781b      	ldrb	r3, [r3, #0]
    386c:	4a16      	ldr	r2, [pc, #88]	; (38c8 <usart_read_callback+0x68>)
    386e:	7812      	ldrb	r2, [r2, #0]
    3870:	4916      	ldr	r1, [pc, #88]	; (38cc <usart_read_callback+0x6c>)
    3872:	54ca      	strb	r2, [r1, r3]
		if(UserKeyInBufCount < UserKeyInBufMax)
    3874:	2b1d      	cmp	r3, #29
    3876:	d802      	bhi.n	387e <usart_read_callback+0x1e>
		{
			UserKeyInBufCount++;
    3878:	3301      	adds	r3, #1
    387a:	4912      	ldr	r1, [pc, #72]	; (38c4 <usart_read_callback+0x64>)
    387c:	700b      	strb	r3, [r1, #0]
		}
		
		if(user_rx_buffer[0] == 0x0d)
    387e:	2a0d      	cmp	r2, #13
    3880:	d004      	beq.n	388c <usart_read_callback+0x2c>
			{
				UserKeyInBufCount = 0;
			}
		}
		else
		if(user_rx_buffer[0] == 0x08)
    3882:	2a08      	cmp	r2, #8
    3884:	d00e      	beq.n	38a4 <usart_read_callback+0x44>
				UserKeyInBufCount--;
				UserKeyInBufCount--;
			}
		}
		else
		if(user_rx_buffer[0] == 0x0A)
    3886:	2a0a      	cmp	r2, #10
    3888:	d014      	beq.n	38b4 <usart_read_callback+0x54>
		{
			UserKeyInBufCount--;
		}
	}
}
    388a:	4770      	bx	lr
			if(UserKeyInBufCount > 1)
    388c:	4b0d      	ldr	r3, [pc, #52]	; (38c4 <usart_read_callback+0x64>)
    388e:	781b      	ldrb	r3, [r3, #0]
    3890:	2b01      	cmp	r3, #1
    3892:	d903      	bls.n	389c <usart_read_callback+0x3c>
				UserKeyInStauts = UserKeyInEnterIndex;	
    3894:	3a0c      	subs	r2, #12
    3896:	4b0a      	ldr	r3, [pc, #40]	; (38c0 <usart_read_callback+0x60>)
    3898:	701a      	strb	r2, [r3, #0]
    389a:	e7f6      	b.n	388a <usart_read_callback+0x2a>
				UserKeyInBufCount = 0;
    389c:	2200      	movs	r2, #0
    389e:	4b09      	ldr	r3, [pc, #36]	; (38c4 <usart_read_callback+0x64>)
    38a0:	701a      	strb	r2, [r3, #0]
    38a2:	e7f2      	b.n	388a <usart_read_callback+0x2a>
			if(UserKeyInBufCount > 2)
    38a4:	4b07      	ldr	r3, [pc, #28]	; (38c4 <usart_read_callback+0x64>)
    38a6:	781b      	ldrb	r3, [r3, #0]
    38a8:	2b02      	cmp	r3, #2
    38aa:	d9ee      	bls.n	388a <usart_read_callback+0x2a>
				UserKeyInBufCount--;
    38ac:	3b02      	subs	r3, #2
    38ae:	4a05      	ldr	r2, [pc, #20]	; (38c4 <usart_read_callback+0x64>)
    38b0:	7013      	strb	r3, [r2, #0]
    38b2:	e7ea      	b.n	388a <usart_read_callback+0x2a>
			UserKeyInBufCount--;
    38b4:	4a03      	ldr	r2, [pc, #12]	; (38c4 <usart_read_callback+0x64>)
    38b6:	7813      	ldrb	r3, [r2, #0]
    38b8:	3b01      	subs	r3, #1
    38ba:	7013      	strb	r3, [r2, #0]
}
    38bc:	e7e5      	b.n	388a <usart_read_callback+0x2a>
    38be:	46c0      	nop			; (mov r8, r8)
    38c0:	200004b8 	.word	0x200004b8
    38c4:	200004b1 	.word	0x200004b1
    38c8:	20000228 	.word	0x20000228
    38cc:	20000490 	.word	0x20000490

000038d0 <configure_usart>:
}
//! [callback_funcs]

//! [setup]
void configure_usart(void)
{
    38d0:	b530      	push	{r4, r5, lr}
    38d2:	b08d      	sub	sp, #52	; 0x34
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    38d4:	2380      	movs	r3, #128	; 0x80
    38d6:	05db      	lsls	r3, r3, #23
    38d8:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    38da:	2300      	movs	r3, #0
    38dc:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    38de:	22ff      	movs	r2, #255	; 0xff
    38e0:	4669      	mov	r1, sp
    38e2:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    38e4:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    38e6:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    38e8:	2201      	movs	r2, #1
    38ea:	750a      	strb	r2, [r1, #20]
	config->transmitter_enable = true;
    38ec:	754a      	strb	r2, [r1, #21]
	config->clock_polarity_inverted = false;
    38ee:	758b      	strb	r3, [r1, #22]
	config->use_external_clock = false;
    38f0:	75cb      	strb	r3, [r1, #23]
	config->ext_clock_freq   = 0;
    38f2:	9306      	str	r3, [sp, #24]
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    38f4:	770b      	strb	r3, [r1, #28]
	config->generator_source = GCLK_GENERATOR_0;
    38f6:	774b      	strb	r3, [r1, #29]
	//! [setup_config_defaults]
	usart_get_config_defaults(&config_usart);
	//! [setup_config_defaults]

	//! [setup_change_config]
	config_usart.baudrate    = 115200;
    38f8:	23e1      	movs	r3, #225	; 0xe1
    38fa:	025b      	lsls	r3, r3, #9
    38fc:	9304      	str	r3, [sp, #16]
	config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;
    38fe:	23c4      	movs	r3, #196	; 0xc4
    3900:	039b      	lsls	r3, r3, #14
    3902:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_UNUSED;
    3904:	2301      	movs	r3, #1
    3906:	425b      	negs	r3, r3
    3908:	9308      	str	r3, [sp, #32]
	config_usart.pinmux_pad1 = PINMUX_UNUSED;
    390a:	9309      	str	r3, [sp, #36]	; 0x24
	config_usart.pinmux_pad2 = PINMUX_PA24C_SERCOM3_PAD2;
    390c:	4b45      	ldr	r3, [pc, #276]	; (3a24 <configure_usart+0x154>)
    390e:	930a      	str	r3, [sp, #40]	; 0x28
	config_usart.pinmux_pad3 = PINMUX_PA25C_SERCOM3_PAD3;
    3910:	4b45      	ldr	r3, [pc, #276]	; (3a28 <configure_usart+0x158>)
    3912:	930b      	str	r3, [sp, #44]	; 0x2c
	//! [setup_change_config]

	//! [setup_set_config]
	while (usart_init(&MyUart01,
    3914:	4d45      	ldr	r5, [pc, #276]	; (3a2c <configure_usart+0x15c>)
    3916:	4c46      	ldr	r4, [pc, #280]	; (3a30 <configure_usart+0x160>)
    3918:	466a      	mov	r2, sp
    391a:	4946      	ldr	r1, [pc, #280]	; (3a34 <configure_usart+0x164>)
    391c:	0028      	movs	r0, r5
    391e:	47a0      	blx	r4
    3920:	2800      	cmp	r0, #0
    3922:	d1f9      	bne.n	3918 <configure_usart+0x48>
	//! [setup_enable]
	//usart_enable(&MyUart01);
	//! [setup_enable]

	//! [setup_change_config]
	config_usart.baudrate    = 115200;
    3924:	23e1      	movs	r3, #225	; 0xe1
    3926:	025b      	lsls	r3, r3, #9
    3928:	9304      	str	r3, [sp, #16]
	config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;
    392a:	23c4      	movs	r3, #196	; 0xc4
    392c:	039b      	lsls	r3, r3, #14
    392e:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_UNUSED;
    3930:	2301      	movs	r3, #1
    3932:	425b      	negs	r3, r3
    3934:	9308      	str	r3, [sp, #32]
	config_usart.pinmux_pad1 = PINMUX_UNUSED;
    3936:	9309      	str	r3, [sp, #36]	; 0x24
	config_usart.pinmux_pad2 = PINMUX_PA18C_SERCOM1_PAD2;
    3938:	4b3f      	ldr	r3, [pc, #252]	; (3a38 <configure_usart+0x168>)
    393a:	930a      	str	r3, [sp, #40]	; 0x28
	config_usart.pinmux_pad3 = PINMUX_PA19C_SERCOM1_PAD3;
    393c:	4b3f      	ldr	r3, [pc, #252]	; (3a3c <configure_usart+0x16c>)
    393e:	930b      	str	r3, [sp, #44]	; 0x2c
	//! [setup_change_config]

	//! [setup_set_config]
	while (usart_init(&MyUart02,
    3940:	4d3f      	ldr	r5, [pc, #252]	; (3a40 <configure_usart+0x170>)
    3942:	4c3b      	ldr	r4, [pc, #236]	; (3a30 <configure_usart+0x160>)
    3944:	466a      	mov	r2, sp
    3946:	493f      	ldr	r1, [pc, #252]	; (3a44 <configure_usart+0x174>)
    3948:	0028      	movs	r0, r5
    394a:	47a0      	blx	r4
    394c:	2800      	cmp	r0, #0
    394e:	d1f9      	bne.n	3944 <configure_usart+0x74>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3950:	4d3b      	ldr	r5, [pc, #236]	; (3a40 <configure_usart+0x170>)
    3952:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3954:	0020      	movs	r0, r4
    3956:	4b3c      	ldr	r3, [pc, #240]	; (3a48 <configure_usart+0x178>)
    3958:	4798      	blx	r3
    395a:	231f      	movs	r3, #31
    395c:	4018      	ands	r0, r3
    395e:	3b1e      	subs	r3, #30
    3960:	4083      	lsls	r3, r0
    3962:	4a3a      	ldr	r2, [pc, #232]	; (3a4c <configure_usart+0x17c>)
    3964:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3966:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    3968:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
    396a:	b21b      	sxth	r3, r3
    396c:	2b00      	cmp	r3, #0
    396e:	dbfb      	blt.n	3968 <configure_usart+0x98>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3970:	6823      	ldr	r3, [r4, #0]
    3972:	2202      	movs	r2, #2
    3974:	4313      	orrs	r3, r2
    3976:	6023      	str	r3, [r4, #0]
	//! [setup_enable]
	usart_enable(&MyUart02);
	//! [setup_enable]
	
	//! [setup_change_config]
	config_usart.baudrate    = 115200;
    3978:	23e1      	movs	r3, #225	; 0xe1
    397a:	025b      	lsls	r3, r3, #9
    397c:	9304      	str	r3, [sp, #16]
	config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;
    397e:	23c4      	movs	r3, #196	; 0xc4
    3980:	039b      	lsls	r3, r3, #14
    3982:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_UNUSED;
    3984:	2301      	movs	r3, #1
    3986:	425b      	negs	r3, r3
    3988:	9308      	str	r3, [sp, #32]
	config_usart.pinmux_pad1 = PINMUX_UNUSED;
    398a:	9309      	str	r3, [sp, #36]	; 0x24
	config_usart.pinmux_pad2 = PINMUX_PA14C_SERCOM2_PAD2;
    398c:	4b30      	ldr	r3, [pc, #192]	; (3a50 <configure_usart+0x180>)
    398e:	930a      	str	r3, [sp, #40]	; 0x28
	config_usart.pinmux_pad3 = PINMUX_PA15C_SERCOM2_PAD3;
    3990:	4b30      	ldr	r3, [pc, #192]	; (3a54 <configure_usart+0x184>)
    3992:	930b      	str	r3, [sp, #44]	; 0x2c
	//! [setup_change_config]

	//! [setup_set_config]
	while (usart_init(&MyUart03,
    3994:	4d30      	ldr	r5, [pc, #192]	; (3a58 <configure_usart+0x188>)
    3996:	4c26      	ldr	r4, [pc, #152]	; (3a30 <configure_usart+0x160>)
    3998:	466a      	mov	r2, sp
    399a:	4930      	ldr	r1, [pc, #192]	; (3a5c <configure_usart+0x18c>)
    399c:	0028      	movs	r0, r5
    399e:	47a0      	blx	r4
    39a0:	2800      	cmp	r0, #0
    39a2:	d1f9      	bne.n	3998 <configure_usart+0xc8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    39a4:	4d2c      	ldr	r5, [pc, #176]	; (3a58 <configure_usart+0x188>)
    39a6:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    39a8:	0020      	movs	r0, r4
    39aa:	4b27      	ldr	r3, [pc, #156]	; (3a48 <configure_usart+0x178>)
    39ac:	4798      	blx	r3
    39ae:	231f      	movs	r3, #31
    39b0:	4018      	ands	r0, r3
    39b2:	3b1e      	subs	r3, #30
    39b4:	4083      	lsls	r3, r0
    39b6:	4a25      	ldr	r2, [pc, #148]	; (3a4c <configure_usart+0x17c>)
    39b8:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    39ba:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    39bc:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
    39be:	b21b      	sxth	r3, r3
    39c0:	2b00      	cmp	r3, #0
    39c2:	dbfb      	blt.n	39bc <configure_usart+0xec>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    39c4:	6823      	ldr	r3, [r4, #0]
    39c6:	2202      	movs	r2, #2
    39c8:	4313      	orrs	r3, r2
    39ca:	6023      	str	r3, [r4, #0]
	usart_enable(&MyUart03);
	//! [setup_enable]
	
	//! [setup_change_config]
	
	config_usart.baudrate    = 115200;
    39cc:	23e1      	movs	r3, #225	; 0xe1
    39ce:	025b      	lsls	r3, r3, #9
    39d0:	9304      	str	r3, [sp, #16]
	config_usart.mux_setting = USART_RX_1_TX_0_XCK_1 ;
    39d2:	2380      	movs	r3, #128	; 0x80
    39d4:	035b      	lsls	r3, r3, #13
    39d6:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
    39d8:	4b21      	ldr	r3, [pc, #132]	; (3a60 <configure_usart+0x190>)
    39da:	9308      	str	r3, [sp, #32]
	config_usart.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
    39dc:	4b21      	ldr	r3, [pc, #132]	; (3a64 <configure_usart+0x194>)
    39de:	9309      	str	r3, [sp, #36]	; 0x24
	config_usart.pinmux_pad2 = PINMUX_UNUSED;
    39e0:	2301      	movs	r3, #1
    39e2:	425b      	negs	r3, r3
    39e4:	930a      	str	r3, [sp, #40]	; 0x28
	config_usart.pinmux_pad3 = PINMUX_UNUSED;
    39e6:	930b      	str	r3, [sp, #44]	; 0x2c
	//! [setup_change_config]

	//! [setup_set_config]
	while (usart_init(&MyUart04,
    39e8:	4d1f      	ldr	r5, [pc, #124]	; (3a68 <configure_usart+0x198>)
    39ea:	4c11      	ldr	r4, [pc, #68]	; (3a30 <configure_usart+0x160>)
    39ec:	466a      	mov	r2, sp
    39ee:	491f      	ldr	r1, [pc, #124]	; (3a6c <configure_usart+0x19c>)
    39f0:	0028      	movs	r0, r5
    39f2:	47a0      	blx	r4
    39f4:	2800      	cmp	r0, #0
    39f6:	d1f9      	bne.n	39ec <configure_usart+0x11c>
	SercomUsart *const usart_hw = &(module->hw->USART);
    39f8:	4d1b      	ldr	r5, [pc, #108]	; (3a68 <configure_usart+0x198>)
    39fa:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    39fc:	0020      	movs	r0, r4
    39fe:	4b12      	ldr	r3, [pc, #72]	; (3a48 <configure_usart+0x178>)
    3a00:	4798      	blx	r3
    3a02:	231f      	movs	r3, #31
    3a04:	4018      	ands	r0, r3
    3a06:	3b1e      	subs	r3, #30
    3a08:	4083      	lsls	r3, r0
    3a0a:	4a10      	ldr	r2, [pc, #64]	; (3a4c <configure_usart+0x17c>)
    3a0c:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3a0e:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    3a10:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
    3a12:	b21b      	sxth	r3, r3
    3a14:	2b00      	cmp	r3, #0
    3a16:	dbfb      	blt.n	3a10 <configure_usart+0x140>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3a18:	6823      	ldr	r3, [r4, #0]
    3a1a:	2202      	movs	r2, #2
    3a1c:	4313      	orrs	r3, r2
    3a1e:	6023      	str	r3, [r4, #0]

	//! [setup_enable]
	usart_enable(&MyUart04);
	//! [setup_enable]
	
}
    3a20:	b00d      	add	sp, #52	; 0x34
    3a22:	bd30      	pop	{r4, r5, pc}
    3a24:	00180002 	.word	0x00180002
    3a28:	00190002 	.word	0x00190002
    3a2c:	2000046c 	.word	0x2000046c
    3a30:	00004431 	.word	0x00004431
    3a34:	42001400 	.word	0x42001400
    3a38:	00120002 	.word	0x00120002
    3a3c:	00130002 	.word	0x00130002
    3a40:	2000022c 	.word	0x2000022c
    3a44:	42000c00 	.word	0x42000c00
    3a48:	000043a1 	.word	0x000043a1
    3a4c:	e000e100 	.word	0xe000e100
    3a50:	000e0002 	.word	0x000e0002
    3a54:	000f0002 	.word	0x000f0002
    3a58:	2000104c 	.word	0x2000104c
    3a5c:	42001000 	.word	0x42001000
    3a60:	00080002 	.word	0x00080002
    3a64:	00090002 	.word	0x00090002
    3a68:	20003550 	.word	0x20003550
    3a6c:	42000800 	.word	0x42000800

00003a70 <configure_usart_callbacks>:

void configure_usart_callbacks(void)
{
    3a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
//			usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
//	usart_register_callback(&MyUart01,
//			usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
	
		
	usart_register_callback(&MyUart02,
    3a72:	4e0e      	ldr	r6, [pc, #56]	; (3aac <configure_usart_callbacks+0x3c>)
    3a74:	2201      	movs	r2, #1
    3a76:	490e      	ldr	r1, [pc, #56]	; (3ab0 <configure_usart_callbacks+0x40>)
    3a78:	0030      	movs	r0, r6
    3a7a:	4f0e      	ldr	r7, [pc, #56]	; (3ab4 <configure_usart_callbacks+0x44>)
    3a7c:	47b8      	blx	r7
			usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
	usart_register_callback(&MyUart03,
    3a7e:	4d0e      	ldr	r5, [pc, #56]	; (3ab8 <configure_usart_callbacks+0x48>)
    3a80:	2201      	movs	r2, #1
    3a82:	490e      	ldr	r1, [pc, #56]	; (3abc <configure_usart_callbacks+0x4c>)
    3a84:	0028      	movs	r0, r5
    3a86:	47b8      	blx	r7
			Uart_Form_LORA01_callback, USART_CALLBACK_BUFFER_RECEIVED);
	usart_register_callback(&MyUart04,
    3a88:	4c0d      	ldr	r4, [pc, #52]	; (3ac0 <configure_usart_callbacks+0x50>)
    3a8a:	2201      	movs	r2, #1
    3a8c:	490d      	ldr	r1, [pc, #52]	; (3ac4 <configure_usart_callbacks+0x54>)
    3a8e:	0020      	movs	r0, r4
    3a90:	47b8      	blx	r7
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    3a92:	2321      	movs	r3, #33	; 0x21
    3a94:	2102      	movs	r1, #2
    3a96:	5cf2      	ldrb	r2, [r6, r3]
    3a98:	430a      	orrs	r2, r1
    3a9a:	54f2      	strb	r2, [r6, r3]
    3a9c:	5cea      	ldrb	r2, [r5, r3]
    3a9e:	430a      	orrs	r2, r1
    3aa0:	54ea      	strb	r2, [r5, r3]
    3aa2:	5ce2      	ldrb	r2, [r4, r3]
    3aa4:	430a      	orrs	r2, r1
    3aa6:	54e2      	strb	r2, [r4, r3]
//	usart_enable_callback(&MyUart03, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable_callback(&MyUart02, USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&MyUart03, USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&MyUart04, USART_CALLBACK_BUFFER_RECEIVED);
	//! [setup_enable_callbacks]
}
    3aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3aaa:	46c0      	nop			; (mov r8, r8)
    3aac:	2000022c 	.word	0x2000022c
    3ab0:	00003861 	.word	0x00003861
    3ab4:	000046f1 	.word	0x000046f1
    3ab8:	2000104c 	.word	0x2000104c
    3abc:	00003811 	.word	0x00003811
    3ac0:	20003550 	.word	0x20003550
    3ac4:	00003839 	.word	0x00003839

00003ac8 <uTXByte>:
	uTXByte(usart_module, hex_to_ascii(tmp8.HL.L));
}


void uTXByte(struct usart_module *const usart_module, uint8_t tmp_data)
{
    3ac8:	b510      	push	{r4, lr}
	usart_write_wait(usart_module, tmp_data);
    3aca:	b289      	uxth	r1, r1
    3acc:	4b01      	ldr	r3, [pc, #4]	; (3ad4 <uTXByte+0xc>)
    3ace:	4798      	blx	r3
}
    3ad0:	bd10      	pop	{r4, pc}
    3ad2:	46c0      	nop			; (mov r8, r8)
    3ad4:	00004685 	.word	0x00004685

00003ad8 <hex_to_ascii>:

unsigned char hex_to_ascii(unsigned char tmp)
{
	if(tmp > 9)
    3ad8:	2809      	cmp	r0, #9
    3ada:	d802      	bhi.n	3ae2 <hex_to_ascii+0xa>
	{
		return (tmp + 0x37);
	}
	else
	{
		return (tmp + 0x30);
    3adc:	3030      	adds	r0, #48	; 0x30
    3ade:	b2c0      	uxtb	r0, r0
	}
}
    3ae0:	4770      	bx	lr
		return (tmp + 0x37);
    3ae2:	3037      	adds	r0, #55	; 0x37
    3ae4:	b2c0      	uxtb	r0, r0
    3ae6:	e7fb      	b.n	3ae0 <hex_to_ascii+0x8>

00003ae8 <uart_send_ascii_byte>:
{
    3ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3aea:	0005      	movs	r5, r0
    3aec:	000c      	movs	r4, r1
	uTXByte(usart_module, hex_to_ascii(tmp8.HL.H));
    3aee:	0908      	lsrs	r0, r1, #4
    3af0:	4f06      	ldr	r7, [pc, #24]	; (3b0c <uart_send_ascii_byte+0x24>)
    3af2:	47b8      	blx	r7
	usart_write_wait(usart_module, tmp_data);
    3af4:	b281      	uxth	r1, r0
    3af6:	0028      	movs	r0, r5
    3af8:	4e05      	ldr	r6, [pc, #20]	; (3b10 <uart_send_ascii_byte+0x28>)
    3afa:	47b0      	blx	r6
	uTXByte(usart_module, hex_to_ascii(tmp8.HL.L));
    3afc:	0720      	lsls	r0, r4, #28
    3afe:	0f00      	lsrs	r0, r0, #28
    3b00:	47b8      	blx	r7
	usart_write_wait(usart_module, tmp_data);
    3b02:	b281      	uxth	r1, r0
    3b04:	0028      	movs	r0, r5
    3b06:	47b0      	blx	r6
}
    3b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3b0a:	46c0      	nop			; (mov r8, r8)
    3b0c:	00003ad9 	.word	0x00003ad9
    3b10:	00004685 	.word	0x00004685

00003b14 <uart_send_word>:
{
    3b14:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b16:	b083      	sub	sp, #12
    3b18:	9001      	str	r0, [sp, #4]
    3b1a:	000c      	movs	r4, r1
	tmp8.byte = tmp16.byte[1];
    3b1c:	0408      	lsls	r0, r1, #16
	uTXByte(usart_module, hex_to_ascii(tmp8.HL.H));
    3b1e:	0e06      	lsrs	r6, r0, #24
    3b20:	0f00      	lsrs	r0, r0, #28
    3b22:	4d0d      	ldr	r5, [pc, #52]	; (3b58 <uart_send_word+0x44>)
    3b24:	47a8      	blx	r5
	usart_write_wait(usart_module, tmp_data);
    3b26:	b281      	uxth	r1, r0
    3b28:	9801      	ldr	r0, [sp, #4]
    3b2a:	4f0c      	ldr	r7, [pc, #48]	; (3b5c <uart_send_word+0x48>)
    3b2c:	47b8      	blx	r7
	uTXByte(usart_module, hex_to_ascii(tmp8.HL.L));
    3b2e:	0730      	lsls	r0, r6, #28
    3b30:	0f00      	lsrs	r0, r0, #28
    3b32:	47a8      	blx	r5
	usart_write_wait(usart_module, tmp_data);
    3b34:	b281      	uxth	r1, r0
    3b36:	9801      	ldr	r0, [sp, #4]
    3b38:	47b8      	blx	r7
	uTXByte(usart_module, hex_to_ascii(tmp8.HL.H));
    3b3a:	0620      	lsls	r0, r4, #24
    3b3c:	0f00      	lsrs	r0, r0, #28
    3b3e:	47a8      	blx	r5
	usart_write_wait(usart_module, tmp_data);
    3b40:	b281      	uxth	r1, r0
    3b42:	9801      	ldr	r0, [sp, #4]
    3b44:	47b8      	blx	r7
	uTXByte(usart_module, hex_to_ascii(tmp8.HL.L));
    3b46:	0720      	lsls	r0, r4, #28
    3b48:	0f00      	lsrs	r0, r0, #28
    3b4a:	47a8      	blx	r5
	usart_write_wait(usart_module, tmp_data);
    3b4c:	b281      	uxth	r1, r0
    3b4e:	9801      	ldr	r0, [sp, #4]
    3b50:	47b8      	blx	r7
}
    3b52:	b003      	add	sp, #12
    3b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b56:	46c0      	nop			; (mov r8, r8)
    3b58:	00003ad9 	.word	0x00003ad9
    3b5c:	00004685 	.word	0x00004685

00003b60 <uart_send_word_for_ListNumber>:
{
    3b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b62:	0005      	movs	r5, r0
    3b64:	000c      	movs	r4, r1
	uTXByte(usart_module, hex_to_ascii(tmp8.HL.L));
    3b66:	0508      	lsls	r0, r1, #20
    3b68:	0f00      	lsrs	r0, r0, #28
    3b6a:	4f09      	ldr	r7, [pc, #36]	; (3b90 <uart_send_word_for_ListNumber+0x30>)
    3b6c:	47b8      	blx	r7
	usart_write_wait(usart_module, tmp_data);
    3b6e:	b281      	uxth	r1, r0
    3b70:	0028      	movs	r0, r5
    3b72:	4e08      	ldr	r6, [pc, #32]	; (3b94 <uart_send_word_for_ListNumber+0x34>)
    3b74:	47b0      	blx	r6
	uTXByte(usart_module, hex_to_ascii(tmp8.HL.H));
    3b76:	0620      	lsls	r0, r4, #24
    3b78:	0f00      	lsrs	r0, r0, #28
    3b7a:	47b8      	blx	r7
	usart_write_wait(usart_module, tmp_data);
    3b7c:	b281      	uxth	r1, r0
    3b7e:	0028      	movs	r0, r5
    3b80:	47b0      	blx	r6
	uTXByte(usart_module, hex_to_ascii(tmp8.HL.L));
    3b82:	0720      	lsls	r0, r4, #28
    3b84:	0f00      	lsrs	r0, r0, #28
    3b86:	47b8      	blx	r7
	usart_write_wait(usart_module, tmp_data);
    3b88:	b281      	uxth	r1, r0
    3b8a:	0028      	movs	r0, r5
    3b8c:	47b0      	blx	r6
}
    3b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3b90:	00003ad9 	.word	0x00003ad9
    3b94:	00004685 	.word	0x00004685

00003b98 <ascii_to_hex>:

unsigned char ascii_to_hex(unsigned char tmp)
{
	if(tmp == '0') return KEY0;
    3b98:	2830      	cmp	r0, #48	; 0x30
    3b9a:	d100      	bne.n	3b9e <ascii_to_hex+0x6>
    3b9c:	e0c8      	b.n	3d30 <ascii_to_hex+0x198>
	if(tmp == '1') return KEY1;
    3b9e:	2831      	cmp	r0, #49	; 0x31
    3ba0:	d100      	bne.n	3ba4 <ascii_to_hex+0xc>
    3ba2:	e0c8      	b.n	3d36 <ascii_to_hex+0x19e>
	if(tmp == '2') return KEY2;
    3ba4:	2302      	movs	r3, #2
    3ba6:	2832      	cmp	r0, #50	; 0x32
    3ba8:	d100      	bne.n	3bac <ascii_to_hex+0x14>
    3baa:	e0c2      	b.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == '3') return KEY3;
    3bac:	3301      	adds	r3, #1
    3bae:	2833      	cmp	r0, #51	; 0x33
    3bb0:	d100      	bne.n	3bb4 <ascii_to_hex+0x1c>
    3bb2:	e0be      	b.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == '4') return KEY4;
    3bb4:	3301      	adds	r3, #1
    3bb6:	2834      	cmp	r0, #52	; 0x34
    3bb8:	d100      	bne.n	3bbc <ascii_to_hex+0x24>
    3bba:	e0ba      	b.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == '5') return KEY5;
    3bbc:	3301      	adds	r3, #1
    3bbe:	2835      	cmp	r0, #53	; 0x35
    3bc0:	d100      	bne.n	3bc4 <ascii_to_hex+0x2c>
    3bc2:	e0b6      	b.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == '6') return KEY6;
    3bc4:	3301      	adds	r3, #1
    3bc6:	2836      	cmp	r0, #54	; 0x36
    3bc8:	d100      	bne.n	3bcc <ascii_to_hex+0x34>
    3bca:	e0b2      	b.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == '7') return KEY7;
    3bcc:	3301      	adds	r3, #1
    3bce:	2837      	cmp	r0, #55	; 0x37
    3bd0:	d100      	bne.n	3bd4 <ascii_to_hex+0x3c>
    3bd2:	e0ae      	b.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == '8') return KEY8;
    3bd4:	3301      	adds	r3, #1
    3bd6:	2838      	cmp	r0, #56	; 0x38
    3bd8:	d100      	bne.n	3bdc <ascii_to_hex+0x44>
    3bda:	e0aa      	b.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == '9') return KEY9;
    3bdc:	3301      	adds	r3, #1
    3bde:	2839      	cmp	r0, #57	; 0x39
    3be0:	d100      	bne.n	3be4 <ascii_to_hex+0x4c>
    3be2:	e0a6      	b.n	3d32 <ascii_to_hex+0x19a>
	
	if(tmp == 'a') return KEYA;
    3be4:	3301      	adds	r3, #1
    3be6:	2861      	cmp	r0, #97	; 0x61
    3be8:	d100      	bne.n	3bec <ascii_to_hex+0x54>
    3bea:	e0a2      	b.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'b') return KEYB;
    3bec:	3301      	adds	r3, #1
    3bee:	2862      	cmp	r0, #98	; 0x62
    3bf0:	d100      	bne.n	3bf4 <ascii_to_hex+0x5c>
    3bf2:	e09e      	b.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'c') return KEYC;
    3bf4:	3301      	adds	r3, #1
    3bf6:	2863      	cmp	r0, #99	; 0x63
    3bf8:	d100      	bne.n	3bfc <ascii_to_hex+0x64>
    3bfa:	e09a      	b.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'd') return KEYD;
    3bfc:	3301      	adds	r3, #1
    3bfe:	2864      	cmp	r0, #100	; 0x64
    3c00:	d100      	bne.n	3c04 <ascii_to_hex+0x6c>
    3c02:	e096      	b.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'e') return KEYE;
    3c04:	3301      	adds	r3, #1
    3c06:	2865      	cmp	r0, #101	; 0x65
    3c08:	d100      	bne.n	3c0c <ascii_to_hex+0x74>
    3c0a:	e092      	b.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'f') return KEYF;
    3c0c:	3301      	adds	r3, #1
    3c0e:	2866      	cmp	r0, #102	; 0x66
    3c10:	d100      	bne.n	3c14 <ascii_to_hex+0x7c>
    3c12:	e08e      	b.n	3d32 <ascii_to_hex+0x19a>
	
	if(tmp == 'A') return KEYA;
    3c14:	3b05      	subs	r3, #5
    3c16:	2841      	cmp	r0, #65	; 0x41
    3c18:	d100      	bne.n	3c1c <ascii_to_hex+0x84>
    3c1a:	e08a      	b.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'B') return KEYB;
    3c1c:	3301      	adds	r3, #1
    3c1e:	2842      	cmp	r0, #66	; 0x42
    3c20:	d100      	bne.n	3c24 <ascii_to_hex+0x8c>
    3c22:	e086      	b.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'C') return KEYC;
    3c24:	3301      	adds	r3, #1
    3c26:	2843      	cmp	r0, #67	; 0x43
    3c28:	d100      	bne.n	3c2c <ascii_to_hex+0x94>
    3c2a:	e082      	b.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'D') return KEYD;
    3c2c:	3301      	adds	r3, #1
    3c2e:	2844      	cmp	r0, #68	; 0x44
    3c30:	d07f      	beq.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'E') return KEYE;
    3c32:	3301      	adds	r3, #1
    3c34:	2845      	cmp	r0, #69	; 0x45
    3c36:	d07c      	beq.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'F') return KEYF;
    3c38:	3301      	adds	r3, #1
    3c3a:	2846      	cmp	r0, #70	; 0x46
    3c3c:	d079      	beq.n	3d32 <ascii_to_hex+0x19a>
	
	if(tmp == 'g') return KEYG;
    3c3e:	3301      	adds	r3, #1
    3c40:	2867      	cmp	r0, #103	; 0x67
    3c42:	d076      	beq.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'h') return KEYH;
    3c44:	3301      	adds	r3, #1
    3c46:	2868      	cmp	r0, #104	; 0x68
    3c48:	d073      	beq.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'i') return KEYI;
    3c4a:	3301      	adds	r3, #1
    3c4c:	2869      	cmp	r0, #105	; 0x69
    3c4e:	d070      	beq.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'j') return KEYJ;
    3c50:	3301      	adds	r3, #1
    3c52:	286a      	cmp	r0, #106	; 0x6a
    3c54:	d06d      	beq.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'k') return KEYK;
    3c56:	3301      	adds	r3, #1
    3c58:	286b      	cmp	r0, #107	; 0x6b
    3c5a:	d06a      	beq.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'l') return KEYL;
    3c5c:	3301      	adds	r3, #1
    3c5e:	286c      	cmp	r0, #108	; 0x6c
    3c60:	d067      	beq.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'm') return KEYM;
    3c62:	3301      	adds	r3, #1
    3c64:	286d      	cmp	r0, #109	; 0x6d
    3c66:	d064      	beq.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'n') return KEYN;
    3c68:	3301      	adds	r3, #1
    3c6a:	286e      	cmp	r0, #110	; 0x6e
    3c6c:	d061      	beq.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'o') return KEYO;
    3c6e:	3301      	adds	r3, #1
    3c70:	286f      	cmp	r0, #111	; 0x6f
    3c72:	d05e      	beq.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'p') return KEYP;
    3c74:	3301      	adds	r3, #1
    3c76:	2870      	cmp	r0, #112	; 0x70
    3c78:	d05b      	beq.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'q') return KEYQ;
    3c7a:	3301      	adds	r3, #1
    3c7c:	2871      	cmp	r0, #113	; 0x71
    3c7e:	d058      	beq.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'r') return KEYR;
    3c80:	3301      	adds	r3, #1
    3c82:	2872      	cmp	r0, #114	; 0x72
    3c84:	d055      	beq.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 's') return KEYS;
    3c86:	3301      	adds	r3, #1
    3c88:	2873      	cmp	r0, #115	; 0x73
    3c8a:	d052      	beq.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 't') return KEYT;
    3c8c:	3301      	adds	r3, #1
    3c8e:	2874      	cmp	r0, #116	; 0x74
    3c90:	d04f      	beq.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'u') return KEYU;
    3c92:	3301      	adds	r3, #1
    3c94:	2875      	cmp	r0, #117	; 0x75
    3c96:	d04c      	beq.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'v') return KEYV;
    3c98:	3301      	adds	r3, #1
    3c9a:	2876      	cmp	r0, #118	; 0x76
    3c9c:	d049      	beq.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'w') return KEYW;
    3c9e:	3301      	adds	r3, #1
    3ca0:	2877      	cmp	r0, #119	; 0x77
    3ca2:	d046      	beq.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'x') return KEYX;
    3ca4:	3301      	adds	r3, #1
    3ca6:	2878      	cmp	r0, #120	; 0x78
    3ca8:	d043      	beq.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'y') return KEYY;
    3caa:	3301      	adds	r3, #1
    3cac:	2879      	cmp	r0, #121	; 0x79
    3cae:	d040      	beq.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'z') return KEYZ;
    3cb0:	3301      	adds	r3, #1
    3cb2:	287a      	cmp	r0, #122	; 0x7a
    3cb4:	d03d      	beq.n	3d32 <ascii_to_hex+0x19a>
	
	if(tmp == 'G') return KEYG;
    3cb6:	3b13      	subs	r3, #19
    3cb8:	2847      	cmp	r0, #71	; 0x47
    3cba:	d03a      	beq.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'H') return KEYH;
    3cbc:	3301      	adds	r3, #1
    3cbe:	2848      	cmp	r0, #72	; 0x48
    3cc0:	d037      	beq.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'I') return KEYI;
    3cc2:	3301      	adds	r3, #1
    3cc4:	2849      	cmp	r0, #73	; 0x49
    3cc6:	d034      	beq.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'J') return KEYJ;
    3cc8:	3301      	adds	r3, #1
    3cca:	284a      	cmp	r0, #74	; 0x4a
    3ccc:	d031      	beq.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'K') return KEYK;
    3cce:	3301      	adds	r3, #1
    3cd0:	284b      	cmp	r0, #75	; 0x4b
    3cd2:	d02e      	beq.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'L') return KEYL;
    3cd4:	3301      	adds	r3, #1
    3cd6:	284c      	cmp	r0, #76	; 0x4c
    3cd8:	d02b      	beq.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'M') return KEYM;
    3cda:	3301      	adds	r3, #1
    3cdc:	284d      	cmp	r0, #77	; 0x4d
    3cde:	d028      	beq.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'N') return KEYN;
    3ce0:	3301      	adds	r3, #1
    3ce2:	284e      	cmp	r0, #78	; 0x4e
    3ce4:	d025      	beq.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'O') return KEYO;
    3ce6:	3301      	adds	r3, #1
    3ce8:	284f      	cmp	r0, #79	; 0x4f
    3cea:	d022      	beq.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'P') return KEYP;
    3cec:	3301      	adds	r3, #1
    3cee:	2850      	cmp	r0, #80	; 0x50
    3cf0:	d01f      	beq.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'Q') return KEYQ;
    3cf2:	3301      	adds	r3, #1
    3cf4:	2851      	cmp	r0, #81	; 0x51
    3cf6:	d01c      	beq.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'R') return KEYR;
    3cf8:	3301      	adds	r3, #1
    3cfa:	2852      	cmp	r0, #82	; 0x52
    3cfc:	d019      	beq.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'S') return KEYS;
    3cfe:	3301      	adds	r3, #1
    3d00:	2853      	cmp	r0, #83	; 0x53
    3d02:	d016      	beq.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'T') return KEYT;
    3d04:	3301      	adds	r3, #1
    3d06:	2854      	cmp	r0, #84	; 0x54
    3d08:	d013      	beq.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'U') return KEYU;
    3d0a:	3301      	adds	r3, #1
    3d0c:	2855      	cmp	r0, #85	; 0x55
    3d0e:	d010      	beq.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'V') return KEYV;
    3d10:	3301      	adds	r3, #1
    3d12:	2856      	cmp	r0, #86	; 0x56
    3d14:	d00d      	beq.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'W') return KEYW;
    3d16:	3301      	adds	r3, #1
    3d18:	2857      	cmp	r0, #87	; 0x57
    3d1a:	d00a      	beq.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'X') return KEYX;
    3d1c:	3301      	adds	r3, #1
    3d1e:	2858      	cmp	r0, #88	; 0x58
    3d20:	d007      	beq.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'Y') return KEYY;
    3d22:	3301      	adds	r3, #1
    3d24:	2859      	cmp	r0, #89	; 0x59
    3d26:	d004      	beq.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'Z') return KEYZ;
    3d28:	285a      	cmp	r0, #90	; 0x5a
    3d2a:	d006      	beq.n	3d3a <ascii_to_hex+0x1a2>
	return 0xff;
    3d2c:	33dd      	adds	r3, #221	; 0xdd
    3d2e:	e000      	b.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == '0') return KEY0;
    3d30:	2300      	movs	r3, #0
}
    3d32:	0018      	movs	r0, r3
    3d34:	4770      	bx	lr
	if(tmp == '1') return KEY1;
    3d36:	2301      	movs	r3, #1
    3d38:	e7fb      	b.n	3d32 <ascii_to_hex+0x19a>
	if(tmp == 'Z') return KEYZ;
    3d3a:	2323      	movs	r3, #35	; 0x23
    3d3c:	e7f9      	b.n	3d32 <ascii_to_hex+0x19a>
	...

00003d40 <hex_to_bcd>:


unsigned int hex_to_bcd(unsigned int tmp)
{
    3d40:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d42:	46ce      	mov	lr, r9
    3d44:	b500      	push	{lr}
    3d46:	b082      	sub	sp, #8
    3d48:	0006      	movs	r6, r0
	UINT16u_t	tmp16;
	UINT8u_t	tmp8;

	tmp8.HL.H = tmp / 1000;
    3d4a:	4b17      	ldr	r3, [pc, #92]	; (3da8 <hex_to_bcd+0x68>)
    3d4c:	4699      	mov	r9, r3
    3d4e:	21fa      	movs	r1, #250	; 0xfa
    3d50:	0089      	lsls	r1, r1, #2
    3d52:	4798      	blx	r3
    3d54:	270f      	movs	r7, #15
    3d56:	0104      	lsls	r4, r0, #4
	tmp8.HL.L = (tmp % 1000) / 100;
    3d58:	4d14      	ldr	r5, [pc, #80]	; (3dac <hex_to_bcd+0x6c>)
    3d5a:	21fa      	movs	r1, #250	; 0xfa
    3d5c:	0089      	lsls	r1, r1, #2
    3d5e:	0030      	movs	r0, r6
    3d60:	47a8      	blx	r5
    3d62:	000b      	movs	r3, r1
    3d64:	2164      	movs	r1, #100	; 0x64
    3d66:	9301      	str	r3, [sp, #4]
    3d68:	0018      	movs	r0, r3
    3d6a:	47c8      	blx	r9
    3d6c:	4038      	ands	r0, r7
    3d6e:	4304      	orrs	r4, r0
	tmp16.byte[1] = tmp8.byte;
    3d70:	b2e6      	uxtb	r6, r4
    3d72:	0236      	lsls	r6, r6, #8
	
	tmp8.HL.H = ((tmp % 1000) % 100 ) / 10;
    3d74:	2164      	movs	r1, #100	; 0x64
    3d76:	9801      	ldr	r0, [sp, #4]
    3d78:	47a8      	blx	r5
    3d7a:	000b      	movs	r3, r1
    3d7c:	210a      	movs	r1, #10
    3d7e:	9301      	str	r3, [sp, #4]
    3d80:	0018      	movs	r0, r3
    3d82:	47c8      	blx	r9
    3d84:	0100      	lsls	r0, r0, #4
    3d86:	403c      	ands	r4, r7
    3d88:	4304      	orrs	r4, r0
	tmp8.HL.L = ((tmp % 1000) % 100 ) % 10;
    3d8a:	210a      	movs	r1, #10
    3d8c:	9801      	ldr	r0, [sp, #4]
    3d8e:	47a8      	blx	r5
    3d90:	0038      	movs	r0, r7
    3d92:	4008      	ands	r0, r1
    3d94:	230f      	movs	r3, #15
    3d96:	439c      	bics	r4, r3
    3d98:	4320      	orrs	r0, r4
	tmp16.byte[0] = tmp8.byte;
    3d9a:	b2c0      	uxtb	r0, r0
	return tmp16.word;
    3d9c:	4330      	orrs	r0, r6
}
    3d9e:	b002      	add	sp, #8
    3da0:	bc04      	pop	{r2}
    3da2:	4691      	mov	r9, r2
    3da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3da6:	46c0      	nop			; (mov r8, r8)
    3da8:	000053c1 	.word	0x000053c1
    3dac:	000054cd 	.word	0x000054cd

00003db0 <long_to_bcd>:


unsigned long long_to_bcd(unsigned long tmp)
{
    3db0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3db2:	46ce      	mov	lr, r9
    3db4:	4647      	mov	r7, r8
    3db6:	b580      	push	{r7, lr}
    3db8:	b083      	sub	sp, #12
	UINT32u_t	tmp32;
	//UINT16u_t	tmp16;
	UINT8u_t	tmp8;

	tmp8.HL.H = 0;
    3dba:	230f      	movs	r3, #15
    3dbc:	4699      	mov	r9, r3
    3dbe:	240f      	movs	r4, #15
	tmp8.HL.L = tmp / 10000;
    3dc0:	4b1f      	ldr	r3, [pc, #124]	; (3e40 <long_to_bcd+0x90>)
    3dc2:	4698      	mov	r8, r3
    3dc4:	491f      	ldr	r1, [pc, #124]	; (3e44 <long_to_bcd+0x94>)
    3dc6:	9001      	str	r0, [sp, #4]
    3dc8:	4798      	blx	r3
    3dca:	0007      	movs	r7, r0
    3dcc:	4027      	ands	r7, r4
	tmp32.byte[2] = tmp8.byte;
    3dce:	043d      	lsls	r5, r7, #16
	
	tmp8.HL.H = (tmp % 10000) / 1000;
    3dd0:	4e1d      	ldr	r6, [pc, #116]	; (3e48 <long_to_bcd+0x98>)
    3dd2:	491c      	ldr	r1, [pc, #112]	; (3e44 <long_to_bcd+0x94>)
    3dd4:	9801      	ldr	r0, [sp, #4]
    3dd6:	47b0      	blx	r6
    3dd8:	000b      	movs	r3, r1
    3dda:	21fa      	movs	r1, #250	; 0xfa
    3ddc:	0089      	lsls	r1, r1, #2
    3dde:	9301      	str	r3, [sp, #4]
    3de0:	0018      	movs	r0, r3
    3de2:	47c0      	blx	r8
    3de4:	0100      	lsls	r0, r0, #4
    3de6:	4307      	orrs	r7, r0
	tmp8.HL.L = (tmp % 10000) % 1000 / 100;
    3de8:	21fa      	movs	r1, #250	; 0xfa
    3dea:	0089      	lsls	r1, r1, #2
    3dec:	9801      	ldr	r0, [sp, #4]
    3dee:	47b0      	blx	r6
    3df0:	000b      	movs	r3, r1
    3df2:	2164      	movs	r1, #100	; 0x64
    3df4:	9301      	str	r3, [sp, #4]
    3df6:	0018      	movs	r0, r3
    3df8:	47c0      	blx	r8
    3dfa:	4020      	ands	r0, r4
    3dfc:	464a      	mov	r2, r9
    3dfe:	4397      	bics	r7, r2
    3e00:	4307      	orrs	r7, r0
	tmp32.byte[1] = tmp8.byte;
    3e02:	b2fb      	uxtb	r3, r7
    3e04:	021b      	lsls	r3, r3, #8
    3e06:	431d      	orrs	r5, r3
	
	tmp8.HL.H = ((tmp % 10000) % 1000 % 100 ) / 10;
    3e08:	2164      	movs	r1, #100	; 0x64
    3e0a:	9801      	ldr	r0, [sp, #4]
    3e0c:	47b0      	blx	r6
    3e0e:	000b      	movs	r3, r1
    3e10:	210a      	movs	r1, #10
    3e12:	9301      	str	r3, [sp, #4]
    3e14:	0018      	movs	r0, r3
    3e16:	47c0      	blx	r8
    3e18:	0100      	lsls	r0, r0, #4
    3e1a:	4027      	ands	r7, r4
    3e1c:	4307      	orrs	r7, r0
	tmp8.HL.L = ((tmp % 10000) % 1000 % 100 ) % 10;
    3e1e:	210a      	movs	r1, #10
    3e20:	9801      	ldr	r0, [sp, #4]
    3e22:	47b0      	blx	r6
    3e24:	4021      	ands	r1, r4
    3e26:	003c      	movs	r4, r7
    3e28:	464b      	mov	r3, r9
    3e2a:	439c      	bics	r4, r3
    3e2c:	430c      	orrs	r4, r1
	tmp32.byte[0] = tmp8.byte;
    3e2e:	b2e4      	uxtb	r4, r4
    3e30:	4325      	orrs	r5, r4
	
	return tmp32.dword;
    3e32:	0028      	movs	r0, r5
    3e34:	b003      	add	sp, #12
    3e36:	bc0c      	pop	{r2, r3}
    3e38:	4690      	mov	r8, r2
    3e3a:	4699      	mov	r9, r3
    3e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e3e:	46c0      	nop			; (mov r8, r8)
    3e40:	000053c1 	.word	0x000053c1
    3e44:	00002710 	.word	0x00002710
    3e48:	000054cd 	.word	0x000054cd

00003e4c <delay_init>:
    3e4c:	b570      	push	{r4, r5, r6, lr}
    3e4e:	2000      	movs	r0, #0
    3e50:	4b08      	ldr	r3, [pc, #32]	; (3e74 <delay_init+0x28>)
    3e52:	4798      	blx	r3
    3e54:	0005      	movs	r5, r0
    3e56:	4c08      	ldr	r4, [pc, #32]	; (3e78 <delay_init+0x2c>)
    3e58:	21fa      	movs	r1, #250	; 0xfa
    3e5a:	0089      	lsls	r1, r1, #2
    3e5c:	47a0      	blx	r4
    3e5e:	4b07      	ldr	r3, [pc, #28]	; (3e7c <delay_init+0x30>)
    3e60:	6018      	str	r0, [r3, #0]
    3e62:	4907      	ldr	r1, [pc, #28]	; (3e80 <delay_init+0x34>)
    3e64:	0028      	movs	r0, r5
    3e66:	47a0      	blx	r4
    3e68:	4b06      	ldr	r3, [pc, #24]	; (3e84 <delay_init+0x38>)
    3e6a:	6018      	str	r0, [r3, #0]
    3e6c:	2205      	movs	r2, #5
    3e6e:	4b06      	ldr	r3, [pc, #24]	; (3e88 <delay_init+0x3c>)
    3e70:	601a      	str	r2, [r3, #0]
    3e72:	bd70      	pop	{r4, r5, r6, pc}
    3e74:	00004b89 	.word	0x00004b89
    3e78:	000053c1 	.word	0x000053c1
    3e7c:	200001c0 	.word	0x200001c0
    3e80:	000f4240 	.word	0x000f4240
    3e84:	200001c4 	.word	0x200001c4
    3e88:	e000e010 	.word	0xe000e010

00003e8c <delay_cycles_ms>:
    3e8c:	b530      	push	{r4, r5, lr}
    3e8e:	4b08      	ldr	r3, [pc, #32]	; (3eb0 <delay_cycles_ms+0x24>)
    3e90:	681c      	ldr	r4, [r3, #0]
    3e92:	4a08      	ldr	r2, [pc, #32]	; (3eb4 <delay_cycles_ms+0x28>)
    3e94:	2500      	movs	r5, #0
    3e96:	2180      	movs	r1, #128	; 0x80
    3e98:	0249      	lsls	r1, r1, #9
    3e9a:	3801      	subs	r0, #1
    3e9c:	d307      	bcc.n	3eae <delay_cycles_ms+0x22>
    3e9e:	2c00      	cmp	r4, #0
    3ea0:	d0fb      	beq.n	3e9a <delay_cycles_ms+0xe>
    3ea2:	6054      	str	r4, [r2, #4]
    3ea4:	6095      	str	r5, [r2, #8]
    3ea6:	6813      	ldr	r3, [r2, #0]
    3ea8:	420b      	tst	r3, r1
    3eaa:	d0fc      	beq.n	3ea6 <delay_cycles_ms+0x1a>
    3eac:	e7f5      	b.n	3e9a <delay_cycles_ms+0xe>
    3eae:	bd30      	pop	{r4, r5, pc}
    3eb0:	200001c0 	.word	0x200001c0
    3eb4:	e000e010 	.word	0xe000e010

00003eb8 <cpu_irq_enter_critical>:
    3eb8:	4b0c      	ldr	r3, [pc, #48]	; (3eec <cpu_irq_enter_critical+0x34>)
    3eba:	681b      	ldr	r3, [r3, #0]
    3ebc:	2b00      	cmp	r3, #0
    3ebe:	d106      	bne.n	3ece <cpu_irq_enter_critical+0x16>
    3ec0:	f3ef 8310 	mrs	r3, PRIMASK
    3ec4:	2b00      	cmp	r3, #0
    3ec6:	d007      	beq.n	3ed8 <cpu_irq_enter_critical+0x20>
    3ec8:	2200      	movs	r2, #0
    3eca:	4b09      	ldr	r3, [pc, #36]	; (3ef0 <cpu_irq_enter_critical+0x38>)
    3ecc:	701a      	strb	r2, [r3, #0]
    3ece:	4a07      	ldr	r2, [pc, #28]	; (3eec <cpu_irq_enter_critical+0x34>)
    3ed0:	6813      	ldr	r3, [r2, #0]
    3ed2:	3301      	adds	r3, #1
    3ed4:	6013      	str	r3, [r2, #0]
    3ed6:	4770      	bx	lr
    3ed8:	b672      	cpsid	i
    3eda:	f3bf 8f5f 	dmb	sy
    3ede:	2200      	movs	r2, #0
    3ee0:	4b04      	ldr	r3, [pc, #16]	; (3ef4 <cpu_irq_enter_critical+0x3c>)
    3ee2:	701a      	strb	r2, [r3, #0]
    3ee4:	3201      	adds	r2, #1
    3ee6:	4b02      	ldr	r3, [pc, #8]	; (3ef0 <cpu_irq_enter_critical+0x38>)
    3ee8:	701a      	strb	r2, [r3, #0]
    3eea:	e7f0      	b.n	3ece <cpu_irq_enter_critical+0x16>
    3eec:	200001f0 	.word	0x200001f0
    3ef0:	200001f4 	.word	0x200001f4
    3ef4:	200001c8 	.word	0x200001c8

00003ef8 <cpu_irq_leave_critical>:
    3ef8:	4b08      	ldr	r3, [pc, #32]	; (3f1c <cpu_irq_leave_critical+0x24>)
    3efa:	681a      	ldr	r2, [r3, #0]
    3efc:	3a01      	subs	r2, #1
    3efe:	601a      	str	r2, [r3, #0]
    3f00:	681b      	ldr	r3, [r3, #0]
    3f02:	2b00      	cmp	r3, #0
    3f04:	d109      	bne.n	3f1a <cpu_irq_leave_critical+0x22>
    3f06:	4b06      	ldr	r3, [pc, #24]	; (3f20 <cpu_irq_leave_critical+0x28>)
    3f08:	781b      	ldrb	r3, [r3, #0]
    3f0a:	2b00      	cmp	r3, #0
    3f0c:	d005      	beq.n	3f1a <cpu_irq_leave_critical+0x22>
    3f0e:	2201      	movs	r2, #1
    3f10:	4b04      	ldr	r3, [pc, #16]	; (3f24 <cpu_irq_leave_critical+0x2c>)
    3f12:	701a      	strb	r2, [r3, #0]
    3f14:	f3bf 8f5f 	dmb	sy
    3f18:	b662      	cpsie	i
    3f1a:	4770      	bx	lr
    3f1c:	200001f0 	.word	0x200001f0
    3f20:	200001f4 	.word	0x200001f4
    3f24:	200001c8 	.word	0x200001c8

00003f28 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    3f28:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f2a:	46c6      	mov	lr, r8
    3f2c:	b500      	push	{lr}
    3f2e:	b082      	sub	sp, #8
	config->input_pull = PORT_PIN_PULL_UP;
    3f30:	ac01      	add	r4, sp, #4
    3f32:	2701      	movs	r7, #1
    3f34:	7067      	strb	r7, [r4, #1]
	config->powersave  = false;
    3f36:	2300      	movs	r3, #0
    3f38:	4698      	mov	r8, r3
    3f3a:	70a3      	strb	r3, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
	
	/* Configure LEDs as outputs, turn them off */
	
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    3f3c:	7027      	strb	r7, [r4, #0]
	//	RGB LED PIN DEFINE
	port_pin_set_config(PIN_PA23, &pin_conf);
    3f3e:	0021      	movs	r1, r4
    3f40:	2017      	movs	r0, #23
    3f42:	4e1f      	ldr	r6, [pc, #124]	; (3fc0 <system_board_init+0x98>)
    3f44:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    3f46:	4d1f      	ldr	r5, [pc, #124]	; (3fc4 <system_board_init+0x9c>)
    3f48:	2380      	movs	r3, #128	; 0x80
    3f4a:	041b      	lsls	r3, r3, #16
    3f4c:	61ab      	str	r3, [r5, #24]
	port_pin_set_output_level(PIN_PA23, true);
	port_pin_set_config(PIN_PA27, &pin_conf);
    3f4e:	0021      	movs	r1, r4
    3f50:	201b      	movs	r0, #27
    3f52:	47b0      	blx	r6
    3f54:	2380      	movs	r3, #128	; 0x80
    3f56:	051b      	lsls	r3, r3, #20
    3f58:	61ab      	str	r3, [r5, #24]
	port_pin_set_output_level(PIN_PA27, true);
	port_pin_set_config(PIN_PA28, &pin_conf);
    3f5a:	0021      	movs	r1, r4
    3f5c:	201c      	movs	r0, #28
    3f5e:	47b0      	blx	r6
    3f60:	2380      	movs	r3, #128	; 0x80
    3f62:	055b      	lsls	r3, r3, #21
    3f64:	61ab      	str	r3, [r5, #24]
	port_pin_set_output_level(PIN_PA28, true);

	
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    3f66:	4643      	mov	r3, r8
    3f68:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(PIN_PA11, &pin_conf);
    3f6a:	0021      	movs	r1, r4
    3f6c:	200b      	movs	r0, #11
    3f6e:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    3f70:	2380      	movs	r3, #128	; 0x80
    3f72:	011b      	lsls	r3, r3, #4
    3f74:	616b      	str	r3, [r5, #20]
	port_pin_set_output_level(PIN_PA11, false);
	port_pin_set_config(PIN_PA07, &pin_conf);
    3f76:	0021      	movs	r1, r4
    3f78:	2007      	movs	r0, #7
    3f7a:	47b0      	blx	r6
    3f7c:	2380      	movs	r3, #128	; 0x80
    3f7e:	616b      	str	r3, [r5, #20]
	port_pin_set_output_level(PIN_PA07, false);
	
	// DIP SWITCH 4
	port_pin_set_config(PIN_PA22, &pin_conf);
    3f80:	0021      	movs	r1, r4
    3f82:	2016      	movs	r0, #22
    3f84:	47b0      	blx	r6
    3f86:	2380      	movs	r3, #128	; 0x80
    3f88:	03db      	lsls	r3, r3, #15
    3f8a:	616b      	str	r3, [r5, #20]
	port_pin_set_output_level(PIN_PA22, false);
	port_pin_set_config(PIN_PA17, &pin_conf);
    3f8c:	0021      	movs	r1, r4
    3f8e:	2011      	movs	r0, #17
    3f90:	47b0      	blx	r6
    3f92:	2380      	movs	r3, #128	; 0x80
    3f94:	029b      	lsls	r3, r3, #10
    3f96:	616b      	str	r3, [r5, #20]
	port_pin_set_output_level(PIN_PA17, false);
	port_pin_set_config(PIN_PA16, &pin_conf);
    3f98:	0021      	movs	r1, r4
    3f9a:	2010      	movs	r0, #16
    3f9c:	47b0      	blx	r6
    3f9e:	2380      	movs	r3, #128	; 0x80
    3fa0:	025b      	lsls	r3, r3, #9
    3fa2:	616b      	str	r3, [r5, #20]
	port_pin_set_output_level(PIN_PA16, false);
	port_pin_set_config(PIN_PA01, &pin_conf);
    3fa4:	0021      	movs	r1, r4
    3fa6:	2001      	movs	r0, #1
    3fa8:	47b0      	blx	r6
    3faa:	2302      	movs	r3, #2
    3fac:	616b      	str	r3, [r5, #20]
	port_pin_set_output_level(PIN_PA01, false);

	// TACT SWITCH
	port_pin_set_config(PIN_PA00, &pin_conf);
    3fae:	0021      	movs	r1, r4
    3fb0:	2000      	movs	r0, #0
    3fb2:	47b0      	blx	r6
    3fb4:	616f      	str	r7, [r5, #20]
	port_pin_set_output_level(PIN_PA00, false);

}
    3fb6:	b002      	add	sp, #8
    3fb8:	bc04      	pop	{r2}
    3fba:	4690      	mov	r8, r2
    3fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3fbe:	46c0      	nop			; (mov r8, r8)
    3fc0:	00003fc9 	.word	0x00003fc9
    3fc4:	41004400 	.word	0x41004400

00003fc8 <port_pin_set_config>:
    3fc8:	b500      	push	{lr}
    3fca:	b083      	sub	sp, #12
    3fcc:	ab01      	add	r3, sp, #4
    3fce:	2280      	movs	r2, #128	; 0x80
    3fd0:	701a      	strb	r2, [r3, #0]
    3fd2:	780a      	ldrb	r2, [r1, #0]
    3fd4:	705a      	strb	r2, [r3, #1]
    3fd6:	784a      	ldrb	r2, [r1, #1]
    3fd8:	709a      	strb	r2, [r3, #2]
    3fda:	788a      	ldrb	r2, [r1, #2]
    3fdc:	70da      	strb	r2, [r3, #3]
    3fde:	0019      	movs	r1, r3
    3fe0:	4b01      	ldr	r3, [pc, #4]	; (3fe8 <port_pin_set_config+0x20>)
    3fe2:	4798      	blx	r3
    3fe4:	b003      	add	sp, #12
    3fe6:	bd00      	pop	{pc}
    3fe8:	00004dc9 	.word	0x00004dc9

00003fec <long_division>:
    3fec:	b5f0      	push	{r4, r5, r6, r7, lr}
    3fee:	46de      	mov	lr, fp
    3ff0:	4657      	mov	r7, sl
    3ff2:	464e      	mov	r6, r9
    3ff4:	4645      	mov	r5, r8
    3ff6:	b5e0      	push	{r5, r6, r7, lr}
    3ff8:	b087      	sub	sp, #28
    3ffa:	4680      	mov	r8, r0
    3ffc:	9104      	str	r1, [sp, #16]
    3ffe:	0016      	movs	r6, r2
    4000:	001f      	movs	r7, r3
    4002:	2200      	movs	r2, #0
    4004:	2300      	movs	r3, #0
    4006:	2100      	movs	r1, #0
    4008:	468b      	mov	fp, r1
    400a:	243f      	movs	r4, #63	; 0x3f
    400c:	2001      	movs	r0, #1
    400e:	0021      	movs	r1, r4
    4010:	9600      	str	r6, [sp, #0]
    4012:	9701      	str	r7, [sp, #4]
    4014:	465c      	mov	r4, fp
    4016:	9403      	str	r4, [sp, #12]
    4018:	4644      	mov	r4, r8
    401a:	9405      	str	r4, [sp, #20]
    401c:	e013      	b.n	4046 <long_division+0x5a>
    401e:	2420      	movs	r4, #32
    4020:	1a64      	subs	r4, r4, r1
    4022:	0005      	movs	r5, r0
    4024:	40e5      	lsrs	r5, r4
    4026:	46a8      	mov	r8, r5
    4028:	e014      	b.n	4054 <long_division+0x68>
    402a:	9c00      	ldr	r4, [sp, #0]
    402c:	9d01      	ldr	r5, [sp, #4]
    402e:	1b12      	subs	r2, r2, r4
    4030:	41ab      	sbcs	r3, r5
    4032:	465c      	mov	r4, fp
    4034:	464d      	mov	r5, r9
    4036:	432c      	orrs	r4, r5
    4038:	46a3      	mov	fp, r4
    403a:	9c03      	ldr	r4, [sp, #12]
    403c:	4645      	mov	r5, r8
    403e:	432c      	orrs	r4, r5
    4040:	9403      	str	r4, [sp, #12]
    4042:	3901      	subs	r1, #1
    4044:	d325      	bcc.n	4092 <long_division+0xa6>
    4046:	2420      	movs	r4, #32
    4048:	4264      	negs	r4, r4
    404a:	190c      	adds	r4, r1, r4
    404c:	d4e7      	bmi.n	401e <long_division+0x32>
    404e:	0005      	movs	r5, r0
    4050:	40a5      	lsls	r5, r4
    4052:	46a8      	mov	r8, r5
    4054:	0004      	movs	r4, r0
    4056:	408c      	lsls	r4, r1
    4058:	46a1      	mov	r9, r4
    405a:	1892      	adds	r2, r2, r2
    405c:	415b      	adcs	r3, r3
    405e:	0014      	movs	r4, r2
    4060:	001d      	movs	r5, r3
    4062:	9e05      	ldr	r6, [sp, #20]
    4064:	464f      	mov	r7, r9
    4066:	403e      	ands	r6, r7
    4068:	46b4      	mov	ip, r6
    406a:	9e04      	ldr	r6, [sp, #16]
    406c:	4647      	mov	r7, r8
    406e:	403e      	ands	r6, r7
    4070:	46b2      	mov	sl, r6
    4072:	4666      	mov	r6, ip
    4074:	4657      	mov	r7, sl
    4076:	433e      	orrs	r6, r7
    4078:	d003      	beq.n	4082 <long_division+0x96>
    407a:	0006      	movs	r6, r0
    407c:	4326      	orrs	r6, r4
    407e:	0032      	movs	r2, r6
    4080:	002b      	movs	r3, r5
    4082:	9c00      	ldr	r4, [sp, #0]
    4084:	9d01      	ldr	r5, [sp, #4]
    4086:	429d      	cmp	r5, r3
    4088:	d8db      	bhi.n	4042 <long_division+0x56>
    408a:	d1ce      	bne.n	402a <long_division+0x3e>
    408c:	4294      	cmp	r4, r2
    408e:	d8d8      	bhi.n	4042 <long_division+0x56>
    4090:	e7cb      	b.n	402a <long_division+0x3e>
    4092:	9b03      	ldr	r3, [sp, #12]
    4094:	4658      	mov	r0, fp
    4096:	0019      	movs	r1, r3
    4098:	b007      	add	sp, #28
    409a:	bc3c      	pop	{r2, r3, r4, r5}
    409c:	4690      	mov	r8, r2
    409e:	4699      	mov	r9, r3
    40a0:	46a2      	mov	sl, r4
    40a2:	46ab      	mov	fp, r5
    40a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000040a6 <_sercom_get_sync_baud_val>:
    40a6:	b510      	push	{r4, lr}
    40a8:	0849      	lsrs	r1, r1, #1
    40aa:	2340      	movs	r3, #64	; 0x40
    40ac:	2400      	movs	r4, #0
    40ae:	4281      	cmp	r1, r0
    40b0:	d202      	bcs.n	40b8 <_sercom_get_sync_baud_val+0x12>
    40b2:	0018      	movs	r0, r3
    40b4:	bd10      	pop	{r4, pc}
    40b6:	001c      	movs	r4, r3
    40b8:	1a09      	subs	r1, r1, r0
    40ba:	1c63      	adds	r3, r4, #1
    40bc:	b29b      	uxth	r3, r3
    40be:	4288      	cmp	r0, r1
    40c0:	d9f9      	bls.n	40b6 <_sercom_get_sync_baud_val+0x10>
    40c2:	2340      	movs	r3, #64	; 0x40
    40c4:	2cff      	cmp	r4, #255	; 0xff
    40c6:	d8f4      	bhi.n	40b2 <_sercom_get_sync_baud_val+0xc>
    40c8:	8014      	strh	r4, [r2, #0]
    40ca:	2300      	movs	r3, #0
    40cc:	e7f1      	b.n	40b2 <_sercom_get_sync_baud_val+0xc>
	...

000040d0 <_sercom_get_async_baud_val>:
    40d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    40d2:	b083      	sub	sp, #12
    40d4:	000f      	movs	r7, r1
    40d6:	0016      	movs	r6, r2
    40d8:	aa08      	add	r2, sp, #32
    40da:	7811      	ldrb	r1, [r2, #0]
    40dc:	0004      	movs	r4, r0
    40de:	434c      	muls	r4, r1
    40e0:	2240      	movs	r2, #64	; 0x40
    40e2:	42bc      	cmp	r4, r7
    40e4:	d902      	bls.n	40ec <_sercom_get_async_baud_val+0x1c>
    40e6:	0010      	movs	r0, r2
    40e8:	b003      	add	sp, #12
    40ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    40ec:	2b00      	cmp	r3, #0
    40ee:	d114      	bne.n	411a <_sercom_get_async_baud_val+0x4a>
    40f0:	0002      	movs	r2, r0
    40f2:	0008      	movs	r0, r1
    40f4:	2100      	movs	r1, #0
    40f6:	4c19      	ldr	r4, [pc, #100]	; (415c <_sercom_get_async_baud_val+0x8c>)
    40f8:	47a0      	blx	r4
    40fa:	0001      	movs	r1, r0
    40fc:	003a      	movs	r2, r7
    40fe:	2300      	movs	r3, #0
    4100:	2000      	movs	r0, #0
    4102:	4c17      	ldr	r4, [pc, #92]	; (4160 <_sercom_get_async_baud_val+0x90>)
    4104:	47a0      	blx	r4
    4106:	2200      	movs	r2, #0
    4108:	2301      	movs	r3, #1
    410a:	1a12      	subs	r2, r2, r0
    410c:	418b      	sbcs	r3, r1
    410e:	0c12      	lsrs	r2, r2, #16
    4110:	041b      	lsls	r3, r3, #16
    4112:	431a      	orrs	r2, r3
    4114:	8032      	strh	r2, [r6, #0]
    4116:	2200      	movs	r2, #0
    4118:	e7e5      	b.n	40e6 <_sercom_get_async_baud_val+0x16>
    411a:	2200      	movs	r2, #0
    411c:	2b01      	cmp	r3, #1
    411e:	d1f9      	bne.n	4114 <_sercom_get_async_baud_val+0x44>
    4120:	000a      	movs	r2, r1
    4122:	2300      	movs	r3, #0
    4124:	2100      	movs	r1, #0
    4126:	4c0d      	ldr	r4, [pc, #52]	; (415c <_sercom_get_async_baud_val+0x8c>)
    4128:	47a0      	blx	r4
    412a:	0002      	movs	r2, r0
    412c:	000b      	movs	r3, r1
    412e:	9200      	str	r2, [sp, #0]
    4130:	9301      	str	r3, [sp, #4]
    4132:	0038      	movs	r0, r7
    4134:	2100      	movs	r1, #0
    4136:	4c0a      	ldr	r4, [pc, #40]	; (4160 <_sercom_get_async_baud_val+0x90>)
    4138:	47a0      	blx	r4
    413a:	0005      	movs	r5, r0
    413c:	2380      	movs	r3, #128	; 0x80
    413e:	019b      	lsls	r3, r3, #6
    4140:	2240      	movs	r2, #64	; 0x40
    4142:	4298      	cmp	r0, r3
    4144:	d8cf      	bhi.n	40e6 <_sercom_get_async_baud_val+0x16>
    4146:	0f79      	lsrs	r1, r7, #29
    4148:	00f8      	lsls	r0, r7, #3
    414a:	9a00      	ldr	r2, [sp, #0]
    414c:	9b01      	ldr	r3, [sp, #4]
    414e:	47a0      	blx	r4
    4150:	00ea      	lsls	r2, r5, #3
    4152:	1a82      	subs	r2, r0, r2
    4154:	b2d2      	uxtb	r2, r2
    4156:	0352      	lsls	r2, r2, #13
    4158:	432a      	orrs	r2, r5
    415a:	e7db      	b.n	4114 <_sercom_get_async_baud_val+0x44>
    415c:	000054d9 	.word	0x000054d9
    4160:	00003fed 	.word	0x00003fed

00004164 <sercom_set_gclk_generator>:
    4164:	b510      	push	{r4, lr}
    4166:	b082      	sub	sp, #8
    4168:	0004      	movs	r4, r0
    416a:	4b0e      	ldr	r3, [pc, #56]	; (41a4 <sercom_set_gclk_generator+0x40>)
    416c:	781b      	ldrb	r3, [r3, #0]
    416e:	2b00      	cmp	r3, #0
    4170:	d007      	beq.n	4182 <sercom_set_gclk_generator+0x1e>
    4172:	2900      	cmp	r1, #0
    4174:	d105      	bne.n	4182 <sercom_set_gclk_generator+0x1e>
    4176:	4b0b      	ldr	r3, [pc, #44]	; (41a4 <sercom_set_gclk_generator+0x40>)
    4178:	785b      	ldrb	r3, [r3, #1]
    417a:	4283      	cmp	r3, r0
    417c:	d010      	beq.n	41a0 <sercom_set_gclk_generator+0x3c>
    417e:	201d      	movs	r0, #29
    4180:	e00c      	b.n	419c <sercom_set_gclk_generator+0x38>
    4182:	a901      	add	r1, sp, #4
    4184:	700c      	strb	r4, [r1, #0]
    4186:	200c      	movs	r0, #12
    4188:	4b07      	ldr	r3, [pc, #28]	; (41a8 <sercom_set_gclk_generator+0x44>)
    418a:	4798      	blx	r3
    418c:	200c      	movs	r0, #12
    418e:	4b07      	ldr	r3, [pc, #28]	; (41ac <sercom_set_gclk_generator+0x48>)
    4190:	4798      	blx	r3
    4192:	4b04      	ldr	r3, [pc, #16]	; (41a4 <sercom_set_gclk_generator+0x40>)
    4194:	705c      	strb	r4, [r3, #1]
    4196:	2201      	movs	r2, #1
    4198:	701a      	strb	r2, [r3, #0]
    419a:	2000      	movs	r0, #0
    419c:	b002      	add	sp, #8
    419e:	bd10      	pop	{r4, pc}
    41a0:	2000      	movs	r0, #0
    41a2:	e7fb      	b.n	419c <sercom_set_gclk_generator+0x38>
    41a4:	200001f8 	.word	0x200001f8
    41a8:	00004ca1 	.word	0x00004ca1
    41ac:	00004c15 	.word	0x00004c15

000041b0 <_sercom_get_default_pad>:
    41b0:	4b40      	ldr	r3, [pc, #256]	; (42b4 <_sercom_get_default_pad+0x104>)
    41b2:	4298      	cmp	r0, r3
    41b4:	d031      	beq.n	421a <_sercom_get_default_pad+0x6a>
    41b6:	d90a      	bls.n	41ce <_sercom_get_default_pad+0x1e>
    41b8:	4b3f      	ldr	r3, [pc, #252]	; (42b8 <_sercom_get_default_pad+0x108>)
    41ba:	4298      	cmp	r0, r3
    41bc:	d04d      	beq.n	425a <_sercom_get_default_pad+0xaa>
    41be:	4b3f      	ldr	r3, [pc, #252]	; (42bc <_sercom_get_default_pad+0x10c>)
    41c0:	4298      	cmp	r0, r3
    41c2:	d05a      	beq.n	427a <_sercom_get_default_pad+0xca>
    41c4:	4b3e      	ldr	r3, [pc, #248]	; (42c0 <_sercom_get_default_pad+0x110>)
    41c6:	4298      	cmp	r0, r3
    41c8:	d037      	beq.n	423a <_sercom_get_default_pad+0x8a>
    41ca:	2000      	movs	r0, #0
    41cc:	4770      	bx	lr
    41ce:	4b3d      	ldr	r3, [pc, #244]	; (42c4 <_sercom_get_default_pad+0x114>)
    41d0:	4298      	cmp	r0, r3
    41d2:	d00c      	beq.n	41ee <_sercom_get_default_pad+0x3e>
    41d4:	4b3c      	ldr	r3, [pc, #240]	; (42c8 <_sercom_get_default_pad+0x118>)
    41d6:	4298      	cmp	r0, r3
    41d8:	d1f7      	bne.n	41ca <_sercom_get_default_pad+0x1a>
    41da:	2901      	cmp	r1, #1
    41dc:	d017      	beq.n	420e <_sercom_get_default_pad+0x5e>
    41de:	2900      	cmp	r1, #0
    41e0:	d05d      	beq.n	429e <_sercom_get_default_pad+0xee>
    41e2:	2902      	cmp	r1, #2
    41e4:	d015      	beq.n	4212 <_sercom_get_default_pad+0x62>
    41e6:	2903      	cmp	r1, #3
    41e8:	d015      	beq.n	4216 <_sercom_get_default_pad+0x66>
    41ea:	2000      	movs	r0, #0
    41ec:	e7ee      	b.n	41cc <_sercom_get_default_pad+0x1c>
    41ee:	2901      	cmp	r1, #1
    41f0:	d007      	beq.n	4202 <_sercom_get_default_pad+0x52>
    41f2:	2900      	cmp	r1, #0
    41f4:	d051      	beq.n	429a <_sercom_get_default_pad+0xea>
    41f6:	2902      	cmp	r1, #2
    41f8:	d005      	beq.n	4206 <_sercom_get_default_pad+0x56>
    41fa:	2903      	cmp	r1, #3
    41fc:	d005      	beq.n	420a <_sercom_get_default_pad+0x5a>
    41fe:	2000      	movs	r0, #0
    4200:	e7e4      	b.n	41cc <_sercom_get_default_pad+0x1c>
    4202:	4832      	ldr	r0, [pc, #200]	; (42cc <_sercom_get_default_pad+0x11c>)
    4204:	e7e2      	b.n	41cc <_sercom_get_default_pad+0x1c>
    4206:	4832      	ldr	r0, [pc, #200]	; (42d0 <_sercom_get_default_pad+0x120>)
    4208:	e7e0      	b.n	41cc <_sercom_get_default_pad+0x1c>
    420a:	4832      	ldr	r0, [pc, #200]	; (42d4 <_sercom_get_default_pad+0x124>)
    420c:	e7de      	b.n	41cc <_sercom_get_default_pad+0x1c>
    420e:	4832      	ldr	r0, [pc, #200]	; (42d8 <_sercom_get_default_pad+0x128>)
    4210:	e7dc      	b.n	41cc <_sercom_get_default_pad+0x1c>
    4212:	4832      	ldr	r0, [pc, #200]	; (42dc <_sercom_get_default_pad+0x12c>)
    4214:	e7da      	b.n	41cc <_sercom_get_default_pad+0x1c>
    4216:	4832      	ldr	r0, [pc, #200]	; (42e0 <_sercom_get_default_pad+0x130>)
    4218:	e7d8      	b.n	41cc <_sercom_get_default_pad+0x1c>
    421a:	2901      	cmp	r1, #1
    421c:	d007      	beq.n	422e <_sercom_get_default_pad+0x7e>
    421e:	2900      	cmp	r1, #0
    4220:	d03f      	beq.n	42a2 <_sercom_get_default_pad+0xf2>
    4222:	2902      	cmp	r1, #2
    4224:	d005      	beq.n	4232 <_sercom_get_default_pad+0x82>
    4226:	2903      	cmp	r1, #3
    4228:	d005      	beq.n	4236 <_sercom_get_default_pad+0x86>
    422a:	2000      	movs	r0, #0
    422c:	e7ce      	b.n	41cc <_sercom_get_default_pad+0x1c>
    422e:	482d      	ldr	r0, [pc, #180]	; (42e4 <_sercom_get_default_pad+0x134>)
    4230:	e7cc      	b.n	41cc <_sercom_get_default_pad+0x1c>
    4232:	482d      	ldr	r0, [pc, #180]	; (42e8 <_sercom_get_default_pad+0x138>)
    4234:	e7ca      	b.n	41cc <_sercom_get_default_pad+0x1c>
    4236:	482d      	ldr	r0, [pc, #180]	; (42ec <_sercom_get_default_pad+0x13c>)
    4238:	e7c8      	b.n	41cc <_sercom_get_default_pad+0x1c>
    423a:	2901      	cmp	r1, #1
    423c:	d007      	beq.n	424e <_sercom_get_default_pad+0x9e>
    423e:	2900      	cmp	r1, #0
    4240:	d031      	beq.n	42a6 <_sercom_get_default_pad+0xf6>
    4242:	2902      	cmp	r1, #2
    4244:	d005      	beq.n	4252 <_sercom_get_default_pad+0xa2>
    4246:	2903      	cmp	r1, #3
    4248:	d005      	beq.n	4256 <_sercom_get_default_pad+0xa6>
    424a:	2000      	movs	r0, #0
    424c:	e7be      	b.n	41cc <_sercom_get_default_pad+0x1c>
    424e:	4828      	ldr	r0, [pc, #160]	; (42f0 <_sercom_get_default_pad+0x140>)
    4250:	e7bc      	b.n	41cc <_sercom_get_default_pad+0x1c>
    4252:	4828      	ldr	r0, [pc, #160]	; (42f4 <_sercom_get_default_pad+0x144>)
    4254:	e7ba      	b.n	41cc <_sercom_get_default_pad+0x1c>
    4256:	4828      	ldr	r0, [pc, #160]	; (42f8 <_sercom_get_default_pad+0x148>)
    4258:	e7b8      	b.n	41cc <_sercom_get_default_pad+0x1c>
    425a:	2901      	cmp	r1, #1
    425c:	d007      	beq.n	426e <_sercom_get_default_pad+0xbe>
    425e:	2900      	cmp	r1, #0
    4260:	d023      	beq.n	42aa <_sercom_get_default_pad+0xfa>
    4262:	2902      	cmp	r1, #2
    4264:	d005      	beq.n	4272 <_sercom_get_default_pad+0xc2>
    4266:	2903      	cmp	r1, #3
    4268:	d005      	beq.n	4276 <_sercom_get_default_pad+0xc6>
    426a:	2000      	movs	r0, #0
    426c:	e7ae      	b.n	41cc <_sercom_get_default_pad+0x1c>
    426e:	4823      	ldr	r0, [pc, #140]	; (42fc <_sercom_get_default_pad+0x14c>)
    4270:	e7ac      	b.n	41cc <_sercom_get_default_pad+0x1c>
    4272:	4823      	ldr	r0, [pc, #140]	; (4300 <_sercom_get_default_pad+0x150>)
    4274:	e7aa      	b.n	41cc <_sercom_get_default_pad+0x1c>
    4276:	4823      	ldr	r0, [pc, #140]	; (4304 <_sercom_get_default_pad+0x154>)
    4278:	e7a8      	b.n	41cc <_sercom_get_default_pad+0x1c>
    427a:	2901      	cmp	r1, #1
    427c:	d007      	beq.n	428e <_sercom_get_default_pad+0xde>
    427e:	2900      	cmp	r1, #0
    4280:	d015      	beq.n	42ae <_sercom_get_default_pad+0xfe>
    4282:	2902      	cmp	r1, #2
    4284:	d005      	beq.n	4292 <_sercom_get_default_pad+0xe2>
    4286:	2903      	cmp	r1, #3
    4288:	d005      	beq.n	4296 <_sercom_get_default_pad+0xe6>
    428a:	2000      	movs	r0, #0
    428c:	e79e      	b.n	41cc <_sercom_get_default_pad+0x1c>
    428e:	481e      	ldr	r0, [pc, #120]	; (4308 <_sercom_get_default_pad+0x158>)
    4290:	e79c      	b.n	41cc <_sercom_get_default_pad+0x1c>
    4292:	481e      	ldr	r0, [pc, #120]	; (430c <_sercom_get_default_pad+0x15c>)
    4294:	e79a      	b.n	41cc <_sercom_get_default_pad+0x1c>
    4296:	481e      	ldr	r0, [pc, #120]	; (4310 <_sercom_get_default_pad+0x160>)
    4298:	e798      	b.n	41cc <_sercom_get_default_pad+0x1c>
    429a:	481e      	ldr	r0, [pc, #120]	; (4314 <_sercom_get_default_pad+0x164>)
    429c:	e796      	b.n	41cc <_sercom_get_default_pad+0x1c>
    429e:	2003      	movs	r0, #3
    42a0:	e794      	b.n	41cc <_sercom_get_default_pad+0x1c>
    42a2:	481d      	ldr	r0, [pc, #116]	; (4318 <_sercom_get_default_pad+0x168>)
    42a4:	e792      	b.n	41cc <_sercom_get_default_pad+0x1c>
    42a6:	481d      	ldr	r0, [pc, #116]	; (431c <_sercom_get_default_pad+0x16c>)
    42a8:	e790      	b.n	41cc <_sercom_get_default_pad+0x1c>
    42aa:	481d      	ldr	r0, [pc, #116]	; (4320 <_sercom_get_default_pad+0x170>)
    42ac:	e78e      	b.n	41cc <_sercom_get_default_pad+0x1c>
    42ae:	481d      	ldr	r0, [pc, #116]	; (4324 <_sercom_get_default_pad+0x174>)
    42b0:	e78c      	b.n	41cc <_sercom_get_default_pad+0x1c>
    42b2:	46c0      	nop			; (mov r8, r8)
    42b4:	42001000 	.word	0x42001000
    42b8:	42001800 	.word	0x42001800
    42bc:	42001c00 	.word	0x42001c00
    42c0:	42001400 	.word	0x42001400
    42c4:	42000800 	.word	0x42000800
    42c8:	42000c00 	.word	0x42000c00
    42cc:	00050003 	.word	0x00050003
    42d0:	00060003 	.word	0x00060003
    42d4:	00070003 	.word	0x00070003
    42d8:	00010003 	.word	0x00010003
    42dc:	001e0003 	.word	0x001e0003
    42e0:	001f0003 	.word	0x001f0003
    42e4:	00090003 	.word	0x00090003
    42e8:	000a0003 	.word	0x000a0003
    42ec:	000b0003 	.word	0x000b0003
    42f0:	00110003 	.word	0x00110003
    42f4:	00120003 	.word	0x00120003
    42f8:	00130003 	.word	0x00130003
    42fc:	000d0003 	.word	0x000d0003
    4300:	000e0003 	.word	0x000e0003
    4304:	000f0003 	.word	0x000f0003
    4308:	00170003 	.word	0x00170003
    430c:	00180003 	.word	0x00180003
    4310:	00190003 	.word	0x00190003
    4314:	00040003 	.word	0x00040003
    4318:	00080003 	.word	0x00080003
    431c:	00100003 	.word	0x00100003
    4320:	000c0003 	.word	0x000c0003
    4324:	00160003 	.word	0x00160003

00004328 <_sercom_get_sercom_inst_index>:
    4328:	b530      	push	{r4, r5, lr}
    432a:	b087      	sub	sp, #28
    432c:	4b0b      	ldr	r3, [pc, #44]	; (435c <_sercom_get_sercom_inst_index+0x34>)
    432e:	466a      	mov	r2, sp
    4330:	cb32      	ldmia	r3!, {r1, r4, r5}
    4332:	c232      	stmia	r2!, {r1, r4, r5}
    4334:	cb32      	ldmia	r3!, {r1, r4, r5}
    4336:	c232      	stmia	r2!, {r1, r4, r5}
    4338:	9b00      	ldr	r3, [sp, #0]
    433a:	4283      	cmp	r3, r0
    433c:	d00b      	beq.n	4356 <_sercom_get_sercom_inst_index+0x2e>
    433e:	2301      	movs	r3, #1
    4340:	009a      	lsls	r2, r3, #2
    4342:	4669      	mov	r1, sp
    4344:	5852      	ldr	r2, [r2, r1]
    4346:	4282      	cmp	r2, r0
    4348:	d006      	beq.n	4358 <_sercom_get_sercom_inst_index+0x30>
    434a:	3301      	adds	r3, #1
    434c:	2b06      	cmp	r3, #6
    434e:	d1f7      	bne.n	4340 <_sercom_get_sercom_inst_index+0x18>
    4350:	2000      	movs	r0, #0
    4352:	b007      	add	sp, #28
    4354:	bd30      	pop	{r4, r5, pc}
    4356:	2300      	movs	r3, #0
    4358:	b2d8      	uxtb	r0, r3
    435a:	e7fa      	b.n	4352 <_sercom_get_sercom_inst_index+0x2a>
    435c:	000058c4 	.word	0x000058c4

00004360 <_sercom_default_handler>:
    4360:	4770      	bx	lr
	...

00004364 <_sercom_set_handler>:
    4364:	b5f0      	push	{r4, r5, r6, r7, lr}
    4366:	4b0a      	ldr	r3, [pc, #40]	; (4390 <_sercom_set_handler+0x2c>)
    4368:	781b      	ldrb	r3, [r3, #0]
    436a:	2b00      	cmp	r3, #0
    436c:	d10c      	bne.n	4388 <_sercom_set_handler+0x24>
    436e:	4f09      	ldr	r7, [pc, #36]	; (4394 <_sercom_set_handler+0x30>)
    4370:	4e09      	ldr	r6, [pc, #36]	; (4398 <_sercom_set_handler+0x34>)
    4372:	4d0a      	ldr	r5, [pc, #40]	; (439c <_sercom_set_handler+0x38>)
    4374:	2400      	movs	r4, #0
    4376:	51de      	str	r6, [r3, r7]
    4378:	195a      	adds	r2, r3, r5
    437a:	6014      	str	r4, [r2, #0]
    437c:	3304      	adds	r3, #4
    437e:	2b18      	cmp	r3, #24
    4380:	d1f9      	bne.n	4376 <_sercom_set_handler+0x12>
    4382:	2201      	movs	r2, #1
    4384:	4b02      	ldr	r3, [pc, #8]	; (4390 <_sercom_set_handler+0x2c>)
    4386:	701a      	strb	r2, [r3, #0]
    4388:	0080      	lsls	r0, r0, #2
    438a:	4b02      	ldr	r3, [pc, #8]	; (4394 <_sercom_set_handler+0x30>)
    438c:	50c1      	str	r1, [r0, r3]
    438e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4390:	200001fa 	.word	0x200001fa
    4394:	200001fc 	.word	0x200001fc
    4398:	00004361 	.word	0x00004361
    439c:	200035e4 	.word	0x200035e4

000043a0 <_sercom_get_interrupt_vector>:
    43a0:	b500      	push	{lr}
    43a2:	b083      	sub	sp, #12
    43a4:	2307      	movs	r3, #7
    43a6:	466a      	mov	r2, sp
    43a8:	7013      	strb	r3, [r2, #0]
    43aa:	3301      	adds	r3, #1
    43ac:	7053      	strb	r3, [r2, #1]
    43ae:	3301      	adds	r3, #1
    43b0:	7093      	strb	r3, [r2, #2]
    43b2:	3301      	adds	r3, #1
    43b4:	70d3      	strb	r3, [r2, #3]
    43b6:	3301      	adds	r3, #1
    43b8:	7113      	strb	r3, [r2, #4]
    43ba:	3301      	adds	r3, #1
    43bc:	7153      	strb	r3, [r2, #5]
    43be:	4b03      	ldr	r3, [pc, #12]	; (43cc <_sercom_get_interrupt_vector+0x2c>)
    43c0:	4798      	blx	r3
    43c2:	466b      	mov	r3, sp
    43c4:	5618      	ldrsb	r0, [r3, r0]
    43c6:	b003      	add	sp, #12
    43c8:	bd00      	pop	{pc}
    43ca:	46c0      	nop			; (mov r8, r8)
    43cc:	00004329 	.word	0x00004329

000043d0 <SERCOM0_Handler>:
    43d0:	b510      	push	{r4, lr}
    43d2:	4b02      	ldr	r3, [pc, #8]	; (43dc <SERCOM0_Handler+0xc>)
    43d4:	681b      	ldr	r3, [r3, #0]
    43d6:	2000      	movs	r0, #0
    43d8:	4798      	blx	r3
    43da:	bd10      	pop	{r4, pc}
    43dc:	200001fc 	.word	0x200001fc

000043e0 <SERCOM1_Handler>:
    43e0:	b510      	push	{r4, lr}
    43e2:	4b02      	ldr	r3, [pc, #8]	; (43ec <SERCOM1_Handler+0xc>)
    43e4:	685b      	ldr	r3, [r3, #4]
    43e6:	2001      	movs	r0, #1
    43e8:	4798      	blx	r3
    43ea:	bd10      	pop	{r4, pc}
    43ec:	200001fc 	.word	0x200001fc

000043f0 <SERCOM2_Handler>:
    43f0:	b510      	push	{r4, lr}
    43f2:	4b02      	ldr	r3, [pc, #8]	; (43fc <SERCOM2_Handler+0xc>)
    43f4:	689b      	ldr	r3, [r3, #8]
    43f6:	2002      	movs	r0, #2
    43f8:	4798      	blx	r3
    43fa:	bd10      	pop	{r4, pc}
    43fc:	200001fc 	.word	0x200001fc

00004400 <SERCOM3_Handler>:
    4400:	b510      	push	{r4, lr}
    4402:	4b02      	ldr	r3, [pc, #8]	; (440c <SERCOM3_Handler+0xc>)
    4404:	68db      	ldr	r3, [r3, #12]
    4406:	2003      	movs	r0, #3
    4408:	4798      	blx	r3
    440a:	bd10      	pop	{r4, pc}
    440c:	200001fc 	.word	0x200001fc

00004410 <SERCOM4_Handler>:
    4410:	b510      	push	{r4, lr}
    4412:	4b02      	ldr	r3, [pc, #8]	; (441c <SERCOM4_Handler+0xc>)
    4414:	691b      	ldr	r3, [r3, #16]
    4416:	2004      	movs	r0, #4
    4418:	4798      	blx	r3
    441a:	bd10      	pop	{r4, pc}
    441c:	200001fc 	.word	0x200001fc

00004420 <SERCOM5_Handler>:
    4420:	b510      	push	{r4, lr}
    4422:	4b02      	ldr	r3, [pc, #8]	; (442c <SERCOM5_Handler+0xc>)
    4424:	695b      	ldr	r3, [r3, #20]
    4426:	2005      	movs	r0, #5
    4428:	4798      	blx	r3
    442a:	bd10      	pop	{r4, pc}
    442c:	200001fc 	.word	0x200001fc

00004430 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    4430:	b5f0      	push	{r4, r5, r6, r7, lr}
    4432:	46de      	mov	lr, fp
    4434:	4657      	mov	r7, sl
    4436:	464e      	mov	r6, r9
    4438:	4645      	mov	r5, r8
    443a:	b5e0      	push	{r5, r6, r7, lr}
    443c:	b08d      	sub	sp, #52	; 0x34
    443e:	0005      	movs	r5, r0
    4440:	000c      	movs	r4, r1
    4442:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    4444:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4446:	0008      	movs	r0, r1
    4448:	4b80      	ldr	r3, [pc, #512]	; (464c <usart_init+0x21c>)
    444a:	4798      	blx	r3
    444c:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    444e:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    4450:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    4452:	07db      	lsls	r3, r3, #31
    4454:	d506      	bpl.n	4464 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    4456:	b00d      	add	sp, #52	; 0x34
    4458:	bc3c      	pop	{r2, r3, r4, r5}
    445a:	4690      	mov	r8, r2
    445c:	4699      	mov	r9, r3
    445e:	46a2      	mov	sl, r4
    4460:	46ab      	mov	fp, r5
    4462:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    4464:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    4466:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    4468:	079b      	lsls	r3, r3, #30
    446a:	d4f4      	bmi.n	4456 <usart_init+0x26>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    446c:	4978      	ldr	r1, [pc, #480]	; (4650 <usart_init+0x220>)
    446e:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    4470:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4472:	2301      	movs	r3, #1
    4474:	40bb      	lsls	r3, r7
    4476:	4303      	orrs	r3, r0
    4478:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    447a:	a90b      	add	r1, sp, #44	; 0x2c
    447c:	7f73      	ldrb	r3, [r6, #29]
    447e:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4480:	320d      	adds	r2, #13
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4482:	b2d7      	uxtb	r7, r2
    4484:	0038      	movs	r0, r7
    4486:	4b73      	ldr	r3, [pc, #460]	; (4654 <usart_init+0x224>)
    4488:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    448a:	0038      	movs	r0, r7
    448c:	4b72      	ldr	r3, [pc, #456]	; (4658 <usart_init+0x228>)
    448e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4490:	7f70      	ldrb	r0, [r6, #29]
    4492:	2100      	movs	r1, #0
    4494:	4b71      	ldr	r3, [pc, #452]	; (465c <usart_init+0x22c>)
    4496:	4798      	blx	r3
	module->character_size = config->character_size;
    4498:	7af3      	ldrb	r3, [r6, #11]
    449a:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    449c:	7d33      	ldrb	r3, [r6, #20]
    449e:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    44a0:	7d73      	ldrb	r3, [r6, #21]
    44a2:	71eb      	strb	r3, [r5, #7]
	SercomUsart *const usart_hw = &(module->hw->USART);
    44a4:	682b      	ldr	r3, [r5, #0]
    44a6:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    44a8:	0018      	movs	r0, r3
    44aa:	4b68      	ldr	r3, [pc, #416]	; (464c <usart_init+0x21c>)
    44ac:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    44ae:	300d      	adds	r0, #13
	uint16_t baud  = 0;
    44b0:	2200      	movs	r2, #0
    44b2:	230e      	movs	r3, #14
    44b4:	a902      	add	r1, sp, #8
    44b6:	468c      	mov	ip, r1
    44b8:	4463      	add	r3, ip
    44ba:	801a      	strh	r2, [r3, #0]
	ctrla = (uint32_t)config->data_order |
    44bc:	6833      	ldr	r3, [r6, #0]
    44be:	9303      	str	r3, [sp, #12]
		(uint32_t)config->mux_setting |
    44c0:	68f3      	ldr	r3, [r6, #12]
    44c2:	469a      	mov	sl, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    44c4:	7db3      	ldrb	r3, [r6, #22]
    44c6:	469b      	mov	fp, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    44c8:	6873      	ldr	r3, [r6, #4]
    44ca:	4699      	mov	r9, r3
	switch (transfer_mode)
    44cc:	2b00      	cmp	r3, #0
    44ce:	d014      	beq.n	44fa <usart_init+0xca>
    44d0:	2380      	movs	r3, #128	; 0x80
    44d2:	055b      	lsls	r3, r3, #21
    44d4:	4599      	cmp	r9, r3
    44d6:	d130      	bne.n	453a <usart_init+0x10a>
			if (!config->use_external_clock) {
    44d8:	7df3      	ldrb	r3, [r6, #23]
    44da:	2b00      	cmp	r3, #0
    44dc:	d131      	bne.n	4542 <usart_init+0x112>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    44de:	6933      	ldr	r3, [r6, #16]
    44e0:	001f      	movs	r7, r3
    44e2:	b2c0      	uxtb	r0, r0
    44e4:	4b5e      	ldr	r3, [pc, #376]	; (4660 <usart_init+0x230>)
    44e6:	4798      	blx	r3
    44e8:	0001      	movs	r1, r0
    44ea:	220e      	movs	r2, #14
    44ec:	ab02      	add	r3, sp, #8
    44ee:	469c      	mov	ip, r3
    44f0:	4462      	add	r2, ip
    44f2:	0038      	movs	r0, r7
    44f4:	4b5b      	ldr	r3, [pc, #364]	; (4664 <usart_init+0x234>)
    44f6:	4798      	blx	r3
    44f8:	e020      	b.n	453c <usart_init+0x10c>
			if (config->use_external_clock) {
    44fa:	7df3      	ldrb	r3, [r6, #23]
    44fc:	2b00      	cmp	r3, #0
    44fe:	d00b      	beq.n	4518 <usart_init+0xe8>
				status_code =
    4500:	2310      	movs	r3, #16
    4502:	9300      	str	r3, [sp, #0]
    4504:	2300      	movs	r3, #0
    4506:	220e      	movs	r2, #14
    4508:	a902      	add	r1, sp, #8
    450a:	468c      	mov	ip, r1
    450c:	4462      	add	r2, ip
    450e:	69b1      	ldr	r1, [r6, #24]
    4510:	6930      	ldr	r0, [r6, #16]
    4512:	4f55      	ldr	r7, [pc, #340]	; (4668 <usart_init+0x238>)
    4514:	47b8      	blx	r7
    4516:	e011      	b.n	453c <usart_init+0x10c>
						_sercom_get_async_baud_val(config->baudrate,
    4518:	6933      	ldr	r3, [r6, #16]
    451a:	001f      	movs	r7, r3
    451c:	b2c0      	uxtb	r0, r0
    451e:	4b50      	ldr	r3, [pc, #320]	; (4660 <usart_init+0x230>)
    4520:	4798      	blx	r3
    4522:	0001      	movs	r1, r0
				status_code =
    4524:	2310      	movs	r3, #16
    4526:	9300      	str	r3, [sp, #0]
    4528:	2300      	movs	r3, #0
    452a:	220e      	movs	r2, #14
    452c:	a802      	add	r0, sp, #8
    452e:	4684      	mov	ip, r0
    4530:	4462      	add	r2, ip
    4532:	0038      	movs	r0, r7
    4534:	4f4c      	ldr	r7, [pc, #304]	; (4668 <usart_init+0x238>)
    4536:	47b8      	blx	r7
    4538:	e000      	b.n	453c <usart_init+0x10c>
	enum status_code status_code = STATUS_OK;
    453a:	2000      	movs	r0, #0
	if (status_code != STATUS_OK) {
    453c:	2800      	cmp	r0, #0
    453e:	d000      	beq.n	4542 <usart_init+0x112>
    4540:	e789      	b.n	4456 <usart_init+0x26>
	SercomUsart *const usart_hw = &(module->hw->USART);
    4542:	682a      	ldr	r2, [r5, #0]
    4544:	9f03      	ldr	r7, [sp, #12]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    4546:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
    4548:	b21b      	sxth	r3, r3
    454a:	2b00      	cmp	r3, #0
    454c:	dbfb      	blt.n	4546 <usart_init+0x116>
	usart_hw->BAUD.reg = baud;
    454e:	230e      	movs	r3, #14
    4550:	aa02      	add	r2, sp, #8
    4552:	4694      	mov	ip, r2
    4554:	4463      	add	r3, ip
    4556:	881b      	ldrh	r3, [r3, #0]
    4558:	4642      	mov	r2, r8
    455a:	8153      	strh	r3, [r2, #10]
	ctrla |= transfer_mode;
    455c:	4653      	mov	r3, sl
    455e:	431f      	orrs	r7, r3
    4560:	464b      	mov	r3, r9
    4562:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    4564:	465b      	mov	r3, fp
    4566:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    4568:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    456a:	7df3      	ldrb	r3, [r6, #23]
    456c:	2b00      	cmp	r3, #0
    456e:	d101      	bne.n	4574 <usart_init+0x144>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    4570:	3304      	adds	r3, #4
    4572:	431f      	orrs	r7, r3
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4574:	7d31      	ldrb	r1, [r6, #20]
    4576:	0449      	lsls	r1, r1, #17
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    4578:	7d73      	ldrb	r3, [r6, #21]
    457a:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    457c:	430b      	orrs	r3, r1
	ctrlb |= (uint32_t)config->character_size;
    457e:	7ab1      	ldrb	r1, [r6, #10]
    4580:	7af2      	ldrb	r2, [r6, #11]
    4582:	4311      	orrs	r1, r2
    4584:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    4586:	8933      	ldrh	r3, [r6, #8]
    4588:	2bff      	cmp	r3, #255	; 0xff
    458a:	d003      	beq.n	4594 <usart_init+0x164>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    458c:	2280      	movs	r2, #128	; 0x80
    458e:	0452      	lsls	r2, r2, #17
    4590:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    4592:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    4594:	7f33      	ldrb	r3, [r6, #28]
    4596:	2b00      	cmp	r3, #0
    4598:	d103      	bne.n	45a2 <usart_init+0x172>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    459a:	4b34      	ldr	r3, [pc, #208]	; (466c <usart_init+0x23c>)
    459c:	789b      	ldrb	r3, [r3, #2]
    459e:	079b      	lsls	r3, r3, #30
    45a0:	d501      	bpl.n	45a6 <usart_init+0x176>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    45a2:	2380      	movs	r3, #128	; 0x80
    45a4:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    45a6:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    45a8:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
    45aa:	b21b      	sxth	r3, r3
    45ac:	2b00      	cmp	r3, #0
    45ae:	dbfb      	blt.n	45a8 <usart_init+0x178>
	usart_hw->CTRLB.reg = ctrlb;
    45b0:	4643      	mov	r3, r8
    45b2:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    45b4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    45b6:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
    45b8:	b21b      	sxth	r3, r3
    45ba:	2b00      	cmp	r3, #0
    45bc:	dbfb      	blt.n	45b6 <usart_init+0x186>
	usart_hw->CTRLA.reg = ctrla;
    45be:	4643      	mov	r3, r8
    45c0:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    45c2:	ab0a      	add	r3, sp, #40	; 0x28
    45c4:	2280      	movs	r2, #128	; 0x80
    45c6:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    45c8:	2200      	movs	r2, #0
    45ca:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    45cc:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    45ce:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    45d0:	6a33      	ldr	r3, [r6, #32]
    45d2:	9306      	str	r3, [sp, #24]
    45d4:	6a73      	ldr	r3, [r6, #36]	; 0x24
    45d6:	9307      	str	r3, [sp, #28]
    45d8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    45da:	9308      	str	r3, [sp, #32]
    45dc:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    45de:	9303      	str	r3, [sp, #12]
    45e0:	9309      	str	r3, [sp, #36]	; 0x24
    45e2:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    45e4:	ae06      	add	r6, sp, #24
    45e6:	e006      	b.n	45f6 <usart_init+0x1c6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    45e8:	0020      	movs	r0, r4
    45ea:	4b21      	ldr	r3, [pc, #132]	; (4670 <usart_init+0x240>)
    45ec:	4798      	blx	r3
    45ee:	e007      	b.n	4600 <usart_init+0x1d0>
    45f0:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    45f2:	2f04      	cmp	r7, #4
    45f4:	d00d      	beq.n	4612 <usart_init+0x1e2>
    45f6:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    45f8:	00bb      	lsls	r3, r7, #2
    45fa:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    45fc:	2800      	cmp	r0, #0
    45fe:	d0f3      	beq.n	45e8 <usart_init+0x1b8>
		if (current_pinmux != PINMUX_UNUSED) {
    4600:	1c43      	adds	r3, r0, #1
    4602:	d0f5      	beq.n	45f0 <usart_init+0x1c0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    4604:	a90a      	add	r1, sp, #40	; 0x28
    4606:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    4608:	0c00      	lsrs	r0, r0, #16
    460a:	b2c0      	uxtb	r0, r0
    460c:	4b19      	ldr	r3, [pc, #100]	; (4674 <usart_init+0x244>)
    460e:	4798      	blx	r3
    4610:	e7ee      	b.n	45f0 <usart_init+0x1c0>
		module->callback[i]            = NULL;
    4612:	2300      	movs	r3, #0
    4614:	60ab      	str	r3, [r5, #8]
    4616:	60eb      	str	r3, [r5, #12]
    4618:	612b      	str	r3, [r5, #16]
	module->tx_buffer_ptr              = NULL;
    461a:	61ab      	str	r3, [r5, #24]
	module->rx_buffer_ptr              = NULL;
    461c:	616b      	str	r3, [r5, #20]
	module->remaining_tx_buffer_length = 0x0000;
    461e:	2200      	movs	r2, #0
    4620:	83eb      	strh	r3, [r5, #30]
	module->remaining_rx_buffer_length = 0x0000;
    4622:	83ab      	strh	r3, [r5, #28]
	module->callback_reg_mask          = 0x00;
    4624:	3320      	adds	r3, #32
    4626:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    4628:	3301      	adds	r3, #1
    462a:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    462c:	3301      	adds	r3, #1
    462e:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    4630:	3301      	adds	r3, #1
    4632:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    4634:	6828      	ldr	r0, [r5, #0]
    4636:	4b05      	ldr	r3, [pc, #20]	; (464c <usart_init+0x21c>)
    4638:	4798      	blx	r3
    463a:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    463c:	490e      	ldr	r1, [pc, #56]	; (4678 <usart_init+0x248>)
    463e:	4b0f      	ldr	r3, [pc, #60]	; (467c <usart_init+0x24c>)
    4640:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    4642:	00a4      	lsls	r4, r4, #2
    4644:	4b0e      	ldr	r3, [pc, #56]	; (4680 <usart_init+0x250>)
    4646:	50e5      	str	r5, [r4, r3]
	return status_code;
    4648:	2000      	movs	r0, #0
    464a:	e704      	b.n	4456 <usart_init+0x26>
    464c:	00004329 	.word	0x00004329
    4650:	40000400 	.word	0x40000400
    4654:	00004ca1 	.word	0x00004ca1
    4658:	00004c15 	.word	0x00004c15
    465c:	00004165 	.word	0x00004165
    4660:	00004ced 	.word	0x00004ced
    4664:	000040a7 	.word	0x000040a7
    4668:	000040d1 	.word	0x000040d1
    466c:	41002000 	.word	0x41002000
    4670:	000041b1 	.word	0x000041b1
    4674:	00004dc9 	.word	0x00004dc9
    4678:	00004729 	.word	0x00004729
    467c:	00004365 	.word	0x00004365
    4680:	200035e4 	.word	0x200035e4

00004684 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    4684:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    4686:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    4688:	2a00      	cmp	r2, #0
    468a:	d101      	bne.n	4690 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    468c:	0018      	movs	r0, r3
    468e:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    4690:	8bc2      	ldrh	r2, [r0, #30]
    4692:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    4694:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    4696:	2a00      	cmp	r2, #0
    4698:	d1f8      	bne.n	468c <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    469a:	6802      	ldr	r2, [r0, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    469c:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
    469e:	b21b      	sxth	r3, r3
    46a0:	2b00      	cmp	r3, #0
    46a2:	dbfb      	blt.n	469c <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    46a4:	8311      	strh	r1, [r2, #24]
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    46a6:	2102      	movs	r1, #2
    46a8:	7b93      	ldrb	r3, [r2, #14]
    46aa:	420b      	tst	r3, r1
    46ac:	d0fc      	beq.n	46a8 <usart_write_wait+0x24>
	return STATUS_OK;
    46ae:	2300      	movs	r3, #0
    46b0:	e7ec      	b.n	468c <usart_write_wait+0x8>
	...

000046b4 <_usart_read_buffer>:
    46b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    46b6:	0006      	movs	r6, r0
    46b8:	000c      	movs	r4, r1
    46ba:	0015      	movs	r5, r2
    46bc:	6807      	ldr	r7, [r0, #0]
    46be:	4b0a      	ldr	r3, [pc, #40]	; (46e8 <_usart_read_buffer+0x34>)
    46c0:	4798      	blx	r3
    46c2:	8bb3      	ldrh	r3, [r6, #28]
    46c4:	b29b      	uxth	r3, r3
    46c6:	2b00      	cmp	r3, #0
    46c8:	d003      	beq.n	46d2 <_usart_read_buffer+0x1e>
    46ca:	4b08      	ldr	r3, [pc, #32]	; (46ec <_usart_read_buffer+0x38>)
    46cc:	4798      	blx	r3
    46ce:	2005      	movs	r0, #5
    46d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    46d2:	83b5      	strh	r5, [r6, #28]
    46d4:	4b05      	ldr	r3, [pc, #20]	; (46ec <_usart_read_buffer+0x38>)
    46d6:	4798      	blx	r3
    46d8:	6174      	str	r4, [r6, #20]
    46da:	2205      	movs	r2, #5
    46dc:	2322      	movs	r3, #34	; 0x22
    46de:	54f2      	strb	r2, [r6, r3]
    46e0:	3b1e      	subs	r3, #30
    46e2:	737b      	strb	r3, [r7, #13]
    46e4:	2000      	movs	r0, #0
    46e6:	e7f3      	b.n	46d0 <_usart_read_buffer+0x1c>
    46e8:	00003eb9 	.word	0x00003eb9
    46ec:	00003ef9 	.word	0x00003ef9

000046f0 <usart_register_callback>:
    46f0:	1c93      	adds	r3, r2, #2
    46f2:	009b      	lsls	r3, r3, #2
    46f4:	5019      	str	r1, [r3, r0]
    46f6:	2120      	movs	r1, #32
    46f8:	2301      	movs	r3, #1
    46fa:	4093      	lsls	r3, r2
    46fc:	001a      	movs	r2, r3
    46fe:	5c43      	ldrb	r3, [r0, r1]
    4700:	4313      	orrs	r3, r2
    4702:	5443      	strb	r3, [r0, r1]
    4704:	4770      	bx	lr
	...

00004708 <usart_read_buffer_job>:
    4708:	b510      	push	{r4, lr}
    470a:	2317      	movs	r3, #23
    470c:	2a00      	cmp	r2, #0
    470e:	d101      	bne.n	4714 <usart_read_buffer_job+0xc>
    4710:	0018      	movs	r0, r3
    4712:	bd10      	pop	{r4, pc}
    4714:	7984      	ldrb	r4, [r0, #6]
    4716:	3305      	adds	r3, #5
    4718:	2c00      	cmp	r4, #0
    471a:	d0f9      	beq.n	4710 <usart_read_buffer_job+0x8>
    471c:	4b01      	ldr	r3, [pc, #4]	; (4724 <usart_read_buffer_job+0x1c>)
    471e:	4798      	blx	r3
    4720:	0003      	movs	r3, r0
    4722:	e7f5      	b.n	4710 <usart_read_buffer_job+0x8>
    4724:	000046b5 	.word	0x000046b5

00004728 <_usart_interrupt_handler>:
    4728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    472a:	0080      	lsls	r0, r0, #2
    472c:	4b46      	ldr	r3, [pc, #280]	; (4848 <_usart_interrupt_handler+0x120>)
    472e:	58c5      	ldr	r5, [r0, r3]
    4730:	682c      	ldr	r4, [r5, #0]
    4732:	8a23      	ldrh	r3, [r4, #16]
    4734:	b21b      	sxth	r3, r3
    4736:	2b00      	cmp	r3, #0
    4738:	dbfb      	blt.n	4732 <_usart_interrupt_handler+0xa>
    473a:	7ba3      	ldrb	r3, [r4, #14]
    473c:	7b66      	ldrb	r6, [r4, #13]
    473e:	401e      	ands	r6, r3
    4740:	2320      	movs	r3, #32
    4742:	5ceb      	ldrb	r3, [r5, r3]
    4744:	2221      	movs	r2, #33	; 0x21
    4746:	5caf      	ldrb	r7, [r5, r2]
    4748:	401f      	ands	r7, r3
    474a:	07f3      	lsls	r3, r6, #31
    474c:	d522      	bpl.n	4794 <_usart_interrupt_handler+0x6c>
    474e:	8beb      	ldrh	r3, [r5, #30]
    4750:	b29b      	uxth	r3, r3
    4752:	2b00      	cmp	r3, #0
    4754:	d01c      	beq.n	4790 <_usart_interrupt_handler+0x68>
    4756:	69aa      	ldr	r2, [r5, #24]
    4758:	7813      	ldrb	r3, [r2, #0]
    475a:	b2db      	uxtb	r3, r3
    475c:	1c51      	adds	r1, r2, #1
    475e:	61a9      	str	r1, [r5, #24]
    4760:	7969      	ldrb	r1, [r5, #5]
    4762:	2901      	cmp	r1, #1
    4764:	d00e      	beq.n	4784 <_usart_interrupt_handler+0x5c>
    4766:	b29b      	uxth	r3, r3
    4768:	05db      	lsls	r3, r3, #23
    476a:	0ddb      	lsrs	r3, r3, #23
    476c:	8323      	strh	r3, [r4, #24]
    476e:	8beb      	ldrh	r3, [r5, #30]
    4770:	3b01      	subs	r3, #1
    4772:	b29b      	uxth	r3, r3
    4774:	83eb      	strh	r3, [r5, #30]
    4776:	2b00      	cmp	r3, #0
    4778:	d10c      	bne.n	4794 <_usart_interrupt_handler+0x6c>
    477a:	3301      	adds	r3, #1
    477c:	7323      	strb	r3, [r4, #12]
    477e:	3301      	adds	r3, #1
    4780:	7363      	strb	r3, [r4, #13]
    4782:	e007      	b.n	4794 <_usart_interrupt_handler+0x6c>
    4784:	7851      	ldrb	r1, [r2, #1]
    4786:	0209      	lsls	r1, r1, #8
    4788:	430b      	orrs	r3, r1
    478a:	3202      	adds	r2, #2
    478c:	61aa      	str	r2, [r5, #24]
    478e:	e7eb      	b.n	4768 <_usart_interrupt_handler+0x40>
    4790:	2301      	movs	r3, #1
    4792:	7323      	strb	r3, [r4, #12]
    4794:	07b3      	lsls	r3, r6, #30
    4796:	d506      	bpl.n	47a6 <_usart_interrupt_handler+0x7e>
    4798:	2302      	movs	r3, #2
    479a:	7323      	strb	r3, [r4, #12]
    479c:	2200      	movs	r2, #0
    479e:	3321      	adds	r3, #33	; 0x21
    47a0:	54ea      	strb	r2, [r5, r3]
    47a2:	07fb      	lsls	r3, r7, #31
    47a4:	d416      	bmi.n	47d4 <_usart_interrupt_handler+0xac>
    47a6:	0773      	lsls	r3, r6, #29
    47a8:	d54d      	bpl.n	4846 <_usart_interrupt_handler+0x11e>
    47aa:	8bab      	ldrh	r3, [r5, #28]
    47ac:	b29b      	uxth	r3, r3
    47ae:	2b00      	cmp	r3, #0
    47b0:	d047      	beq.n	4842 <_usart_interrupt_handler+0x11a>
    47b2:	8a23      	ldrh	r3, [r4, #16]
    47b4:	b2db      	uxtb	r3, r3
    47b6:	075a      	lsls	r2, r3, #29
    47b8:	d020      	beq.n	47fc <_usart_interrupt_handler+0xd4>
    47ba:	079a      	lsls	r2, r3, #30
    47bc:	d50e      	bpl.n	47dc <_usart_interrupt_handler+0xb4>
    47be:	221a      	movs	r2, #26
    47c0:	2322      	movs	r3, #34	; 0x22
    47c2:	54ea      	strb	r2, [r5, r3]
    47c4:	3b20      	subs	r3, #32
    47c6:	8223      	strh	r3, [r4, #16]
    47c8:	077b      	lsls	r3, r7, #29
    47ca:	d53c      	bpl.n	4846 <_usart_interrupt_handler+0x11e>
    47cc:	692b      	ldr	r3, [r5, #16]
    47ce:	0028      	movs	r0, r5
    47d0:	4798      	blx	r3
    47d2:	e038      	b.n	4846 <_usart_interrupt_handler+0x11e>
    47d4:	0028      	movs	r0, r5
    47d6:	68ab      	ldr	r3, [r5, #8]
    47d8:	4798      	blx	r3
    47da:	e7e4      	b.n	47a6 <_usart_interrupt_handler+0x7e>
    47dc:	075a      	lsls	r2, r3, #29
    47de:	d505      	bpl.n	47ec <_usart_interrupt_handler+0xc4>
    47e0:	221e      	movs	r2, #30
    47e2:	2322      	movs	r3, #34	; 0x22
    47e4:	54ea      	strb	r2, [r5, r3]
    47e6:	3b1e      	subs	r3, #30
    47e8:	8223      	strh	r3, [r4, #16]
    47ea:	e7ed      	b.n	47c8 <_usart_interrupt_handler+0xa0>
    47ec:	07db      	lsls	r3, r3, #31
    47ee:	d5eb      	bpl.n	47c8 <_usart_interrupt_handler+0xa0>
    47f0:	2213      	movs	r2, #19
    47f2:	2322      	movs	r3, #34	; 0x22
    47f4:	54ea      	strb	r2, [r5, r3]
    47f6:	3b21      	subs	r3, #33	; 0x21
    47f8:	8223      	strh	r3, [r4, #16]
    47fa:	e7e5      	b.n	47c8 <_usart_interrupt_handler+0xa0>
    47fc:	8b23      	ldrh	r3, [r4, #24]
    47fe:	05db      	lsls	r3, r3, #23
    4800:	0ddb      	lsrs	r3, r3, #23
    4802:	b2da      	uxtb	r2, r3
    4804:	6969      	ldr	r1, [r5, #20]
    4806:	700a      	strb	r2, [r1, #0]
    4808:	696a      	ldr	r2, [r5, #20]
    480a:	1c51      	adds	r1, r2, #1
    480c:	6169      	str	r1, [r5, #20]
    480e:	7969      	ldrb	r1, [r5, #5]
    4810:	2901      	cmp	r1, #1
    4812:	d010      	beq.n	4836 <_usart_interrupt_handler+0x10e>
    4814:	8bab      	ldrh	r3, [r5, #28]
    4816:	3b01      	subs	r3, #1
    4818:	b29b      	uxth	r3, r3
    481a:	83ab      	strh	r3, [r5, #28]
    481c:	2b00      	cmp	r3, #0
    481e:	d112      	bne.n	4846 <_usart_interrupt_handler+0x11e>
    4820:	3304      	adds	r3, #4
    4822:	7323      	strb	r3, [r4, #12]
    4824:	2200      	movs	r2, #0
    4826:	331e      	adds	r3, #30
    4828:	54ea      	strb	r2, [r5, r3]
    482a:	07bb      	lsls	r3, r7, #30
    482c:	d50b      	bpl.n	4846 <_usart_interrupt_handler+0x11e>
    482e:	68eb      	ldr	r3, [r5, #12]
    4830:	0028      	movs	r0, r5
    4832:	4798      	blx	r3
    4834:	e007      	b.n	4846 <_usart_interrupt_handler+0x11e>
    4836:	0a1b      	lsrs	r3, r3, #8
    4838:	7053      	strb	r3, [r2, #1]
    483a:	696b      	ldr	r3, [r5, #20]
    483c:	3301      	adds	r3, #1
    483e:	616b      	str	r3, [r5, #20]
    4840:	e7e8      	b.n	4814 <_usart_interrupt_handler+0xec>
    4842:	2304      	movs	r3, #4
    4844:	7323      	strb	r3, [r4, #12]
    4846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4848:	200035e4 	.word	0x200035e4

0000484c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    484c:	b510      	push	{r4, lr}
	switch (clock_source) {
    484e:	2807      	cmp	r0, #7
    4850:	d803      	bhi.n	485a <system_clock_source_get_hz+0xe>
    4852:	0080      	lsls	r0, r0, #2
    4854:	4b16      	ldr	r3, [pc, #88]	; (48b0 <system_clock_source_get_hz+0x64>)
    4856:	581b      	ldr	r3, [r3, r0]
    4858:	469f      	mov	pc, r3
		}

		return 48000000UL;

	default:
		return 0;
    485a:	2000      	movs	r0, #0
    485c:	e027      	b.n	48ae <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc.frequency;
    485e:	4b15      	ldr	r3, [pc, #84]	; (48b4 <system_clock_source_get_hz+0x68>)
    4860:	68d8      	ldr	r0, [r3, #12]
    4862:	e024      	b.n	48ae <system_clock_source_get_hz+0x62>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    4864:	4b14      	ldr	r3, [pc, #80]	; (48b8 <system_clock_source_get_hz+0x6c>)
    4866:	6a1b      	ldr	r3, [r3, #32]
    4868:	059b      	lsls	r3, r3, #22
    486a:	0f9b      	lsrs	r3, r3, #30
    486c:	4813      	ldr	r0, [pc, #76]	; (48bc <system_clock_source_get_hz+0x70>)
    486e:	40d8      	lsrs	r0, r3
    4870:	e01d      	b.n	48ae <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc32k.frequency;
    4872:	4b10      	ldr	r3, [pc, #64]	; (48b4 <system_clock_source_get_hz+0x68>)
    4874:	6918      	ldr	r0, [r3, #16]
    4876:	e01a      	b.n	48ae <system_clock_source_get_hz+0x62>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    4878:	4b0e      	ldr	r3, [pc, #56]	; (48b4 <system_clock_source_get_hz+0x68>)
    487a:	681b      	ldr	r3, [r3, #0]
			return 0;
    487c:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    487e:	079b      	lsls	r3, r3, #30
    4880:	d515      	bpl.n	48ae <system_clock_source_get_hz+0x62>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4882:	490d      	ldr	r1, [pc, #52]	; (48b8 <system_clock_source_get_hz+0x6c>)
    4884:	2210      	movs	r2, #16
    4886:	68cb      	ldr	r3, [r1, #12]
    4888:	421a      	tst	r2, r3
    488a:	d0fc      	beq.n	4886 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    488c:	4b09      	ldr	r3, [pc, #36]	; (48b4 <system_clock_source_get_hz+0x68>)
    488e:	681b      	ldr	r3, [r3, #0]
    4890:	075b      	lsls	r3, r3, #29
    4892:	d401      	bmi.n	4898 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    4894:	480a      	ldr	r0, [pc, #40]	; (48c0 <system_clock_source_get_hz+0x74>)
    4896:	e00a      	b.n	48ae <system_clock_source_get_hz+0x62>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4898:	2000      	movs	r0, #0
    489a:	4b0a      	ldr	r3, [pc, #40]	; (48c4 <system_clock_source_get_hz+0x78>)
    489c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    489e:	4b05      	ldr	r3, [pc, #20]	; (48b4 <system_clock_source_get_hz+0x68>)
    48a0:	689b      	ldr	r3, [r3, #8]
    48a2:	041b      	lsls	r3, r3, #16
    48a4:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    48a6:	4358      	muls	r0, r3
    48a8:	e001      	b.n	48ae <system_clock_source_get_hz+0x62>
		return 32768UL;
    48aa:	2080      	movs	r0, #128	; 0x80
    48ac:	0200      	lsls	r0, r0, #8
	}
}
    48ae:	bd10      	pop	{r4, pc}
    48b0:	000058dc 	.word	0x000058dc
    48b4:	20000214 	.word	0x20000214
    48b8:	40000800 	.word	0x40000800
    48bc:	007a1200 	.word	0x007a1200
    48c0:	02dc6c00 	.word	0x02dc6c00
    48c4:	00004ced 	.word	0x00004ced

000048c8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    48c8:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    48ca:	490c      	ldr	r1, [pc, #48]	; (48fc <system_clock_source_osc8m_set_config+0x34>)
    48cc:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    48ce:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    48d0:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    48d2:	7840      	ldrb	r0, [r0, #1]
    48d4:	2201      	movs	r2, #1
    48d6:	4010      	ands	r0, r2
    48d8:	0180      	lsls	r0, r0, #6
    48da:	2640      	movs	r6, #64	; 0x40
    48dc:	43b3      	bics	r3, r6
    48de:	4303      	orrs	r3, r0
    48e0:	402a      	ands	r2, r5
    48e2:	01d2      	lsls	r2, r2, #7
    48e4:	2080      	movs	r0, #128	; 0x80
    48e6:	4383      	bics	r3, r0
    48e8:	4313      	orrs	r3, r2
    48ea:	2203      	movs	r2, #3
    48ec:	4022      	ands	r2, r4
    48ee:	0212      	lsls	r2, r2, #8
    48f0:	4803      	ldr	r0, [pc, #12]	; (4900 <system_clock_source_osc8m_set_config+0x38>)
    48f2:	4003      	ands	r3, r0
    48f4:	4313      	orrs	r3, r2
    48f6:	620b      	str	r3, [r1, #32]
}
    48f8:	bd70      	pop	{r4, r5, r6, pc}
    48fa:	46c0      	nop			; (mov r8, r8)
    48fc:	40000800 	.word	0x40000800
    4900:	fffffcff 	.word	0xfffffcff

00004904 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    4904:	2807      	cmp	r0, #7
    4906:	d803      	bhi.n	4910 <system_clock_source_enable+0xc>
    4908:	0080      	lsls	r0, r0, #2
    490a:	4b1e      	ldr	r3, [pc, #120]	; (4984 <system_clock_source_enable+0x80>)
    490c:	581b      	ldr	r3, [r3, r0]
    490e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4910:	2017      	movs	r0, #23
    4912:	e036      	b.n	4982 <system_clock_source_enable+0x7e>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    4914:	4a1c      	ldr	r2, [pc, #112]	; (4988 <system_clock_source_enable+0x84>)
    4916:	6a13      	ldr	r3, [r2, #32]
    4918:	2102      	movs	r1, #2
    491a:	430b      	orrs	r3, r1
    491c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    491e:	2000      	movs	r0, #0
    4920:	e02f      	b.n	4982 <system_clock_source_enable+0x7e>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    4922:	4a19      	ldr	r2, [pc, #100]	; (4988 <system_clock_source_enable+0x84>)
    4924:	6993      	ldr	r3, [r2, #24]
    4926:	2102      	movs	r1, #2
    4928:	430b      	orrs	r3, r1
    492a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    492c:	2000      	movs	r0, #0
		break;
    492e:	e028      	b.n	4982 <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    4930:	4a15      	ldr	r2, [pc, #84]	; (4988 <system_clock_source_enable+0x84>)
    4932:	8a13      	ldrh	r3, [r2, #16]
    4934:	2102      	movs	r1, #2
    4936:	430b      	orrs	r3, r1
    4938:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    493a:	2000      	movs	r0, #0
		break;
    493c:	e021      	b.n	4982 <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    493e:	4a12      	ldr	r2, [pc, #72]	; (4988 <system_clock_source_enable+0x84>)
    4940:	8a93      	ldrh	r3, [r2, #20]
    4942:	2102      	movs	r1, #2
    4944:	430b      	orrs	r3, r1
    4946:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    4948:	2000      	movs	r0, #0
		break;
    494a:	e01a      	b.n	4982 <system_clock_source_enable+0x7e>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    494c:	4b0f      	ldr	r3, [pc, #60]	; (498c <system_clock_source_enable+0x88>)
    494e:	681a      	ldr	r2, [r3, #0]
    4950:	2102      	movs	r1, #2
    4952:	430a      	orrs	r2, r1
    4954:	601a      	str	r2, [r3, #0]
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    4956:	681b      	ldr	r3, [r3, #0]
    4958:	4a0d      	ldr	r2, [pc, #52]	; (4990 <system_clock_source_enable+0x8c>)
    495a:	4013      	ands	r3, r2
    495c:	4a0a      	ldr	r2, [pc, #40]	; (4988 <system_clock_source_enable+0x84>)
    495e:	8493      	strh	r3, [r2, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4960:	0011      	movs	r1, r2
    4962:	2210      	movs	r2, #16
    4964:	68cb      	ldr	r3, [r1, #12]
    4966:	421a      	tst	r2, r3
    4968:	d0fc      	beq.n	4964 <system_clock_source_enable+0x60>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    496a:	4a08      	ldr	r2, [pc, #32]	; (498c <system_clock_source_enable+0x88>)
    496c:	6891      	ldr	r1, [r2, #8]
    496e:	4b06      	ldr	r3, [pc, #24]	; (4988 <system_clock_source_enable+0x84>)
    4970:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    4972:	6851      	ldr	r1, [r2, #4]
    4974:	6299      	str	r1, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    4976:	6812      	ldr	r2, [r2, #0]
    4978:	b292      	uxth	r2, r2
    497a:	849a      	strh	r2, [r3, #36]	; 0x24
	return STATUS_OK;
    497c:	2000      	movs	r0, #0
    497e:	e000      	b.n	4982 <system_clock_source_enable+0x7e>
		return STATUS_OK;
    4980:	2000      	movs	r0, #0
}
    4982:	4770      	bx	lr
    4984:	000058fc 	.word	0x000058fc
    4988:	40000800 	.word	0x40000800
    498c:	20000214 	.word	0x20000214
    4990:	0000ff7f 	.word	0x0000ff7f

00004994 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    4994:	b5f0      	push	{r4, r5, r6, r7, lr}
    4996:	46c6      	mov	lr, r8
    4998:	b500      	push	{lr}
    499a:	b084      	sub	sp, #16
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    499c:	22c2      	movs	r2, #194	; 0xc2
    499e:	00d2      	lsls	r2, r2, #3
    49a0:	4b28      	ldr	r3, [pc, #160]	; (4a44 <system_clock_init+0xb0>)
    49a2:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    49a4:	4a28      	ldr	r2, [pc, #160]	; (4a48 <system_clock_init+0xb4>)
    49a6:	6853      	ldr	r3, [r2, #4]
    49a8:	211e      	movs	r1, #30
    49aa:	438b      	bics	r3, r1
    49ac:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    49ae:	2302      	movs	r3, #2
    49b0:	466a      	mov	r2, sp
    49b2:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    49b4:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    49b6:	4d25      	ldr	r5, [pc, #148]	; (4a4c <system_clock_init+0xb8>)
    49b8:	b2e0      	uxtb	r0, r4
    49ba:	4669      	mov	r1, sp
    49bc:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    49be:	3401      	adds	r4, #1
    49c0:	2c1c      	cmp	r4, #28
    49c2:	d1f9      	bne.n	49b8 <system_clock_init+0x24>
	config->run_in_standby  = false;
    49c4:	a803      	add	r0, sp, #12
    49c6:	2400      	movs	r4, #0
    49c8:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    49ca:	2301      	movs	r3, #1
    49cc:	4698      	mov	r8, r3
    49ce:	7083      	strb	r3, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    49d0:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    49d2:	4b1f      	ldr	r3, [pc, #124]	; (4a50 <system_clock_init+0xbc>)
    49d4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    49d6:	2006      	movs	r0, #6
    49d8:	4b1e      	ldr	r3, [pc, #120]	; (4a54 <system_clock_init+0xc0>)
    49da:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    49dc:	4b1e      	ldr	r3, [pc, #120]	; (4a58 <system_clock_init+0xc4>)
    49de:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    49e0:	466b      	mov	r3, sp
    49e2:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    49e4:	2706      	movs	r7, #6
    49e6:	701f      	strb	r7, [r3, #0]
#endif
	config->run_in_standby     = false;
    49e8:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    49ea:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    49ec:	2308      	movs	r3, #8
    49ee:	9301      	str	r3, [sp, #4]
    49f0:	4669      	mov	r1, sp
    49f2:	2001      	movs	r0, #1
    49f4:	4e19      	ldr	r6, [pc, #100]	; (4a5c <system_clock_init+0xc8>)
    49f6:	47b0      	blx	r6
    49f8:	2001      	movs	r0, #1
    49fa:	4d19      	ldr	r5, [pc, #100]	; (4a60 <system_clock_init+0xcc>)
    49fc:	47a8      	blx	r5
	config->high_when_disabled = false;
    49fe:	466b      	mov	r3, sp
    4a00:	705c      	strb	r4, [r3, #1]
	config->run_in_standby     = false;
    4a02:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    4a04:	725c      	strb	r4, [r3, #9]
    4a06:	2303      	movs	r3, #3
    4a08:	466a      	mov	r2, sp
    4a0a:	7013      	strb	r3, [r2, #0]
    4a0c:	331d      	adds	r3, #29
    4a0e:	9301      	str	r3, [sp, #4]
    4a10:	4669      	mov	r1, sp
    4a12:	2004      	movs	r0, #4
    4a14:	47b0      	blx	r6
    4a16:	2004      	movs	r0, #4
    4a18:	47a8      	blx	r5
	PM->CPUSEL.reg = (uint32_t)divider;
    4a1a:	4b12      	ldr	r3, [pc, #72]	; (4a64 <system_clock_init+0xd0>)
    4a1c:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    4a1e:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    4a20:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    4a22:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    4a24:	4643      	mov	r3, r8
    4a26:	9301      	str	r3, [sp, #4]
	config->high_when_disabled = false;
    4a28:	466b      	mov	r3, sp
    4a2a:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    4a2c:	701f      	strb	r7, [r3, #0]
	config->run_in_standby     = false;
    4a2e:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    4a30:	725c      	strb	r4, [r3, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    4a32:	4669      	mov	r1, sp
    4a34:	2000      	movs	r0, #0
    4a36:	47b0      	blx	r6
    4a38:	2000      	movs	r0, #0
    4a3a:	47a8      	blx	r5
#endif
}
    4a3c:	b004      	add	sp, #16
    4a3e:	bc04      	pop	{r2}
    4a40:	4690      	mov	r8, r2
    4a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a44:	40000800 	.word	0x40000800
    4a48:	41004000 	.word	0x41004000
    4a4c:	00004ca1 	.word	0x00004ca1
    4a50:	000048c9 	.word	0x000048c9
    4a54:	00004905 	.word	0x00004905
    4a58:	00004a69 	.word	0x00004a69
    4a5c:	00004a8d 	.word	0x00004a8d
    4a60:	00004b45 	.word	0x00004b45
    4a64:	40000400 	.word	0x40000400

00004a68 <system_gclk_init>:
    4a68:	4a06      	ldr	r2, [pc, #24]	; (4a84 <system_gclk_init+0x1c>)
    4a6a:	6993      	ldr	r3, [r2, #24]
    4a6c:	2108      	movs	r1, #8
    4a6e:	430b      	orrs	r3, r1
    4a70:	6193      	str	r3, [r2, #24]
    4a72:	2201      	movs	r2, #1
    4a74:	4b04      	ldr	r3, [pc, #16]	; (4a88 <system_gclk_init+0x20>)
    4a76:	701a      	strb	r2, [r3, #0]
    4a78:	0019      	movs	r1, r3
    4a7a:	780b      	ldrb	r3, [r1, #0]
    4a7c:	4213      	tst	r3, r2
    4a7e:	d1fc      	bne.n	4a7a <system_gclk_init+0x12>
    4a80:	4770      	bx	lr
    4a82:	46c0      	nop			; (mov r8, r8)
    4a84:	40000400 	.word	0x40000400
    4a88:	40000c00 	.word	0x40000c00

00004a8c <system_gclk_gen_set_config>:
    4a8c:	b570      	push	{r4, r5, r6, lr}
    4a8e:	0006      	movs	r6, r0
    4a90:	0004      	movs	r4, r0
    4a92:	780d      	ldrb	r5, [r1, #0]
    4a94:	022d      	lsls	r5, r5, #8
    4a96:	4305      	orrs	r5, r0
    4a98:	784b      	ldrb	r3, [r1, #1]
    4a9a:	2b00      	cmp	r3, #0
    4a9c:	d002      	beq.n	4aa4 <system_gclk_gen_set_config+0x18>
    4a9e:	2380      	movs	r3, #128	; 0x80
    4aa0:	02db      	lsls	r3, r3, #11
    4aa2:	431d      	orrs	r5, r3
    4aa4:	7a4b      	ldrb	r3, [r1, #9]
    4aa6:	2b00      	cmp	r3, #0
    4aa8:	d002      	beq.n	4ab0 <system_gclk_gen_set_config+0x24>
    4aaa:	2380      	movs	r3, #128	; 0x80
    4aac:	031b      	lsls	r3, r3, #12
    4aae:	431d      	orrs	r5, r3
    4ab0:	6848      	ldr	r0, [r1, #4]
    4ab2:	2801      	cmp	r0, #1
    4ab4:	d910      	bls.n	4ad8 <system_gclk_gen_set_config+0x4c>
    4ab6:	1e43      	subs	r3, r0, #1
    4ab8:	4218      	tst	r0, r3
    4aba:	d134      	bne.n	4b26 <system_gclk_gen_set_config+0x9a>
    4abc:	2802      	cmp	r0, #2
    4abe:	d930      	bls.n	4b22 <system_gclk_gen_set_config+0x96>
    4ac0:	2302      	movs	r3, #2
    4ac2:	2200      	movs	r2, #0
    4ac4:	3201      	adds	r2, #1
    4ac6:	005b      	lsls	r3, r3, #1
    4ac8:	4298      	cmp	r0, r3
    4aca:	d8fb      	bhi.n	4ac4 <system_gclk_gen_set_config+0x38>
    4acc:	0212      	lsls	r2, r2, #8
    4ace:	4332      	orrs	r2, r6
    4ad0:	0014      	movs	r4, r2
    4ad2:	2380      	movs	r3, #128	; 0x80
    4ad4:	035b      	lsls	r3, r3, #13
    4ad6:	431d      	orrs	r5, r3
    4ad8:	7a0b      	ldrb	r3, [r1, #8]
    4ada:	2b00      	cmp	r3, #0
    4adc:	d002      	beq.n	4ae4 <system_gclk_gen_set_config+0x58>
    4ade:	2380      	movs	r3, #128	; 0x80
    4ae0:	039b      	lsls	r3, r3, #14
    4ae2:	431d      	orrs	r5, r3
    4ae4:	4a13      	ldr	r2, [pc, #76]	; (4b34 <system_gclk_gen_set_config+0xa8>)
    4ae6:	7853      	ldrb	r3, [r2, #1]
    4ae8:	b25b      	sxtb	r3, r3
    4aea:	2b00      	cmp	r3, #0
    4aec:	dbfb      	blt.n	4ae6 <system_gclk_gen_set_config+0x5a>
    4aee:	4b12      	ldr	r3, [pc, #72]	; (4b38 <system_gclk_gen_set_config+0xac>)
    4af0:	4798      	blx	r3
    4af2:	4b12      	ldr	r3, [pc, #72]	; (4b3c <system_gclk_gen_set_config+0xb0>)
    4af4:	701e      	strb	r6, [r3, #0]
    4af6:	4a0f      	ldr	r2, [pc, #60]	; (4b34 <system_gclk_gen_set_config+0xa8>)
    4af8:	7853      	ldrb	r3, [r2, #1]
    4afa:	b25b      	sxtb	r3, r3
    4afc:	2b00      	cmp	r3, #0
    4afe:	dbfb      	blt.n	4af8 <system_gclk_gen_set_config+0x6c>
    4b00:	4b0c      	ldr	r3, [pc, #48]	; (4b34 <system_gclk_gen_set_config+0xa8>)
    4b02:	609c      	str	r4, [r3, #8]
    4b04:	001a      	movs	r2, r3
    4b06:	7853      	ldrb	r3, [r2, #1]
    4b08:	b25b      	sxtb	r3, r3
    4b0a:	2b00      	cmp	r3, #0
    4b0c:	dbfb      	blt.n	4b06 <system_gclk_gen_set_config+0x7a>
    4b0e:	4a09      	ldr	r2, [pc, #36]	; (4b34 <system_gclk_gen_set_config+0xa8>)
    4b10:	6853      	ldr	r3, [r2, #4]
    4b12:	2180      	movs	r1, #128	; 0x80
    4b14:	0249      	lsls	r1, r1, #9
    4b16:	400b      	ands	r3, r1
    4b18:	431d      	orrs	r5, r3
    4b1a:	6055      	str	r5, [r2, #4]
    4b1c:	4b08      	ldr	r3, [pc, #32]	; (4b40 <system_gclk_gen_set_config+0xb4>)
    4b1e:	4798      	blx	r3
    4b20:	bd70      	pop	{r4, r5, r6, pc}
    4b22:	2200      	movs	r2, #0
    4b24:	e7d2      	b.n	4acc <system_gclk_gen_set_config+0x40>
    4b26:	0204      	lsls	r4, r0, #8
    4b28:	4334      	orrs	r4, r6
    4b2a:	2380      	movs	r3, #128	; 0x80
    4b2c:	029b      	lsls	r3, r3, #10
    4b2e:	431d      	orrs	r5, r3
    4b30:	e7d2      	b.n	4ad8 <system_gclk_gen_set_config+0x4c>
    4b32:	46c0      	nop			; (mov r8, r8)
    4b34:	40000c00 	.word	0x40000c00
    4b38:	00003eb9 	.word	0x00003eb9
    4b3c:	40000c08 	.word	0x40000c08
    4b40:	00003ef9 	.word	0x00003ef9

00004b44 <system_gclk_gen_enable>:
    4b44:	b510      	push	{r4, lr}
    4b46:	0004      	movs	r4, r0
    4b48:	4a0b      	ldr	r2, [pc, #44]	; (4b78 <system_gclk_gen_enable+0x34>)
    4b4a:	7853      	ldrb	r3, [r2, #1]
    4b4c:	b25b      	sxtb	r3, r3
    4b4e:	2b00      	cmp	r3, #0
    4b50:	dbfb      	blt.n	4b4a <system_gclk_gen_enable+0x6>
    4b52:	4b0a      	ldr	r3, [pc, #40]	; (4b7c <system_gclk_gen_enable+0x38>)
    4b54:	4798      	blx	r3
    4b56:	4b0a      	ldr	r3, [pc, #40]	; (4b80 <system_gclk_gen_enable+0x3c>)
    4b58:	701c      	strb	r4, [r3, #0]
    4b5a:	4a07      	ldr	r2, [pc, #28]	; (4b78 <system_gclk_gen_enable+0x34>)
    4b5c:	7853      	ldrb	r3, [r2, #1]
    4b5e:	b25b      	sxtb	r3, r3
    4b60:	2b00      	cmp	r3, #0
    4b62:	dbfb      	blt.n	4b5c <system_gclk_gen_enable+0x18>
    4b64:	4a04      	ldr	r2, [pc, #16]	; (4b78 <system_gclk_gen_enable+0x34>)
    4b66:	6851      	ldr	r1, [r2, #4]
    4b68:	2380      	movs	r3, #128	; 0x80
    4b6a:	025b      	lsls	r3, r3, #9
    4b6c:	430b      	orrs	r3, r1
    4b6e:	6053      	str	r3, [r2, #4]
    4b70:	4b04      	ldr	r3, [pc, #16]	; (4b84 <system_gclk_gen_enable+0x40>)
    4b72:	4798      	blx	r3
    4b74:	bd10      	pop	{r4, pc}
    4b76:	46c0      	nop			; (mov r8, r8)
    4b78:	40000c00 	.word	0x40000c00
    4b7c:	00003eb9 	.word	0x00003eb9
    4b80:	40000c04 	.word	0x40000c04
    4b84:	00003ef9 	.word	0x00003ef9

00004b88 <system_gclk_gen_get_hz>:
    4b88:	b570      	push	{r4, r5, r6, lr}
    4b8a:	0004      	movs	r4, r0
    4b8c:	4a1a      	ldr	r2, [pc, #104]	; (4bf8 <system_gclk_gen_get_hz+0x70>)
    4b8e:	7853      	ldrb	r3, [r2, #1]
    4b90:	b25b      	sxtb	r3, r3
    4b92:	2b00      	cmp	r3, #0
    4b94:	dbfb      	blt.n	4b8e <system_gclk_gen_get_hz+0x6>
    4b96:	4b19      	ldr	r3, [pc, #100]	; (4bfc <system_gclk_gen_get_hz+0x74>)
    4b98:	4798      	blx	r3
    4b9a:	4b19      	ldr	r3, [pc, #100]	; (4c00 <system_gclk_gen_get_hz+0x78>)
    4b9c:	701c      	strb	r4, [r3, #0]
    4b9e:	4a16      	ldr	r2, [pc, #88]	; (4bf8 <system_gclk_gen_get_hz+0x70>)
    4ba0:	7853      	ldrb	r3, [r2, #1]
    4ba2:	b25b      	sxtb	r3, r3
    4ba4:	2b00      	cmp	r3, #0
    4ba6:	dbfb      	blt.n	4ba0 <system_gclk_gen_get_hz+0x18>
    4ba8:	4e13      	ldr	r6, [pc, #76]	; (4bf8 <system_gclk_gen_get_hz+0x70>)
    4baa:	6870      	ldr	r0, [r6, #4]
    4bac:	04c0      	lsls	r0, r0, #19
    4bae:	0ec0      	lsrs	r0, r0, #27
    4bb0:	4b14      	ldr	r3, [pc, #80]	; (4c04 <system_gclk_gen_get_hz+0x7c>)
    4bb2:	4798      	blx	r3
    4bb4:	0005      	movs	r5, r0
    4bb6:	4b12      	ldr	r3, [pc, #72]	; (4c00 <system_gclk_gen_get_hz+0x78>)
    4bb8:	701c      	strb	r4, [r3, #0]
    4bba:	6876      	ldr	r6, [r6, #4]
    4bbc:	02f6      	lsls	r6, r6, #11
    4bbe:	0ff6      	lsrs	r6, r6, #31
    4bc0:	4b11      	ldr	r3, [pc, #68]	; (4c08 <system_gclk_gen_get_hz+0x80>)
    4bc2:	701c      	strb	r4, [r3, #0]
    4bc4:	4a0c      	ldr	r2, [pc, #48]	; (4bf8 <system_gclk_gen_get_hz+0x70>)
    4bc6:	7853      	ldrb	r3, [r2, #1]
    4bc8:	b25b      	sxtb	r3, r3
    4bca:	2b00      	cmp	r3, #0
    4bcc:	dbfb      	blt.n	4bc6 <system_gclk_gen_get_hz+0x3e>
    4bce:	4b0a      	ldr	r3, [pc, #40]	; (4bf8 <system_gclk_gen_get_hz+0x70>)
    4bd0:	689c      	ldr	r4, [r3, #8]
    4bd2:	0224      	lsls	r4, r4, #8
    4bd4:	0c24      	lsrs	r4, r4, #16
    4bd6:	4b0d      	ldr	r3, [pc, #52]	; (4c0c <system_gclk_gen_get_hz+0x84>)
    4bd8:	4798      	blx	r3
    4bda:	2e00      	cmp	r6, #0
    4bdc:	d107      	bne.n	4bee <system_gclk_gen_get_hz+0x66>
    4bde:	2c01      	cmp	r4, #1
    4be0:	d907      	bls.n	4bf2 <system_gclk_gen_get_hz+0x6a>
    4be2:	0021      	movs	r1, r4
    4be4:	0028      	movs	r0, r5
    4be6:	4b0a      	ldr	r3, [pc, #40]	; (4c10 <system_gclk_gen_get_hz+0x88>)
    4be8:	4798      	blx	r3
    4bea:	0005      	movs	r5, r0
    4bec:	e001      	b.n	4bf2 <system_gclk_gen_get_hz+0x6a>
    4bee:	3401      	adds	r4, #1
    4bf0:	40e5      	lsrs	r5, r4
    4bf2:	0028      	movs	r0, r5
    4bf4:	bd70      	pop	{r4, r5, r6, pc}
    4bf6:	46c0      	nop			; (mov r8, r8)
    4bf8:	40000c00 	.word	0x40000c00
    4bfc:	00003eb9 	.word	0x00003eb9
    4c00:	40000c04 	.word	0x40000c04
    4c04:	0000484d 	.word	0x0000484d
    4c08:	40000c08 	.word	0x40000c08
    4c0c:	00003ef9 	.word	0x00003ef9
    4c10:	000053c1 	.word	0x000053c1

00004c14 <system_gclk_chan_enable>:
    4c14:	b510      	push	{r4, lr}
    4c16:	0004      	movs	r4, r0
    4c18:	4b06      	ldr	r3, [pc, #24]	; (4c34 <system_gclk_chan_enable+0x20>)
    4c1a:	4798      	blx	r3
    4c1c:	4b06      	ldr	r3, [pc, #24]	; (4c38 <system_gclk_chan_enable+0x24>)
    4c1e:	701c      	strb	r4, [r3, #0]
    4c20:	4a06      	ldr	r2, [pc, #24]	; (4c3c <system_gclk_chan_enable+0x28>)
    4c22:	8853      	ldrh	r3, [r2, #2]
    4c24:	2180      	movs	r1, #128	; 0x80
    4c26:	01c9      	lsls	r1, r1, #7
    4c28:	430b      	orrs	r3, r1
    4c2a:	8053      	strh	r3, [r2, #2]
    4c2c:	4b04      	ldr	r3, [pc, #16]	; (4c40 <system_gclk_chan_enable+0x2c>)
    4c2e:	4798      	blx	r3
    4c30:	bd10      	pop	{r4, pc}
    4c32:	46c0      	nop			; (mov r8, r8)
    4c34:	00003eb9 	.word	0x00003eb9
    4c38:	40000c02 	.word	0x40000c02
    4c3c:	40000c00 	.word	0x40000c00
    4c40:	00003ef9 	.word	0x00003ef9

00004c44 <system_gclk_chan_disable>:
    4c44:	b510      	push	{r4, lr}
    4c46:	0004      	movs	r4, r0
    4c48:	4b0f      	ldr	r3, [pc, #60]	; (4c88 <system_gclk_chan_disable+0x44>)
    4c4a:	4798      	blx	r3
    4c4c:	4b0f      	ldr	r3, [pc, #60]	; (4c8c <system_gclk_chan_disable+0x48>)
    4c4e:	701c      	strb	r4, [r3, #0]
    4c50:	4a0f      	ldr	r2, [pc, #60]	; (4c90 <system_gclk_chan_disable+0x4c>)
    4c52:	8853      	ldrh	r3, [r2, #2]
    4c54:	051b      	lsls	r3, r3, #20
    4c56:	0f18      	lsrs	r0, r3, #28
    4c58:	8853      	ldrh	r3, [r2, #2]
    4c5a:	490e      	ldr	r1, [pc, #56]	; (4c94 <system_gclk_chan_disable+0x50>)
    4c5c:	400b      	ands	r3, r1
    4c5e:	8053      	strh	r3, [r2, #2]
    4c60:	8853      	ldrh	r3, [r2, #2]
    4c62:	490d      	ldr	r1, [pc, #52]	; (4c98 <system_gclk_chan_disable+0x54>)
    4c64:	400b      	ands	r3, r1
    4c66:	8053      	strh	r3, [r2, #2]
    4c68:	0011      	movs	r1, r2
    4c6a:	2280      	movs	r2, #128	; 0x80
    4c6c:	01d2      	lsls	r2, r2, #7
    4c6e:	884b      	ldrh	r3, [r1, #2]
    4c70:	4213      	tst	r3, r2
    4c72:	d1fc      	bne.n	4c6e <system_gclk_chan_disable+0x2a>
    4c74:	4906      	ldr	r1, [pc, #24]	; (4c90 <system_gclk_chan_disable+0x4c>)
    4c76:	884a      	ldrh	r2, [r1, #2]
    4c78:	0203      	lsls	r3, r0, #8
    4c7a:	4806      	ldr	r0, [pc, #24]	; (4c94 <system_gclk_chan_disable+0x50>)
    4c7c:	4002      	ands	r2, r0
    4c7e:	4313      	orrs	r3, r2
    4c80:	804b      	strh	r3, [r1, #2]
    4c82:	4b06      	ldr	r3, [pc, #24]	; (4c9c <system_gclk_chan_disable+0x58>)
    4c84:	4798      	blx	r3
    4c86:	bd10      	pop	{r4, pc}
    4c88:	00003eb9 	.word	0x00003eb9
    4c8c:	40000c02 	.word	0x40000c02
    4c90:	40000c00 	.word	0x40000c00
    4c94:	fffff0ff 	.word	0xfffff0ff
    4c98:	ffffbfff 	.word	0xffffbfff
    4c9c:	00003ef9 	.word	0x00003ef9

00004ca0 <system_gclk_chan_set_config>:
    4ca0:	b510      	push	{r4, lr}
    4ca2:	780c      	ldrb	r4, [r1, #0]
    4ca4:	0224      	lsls	r4, r4, #8
    4ca6:	4304      	orrs	r4, r0
    4ca8:	4b02      	ldr	r3, [pc, #8]	; (4cb4 <system_gclk_chan_set_config+0x14>)
    4caa:	4798      	blx	r3
    4cac:	b2a4      	uxth	r4, r4
    4cae:	4b02      	ldr	r3, [pc, #8]	; (4cb8 <system_gclk_chan_set_config+0x18>)
    4cb0:	805c      	strh	r4, [r3, #2]
    4cb2:	bd10      	pop	{r4, pc}
    4cb4:	00004c45 	.word	0x00004c45
    4cb8:	40000c00 	.word	0x40000c00

00004cbc <system_gclk_chan_lock>:
    4cbc:	b510      	push	{r4, lr}
    4cbe:	0004      	movs	r4, r0
    4cc0:	4b06      	ldr	r3, [pc, #24]	; (4cdc <system_gclk_chan_lock+0x20>)
    4cc2:	4798      	blx	r3
    4cc4:	4b06      	ldr	r3, [pc, #24]	; (4ce0 <system_gclk_chan_lock+0x24>)
    4cc6:	701c      	strb	r4, [r3, #0]
    4cc8:	4a06      	ldr	r2, [pc, #24]	; (4ce4 <system_gclk_chan_lock+0x28>)
    4cca:	8853      	ldrh	r3, [r2, #2]
    4ccc:	21c0      	movs	r1, #192	; 0xc0
    4cce:	0209      	lsls	r1, r1, #8
    4cd0:	430b      	orrs	r3, r1
    4cd2:	8053      	strh	r3, [r2, #2]
    4cd4:	4b04      	ldr	r3, [pc, #16]	; (4ce8 <system_gclk_chan_lock+0x2c>)
    4cd6:	4798      	blx	r3
    4cd8:	bd10      	pop	{r4, pc}
    4cda:	46c0      	nop			; (mov r8, r8)
    4cdc:	00003eb9 	.word	0x00003eb9
    4ce0:	40000c02 	.word	0x40000c02
    4ce4:	40000c00 	.word	0x40000c00
    4ce8:	00003ef9 	.word	0x00003ef9

00004cec <system_gclk_chan_get_hz>:
    4cec:	b510      	push	{r4, lr}
    4cee:	0004      	movs	r4, r0
    4cf0:	4b06      	ldr	r3, [pc, #24]	; (4d0c <system_gclk_chan_get_hz+0x20>)
    4cf2:	4798      	blx	r3
    4cf4:	4b06      	ldr	r3, [pc, #24]	; (4d10 <system_gclk_chan_get_hz+0x24>)
    4cf6:	701c      	strb	r4, [r3, #0]
    4cf8:	4b06      	ldr	r3, [pc, #24]	; (4d14 <system_gclk_chan_get_hz+0x28>)
    4cfa:	885c      	ldrh	r4, [r3, #2]
    4cfc:	0524      	lsls	r4, r4, #20
    4cfe:	0f24      	lsrs	r4, r4, #28
    4d00:	4b05      	ldr	r3, [pc, #20]	; (4d18 <system_gclk_chan_get_hz+0x2c>)
    4d02:	4798      	blx	r3
    4d04:	0020      	movs	r0, r4
    4d06:	4b05      	ldr	r3, [pc, #20]	; (4d1c <system_gclk_chan_get_hz+0x30>)
    4d08:	4798      	blx	r3
    4d0a:	bd10      	pop	{r4, pc}
    4d0c:	00003eb9 	.word	0x00003eb9
    4d10:	40000c02 	.word	0x40000c02
    4d14:	40000c00 	.word	0x40000c00
    4d18:	00003ef9 	.word	0x00003ef9
    4d1c:	00004b89 	.word	0x00004b89

00004d20 <_system_pinmux_config>:
    4d20:	b530      	push	{r4, r5, lr}
    4d22:	78d3      	ldrb	r3, [r2, #3]
    4d24:	2b00      	cmp	r3, #0
    4d26:	d135      	bne.n	4d94 <_system_pinmux_config+0x74>
    4d28:	7813      	ldrb	r3, [r2, #0]
    4d2a:	2b80      	cmp	r3, #128	; 0x80
    4d2c:	d029      	beq.n	4d82 <_system_pinmux_config+0x62>
    4d2e:	061b      	lsls	r3, r3, #24
    4d30:	2480      	movs	r4, #128	; 0x80
    4d32:	0264      	lsls	r4, r4, #9
    4d34:	4323      	orrs	r3, r4
    4d36:	7854      	ldrb	r4, [r2, #1]
    4d38:	2502      	movs	r5, #2
    4d3a:	43ac      	bics	r4, r5
    4d3c:	d106      	bne.n	4d4c <_system_pinmux_config+0x2c>
    4d3e:	7894      	ldrb	r4, [r2, #2]
    4d40:	2c00      	cmp	r4, #0
    4d42:	d120      	bne.n	4d86 <_system_pinmux_config+0x66>
    4d44:	2480      	movs	r4, #128	; 0x80
    4d46:	02a4      	lsls	r4, r4, #10
    4d48:	4323      	orrs	r3, r4
    4d4a:	6041      	str	r1, [r0, #4]
    4d4c:	7854      	ldrb	r4, [r2, #1]
    4d4e:	3c01      	subs	r4, #1
    4d50:	2c01      	cmp	r4, #1
    4d52:	d91c      	bls.n	4d8e <_system_pinmux_config+0x6e>
    4d54:	040d      	lsls	r5, r1, #16
    4d56:	0c2d      	lsrs	r5, r5, #16
    4d58:	24a0      	movs	r4, #160	; 0xa0
    4d5a:	05e4      	lsls	r4, r4, #23
    4d5c:	432c      	orrs	r4, r5
    4d5e:	431c      	orrs	r4, r3
    4d60:	6284      	str	r4, [r0, #40]	; 0x28
    4d62:	0c0d      	lsrs	r5, r1, #16
    4d64:	24d0      	movs	r4, #208	; 0xd0
    4d66:	0624      	lsls	r4, r4, #24
    4d68:	432c      	orrs	r4, r5
    4d6a:	431c      	orrs	r4, r3
    4d6c:	6284      	str	r4, [r0, #40]	; 0x28
    4d6e:	78d4      	ldrb	r4, [r2, #3]
    4d70:	2c00      	cmp	r4, #0
    4d72:	d122      	bne.n	4dba <_system_pinmux_config+0x9a>
    4d74:	035b      	lsls	r3, r3, #13
    4d76:	d51c      	bpl.n	4db2 <_system_pinmux_config+0x92>
    4d78:	7893      	ldrb	r3, [r2, #2]
    4d7a:	2b01      	cmp	r3, #1
    4d7c:	d01e      	beq.n	4dbc <_system_pinmux_config+0x9c>
    4d7e:	6141      	str	r1, [r0, #20]
    4d80:	e017      	b.n	4db2 <_system_pinmux_config+0x92>
    4d82:	2300      	movs	r3, #0
    4d84:	e7d7      	b.n	4d36 <_system_pinmux_config+0x16>
    4d86:	24c0      	movs	r4, #192	; 0xc0
    4d88:	02e4      	lsls	r4, r4, #11
    4d8a:	4323      	orrs	r3, r4
    4d8c:	e7dd      	b.n	4d4a <_system_pinmux_config+0x2a>
    4d8e:	4c0d      	ldr	r4, [pc, #52]	; (4dc4 <_system_pinmux_config+0xa4>)
    4d90:	4023      	ands	r3, r4
    4d92:	e7df      	b.n	4d54 <_system_pinmux_config+0x34>
    4d94:	6041      	str	r1, [r0, #4]
    4d96:	040c      	lsls	r4, r1, #16
    4d98:	0c24      	lsrs	r4, r4, #16
    4d9a:	23a0      	movs	r3, #160	; 0xa0
    4d9c:	05db      	lsls	r3, r3, #23
    4d9e:	4323      	orrs	r3, r4
    4da0:	6283      	str	r3, [r0, #40]	; 0x28
    4da2:	0c0c      	lsrs	r4, r1, #16
    4da4:	23d0      	movs	r3, #208	; 0xd0
    4da6:	061b      	lsls	r3, r3, #24
    4da8:	4323      	orrs	r3, r4
    4daa:	6283      	str	r3, [r0, #40]	; 0x28
    4dac:	78d3      	ldrb	r3, [r2, #3]
    4dae:	2b00      	cmp	r3, #0
    4db0:	d103      	bne.n	4dba <_system_pinmux_config+0x9a>
    4db2:	7853      	ldrb	r3, [r2, #1]
    4db4:	3b01      	subs	r3, #1
    4db6:	2b01      	cmp	r3, #1
    4db8:	d902      	bls.n	4dc0 <_system_pinmux_config+0xa0>
    4dba:	bd30      	pop	{r4, r5, pc}
    4dbc:	6181      	str	r1, [r0, #24]
    4dbe:	e7f8      	b.n	4db2 <_system_pinmux_config+0x92>
    4dc0:	6081      	str	r1, [r0, #8]
    4dc2:	e7fa      	b.n	4dba <_system_pinmux_config+0x9a>
    4dc4:	fffbffff 	.word	0xfffbffff

00004dc8 <system_pinmux_pin_set_config>:
    4dc8:	b510      	push	{r4, lr}
    4dca:	000a      	movs	r2, r1
    4dcc:	09c1      	lsrs	r1, r0, #7
    4dce:	2300      	movs	r3, #0
    4dd0:	2900      	cmp	r1, #0
    4dd2:	d104      	bne.n	4dde <system_pinmux_pin_set_config+0x16>
    4dd4:	0943      	lsrs	r3, r0, #5
    4dd6:	01db      	lsls	r3, r3, #7
    4dd8:	4905      	ldr	r1, [pc, #20]	; (4df0 <system_pinmux_pin_set_config+0x28>)
    4dda:	468c      	mov	ip, r1
    4ddc:	4463      	add	r3, ip
    4dde:	241f      	movs	r4, #31
    4de0:	4020      	ands	r0, r4
    4de2:	2101      	movs	r1, #1
    4de4:	4081      	lsls	r1, r0
    4de6:	0018      	movs	r0, r3
    4de8:	4b02      	ldr	r3, [pc, #8]	; (4df4 <system_pinmux_pin_set_config+0x2c>)
    4dea:	4798      	blx	r3
    4dec:	bd10      	pop	{r4, pc}
    4dee:	46c0      	nop			; (mov r8, r8)
    4df0:	41004400 	.word	0x41004400
    4df4:	00004d21 	.word	0x00004d21

00004df8 <_system_dummy_init>:
    4df8:	4770      	bx	lr
	...

00004dfc <system_init>:
    4dfc:	b510      	push	{r4, lr}
    4dfe:	4b05      	ldr	r3, [pc, #20]	; (4e14 <system_init+0x18>)
    4e00:	4798      	blx	r3
    4e02:	4b05      	ldr	r3, [pc, #20]	; (4e18 <system_init+0x1c>)
    4e04:	4798      	blx	r3
    4e06:	4b05      	ldr	r3, [pc, #20]	; (4e1c <system_init+0x20>)
    4e08:	4798      	blx	r3
    4e0a:	4b05      	ldr	r3, [pc, #20]	; (4e20 <system_init+0x24>)
    4e0c:	4798      	blx	r3
    4e0e:	4b05      	ldr	r3, [pc, #20]	; (4e24 <system_init+0x28>)
    4e10:	4798      	blx	r3
    4e12:	bd10      	pop	{r4, pc}
    4e14:	00004995 	.word	0x00004995
    4e18:	00003f29 	.word	0x00003f29
    4e1c:	00004df9 	.word	0x00004df9
    4e20:	00001d61 	.word	0x00001d61
    4e24:	00004df9 	.word	0x00004df9

00004e28 <Dummy_Handler>:
    4e28:	e7fe      	b.n	4e28 <Dummy_Handler>
	...

00004e2c <Reset_Handler>:
    4e2c:	b510      	push	{r4, lr}
    4e2e:	4a1a      	ldr	r2, [pc, #104]	; (4e98 <Reset_Handler+0x6c>)
    4e30:	4b1a      	ldr	r3, [pc, #104]	; (4e9c <Reset_Handler+0x70>)
    4e32:	429a      	cmp	r2, r3
    4e34:	d011      	beq.n	4e5a <Reset_Handler+0x2e>
    4e36:	001a      	movs	r2, r3
    4e38:	4b19      	ldr	r3, [pc, #100]	; (4ea0 <Reset_Handler+0x74>)
    4e3a:	429a      	cmp	r2, r3
    4e3c:	d20d      	bcs.n	4e5a <Reset_Handler+0x2e>
    4e3e:	4a19      	ldr	r2, [pc, #100]	; (4ea4 <Reset_Handler+0x78>)
    4e40:	3303      	adds	r3, #3
    4e42:	1a9b      	subs	r3, r3, r2
    4e44:	089b      	lsrs	r3, r3, #2
    4e46:	3301      	adds	r3, #1
    4e48:	009b      	lsls	r3, r3, #2
    4e4a:	2200      	movs	r2, #0
    4e4c:	4813      	ldr	r0, [pc, #76]	; (4e9c <Reset_Handler+0x70>)
    4e4e:	4912      	ldr	r1, [pc, #72]	; (4e98 <Reset_Handler+0x6c>)
    4e50:	588c      	ldr	r4, [r1, r2]
    4e52:	5084      	str	r4, [r0, r2]
    4e54:	3204      	adds	r2, #4
    4e56:	429a      	cmp	r2, r3
    4e58:	d1fa      	bne.n	4e50 <Reset_Handler+0x24>
    4e5a:	4a13      	ldr	r2, [pc, #76]	; (4ea8 <Reset_Handler+0x7c>)
    4e5c:	4b13      	ldr	r3, [pc, #76]	; (4eac <Reset_Handler+0x80>)
    4e5e:	429a      	cmp	r2, r3
    4e60:	d20a      	bcs.n	4e78 <Reset_Handler+0x4c>
    4e62:	43d3      	mvns	r3, r2
    4e64:	4911      	ldr	r1, [pc, #68]	; (4eac <Reset_Handler+0x80>)
    4e66:	185b      	adds	r3, r3, r1
    4e68:	2103      	movs	r1, #3
    4e6a:	438b      	bics	r3, r1
    4e6c:	3304      	adds	r3, #4
    4e6e:	189b      	adds	r3, r3, r2
    4e70:	2100      	movs	r1, #0
    4e72:	c202      	stmia	r2!, {r1}
    4e74:	4293      	cmp	r3, r2
    4e76:	d1fc      	bne.n	4e72 <Reset_Handler+0x46>
    4e78:	4a0d      	ldr	r2, [pc, #52]	; (4eb0 <Reset_Handler+0x84>)
    4e7a:	21ff      	movs	r1, #255	; 0xff
    4e7c:	4b0d      	ldr	r3, [pc, #52]	; (4eb4 <Reset_Handler+0x88>)
    4e7e:	438b      	bics	r3, r1
    4e80:	6093      	str	r3, [r2, #8]
    4e82:	4a0d      	ldr	r2, [pc, #52]	; (4eb8 <Reset_Handler+0x8c>)
    4e84:	6853      	ldr	r3, [r2, #4]
    4e86:	397f      	subs	r1, #127	; 0x7f
    4e88:	430b      	orrs	r3, r1
    4e8a:	6053      	str	r3, [r2, #4]
    4e8c:	4b0b      	ldr	r3, [pc, #44]	; (4ebc <Reset_Handler+0x90>)
    4e8e:	4798      	blx	r3
    4e90:	4b0b      	ldr	r3, [pc, #44]	; (4ec0 <Reset_Handler+0x94>)
    4e92:	4798      	blx	r3
    4e94:	e7fe      	b.n	4e94 <Reset_Handler+0x68>
    4e96:	46c0      	nop			; (mov r8, r8)
    4e98:	0000593c 	.word	0x0000593c
    4e9c:	20000000 	.word	0x20000000
    4ea0:	200001cc 	.word	0x200001cc
    4ea4:	20000004 	.word	0x20000004
    4ea8:	200001cc 	.word	0x200001cc
    4eac:	200035fc 	.word	0x200035fc
    4eb0:	e000ed00 	.word	0xe000ed00
    4eb4:	00000000 	.word	0x00000000
    4eb8:	41004000 	.word	0x41004000
    4ebc:	0000552d 	.word	0x0000552d
    4ec0:	00005125 	.word	0x00005125

00004ec4 <LORA01_MAIN_FUNCTION>:




void LORA01_MAIN_FUNCTION(volatile LORA_DEFINE_t *tmp_LORA)
{
    4ec4:	b570      	push	{r4, r5, r6, lr}
    4ec6:	0004      	movs	r4, r0
	UINT16u_t Target, Source;
	//UINT16u_t tmp16;

	Target.byte[1] = dev_value[tmp_LORA->List_Now][dev_value_Time_High];
    4ec8:	214f      	movs	r1, #79	; 0x4f
    4eca:	5c40      	ldrb	r0, [r0, r1]
    4ecc:	b2c0      	uxtb	r0, r0
    4ece:	4a44      	ldr	r2, [pc, #272]	; (4fe0 <LORA01_MAIN_FUNCTION+0x11c>)
    4ed0:	00c3      	lsls	r3, r0, #3
    4ed2:	181b      	adds	r3, r3, r0
    4ed4:	009b      	lsls	r3, r3, #2
    4ed6:	181b      	adds	r3, r3, r0
    4ed8:	18d3      	adds	r3, r2, r3
    4eda:	7fd8      	ldrb	r0, [r3, #31]
	Target.byte[0] = dev_value[tmp_LORA->List_Now][dev_value_Time_Low];
    4edc:	5c65      	ldrb	r5, [r4, r1]
    4ede:	b2ed      	uxtb	r5, r5
    4ee0:	00eb      	lsls	r3, r5, #3
    4ee2:	195b      	adds	r3, r3, r5
    4ee4:	009b      	lsls	r3, r3, #2
    4ee6:	195b      	adds	r3, r3, r5
    4ee8:	18d3      	adds	r3, r2, r3
    4eea:	3320      	adds	r3, #32
    4eec:	781b      	ldrb	r3, [r3, #0]
    4eee:	0200      	lsls	r0, r0, #8
    4ef0:	4318      	orrs	r0, r3
	
	Source.byte[1] = dev_value[tmp_LORA->List_Now][dev_value_Count_High];
    4ef2:	5c65      	ldrb	r5, [r4, r1]
    4ef4:	b2ed      	uxtb	r5, r5
    4ef6:	00eb      	lsls	r3, r5, #3
    4ef8:	195b      	adds	r3, r3, r5
    4efa:	009b      	lsls	r3, r3, #2
    4efc:	195b      	adds	r3, r3, r5
    4efe:	18d3      	adds	r3, r2, r3
    4f00:	3321      	adds	r3, #33	; 0x21
    4f02:	781d      	ldrb	r5, [r3, #0]
	Source.byte[0] = dev_value[tmp_LORA->List_Now][dev_value_Count_Low];
    4f04:	5c61      	ldrb	r1, [r4, r1]
    4f06:	b2c9      	uxtb	r1, r1
    4f08:	00cb      	lsls	r3, r1, #3
    4f0a:	185b      	adds	r3, r3, r1
    4f0c:	009b      	lsls	r3, r3, #2
    4f0e:	185b      	adds	r3, r3, r1
    4f10:	18d2      	adds	r2, r2, r3
    4f12:	3222      	adds	r2, #34	; 0x22
    4f14:	7812      	ldrb	r2, [r2, #0]
    4f16:	022b      	lsls	r3, r5, #8
    4f18:	4313      	orrs	r3, r2
	
	if(tmp_LORA->NowStatus == NOP_Index)
    4f1a:	4a32      	ldr	r2, [pc, #200]	; (4fe4 <LORA01_MAIN_FUNCTION+0x120>)
    4f1c:	5ca2      	ldrb	r2, [r4, r2]
    4f1e:	2a66      	cmp	r2, #102	; 0x66
    4f20:	d00e      	beq.n	4f40 <LORA01_MAIN_FUNCTION+0x7c>
			Find_Now_And_Next_Enable_Func(tmp_LORA);
		}	
	}
	

	if(tmp_LORA->LoRa_Rx_Flag == LoraRxDataReady)
    4f22:	2386      	movs	r3, #134	; 0x86
    4f24:	009b      	lsls	r3, r3, #2
    4f26:	5ce3      	ldrb	r3, [r4, r3]
    4f28:	2b00      	cmp	r3, #0
    4f2a:	d12f      	bne.n	4f8c <LORA01_MAIN_FUNCTION+0xc8>
		Print_Catch_Data_Form_RX_Msg(tmp_LORA);
		tmp_LORA->LoRa_Rx_Flag = LoraRxNoData;
		tmp_LORA->NowStatus = NOP_Index;
	}
	else
	if(tmp_LORA->LoRa_Rx_Flag == LoraRxNoData)
    4f2c:	2386      	movs	r3, #134	; 0x86
    4f2e:	009b      	lsls	r3, r3, #2
    4f30:	5ce3      	ldrb	r3, [r4, r3]
    4f32:	2b00      	cmp	r3, #0
    4f34:	d103      	bne.n	4f3e <LORA01_MAIN_FUNCTION+0x7a>
	{
		if(tmp_LORA->NowStatus == Read_LoRa_RxCount_Index)
    4f36:	4b2b      	ldr	r3, [pc, #172]	; (4fe4 <LORA01_MAIN_FUNCTION+0x120>)
    4f38:	5ce3      	ldrb	r3, [r4, r3]
    4f3a:	2b07      	cmp	r3, #7
    4f3c:	d034      	beq.n	4fa8 <LORA01_MAIN_FUNCTION+0xe4>
				tmp_LORA->LoRa_Tx_Send_Time_Out_Count = 0;
				tmp_LORA->NowStatus = NOP_Index;
			}
		}
	}
}
    4f3e:	bd70      	pop	{r4, r5, r6, pc}
		if(Source.word > Target.word)
    4f40:	b29b      	uxth	r3, r3
    4f42:	4283      	cmp	r3, r0
    4f44:	d91e      	bls.n	4f84 <LORA01_MAIN_FUNCTION+0xc0>
			Setting_Lora_To_Tx_Mode_Func(tmp_LORA);
    4f46:	0020      	movs	r0, r4
    4f48:	4b27      	ldr	r3, [pc, #156]	; (4fe8 <LORA01_MAIN_FUNCTION+0x124>)
    4f4a:	4798      	blx	r3
			dev_value[tmp_LORA->List_Now][dev_value_Count_High] = 0;
    4f4c:	254f      	movs	r5, #79	; 0x4f
    4f4e:	5d61      	ldrb	r1, [r4, r5]
    4f50:	b2c9      	uxtb	r1, r1
    4f52:	4a23      	ldr	r2, [pc, #140]	; (4fe0 <LORA01_MAIN_FUNCTION+0x11c>)
    4f54:	00cb      	lsls	r3, r1, #3
    4f56:	185b      	adds	r3, r3, r1
    4f58:	009b      	lsls	r3, r3, #2
    4f5a:	185b      	adds	r3, r3, r1
    4f5c:	18d3      	adds	r3, r2, r3
    4f5e:	3321      	adds	r3, #33	; 0x21
    4f60:	2000      	movs	r0, #0
    4f62:	7018      	strb	r0, [r3, #0]
			dev_value[tmp_LORA->List_Now][dev_value_Count_Low] = 0;
    4f64:	5d61      	ldrb	r1, [r4, r5]
    4f66:	b2c9      	uxtb	r1, r1
    4f68:	00cb      	lsls	r3, r1, #3
    4f6a:	185b      	adds	r3, r3, r1
    4f6c:	009b      	lsls	r3, r3, #2
    4f6e:	185b      	adds	r3, r3, r1
    4f70:	18d3      	adds	r3, r2, r3
    4f72:	3322      	adds	r3, #34	; 0x22
    4f74:	7018      	strb	r0, [r3, #0]
			Print_Lora_number(tmp_LORA);
    4f76:	0020      	movs	r0, r4
    4f78:	4b1c      	ldr	r3, [pc, #112]	; (4fec <LORA01_MAIN_FUNCTION+0x128>)
    4f7a:	4798      	blx	r3
			Print_Send_Dev_No_Msg(tmp_LORA);
    4f7c:	0020      	movs	r0, r4
    4f7e:	4b1c      	ldr	r3, [pc, #112]	; (4ff0 <LORA01_MAIN_FUNCTION+0x12c>)
    4f80:	4798      	blx	r3
    4f82:	e7ce      	b.n	4f22 <LORA01_MAIN_FUNCTION+0x5e>
			Find_Now_And_Next_Enable_Func(tmp_LORA);
    4f84:	0020      	movs	r0, r4
    4f86:	4b1b      	ldr	r3, [pc, #108]	; (4ff4 <LORA01_MAIN_FUNCTION+0x130>)
    4f88:	4798      	blx	r3
    4f8a:	e7ca      	b.n	4f22 <LORA01_MAIN_FUNCTION+0x5e>
		Catch_Data_Form_RX_Func(tmp_LORA);
    4f8c:	0020      	movs	r0, r4
    4f8e:	4b1a      	ldr	r3, [pc, #104]	; (4ff8 <LORA01_MAIN_FUNCTION+0x134>)
    4f90:	4798      	blx	r3
		Print_Catch_Data_Form_RX_Msg(tmp_LORA);
    4f92:	0020      	movs	r0, r4
    4f94:	4b19      	ldr	r3, [pc, #100]	; (4ffc <LORA01_MAIN_FUNCTION+0x138>)
    4f96:	4798      	blx	r3
		tmp_LORA->LoRa_Rx_Flag = LoraRxNoData;
    4f98:	2200      	movs	r2, #0
    4f9a:	2386      	movs	r3, #134	; 0x86
    4f9c:	009b      	lsls	r3, r3, #2
    4f9e:	54e2      	strb	r2, [r4, r3]
		tmp_LORA->NowStatus = NOP_Index;
    4fa0:	3266      	adds	r2, #102	; 0x66
    4fa2:	4b10      	ldr	r3, [pc, #64]	; (4fe4 <LORA01_MAIN_FUNCTION+0x120>)
    4fa4:	54e2      	strb	r2, [r4, r3]
    4fa6:	e7ca      	b.n	4f3e <LORA01_MAIN_FUNCTION+0x7a>
			if(tmp_LORA->f_count > Lora_Wait_RX_Delay_1500ms)
    4fa8:	238c      	movs	r3, #140	; 0x8c
    4faa:	009b      	lsls	r3, r3, #2
    4fac:	58e2      	ldr	r2, [r4, r3]
    4fae:	4b14      	ldr	r3, [pc, #80]	; (5000 <LORA01_MAIN_FUNCTION+0x13c>)
    4fb0:	429a      	cmp	r2, r3
    4fb2:	d9c4      	bls.n	4f3e <LORA01_MAIN_FUNCTION+0x7a>
				dev_value[tmp_LORA->List_Now][dev_value_missnode] = Dev_Miss_Node;
    4fb4:	234f      	movs	r3, #79	; 0x4f
    4fb6:	5ce2      	ldrb	r2, [r4, r3]
    4fb8:	b2d2      	uxtb	r2, r2
    4fba:	00d3      	lsls	r3, r2, #3
    4fbc:	189b      	adds	r3, r3, r2
    4fbe:	009b      	lsls	r3, r3, #2
    4fc0:	189b      	adds	r3, r3, r2
    4fc2:	4a07      	ldr	r2, [pc, #28]	; (4fe0 <LORA01_MAIN_FUNCTION+0x11c>)
    4fc4:	18d3      	adds	r3, r2, r3
    4fc6:	2500      	movs	r5, #0
    4fc8:	779d      	strb	r5, [r3, #30]
				Print_MissNode_Form_RX_Msg(tmp_LORA);
    4fca:	0020      	movs	r0, r4
    4fcc:	4b0d      	ldr	r3, [pc, #52]	; (5004 <LORA01_MAIN_FUNCTION+0x140>)
    4fce:	4798      	blx	r3
				tmp_LORA->LoRa_Tx_Send_Time_Out_Count = 0;
    4fd0:	2387      	movs	r3, #135	; 0x87
    4fd2:	009b      	lsls	r3, r3, #2
    4fd4:	54e5      	strb	r5, [r4, r3]
				tmp_LORA->NowStatus = NOP_Index;
    4fd6:	2266      	movs	r2, #102	; 0x66
    4fd8:	4b02      	ldr	r3, [pc, #8]	; (4fe4 <LORA01_MAIN_FUNCTION+0x120>)
    4fda:	54e2      	strb	r2, [r4, r3]
}
    4fdc:	e7af      	b.n	4f3e <LORA01_MAIN_FUNCTION+0x7a>
    4fde:	46c0      	nop			; (mov r8, r8)
    4fe0:	20001070 	.word	0x20001070
    4fe4:	00000211 	.word	0x00000211
    4fe8:	0000240d 	.word	0x0000240d
    4fec:	000016f9 	.word	0x000016f9
    4ff0:	00001bf5 	.word	0x00001bf5
    4ff4:	00000915 	.word	0x00000915
    4ff8:	00000a19 	.word	0x00000a19
    4ffc:	00001aa1 	.word	0x00001aa1
    5000:	00001d4c 	.word	0x00001d4c
    5004:	000019f1 	.word	0x000019f1

00005008 <LORA02_MAIN_FUNCTION>:




void LORA02_MAIN_FUNCTION(volatile LORA_DEFINE_t *tmp_LORA)
{
    5008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    500a:	0004      	movs	r4, r0
	UINT16u_t Target, Source;
	//UINT16u_t tmp16;

	Target.byte[1] = dev_value[tmp_LORA->List_Now][dev_value_Time_High];
    500c:	234f      	movs	r3, #79	; 0x4f
    500e:	5cc2      	ldrb	r2, [r0, r3]
	Target.byte[0] = dev_value[tmp_LORA->List_Now][dev_value_Time_Low];
    5010:	5cc2      	ldrb	r2, [r0, r3]
	
	Source.byte[1] = dev_value[tmp_LORA->List_Now][dev_value_Count_High];
    5012:	5cc2      	ldrb	r2, [r0, r3]
	Source.byte[0] = dev_value[tmp_LORA->List_Now][dev_value_Count_Low];
    5014:	5cc3      	ldrb	r3, [r0, r3]
	
	

	if(tmp_LORA->LoRa_Rx_Flag == LoraRxDataReady)
    5016:	2386      	movs	r3, #134	; 0x86
    5018:	009b      	lsls	r3, r3, #2
    501a:	5cc3      	ldrb	r3, [r0, r3]
    501c:	2b00      	cmp	r3, #0
    501e:	d115      	bne.n	504c <LORA02_MAIN_FUNCTION+0x44>
		tmp_LORA->LoRa_Rx_Flag = LoraRxNoData;
		
		
	}
	else
	if(tmp_LORA->LoRa_Rx_Flag == LoraRxNoData  && tmp_LORA->LoRa_Send_Tx_Flag == LoraTxSendOK)
    5020:	2386      	movs	r3, #134	; 0x86
    5022:	009b      	lsls	r3, r3, #2
    5024:	5cc3      	ldrb	r3, [r0, r3]
    5026:	2b00      	cmp	r3, #0
    5028:	d123      	bne.n	5072 <LORA02_MAIN_FUNCTION+0x6a>
    502a:	4b31      	ldr	r3, [pc, #196]	; (50f0 <LORA02_MAIN_FUNCTION+0xe8>)
    502c:	5cc3      	ldrb	r3, [r0, r3]
    502e:	2b00      	cmp	r3, #0
    5030:	d01f      	beq.n	5072 <LORA02_MAIN_FUNCTION+0x6a>
	{
		dev_value[tmp_LORA->List_Now][dev_value_New_Data_Input] = Dev_Not_New_Data;
    5032:	234f      	movs	r3, #79	; 0x4f
    5034:	5cc2      	ldrb	r2, [r0, r3]
    5036:	b2d2      	uxtb	r2, r2
    5038:	00d3      	lsls	r3, r2, #3
    503a:	189b      	adds	r3, r3, r2
    503c:	009b      	lsls	r3, r3, #2
    503e:	189b      	adds	r3, r3, r2
    5040:	4a2c      	ldr	r2, [pc, #176]	; (50f4 <LORA02_MAIN_FUNCTION+0xec>)
    5042:	18d3      	adds	r3, r2, r3
    5044:	3323      	adds	r3, #35	; 0x23
    5046:	2200      	movs	r2, #0
    5048:	701a      	strb	r2, [r3, #0]
		//dev_value[tmp_LORA->List_Now][dev_value_UpLoad]	= Dev_Uploaded;
	}
}
    504a:	e012      	b.n	5072 <LORA02_MAIN_FUNCTION+0x6a>
		Find_Now_And_Next_Wait_Upload_Func(tmp_LORA);
    504c:	4b2a      	ldr	r3, [pc, #168]	; (50f8 <LORA02_MAIN_FUNCTION+0xf0>)
    504e:	4798      	blx	r3
		if(dev_value[tmp_LORA->List_Now][dev_value_New_Data_Input] == Dev_Have_New_Data)
    5050:	234f      	movs	r3, #79	; 0x4f
    5052:	5ce2      	ldrb	r2, [r4, r3]
    5054:	b2d2      	uxtb	r2, r2
    5056:	00d3      	lsls	r3, r2, #3
    5058:	189b      	adds	r3, r3, r2
    505a:	009b      	lsls	r3, r3, #2
    505c:	189b      	adds	r3, r3, r2
    505e:	4a25      	ldr	r2, [pc, #148]	; (50f4 <LORA02_MAIN_FUNCTION+0xec>)
    5060:	18d3      	adds	r3, r2, r3
    5062:	3323      	adds	r3, #35	; 0x23
    5064:	781b      	ldrb	r3, [r3, #0]
    5066:	2b01      	cmp	r3, #1
    5068:	d004      	beq.n	5074 <LORA02_MAIN_FUNCTION+0x6c>
		tmp_LORA->LoRa_Rx_Flag = LoraRxNoData;
    506a:	2200      	movs	r2, #0
    506c:	2386      	movs	r3, #134	; 0x86
    506e:	009b      	lsls	r3, r3, #2
    5070:	54e2      	strb	r2, [r4, r3]
}
    5072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			Setting_Lora_To_Tx_Mode_Func(tmp_LORA);
    5074:	0020      	movs	r0, r4
    5076:	4b21      	ldr	r3, [pc, #132]	; (50fc <LORA02_MAIN_FUNCTION+0xf4>)
    5078:	4798      	blx	r3
			Print_Lora_number(tmp_LORA);
    507a:	0020      	movs	r0, r4
    507c:	4d20      	ldr	r5, [pc, #128]	; (5100 <LORA02_MAIN_FUNCTION+0xf8>)
    507e:	47a8      	blx	r5
			Print_Now_And_Next_Msg(tmp_LORA);
    5080:	0020      	movs	r0, r4
    5082:	4b20      	ldr	r3, [pc, #128]	; (5104 <LORA02_MAIN_FUNCTION+0xfc>)
    5084:	4798      	blx	r3
			Print_Line_Msg();
    5086:	4b20      	ldr	r3, [pc, #128]	; (5108 <LORA02_MAIN_FUNCTION+0x100>)
    5088:	4798      	blx	r3
			Print_Lora_number(tmp_LORA);
    508a:	0020      	movs	r0, r4
    508c:	47a8      	blx	r5
			uTXByte(Debug_COM, 'N');
    508e:	4d1f      	ldr	r5, [pc, #124]	; (510c <LORA02_MAIN_FUNCTION+0x104>)
    5090:	214e      	movs	r1, #78	; 0x4e
    5092:	0028      	movs	r0, r5
    5094:	4e1e      	ldr	r6, [pc, #120]	; (5110 <LORA02_MAIN_FUNCTION+0x108>)
    5096:	47b0      	blx	r6
			uTXByte(Debug_COM, 'o');
    5098:	216f      	movs	r1, #111	; 0x6f
    509a:	0028      	movs	r0, r5
    509c:	47b0      	blx	r6
			uTXByte(Debug_COM, '.');
    509e:	212e      	movs	r1, #46	; 0x2e
    50a0:	0028      	movs	r0, r5
    50a2:	47b0      	blx	r6
			uart_send_word_for_ListNumber(Debug_COM, hex_to_bcd(Dev_List[tmp_LORA->List_Now][0]));
    50a4:	234f      	movs	r3, #79	; 0x4f
    50a6:	5ce2      	ldrb	r2, [r4, r3]
    50a8:	0053      	lsls	r3, r2, #1
    50aa:	189b      	adds	r3, r3, r2
    50ac:	005b      	lsls	r3, r3, #1
    50ae:	4a19      	ldr	r2, [pc, #100]	; (5114 <LORA02_MAIN_FUNCTION+0x10c>)
    50b0:	5c98      	ldrb	r0, [r3, r2]
    50b2:	4b19      	ldr	r3, [pc, #100]	; (5118 <LORA02_MAIN_FUNCTION+0x110>)
    50b4:	4798      	blx	r3
    50b6:	0001      	movs	r1, r0
    50b8:	0028      	movs	r0, r5
    50ba:	4b18      	ldr	r3, [pc, #96]	; (511c <LORA02_MAIN_FUNCTION+0x114>)
    50bc:	4798      	blx	r3
			uTXByte(Debug_COM, ' ');
    50be:	2120      	movs	r1, #32
    50c0:	0028      	movs	r0, r5
    50c2:	47b0      	blx	r6
    50c4:	2500      	movs	r5, #0
				uart_send_ascii_byte(Debug_COM, tmp_LORA->MyLoRaTmp[Write_LoRa_TxBuffer_Index][i]);
    50c6:	4e16      	ldr	r6, [pc, #88]	; (5120 <LORA02_MAIN_FUNCTION+0x118>)
				uTXByte(Debug_COM, ' ');
    50c8:	4f11      	ldr	r7, [pc, #68]	; (5110 <LORA02_MAIN_FUNCTION+0x108>)
				uart_send_ascii_byte(Debug_COM, tmp_LORA->MyLoRaTmp[Write_LoRa_TxBuffer_Index][i]);
    50ca:	1963      	adds	r3, r4, r5
    50cc:	33e8      	adds	r3, #232	; 0xe8
    50ce:	7819      	ldrb	r1, [r3, #0]
    50d0:	b2c9      	uxtb	r1, r1
    50d2:	480e      	ldr	r0, [pc, #56]	; (510c <LORA02_MAIN_FUNCTION+0x104>)
    50d4:	47b0      	blx	r6
				uTXByte(Debug_COM, ' ');
    50d6:	2120      	movs	r1, #32
    50d8:	480c      	ldr	r0, [pc, #48]	; (510c <LORA02_MAIN_FUNCTION+0x104>)
    50da:	47b8      	blx	r7
    50dc:	3501      	adds	r5, #1
			for(unsigned char i = 0; i < 30; i++)
    50de:	2d1e      	cmp	r5, #30
    50e0:	d1f3      	bne.n	50ca <LORA02_MAIN_FUNCTION+0xc2>
			uTXByte(Debug_COM, 0x0d);
    50e2:	210d      	movs	r1, #13
    50e4:	4809      	ldr	r0, [pc, #36]	; (510c <LORA02_MAIN_FUNCTION+0x104>)
    50e6:	4b0a      	ldr	r3, [pc, #40]	; (5110 <LORA02_MAIN_FUNCTION+0x108>)
    50e8:	4798      	blx	r3
			Print_Line_Msg();
    50ea:	4b07      	ldr	r3, [pc, #28]	; (5108 <LORA02_MAIN_FUNCTION+0x100>)
    50ec:	4798      	blx	r3
    50ee:	e7bc      	b.n	506a <LORA02_MAIN_FUNCTION+0x62>
    50f0:	00000219 	.word	0x00000219
    50f4:	20001070 	.word	0x20001070
    50f8:	00000809 	.word	0x00000809
    50fc:	0000240d 	.word	0x0000240d
    5100:	000016f9 	.word	0x000016f9
    5104:	00001b85 	.word	0x00001b85
    5108:	00001771 	.word	0x00001771
    510c:	2000022c 	.word	0x2000022c
    5110:	00003ac9 	.word	0x00003ac9
    5114:	20000a4c 	.word	0x20000a4c
    5118:	00003d41 	.word	0x00003d41
    511c:	00003b61 	.word	0x00003b61
    5120:	00003ae9 	.word	0x00003ae9

00005124 <main>:
		LORA02->LoRa_Rx_Flag = LoraRxNoData;
	}
}

int main(void)
{
    5124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5126:	46de      	mov	lr, fp
    5128:	4657      	mov	r7, sl
    512a:	464e      	mov	r6, r9
    512c:	4645      	mov	r5, r8
    512e:	b5e0      	push	{r5, r6, r7, lr}
	//UINT16u_t tmp16;
	//UINT32u_t tmp_FQ;
	//unsigned char tmp_list_table_index;

	
	system_init();
    5130:	4b6a      	ldr	r3, [pc, #424]	; (52dc <main+0x1b8>)
    5132:	4798      	blx	r3
	configure_usart();
    5134:	4b6a      	ldr	r3, [pc, #424]	; (52e0 <main+0x1bc>)
    5136:	4798      	blx	r3
	configure_usart_callbacks();
    5138:	4b6a      	ldr	r3, [pc, #424]	; (52e4 <main+0x1c0>)
    513a:	4798      	blx	r3
	//configure_adc();
	timer_configure();
    513c:	4b6a      	ldr	r3, [pc, #424]	; (52e8 <main+0x1c4>)
    513e:	4798      	blx	r3
	configure_extint_channel();
    5140:	4b6a      	ldr	r3, [pc, #424]	; (52ec <main+0x1c8>)
    5142:	4798      	blx	r3
	configure_extint_callbacks();
    5144:	4b6a      	ldr	r3, [pc, #424]	; (52f0 <main+0x1cc>)
    5146:	4798      	blx	r3
	delay_init();
    5148:	4b6a      	ldr	r3, [pc, #424]	; (52f4 <main+0x1d0>)
    514a:	4798      	blx	r3
	configure_wdt();
    514c:	4b6a      	ldr	r3, [pc, #424]	; (52f8 <main+0x1d4>)
    514e:	4798      	blx	r3
	configure_wdt_callbacks();
    5150:	4b6a      	ldr	r3, [pc, #424]	; (52fc <main+0x1d8>)
    5152:	4798      	blx	r3
	configure_nvm();
    5154:	4b6a      	ldr	r3, [pc, #424]	; (5300 <main+0x1dc>)
    5156:	4798      	blx	r3
	cpu_irq_enable();
    5158:	2701      	movs	r7, #1
    515a:	4b6a      	ldr	r3, [pc, #424]	; (5304 <main+0x1e0>)
    515c:	701f      	strb	r7, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    515e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    5162:	b662      	cpsie	i
	system_interrupt_enable_global();
	wdt_reset_count();
    5164:	4b68      	ldr	r3, [pc, #416]	; (5308 <main+0x1e4>)
    5166:	4698      	mov	r8, r3
    5168:	4798      	blx	r3
	delay_ms(100);
    516a:	2064      	movs	r0, #100	; 0x64
    516c:	4b67      	ldr	r3, [pc, #412]	; (530c <main+0x1e8>)
    516e:	4798      	blx	r3
	
	LORA01 = &NewLORA01;
    5170:	4e67      	ldr	r6, [pc, #412]	; (5310 <main+0x1ec>)
    5172:	4b68      	ldr	r3, [pc, #416]	; (5314 <main+0x1f0>)
    5174:	6033      	str	r3, [r6, #0]
	LORA01->DevUART = &MyUart03;
    5176:	4a68      	ldr	r2, [pc, #416]	; (5318 <main+0x1f4>)
    5178:	60da      	str	r2, [r3, #12]
	LORA01->NVM_offset_Value = 0;
    517a:	228b      	movs	r2, #139	; 0x8b
    517c:	0092      	lsls	r2, r2, #2
    517e:	4691      	mov	r9, r2
    5180:	2400      	movs	r4, #0
    5182:	549c      	strb	r4, [r3, r2]
	LORA01->List_Now = 0;
    5184:	3ade      	subs	r2, #222	; 0xde
    5186:	3aff      	subs	r2, #255	; 0xff
    5188:	549c      	strb	r4, [r3, r2]
	LORA01->List_Next = 0;
    518a:	3201      	adds	r2, #1
    518c:	549c      	strb	r4, [r3, r2]
	LORA01->NowStatus = Read_LoRa_ID_Index;
    518e:	4a63      	ldr	r2, [pc, #396]	; (531c <main+0x1f8>)
    5190:	4694      	mov	ip, r2
    5192:	549c      	strb	r4, [r3, r2]
	LORA01->LoRa_TxRx_Mode_Flag = SetNOP;
    5194:	4862      	ldr	r0, [pc, #392]	; (5320 <main+0x1fc>)
    5196:	2204      	movs	r2, #4
    5198:	541a      	strb	r2, [r3, r0]
	LORA01->LoRa_Send_Tx_Flag = LoraTxNoSend;
    519a:	4a62      	ldr	r2, [pc, #392]	; (5324 <main+0x200>)
    519c:	4693      	mov	fp, r2
    519e:	549c      	strb	r4, [r3, r2]
	LORA01->LoRa_Tx_Send_Time_Out_Count = 0;
    51a0:	3203      	adds	r2, #3
    51a2:	549c      	strb	r4, [r3, r2]
	LORA01->Lora_Show_Flag = true;
    51a4:	4a60      	ldr	r2, [pc, #384]	; (5328 <main+0x204>)
    51a6:	549f      	strb	r7, [r3, r2]
	
	LORA02 = &NewLORA02;
    51a8:	4d60      	ldr	r5, [pc, #384]	; (532c <main+0x208>)
    51aa:	4b61      	ldr	r3, [pc, #388]	; (5330 <main+0x20c>)
    51ac:	602b      	str	r3, [r5, #0]
	LORA02->DevUART = &MyUart04;
    51ae:	4a61      	ldr	r2, [pc, #388]	; (5334 <main+0x210>)
    51b0:	60da      	str	r2, [r3, #12]
	LORA02->NVM_offset_Value = 10;
    51b2:	220a      	movs	r2, #10
    51b4:	4692      	mov	sl, r2
    51b6:	464a      	mov	r2, r9
    51b8:	4651      	mov	r1, sl
    51ba:	5499      	strb	r1, [r3, r2]
	LORA02->NowStatus = Read_LoRa_ID_Index;
    51bc:	4662      	mov	r2, ip
    51be:	549c      	strb	r4, [r3, r2]
	LORA02->LoRa_TxRx_Mode_Flag = SetRx;
    51c0:	2203      	movs	r2, #3
    51c2:	541a      	strb	r2, [r3, r0]
	LORA02->LoRa_Send_Tx_Flag = LoraTxNoSend;
    51c4:	465a      	mov	r2, fp
    51c6:	549c      	strb	r4, [r3, r2]
	LORA02->Lora_Show_Flag = true;
    51c8:	4a57      	ldr	r2, [pc, #348]	; (5328 <main+0x204>)
    51ca:	549f      	strb	r7, [r3, r2]

	Define_Profile_COPY_TO_RAM();
    51cc:	4b5a      	ldr	r3, [pc, #360]	; (5338 <main+0x214>)
    51ce:	4798      	blx	r3
		
	Define_Dev_List_Func();
    51d0:	4b5a      	ldr	r3, [pc, #360]	; (533c <main+0x218>)
    51d2:	4798      	blx	r3
	Define_Dev_Time_Func();
    51d4:	4b5a      	ldr	r3, [pc, #360]	; (5340 <main+0x21c>)
    51d6:	4798      	blx	r3
	
	Load_List_Form_NVM();
    51d8:	4b5a      	ldr	r3, [pc, #360]	; (5344 <main+0x220>)
    51da:	4798      	blx	r3
	Load_Dev_Time_Form_NVM();
    51dc:	4b5a      	ldr	r3, [pc, #360]	; (5348 <main+0x224>)
    51de:	4798      	blx	r3
	
	wdt_reset_count();
    51e0:	47c0      	blx	r8
	
	Print_Start_Msg();
    51e2:	4b5a      	ldr	r3, [pc, #360]	; (534c <main+0x228>)
    51e4:	4798      	blx	r3
	
	Find_Now_And_Next_Enable_Func(LORA01);
    51e6:	6830      	ldr	r0, [r6, #0]
    51e8:	4b59      	ldr	r3, [pc, #356]	; (5350 <main+0x22c>)
    51ea:	4798      	blx	r3
	Find_Now_And_Next_Wait_Upload_Func(LORA02);
    51ec:	6828      	ldr	r0, [r5, #0]
    51ee:	4b59      	ldr	r3, [pc, #356]	; (5354 <main+0x230>)
    51f0:	4798      	blx	r3
	Load_LoRa_Profile_in_NVM(LORA01);
    51f2:	6830      	ldr	r0, [r6, #0]
    51f4:	4e58      	ldr	r6, [pc, #352]	; (5358 <main+0x234>)
    51f6:	47b0      	blx	r6
	Load_LoRa_Profile_in_NVM(LORA02);
    51f8:	6828      	ldr	r0, [r5, #0]
    51fa:	47b0      	blx	r6
	
	UserKeyInStauts = NOP;
    51fc:	4b57      	ldr	r3, [pc, #348]	; (535c <main+0x238>)
    51fe:	701c      	strb	r4, [r3, #0]
	CMD_Index = CMD_NOP_Index;
    5200:	4b57      	ldr	r3, [pc, #348]	; (5360 <main+0x23c>)
    5202:	701c      	strb	r4, [r3, #0]
	MyLoRaTmp[Write_LoRa_TxBuffer_Index][18] = Sensor_Data[5][1];
*/

	while (true) 
	{
		usart_read_buffer_job(Debug_COM, (uint8_t *)user_rx_buffer, MAX_RX_BUFFER_LENGTH);
    5204:	4e57      	ldr	r6, [pc, #348]	; (5364 <main+0x240>)
    5206:	e02f      	b.n	5268 <main+0x144>
				Print_Line_Msg();
				for(unsigned char k = 0; k < (UserKeyInBufCount - 1); k++)
				{
					uTXByte(Debug_COM, UserKeyInBuf[k]);
				}
				uTXByte(Debug_COM, 0x09);
    5208:	4c57      	ldr	r4, [pc, #348]	; (5368 <main+0x244>)
    520a:	2109      	movs	r1, #9
    520c:	0020      	movs	r0, r4
    520e:	4d57      	ldr	r5, [pc, #348]	; (536c <main+0x248>)
    5210:	47a8      	blx	r5
				uTXByte(Debug_COM, '[');
    5212:	215b      	movs	r1, #91	; 0x5b
    5214:	0020      	movs	r0, r4
    5216:	47a8      	blx	r5
				uart_send_word(Debug_COM, hex_to_bcd(UserKeyInBufCount));
    5218:	4f55      	ldr	r7, [pc, #340]	; (5370 <main+0x24c>)
    521a:	7838      	ldrb	r0, [r7, #0]
    521c:	4b55      	ldr	r3, [pc, #340]	; (5374 <main+0x250>)
    521e:	4798      	blx	r3
    5220:	0001      	movs	r1, r0
    5222:	0020      	movs	r0, r4
    5224:	4b54      	ldr	r3, [pc, #336]	; (5378 <main+0x254>)
    5226:	4798      	blx	r3
				uTXByte(Debug_COM, ']');
    5228:	215d      	movs	r1, #93	; 0x5d
    522a:	0020      	movs	r0, r4
    522c:	47a8      	blx	r5
				uTXByte(Debug_COM, 0x0d);
    522e:	210d      	movs	r1, #13
    5230:	0020      	movs	r0, r4
    5232:	47a8      	blx	r5
				Print_Line_Msg();
    5234:	4b51      	ldr	r3, [pc, #324]	; (537c <main+0x258>)
    5236:	4798      	blx	r3
				
				Judg_KEY_D();
    5238:	4b51      	ldr	r3, [pc, #324]	; (5380 <main+0x25c>)
    523a:	4798      	blx	r3
				Judg_KEY_S();
    523c:	4b51      	ldr	r3, [pc, #324]	; (5384 <main+0x260>)
    523e:	4798      	blx	r3
				Judg_KEY_L();
    5240:	4b51      	ldr	r3, [pc, #324]	; (5388 <main+0x264>)
    5242:	4798      	blx	r3
				Judg_KEY_R();
    5244:	4b51      	ldr	r3, [pc, #324]	; (538c <main+0x268>)
    5246:	4798      	blx	r3
				Judg_KEY_E();
    5248:	4b51      	ldr	r3, [pc, #324]	; (5390 <main+0x26c>)
    524a:	4798      	blx	r3
				Judg_KEY_ADD();
    524c:	4b51      	ldr	r3, [pc, #324]	; (5394 <main+0x270>)
    524e:	4798      	blx	r3
				Judg_KEY_DL();
    5250:	4b51      	ldr	r3, [pc, #324]	; (5398 <main+0x274>)
    5252:	4798      	blx	r3
				Judg_KEY_SHOW();
    5254:	4b51      	ldr	r3, [pc, #324]	; (539c <main+0x278>)
    5256:	4798      	blx	r3
				Judg_KEY_T();
    5258:	4b51      	ldr	r3, [pc, #324]	; (53a0 <main+0x27c>)
    525a:	4798      	blx	r3
				
				UserKeyInStauts = NOP;
    525c:	2300      	movs	r3, #0
    525e:	4a3f      	ldr	r2, [pc, #252]	; (535c <main+0x238>)
    5260:	7013      	strb	r3, [r2, #0]
				UserKeyInBufCount = 0;
    5262:	703b      	strb	r3, [r7, #0]
				
			case NOP:
			
				break;
		}
		CMD_Func();
    5264:	4b4f      	ldr	r3, [pc, #316]	; (53a4 <main+0x280>)
    5266:	4798      	blx	r3
		usart_read_buffer_job(Debug_COM, (uint8_t *)user_rx_buffer, MAX_RX_BUFFER_LENGTH);
    5268:	2201      	movs	r2, #1
    526a:	494f      	ldr	r1, [pc, #316]	; (53a8 <main+0x284>)
    526c:	483e      	ldr	r0, [pc, #248]	; (5368 <main+0x244>)
    526e:	47b0      	blx	r6
		usart_read_buffer_job(LORA01->DevUART, (uint8_t *)LORA01->rx_buffer, MAX_RX_BUFFER_LENGTH);
    5270:	4c27      	ldr	r4, [pc, #156]	; (5310 <main+0x1ec>)
    5272:	6821      	ldr	r1, [r4, #0]
    5274:	68c8      	ldr	r0, [r1, #12]
    5276:	3110      	adds	r1, #16
    5278:	2201      	movs	r2, #1
    527a:	47b0      	blx	r6
		usart_read_buffer_job(LORA02->DevUART, (uint8_t *)LORA02->rx_buffer, MAX_RX_BUFFER_LENGTH);
    527c:	4d2b      	ldr	r5, [pc, #172]	; (532c <main+0x208>)
    527e:	6829      	ldr	r1, [r5, #0]
    5280:	68c8      	ldr	r0, [r1, #12]
    5282:	3110      	adds	r1, #16
    5284:	2201      	movs	r2, #1
    5286:	47b0      	blx	r6
		Lora_CMD_Func(LORA01);
    5288:	6820      	ldr	r0, [r4, #0]
    528a:	4f48      	ldr	r7, [pc, #288]	; (53ac <main+0x288>)
    528c:	47b8      	blx	r7
		Lora_CMD_Func(LORA02);	
    528e:	6828      	ldr	r0, [r5, #0]
    5290:	47b8      	blx	r7
		LORA01_MAIN_FUNCTION(LORA01);
    5292:	6820      	ldr	r0, [r4, #0]
    5294:	4b46      	ldr	r3, [pc, #280]	; (53b0 <main+0x28c>)
    5296:	4798      	blx	r3
		LORA02_MAIN_FUNCTION(LORA02);
    5298:	6828      	ldr	r0, [r5, #0]
    529a:	4b46      	ldr	r3, [pc, #280]	; (53b4 <main+0x290>)
    529c:	4798      	blx	r3
		Fill_Dev_Time_into_dev_value(LORA01);
    529e:	6820      	ldr	r0, [r4, #0]
    52a0:	4b45      	ldr	r3, [pc, #276]	; (53b8 <main+0x294>)
    52a2:	4798      	blx	r3
		switch(UserKeyInStauts)
    52a4:	4b2d      	ldr	r3, [pc, #180]	; (535c <main+0x238>)
    52a6:	781b      	ldrb	r3, [r3, #0]
    52a8:	2b01      	cmp	r3, #1
    52aa:	d1db      	bne.n	5264 <main+0x140>
				Print_Line_Msg();
    52ac:	4b33      	ldr	r3, [pc, #204]	; (537c <main+0x258>)
    52ae:	4798      	blx	r3
				for(unsigned char k = 0; k < (UserKeyInBufCount - 1); k++)
    52b0:	4b2f      	ldr	r3, [pc, #188]	; (5370 <main+0x24c>)
    52b2:	781b      	ldrb	r3, [r3, #0]
    52b4:	3b01      	subs	r3, #1
    52b6:	2b00      	cmp	r3, #0
    52b8:	dda6      	ble.n	5208 <main+0xe4>
    52ba:	2200      	movs	r2, #0
    52bc:	2400      	movs	r4, #0
					uTXByte(Debug_COM, UserKeyInBuf[k]);
    52be:	4d3f      	ldr	r5, [pc, #252]	; (53bc <main+0x298>)
    52c0:	4f2a      	ldr	r7, [pc, #168]	; (536c <main+0x248>)
    52c2:	5ca9      	ldrb	r1, [r5, r2]
    52c4:	4828      	ldr	r0, [pc, #160]	; (5368 <main+0x244>)
    52c6:	47b8      	blx	r7
				for(unsigned char k = 0; k < (UserKeyInBufCount - 1); k++)
    52c8:	3401      	adds	r4, #1
    52ca:	b2e4      	uxtb	r4, r4
    52cc:	0022      	movs	r2, r4
    52ce:	4b28      	ldr	r3, [pc, #160]	; (5370 <main+0x24c>)
    52d0:	781b      	ldrb	r3, [r3, #0]
    52d2:	3b01      	subs	r3, #1
    52d4:	429c      	cmp	r4, r3
    52d6:	dbf4      	blt.n	52c2 <main+0x19e>
    52d8:	e796      	b.n	5208 <main+0xe4>
    52da:	46c0      	nop			; (mov r8, r8)
    52dc:	00004dfd 	.word	0x00004dfd
    52e0:	000038d1 	.word	0x000038d1
    52e4:	00003a71 	.word	0x00003a71
    52e8:	000037fd 	.word	0x000037fd
    52ec:	00002399 	.word	0x00002399
    52f0:	000023d9 	.word	0x000023d9
    52f4:	00003e4d 	.word	0x00003e4d
    52f8:	00001c5d 	.word	0x00001c5d
    52fc:	00001c89 	.word	0x00001c89
    5300:	00001169 	.word	0x00001169
    5304:	200001c8 	.word	0x200001c8
    5308:	000022f9 	.word	0x000022f9
    530c:	00003e8d 	.word	0x00003e8d
    5310:	20001048 	.word	0x20001048
    5314:	20000814 	.word	0x20000814
    5318:	2000104c 	.word	0x2000104c
    531c:	00000211 	.word	0x00000211
    5320:	0000021d 	.word	0x0000021d
    5324:	00000219 	.word	0x00000219
    5328:	0000021a 	.word	0x0000021a
    532c:	200004b4 	.word	0x200004b4
    5330:	200004bc 	.word	0x200004bc
    5334:	20003550 	.word	0x20003550
    5338:	000007a1 	.word	0x000007a1
    533c:	00000aa1 	.word	0x00000aa1
    5340:	00000a69 	.word	0x00000a69
    5344:	00001639 	.word	0x00001639
    5348:	000015a9 	.word	0x000015a9
    534c:	000017a1 	.word	0x000017a1
    5350:	00000915 	.word	0x00000915
    5354:	00000809 	.word	0x00000809
    5358:	00001235 	.word	0x00001235
    535c:	200004b8 	.word	0x200004b8
    5360:	2000354b 	.word	0x2000354b
    5364:	00004709 	.word	0x00004709
    5368:	2000022c 	.word	0x2000022c
    536c:	00003ac9 	.word	0x00003ac9
    5370:	200004b1 	.word	0x200004b1
    5374:	00003d41 	.word	0x00003d41
    5378:	00003b15 	.word	0x00003b15
    537c:	00001771 	.word	0x00001771
    5380:	00000c95 	.word	0x00000c95
    5384:	00000bcd 	.word	0x00000bcd
    5388:	00000cd1 	.word	0x00000cd1
    538c:	00000d05 	.word	0x00000d05
    5390:	00000d39 	.word	0x00000d39
    5394:	00000df1 	.word	0x00000df1
    5398:	00000efd 	.word	0x00000efd
    539c:	00001001 	.word	0x00001001
    53a0:	00001075 	.word	0x00001075
    53a4:	00000619 	.word	0x00000619
    53a8:	20000228 	.word	0x20000228
    53ac:	00002711 	.word	0x00002711
    53b0:	00004ec5 	.word	0x00004ec5
    53b4:	00005009 	.word	0x00005009
    53b8:	00000b41 	.word	0x00000b41
    53bc:	20000490 	.word	0x20000490

000053c0 <__udivsi3>:
    53c0:	2200      	movs	r2, #0
    53c2:	0843      	lsrs	r3, r0, #1
    53c4:	428b      	cmp	r3, r1
    53c6:	d374      	bcc.n	54b2 <__udivsi3+0xf2>
    53c8:	0903      	lsrs	r3, r0, #4
    53ca:	428b      	cmp	r3, r1
    53cc:	d35f      	bcc.n	548e <__udivsi3+0xce>
    53ce:	0a03      	lsrs	r3, r0, #8
    53d0:	428b      	cmp	r3, r1
    53d2:	d344      	bcc.n	545e <__udivsi3+0x9e>
    53d4:	0b03      	lsrs	r3, r0, #12
    53d6:	428b      	cmp	r3, r1
    53d8:	d328      	bcc.n	542c <__udivsi3+0x6c>
    53da:	0c03      	lsrs	r3, r0, #16
    53dc:	428b      	cmp	r3, r1
    53de:	d30d      	bcc.n	53fc <__udivsi3+0x3c>
    53e0:	22ff      	movs	r2, #255	; 0xff
    53e2:	0209      	lsls	r1, r1, #8
    53e4:	ba12      	rev	r2, r2
    53e6:	0c03      	lsrs	r3, r0, #16
    53e8:	428b      	cmp	r3, r1
    53ea:	d302      	bcc.n	53f2 <__udivsi3+0x32>
    53ec:	1212      	asrs	r2, r2, #8
    53ee:	0209      	lsls	r1, r1, #8
    53f0:	d065      	beq.n	54be <__udivsi3+0xfe>
    53f2:	0b03      	lsrs	r3, r0, #12
    53f4:	428b      	cmp	r3, r1
    53f6:	d319      	bcc.n	542c <__udivsi3+0x6c>
    53f8:	e000      	b.n	53fc <__udivsi3+0x3c>
    53fa:	0a09      	lsrs	r1, r1, #8
    53fc:	0bc3      	lsrs	r3, r0, #15
    53fe:	428b      	cmp	r3, r1
    5400:	d301      	bcc.n	5406 <__udivsi3+0x46>
    5402:	03cb      	lsls	r3, r1, #15
    5404:	1ac0      	subs	r0, r0, r3
    5406:	4152      	adcs	r2, r2
    5408:	0b83      	lsrs	r3, r0, #14
    540a:	428b      	cmp	r3, r1
    540c:	d301      	bcc.n	5412 <__udivsi3+0x52>
    540e:	038b      	lsls	r3, r1, #14
    5410:	1ac0      	subs	r0, r0, r3
    5412:	4152      	adcs	r2, r2
    5414:	0b43      	lsrs	r3, r0, #13
    5416:	428b      	cmp	r3, r1
    5418:	d301      	bcc.n	541e <__udivsi3+0x5e>
    541a:	034b      	lsls	r3, r1, #13
    541c:	1ac0      	subs	r0, r0, r3
    541e:	4152      	adcs	r2, r2
    5420:	0b03      	lsrs	r3, r0, #12
    5422:	428b      	cmp	r3, r1
    5424:	d301      	bcc.n	542a <__udivsi3+0x6a>
    5426:	030b      	lsls	r3, r1, #12
    5428:	1ac0      	subs	r0, r0, r3
    542a:	4152      	adcs	r2, r2
    542c:	0ac3      	lsrs	r3, r0, #11
    542e:	428b      	cmp	r3, r1
    5430:	d301      	bcc.n	5436 <__udivsi3+0x76>
    5432:	02cb      	lsls	r3, r1, #11
    5434:	1ac0      	subs	r0, r0, r3
    5436:	4152      	adcs	r2, r2
    5438:	0a83      	lsrs	r3, r0, #10
    543a:	428b      	cmp	r3, r1
    543c:	d301      	bcc.n	5442 <__udivsi3+0x82>
    543e:	028b      	lsls	r3, r1, #10
    5440:	1ac0      	subs	r0, r0, r3
    5442:	4152      	adcs	r2, r2
    5444:	0a43      	lsrs	r3, r0, #9
    5446:	428b      	cmp	r3, r1
    5448:	d301      	bcc.n	544e <__udivsi3+0x8e>
    544a:	024b      	lsls	r3, r1, #9
    544c:	1ac0      	subs	r0, r0, r3
    544e:	4152      	adcs	r2, r2
    5450:	0a03      	lsrs	r3, r0, #8
    5452:	428b      	cmp	r3, r1
    5454:	d301      	bcc.n	545a <__udivsi3+0x9a>
    5456:	020b      	lsls	r3, r1, #8
    5458:	1ac0      	subs	r0, r0, r3
    545a:	4152      	adcs	r2, r2
    545c:	d2cd      	bcs.n	53fa <__udivsi3+0x3a>
    545e:	09c3      	lsrs	r3, r0, #7
    5460:	428b      	cmp	r3, r1
    5462:	d301      	bcc.n	5468 <__udivsi3+0xa8>
    5464:	01cb      	lsls	r3, r1, #7
    5466:	1ac0      	subs	r0, r0, r3
    5468:	4152      	adcs	r2, r2
    546a:	0983      	lsrs	r3, r0, #6
    546c:	428b      	cmp	r3, r1
    546e:	d301      	bcc.n	5474 <__udivsi3+0xb4>
    5470:	018b      	lsls	r3, r1, #6
    5472:	1ac0      	subs	r0, r0, r3
    5474:	4152      	adcs	r2, r2
    5476:	0943      	lsrs	r3, r0, #5
    5478:	428b      	cmp	r3, r1
    547a:	d301      	bcc.n	5480 <__udivsi3+0xc0>
    547c:	014b      	lsls	r3, r1, #5
    547e:	1ac0      	subs	r0, r0, r3
    5480:	4152      	adcs	r2, r2
    5482:	0903      	lsrs	r3, r0, #4
    5484:	428b      	cmp	r3, r1
    5486:	d301      	bcc.n	548c <__udivsi3+0xcc>
    5488:	010b      	lsls	r3, r1, #4
    548a:	1ac0      	subs	r0, r0, r3
    548c:	4152      	adcs	r2, r2
    548e:	08c3      	lsrs	r3, r0, #3
    5490:	428b      	cmp	r3, r1
    5492:	d301      	bcc.n	5498 <__udivsi3+0xd8>
    5494:	00cb      	lsls	r3, r1, #3
    5496:	1ac0      	subs	r0, r0, r3
    5498:	4152      	adcs	r2, r2
    549a:	0883      	lsrs	r3, r0, #2
    549c:	428b      	cmp	r3, r1
    549e:	d301      	bcc.n	54a4 <__udivsi3+0xe4>
    54a0:	008b      	lsls	r3, r1, #2
    54a2:	1ac0      	subs	r0, r0, r3
    54a4:	4152      	adcs	r2, r2
    54a6:	0843      	lsrs	r3, r0, #1
    54a8:	428b      	cmp	r3, r1
    54aa:	d301      	bcc.n	54b0 <__udivsi3+0xf0>
    54ac:	004b      	lsls	r3, r1, #1
    54ae:	1ac0      	subs	r0, r0, r3
    54b0:	4152      	adcs	r2, r2
    54b2:	1a41      	subs	r1, r0, r1
    54b4:	d200      	bcs.n	54b8 <__udivsi3+0xf8>
    54b6:	4601      	mov	r1, r0
    54b8:	4152      	adcs	r2, r2
    54ba:	4610      	mov	r0, r2
    54bc:	4770      	bx	lr
    54be:	e7ff      	b.n	54c0 <__udivsi3+0x100>
    54c0:	b501      	push	{r0, lr}
    54c2:	2000      	movs	r0, #0
    54c4:	f000 f806 	bl	54d4 <__aeabi_idiv0>
    54c8:	bd02      	pop	{r1, pc}
    54ca:	46c0      	nop			; (mov r8, r8)

000054cc <__aeabi_uidivmod>:
    54cc:	2900      	cmp	r1, #0
    54ce:	d0f7      	beq.n	54c0 <__udivsi3+0x100>
    54d0:	e776      	b.n	53c0 <__udivsi3>
    54d2:	4770      	bx	lr

000054d4 <__aeabi_idiv0>:
    54d4:	4770      	bx	lr
    54d6:	46c0      	nop			; (mov r8, r8)

000054d8 <__aeabi_lmul>:
    54d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    54da:	46ce      	mov	lr, r9
    54dc:	4647      	mov	r7, r8
    54de:	0415      	lsls	r5, r2, #16
    54e0:	0c2d      	lsrs	r5, r5, #16
    54e2:	002e      	movs	r6, r5
    54e4:	b580      	push	{r7, lr}
    54e6:	0407      	lsls	r7, r0, #16
    54e8:	0c14      	lsrs	r4, r2, #16
    54ea:	0c3f      	lsrs	r7, r7, #16
    54ec:	4699      	mov	r9, r3
    54ee:	0c03      	lsrs	r3, r0, #16
    54f0:	437e      	muls	r6, r7
    54f2:	435d      	muls	r5, r3
    54f4:	4367      	muls	r7, r4
    54f6:	4363      	muls	r3, r4
    54f8:	197f      	adds	r7, r7, r5
    54fa:	0c34      	lsrs	r4, r6, #16
    54fc:	19e4      	adds	r4, r4, r7
    54fe:	469c      	mov	ip, r3
    5500:	42a5      	cmp	r5, r4
    5502:	d903      	bls.n	550c <__aeabi_lmul+0x34>
    5504:	2380      	movs	r3, #128	; 0x80
    5506:	025b      	lsls	r3, r3, #9
    5508:	4698      	mov	r8, r3
    550a:	44c4      	add	ip, r8
    550c:	464b      	mov	r3, r9
    550e:	4351      	muls	r1, r2
    5510:	4343      	muls	r3, r0
    5512:	0436      	lsls	r6, r6, #16
    5514:	0c36      	lsrs	r6, r6, #16
    5516:	0c25      	lsrs	r5, r4, #16
    5518:	0424      	lsls	r4, r4, #16
    551a:	4465      	add	r5, ip
    551c:	19a4      	adds	r4, r4, r6
    551e:	1859      	adds	r1, r3, r1
    5520:	1949      	adds	r1, r1, r5
    5522:	0020      	movs	r0, r4
    5524:	bc0c      	pop	{r2, r3}
    5526:	4690      	mov	r8, r2
    5528:	4699      	mov	r9, r3
    552a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000552c <__libc_init_array>:
    552c:	b570      	push	{r4, r5, r6, lr}
    552e:	2600      	movs	r6, #0
    5530:	4d0c      	ldr	r5, [pc, #48]	; (5564 <__libc_init_array+0x38>)
    5532:	4c0d      	ldr	r4, [pc, #52]	; (5568 <__libc_init_array+0x3c>)
    5534:	1b64      	subs	r4, r4, r5
    5536:	10a4      	asrs	r4, r4, #2
    5538:	42a6      	cmp	r6, r4
    553a:	d109      	bne.n	5550 <__libc_init_array+0x24>
    553c:	2600      	movs	r6, #0
    553e:	f000 f9ed 	bl	591c <_init>
    5542:	4d0a      	ldr	r5, [pc, #40]	; (556c <__libc_init_array+0x40>)
    5544:	4c0a      	ldr	r4, [pc, #40]	; (5570 <__libc_init_array+0x44>)
    5546:	1b64      	subs	r4, r4, r5
    5548:	10a4      	asrs	r4, r4, #2
    554a:	42a6      	cmp	r6, r4
    554c:	d105      	bne.n	555a <__libc_init_array+0x2e>
    554e:	bd70      	pop	{r4, r5, r6, pc}
    5550:	00b3      	lsls	r3, r6, #2
    5552:	58eb      	ldr	r3, [r5, r3]
    5554:	4798      	blx	r3
    5556:	3601      	adds	r6, #1
    5558:	e7ee      	b.n	5538 <__libc_init_array+0xc>
    555a:	00b3      	lsls	r3, r6, #2
    555c:	58eb      	ldr	r3, [r5, r3]
    555e:	4798      	blx	r3
    5560:	3601      	adds	r6, #1
    5562:	e7f2      	b.n	554a <__libc_init_array+0x1e>
    5564:	00005928 	.word	0x00005928
    5568:	00005928 	.word	0x00005928
    556c:	00005928 	.word	0x00005928
    5570:	0000592c 	.word	0x0000592c

00005574 <memcpy>:
    5574:	2300      	movs	r3, #0
    5576:	b510      	push	{r4, lr}
    5578:	429a      	cmp	r2, r3
    557a:	d100      	bne.n	557e <memcpy+0xa>
    557c:	bd10      	pop	{r4, pc}
    557e:	5ccc      	ldrb	r4, [r1, r3]
    5580:	54c4      	strb	r4, [r0, r3]
    5582:	3301      	adds	r3, #1
    5584:	e7f8      	b.n	5578 <memcpy+0x4>
    5586:	0000      	movs	r0, r0
    5588:	00000214 	.word	0x00000214
    558c:	00000214 	.word	0x00000214
    5590:	000001f0 	.word	0x000001f0
    5594:	00000214 	.word	0x00000214
    5598:	000001f0 	.word	0x000001f0
    559c:	000001d6 	.word	0x000001d6
    55a0:	000001d6 	.word	0x000001d6
    55a4:	00000214 	.word	0x00000214
    55a8:	00000214 	.word	0x00000214
    55ac:	00000214 	.word	0x00000214
    55b0:	00000214 	.word	0x00000214
    55b4:	00000214 	.word	0x00000214
    55b8:	00000214 	.word	0x00000214
    55bc:	00000214 	.word	0x00000214
    55c0:	00000214 	.word	0x00000214
    55c4:	00000214 	.word	0x00000214
    55c8:	00000214 	.word	0x00000214
    55cc:	00000214 	.word	0x00000214
    55d0:	00000214 	.word	0x00000214
    55d4:	00000214 	.word	0x00000214
    55d8:	00000214 	.word	0x00000214
    55dc:	00000214 	.word	0x00000214
    55e0:	00000214 	.word	0x00000214
    55e4:	00000214 	.word	0x00000214
    55e8:	00000214 	.word	0x00000214
    55ec:	00000214 	.word	0x00000214
    55f0:	00000214 	.word	0x00000214
    55f4:	00000214 	.word	0x00000214
    55f8:	00000214 	.word	0x00000214
    55fc:	00000214 	.word	0x00000214
    5600:	00000214 	.word	0x00000214
    5604:	00000214 	.word	0x00000214
    5608:	00000214 	.word	0x00000214
    560c:	00000214 	.word	0x00000214
    5610:	00000214 	.word	0x00000214
    5614:	00000214 	.word	0x00000214
    5618:	00000214 	.word	0x00000214
    561c:	00000214 	.word	0x00000214
    5620:	00000214 	.word	0x00000214
    5624:	00000214 	.word	0x00000214
    5628:	00000214 	.word	0x00000214
    562c:	00000214 	.word	0x00000214
    5630:	00000214 	.word	0x00000214
    5634:	00000214 	.word	0x00000214
    5638:	00000214 	.word	0x00000214
    563c:	00000214 	.word	0x00000214
    5640:	00000214 	.word	0x00000214
    5644:	00000214 	.word	0x00000214
    5648:	00000214 	.word	0x00000214
    564c:	00000214 	.word	0x00000214
    5650:	00000214 	.word	0x00000214
    5654:	00000214 	.word	0x00000214
    5658:	00000214 	.word	0x00000214
    565c:	00000214 	.word	0x00000214
    5660:	00000214 	.word	0x00000214
    5664:	00000214 	.word	0x00000214
    5668:	00000214 	.word	0x00000214
    566c:	00000214 	.word	0x00000214
    5670:	00000214 	.word	0x00000214
    5674:	00000214 	.word	0x00000214
    5678:	00000214 	.word	0x00000214
    567c:	00000214 	.word	0x00000214
    5680:	00000214 	.word	0x00000214
    5684:	00000214 	.word	0x00000214
    5688:	000001f0 	.word	0x000001f0
    568c:	000001f0 	.word	0x000001f0
    5690:	000001f8 	.word	0x000001f8
    5694:	000001f8 	.word	0x000001f8
    5698:	000001f8 	.word	0x000001f8
    569c:	000001f8 	.word	0x000001f8
    56a0:	00000698 	.word	0x00000698
    56a4:	0000062a 	.word	0x0000062a
    56a8:	0000064a 	.word	0x0000064a
    56ac:	00000686 	.word	0x00000686
    56b0:	0000069a 	.word	0x0000069a
    56b4:	000006b2 	.word	0x000006b2
    56b8:	000006d2 	.word	0x000006d2
    56bc:	000006f2 	.word	0x000006f2
    56c0:	00000712 	.word	0x00000712
    56c4:	42002000 	.word	0x42002000
    56c8:	42002400 	.word	0x42002400
    56cc:	42002800 	.word	0x42002800
    56d0:	42002c00 	.word	0x42002c00
    56d4:	42003000 	.word	0x42003000
    56d8:	42003400 	.word	0x42003400
    56dc:	42003800 	.word	0x42003800
    56e0:	42003c00 	.word	0x42003c00
    56e4:	02000100 	.word	0x02000100
    56e8:	08000400 	.word	0x08000400
    56ec:	20001000 	.word	0x20001000
    56f0:	80004000 	.word	0x80004000
    56f4:	0000287a 	.word	0x0000287a
    56f8:	000028c4 	.word	0x000028c4
    56fc:	00002944 	.word	0x00002944
    5700:	0000290c 	.word	0x0000290c
    5704:	000028e8 	.word	0x000028e8
    5708:	00002b1e 	.word	0x00002b1e
    570c:	00002a44 	.word	0x00002a44
    5710:	000029b6 	.word	0x000029b6
    5714:	00002738 	.word	0x00002738
    5718:	00002738 	.word	0x00002738
    571c:	00002738 	.word	0x00002738
    5720:	00002738 	.word	0x00002738
    5724:	00002738 	.word	0x00002738
    5728:	00002738 	.word	0x00002738
    572c:	00002738 	.word	0x00002738
    5730:	00002738 	.word	0x00002738
    5734:	00002738 	.word	0x00002738
    5738:	00002738 	.word	0x00002738
    573c:	00002738 	.word	0x00002738
    5740:	00002738 	.word	0x00002738
    5744:	00002738 	.word	0x00002738
    5748:	00002738 	.word	0x00002738
    574c:	00002738 	.word	0x00002738
    5750:	00002738 	.word	0x00002738
    5754:	00002738 	.word	0x00002738
    5758:	00002738 	.word	0x00002738
    575c:	00002738 	.word	0x00002738
    5760:	00002738 	.word	0x00002738
    5764:	00002738 	.word	0x00002738
    5768:	00002738 	.word	0x00002738
    576c:	00002738 	.word	0x00002738
    5770:	00002738 	.word	0x00002738
    5774:	00002738 	.word	0x00002738
    5778:	00002738 	.word	0x00002738
    577c:	00002738 	.word	0x00002738
    5780:	00002738 	.word	0x00002738
    5784:	00002738 	.word	0x00002738
    5788:	00002738 	.word	0x00002738
    578c:	00002738 	.word	0x00002738
    5790:	00002738 	.word	0x00002738
    5794:	00002738 	.word	0x00002738
    5798:	00002738 	.word	0x00002738
    579c:	00002738 	.word	0x00002738
    57a0:	00002738 	.word	0x00002738
    57a4:	00002738 	.word	0x00002738
    57a8:	00002738 	.word	0x00002738
    57ac:	00002738 	.word	0x00002738
    57b0:	00002738 	.word	0x00002738
    57b4:	00002738 	.word	0x00002738
    57b8:	00002738 	.word	0x00002738
    57bc:	00002738 	.word	0x00002738
    57c0:	00002738 	.word	0x00002738
    57c4:	00002738 	.word	0x00002738
    57c8:	00002738 	.word	0x00002738
    57cc:	00002738 	.word	0x00002738
    57d0:	00002738 	.word	0x00002738
    57d4:	00002738 	.word	0x00002738
    57d8:	00002738 	.word	0x00002738
    57dc:	00002738 	.word	0x00002738
    57e0:	00002738 	.word	0x00002738
    57e4:	00002738 	.word	0x00002738
    57e8:	00002738 	.word	0x00002738
    57ec:	00002738 	.word	0x00002738
    57f0:	00002738 	.word	0x00002738
    57f4:	00002738 	.word	0x00002738
    57f8:	00002738 	.word	0x00002738
    57fc:	00002738 	.word	0x00002738
    5800:	00002738 	.word	0x00002738
    5804:	00002738 	.word	0x00002738
    5808:	00002738 	.word	0x00002738
    580c:	00002738 	.word	0x00002738
    5810:	00002738 	.word	0x00002738
    5814:	00002738 	.word	0x00002738
    5818:	00002738 	.word	0x00002738
    581c:	00002738 	.word	0x00002738
    5820:	00002738 	.word	0x00002738
    5824:	00002738 	.word	0x00002738
    5828:	00002738 	.word	0x00002738
    582c:	00002738 	.word	0x00002738
    5830:	00002738 	.word	0x00002738
    5834:	00002738 	.word	0x00002738
    5838:	00002738 	.word	0x00002738
    583c:	00002738 	.word	0x00002738
    5840:	00002738 	.word	0x00002738
    5844:	00002738 	.word	0x00002738
    5848:	00002738 	.word	0x00002738
    584c:	00002738 	.word	0x00002738
    5850:	00002738 	.word	0x00002738
    5854:	00002738 	.word	0x00002738
    5858:	00002738 	.word	0x00002738
    585c:	00002738 	.word	0x00002738
    5860:	00002738 	.word	0x00002738
    5864:	00002738 	.word	0x00002738
    5868:	00002738 	.word	0x00002738
    586c:	00002738 	.word	0x00002738
    5870:	00002738 	.word	0x00002738
    5874:	00002738 	.word	0x00002738
    5878:	00002738 	.word	0x00002738
    587c:	00002738 	.word	0x00002738
    5880:	00002738 	.word	0x00002738
    5884:	00002afc 	.word	0x00002afc
    5888:	00002ba2 	.word	0x00002ba2
    588c:	00002738 	.word	0x00002738
    5890:	00002738 	.word	0x00002738
    5894:	00002766 	.word	0x00002766
    5898:	0000289e 	.word	0x0000289e
    589c:	00002bc2 	.word	0x00002bc2
    58a0:	0000273c 	.word	0x0000273c
    58a4:	00002b4a 	.word	0x00002b4a
    58a8:	00002a30 	.word	0x00002a30
    58ac:	00002968 	.word	0x00002968
    58b0:	00002b7c 	.word	0x00002b7c
    58b4:	00002b8e 	.word	0x00002b8e
    58b8:	00002728 	.word	0x00002728

000058bc <tc_interrupt_vectors.10637>:
    58bc:	100f0e0d 14131211 42000800 42000c00     ...........B...B
    58cc:	42001000 42001400 42001800 42001c00     ...B...B...B...B
    58dc:	0000485e 0000485a 0000485a 000048aa     ^H..ZH..ZH...H..
    58ec:	000048aa 00004872 00004864 00004878     .H..rH..dH..xH..
    58fc:	00004930 00004910 00004910 00004980     0I...I...I...I..
    590c:	00004922 0000493e 00004914 0000494c     "I..>I...I..LI..

0000591c <_init>:
    591c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    591e:	46c0      	nop			; (mov r8, r8)
    5920:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5922:	bc08      	pop	{r3}
    5924:	469e      	mov	lr, r3
    5926:	4770      	bx	lr

00005928 <__init_array_start>:
    5928:	000000cd 	.word	0x000000cd

0000592c <_fini>:
    592c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    592e:	46c0      	nop			; (mov r8, r8)
    5930:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5932:	bc08      	pop	{r3}
    5934:	469e      	mov	lr, r3
    5936:	4770      	bx	lr

00005938 <__fini_array_start>:
    5938:	000000a5 	.word	0x000000a5
