
SHH_Master_02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000038dc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001cc  20000000  000038dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000041e8  200001cc  00003aa8  000201cc  2**2
                  ALLOC
  3 .stack        00002004  200043b4  00007c90  000201cc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004bff4  00000000  00000000  0002024d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005f72  00000000  00000000  0006c241  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00007a1e  00000000  00000000  000721b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000848  00000000  00000000  00079bd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000918  00000000  00000000  0007a419  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00017c5b  00000000  00000000  0007ad31  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001435d  00000000  00000000  0009298c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00063928  00000000  00000000  000a6ce9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000140c  00000000  00000000  0010a614  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b8 63 00 20 c9 2e 00 00 c5 2e 00 00 c5 2e 00 00     .c. ............
	...
      2c:	c5 2e 00 00 00 00 00 00 00 00 00 00 c5 2e 00 00     ................
      3c:	c5 2e 00 00 c5 2e 00 00 c5 2e 00 00 89 0a 00 00     ................
      4c:	c5 2e 00 00 39 04 00 00 c5 2e 00 00 c5 2e 00 00     ....9...........
      5c:	6d 24 00 00 7d 24 00 00 8d 24 00 00 9d 24 00 00     m$..}$...$...$..
      6c:	ad 24 00 00 bd 24 00 00 35 06 00 00 45 06 00 00     .$...$..5...E...
      7c:	55 06 00 00 65 06 00 00 75 06 00 00 85 06 00 00     U...e...u.......
      8c:	95 06 00 00 a5 06 00 00 c5 2e 00 00 c5 2e 00 00     ................
      9c:	c5 2e 00 00 c5 2e 00 00                             ........

000000a4 <__do_global_dtors_aux>:
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
      b0:	2b00      	cmp	r3, #0
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
      bc:	7023      	strb	r3, [r4, #0]
      be:	bd10      	pop	{r4, pc}
      c0:	200001cc 	.word	0x200001cc
      c4:	00000000 	.word	0x00000000
      c8:	000038dc 	.word	0x000038dc

000000cc <frame_dummy>:
      cc:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
      ce:	b510      	push	{r4, lr}
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
      d4:	4907      	ldr	r1, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4808      	ldr	r0, [pc, #32]	; (f8 <frame_dummy+0x2c>)
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
      e4:	bd10      	pop	{r4, pc}
      e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e8:	2b00      	cmp	r3, #0
      ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
      ec:	4798      	blx	r3
      ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
      f0:	00000000 	.word	0x00000000
      f4:	200001d0 	.word	0x200001d0
      f8:	000038dc 	.word	0x000038dc
      fc:	000038dc 	.word	0x000038dc
     100:	00000000 	.word	0x00000000

00000104 <nvm_set_config>:
	fusebits[1] |= fb->wdt_early_warning_offset << WDT_FUSES_EWOFFSET_Pos;

	fusebits[1] &= (~WDT_FUSES_WEN_Msk);
	fusebits[1] |= fb->wdt_window_mode_enable_at_poweron << WDT_FUSES_WEN_Pos;

	fusebits[1] &= (~NVMCTRL_FUSES_REGION_LOCKS_Msk);
     104:	b510      	push	{r4, lr}
	fusebits[1] |= fb->lockbits << NVMCTRL_FUSES_REGION_LOCKS_Pos;
     106:	4a1e      	ldr	r2, [pc, #120]	; (180 <nvm_set_config+0x7c>)
     108:	69d3      	ldr	r3, [r2, #28]
	if (error_code != STATUS_OK) {
		return error_code;
	}

	*((uint32_t *)NVMCTRL_AUX0_ADDRESS) = fusebits[0];
    *(((uint32_t *)NVMCTRL_AUX0_ADDRESS) + 1) = fusebits[1];
     10a:	2104      	movs	r1, #4
     10c:	430b      	orrs	r3, r1

	error_code = nvm_execute_command(NVM_COMMAND_WRITE_AUX_ROW,NVMCTRL_AUX0_ADDRESS,0);
     10e:	61d3      	str	r3, [r2, #28]
     110:	4b1c      	ldr	r3, [pc, #112]	; (184 <nvm_set_config+0x80>)
     112:	2220      	movs	r2, #32
     114:	32ff      	adds	r2, #255	; 0xff
     116:	831a      	strh	r2, [r3, #24]
     118:	7d1a      	ldrb	r2, [r3, #20]
     11a:	2305      	movs	r3, #5
     11c:	07d2      	lsls	r2, r2, #31
     11e:	d401      	bmi.n	124 <nvm_set_config+0x20>
     120:	0018      	movs	r0, r3
     122:	bd10      	pop	{r4, pc}
     124:	7803      	ldrb	r3, [r0, #0]
     126:	021b      	lsls	r3, r3, #8
     128:	22c0      	movs	r2, #192	; 0xc0
     12a:	0092      	lsls	r2, r2, #2
     12c:	4013      	ands	r3, r2
     12e:	7841      	ldrb	r1, [r0, #1]
     130:	01c9      	lsls	r1, r1, #7
     132:	22ff      	movs	r2, #255	; 0xff
     134:	400a      	ands	r2, r1
     136:	4313      	orrs	r3, r2
     138:	7881      	ldrb	r1, [r0, #2]
     13a:	0049      	lsls	r1, r1, #1
     13c:	221e      	movs	r2, #30
     13e:	400a      	ands	r2, r1
     140:	4313      	orrs	r3, r2
     142:	78c2      	ldrb	r2, [r0, #3]
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     144:	0492      	lsls	r2, r2, #18
     146:	2180      	movs	r1, #128	; 0x80
     148:	02c9      	lsls	r1, r1, #11
     14a:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     14c:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
     14e:	7902      	ldrb	r2, [r0, #4]
     150:	0412      	lsls	r2, r2, #16
     152:	21c0      	movs	r1, #192	; 0xc0
     154:	0289      	lsls	r1, r1, #10
     156:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     158:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
     15a:	4a0a      	ldr	r2, [pc, #40]	; (184 <nvm_set_config+0x80>)
     15c:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
     15e:	6893      	ldr	r3, [r2, #8]
     160:	035b      	lsls	r3, r3, #13
     162:	0f5b      	lsrs	r3, r3, #29
     164:	4908      	ldr	r1, [pc, #32]	; (188 <nvm_set_config+0x84>)
     166:	2408      	movs	r4, #8
     168:	409c      	lsls	r4, r3
     16a:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
     16c:	6893      	ldr	r3, [r2, #8]
     16e:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
     170:	7843      	ldrb	r3, [r0, #1]
     172:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     174:	8b13      	ldrh	r3, [r2, #24]
     176:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
     178:	0fdb      	lsrs	r3, r3, #31
     17a:	011b      	lsls	r3, r3, #4
     17c:	e7d0      	b.n	120 <nvm_set_config+0x1c>
     17e:	46c0      	nop			; (mov r8, r8)
     180:	40000400 	.word	0x40000400
     184:	41004000 	.word	0x41004000
     188:	200001e8 	.word	0x200001e8

0000018c <nvm_execute_command>:
{
     18c:	b530      	push	{r4, r5, lr}
     18e:	0004      	movs	r4, r0
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
     190:	4a22      	ldr	r2, [pc, #136]	; (21c <nvm_execute_command+0x90>)
     192:	8810      	ldrh	r0, [r2, #0]
     194:	8853      	ldrh	r3, [r2, #2]
     196:	4343      	muls	r3, r0
     198:	428b      	cmp	r3, r1
     19a:	d206      	bcs.n	1aa <nvm_execute_command+0x1e>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
     19c:	2280      	movs	r2, #128	; 0x80
     19e:	0192      	lsls	r2, r2, #6
		return STATUS_ERR_BAD_ADDRESS;
     1a0:	2018      	movs	r0, #24
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
     1a2:	4b1f      	ldr	r3, [pc, #124]	; (220 <nvm_execute_command+0x94>)
     1a4:	18cb      	adds	r3, r1, r3
     1a6:	4293      	cmp	r3, r2
     1a8:	d80e      	bhi.n	1c8 <nvm_execute_command+0x3c>
	ctrlb_bak = nvm_module->CTRLB.reg;
     1aa:	4b1e      	ldr	r3, [pc, #120]	; (224 <nvm_execute_command+0x98>)
     1ac:	685d      	ldr	r5, [r3, #4]
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
     1ae:	2280      	movs	r2, #128	; 0x80
     1b0:	02d2      	lsls	r2, r2, #11
     1b2:	432a      	orrs	r2, r5
     1b4:	605a      	str	r2, [r3, #4]
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     1b6:	2220      	movs	r2, #32
     1b8:	32ff      	adds	r2, #255	; 0xff
     1ba:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     1bc:	7d1b      	ldrb	r3, [r3, #20]
	if (!nvm_is_ready()) {
     1be:	07db      	lsls	r3, r3, #31
     1c0:	d403      	bmi.n	1ca <nvm_execute_command+0x3e>
		nvm_module->CTRLB.reg = ctrlb_bak;
     1c2:	4b18      	ldr	r3, [pc, #96]	; (224 <nvm_execute_command+0x98>)
     1c4:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
     1c6:	2005      	movs	r0, #5
}
     1c8:	bd30      	pop	{r4, r5, pc}
	switch (command) {
     1ca:	2c45      	cmp	r4, #69	; 0x45
     1cc:	d822      	bhi.n	214 <nvm_execute_command+0x88>
     1ce:	00a3      	lsls	r3, r4, #2
     1d0:	4a15      	ldr	r2, [pc, #84]	; (228 <nvm_execute_command+0x9c>)
     1d2:	58d3      	ldr	r3, [r2, r3]
     1d4:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     1d6:	4b13      	ldr	r3, [pc, #76]	; (224 <nvm_execute_command+0x98>)
     1d8:	8b1b      	ldrh	r3, [r3, #24]
     1da:	05db      	lsls	r3, r3, #23
     1dc:	d503      	bpl.n	1e6 <nvm_execute_command+0x5a>
				nvm_module->CTRLB.reg = ctrlb_bak;
     1de:	4b11      	ldr	r3, [pc, #68]	; (224 <nvm_execute_command+0x98>)
     1e0:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
     1e2:	2010      	movs	r0, #16
     1e4:	e7f0      	b.n	1c8 <nvm_execute_command+0x3c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     1e6:	0889      	lsrs	r1, r1, #2
     1e8:	0049      	lsls	r1, r1, #1
     1ea:	4b0e      	ldr	r3, [pc, #56]	; (224 <nvm_execute_command+0x98>)
     1ec:	61d9      	str	r1, [r3, #28]
			break;
     1ee:	e003      	b.n	1f8 <nvm_execute_command+0x6c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     1f0:	0889      	lsrs	r1, r1, #2
     1f2:	0049      	lsls	r1, r1, #1
     1f4:	4b0b      	ldr	r3, [pc, #44]	; (224 <nvm_execute_command+0x98>)
     1f6:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
     1f8:	20a5      	movs	r0, #165	; 0xa5
     1fa:	0200      	lsls	r0, r0, #8
     1fc:	4304      	orrs	r4, r0
     1fe:	4b09      	ldr	r3, [pc, #36]	; (224 <nvm_execute_command+0x98>)
     200:	801c      	strh	r4, [r3, #0]
     202:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
     204:	2201      	movs	r2, #1
     206:	7d0b      	ldrb	r3, [r1, #20]
     208:	4213      	tst	r3, r2
     20a:	d0fc      	beq.n	206 <nvm_execute_command+0x7a>
	nvm_module->CTRLB.reg = ctrlb_bak;
     20c:	4b05      	ldr	r3, [pc, #20]	; (224 <nvm_execute_command+0x98>)
     20e:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
     210:	2000      	movs	r0, #0
     212:	e7d9      	b.n	1c8 <nvm_execute_command+0x3c>
			nvm_module->CTRLB.reg = ctrlb_bak;
     214:	4b03      	ldr	r3, [pc, #12]	; (224 <nvm_execute_command+0x98>)
     216:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
     218:	2017      	movs	r0, #23
     21a:	e7d5      	b.n	1c8 <nvm_execute_command+0x3c>
     21c:	200001e8 	.word	0x200001e8
     220:	ff7fc000 	.word	0xff7fc000
     224:	41004000 	.word	0x41004000
     228:	0000355c 	.word	0x0000355c

0000022c <nvm_write_buffer>:
{
     22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     22e:	4b25      	ldr	r3, [pc, #148]	; (2c4 <nvm_write_buffer+0x98>)
     230:	881d      	ldrh	r5, [r3, #0]
     232:	885b      	ldrh	r3, [r3, #2]
     234:	436b      	muls	r3, r5
		return STATUS_ERR_BAD_ADDRESS;
     236:	2418      	movs	r4, #24
	if (destination_address >
     238:	4283      	cmp	r3, r0
     23a:	d201      	bcs.n	240 <nvm_write_buffer+0x14>
}
     23c:	0020      	movs	r0, r4
     23e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (destination_address & (_nvm_dev.page_size - 1)) {
     240:	1e6b      	subs	r3, r5, #1
     242:	4218      	tst	r0, r3
     244:	d1fa      	bne.n	23c <nvm_write_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
     246:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
     248:	4295      	cmp	r5, r2
     24a:	d3f7      	bcc.n	23c <nvm_write_buffer+0x10>
     24c:	4b1e      	ldr	r3, [pc, #120]	; (2c8 <nvm_write_buffer+0x9c>)
     24e:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     250:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
     252:	07db      	lsls	r3, r3, #31
     254:	d5f2      	bpl.n	23c <nvm_write_buffer+0x10>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
     256:	4c1d      	ldr	r4, [pc, #116]	; (2cc <nvm_write_buffer+0xa0>)
     258:	4b1b      	ldr	r3, [pc, #108]	; (2c8 <nvm_write_buffer+0x9c>)
     25a:	801c      	strh	r4, [r3, #0]
     25c:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
     25e:	2401      	movs	r4, #1
     260:	7d2b      	ldrb	r3, [r5, #20]
     262:	4223      	tst	r3, r4
     264:	d0fc      	beq.n	260 <nvm_write_buffer+0x34>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     266:	2420      	movs	r4, #32
     268:	34ff      	adds	r4, #255	; 0xff
     26a:	4b17      	ldr	r3, [pc, #92]	; (2c8 <nvm_write_buffer+0x9c>)
     26c:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
     26e:	2a00      	cmp	r2, #0
     270:	d022      	beq.n	2b8 <nvm_write_buffer+0x8c>
     272:	2301      	movs	r3, #1
     274:	0005      	movs	r5, r0
     276:	439d      	bics	r5, r3
     278:	2300      	movs	r3, #0
		if (i < (length - 1)) {
     27a:	1e57      	subs	r7, r2, #1
     27c:	e009      	b.n	292 <nvm_write_buffer+0x66>
			data |= (buffer[i + 1] << 8);
     27e:	18ce      	adds	r6, r1, r3
     280:	7876      	ldrb	r6, [r6, #1]
     282:	0236      	lsls	r6, r6, #8
     284:	4334      	orrs	r4, r6
		NVM_MEMORY[nvm_address++] = data;
     286:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
     288:	3302      	adds	r3, #2
     28a:	b29b      	uxth	r3, r3
     28c:	3502      	adds	r5, #2
     28e:	429a      	cmp	r2, r3
     290:	d904      	bls.n	29c <nvm_write_buffer+0x70>
		data = buffer[i];
     292:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
     294:	42bb      	cmp	r3, r7
     296:	dbf2      	blt.n	27e <nvm_write_buffer+0x52>
		data = buffer[i];
     298:	b2a4      	uxth	r4, r4
     29a:	e7f4      	b.n	286 <nvm_write_buffer+0x5a>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     29c:	4b09      	ldr	r3, [pc, #36]	; (2c4 <nvm_write_buffer+0x98>)
     29e:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
     2a0:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     2a2:	2b00      	cmp	r3, #0
     2a4:	d1ca      	bne.n	23c <nvm_write_buffer+0x10>
     2a6:	2a3f      	cmp	r2, #63	; 0x3f
     2a8:	d8c8      	bhi.n	23c <nvm_write_buffer+0x10>
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
     2aa:	2200      	movs	r2, #0
     2ac:	0001      	movs	r1, r0
     2ae:	2004      	movs	r0, #4
     2b0:	4b07      	ldr	r3, [pc, #28]	; (2d0 <nvm_write_buffer+0xa4>)
     2b2:	4798      	blx	r3
     2b4:	0004      	movs	r4, r0
     2b6:	e7c1      	b.n	23c <nvm_write_buffer+0x10>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     2b8:	4b02      	ldr	r3, [pc, #8]	; (2c4 <nvm_write_buffer+0x98>)
     2ba:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
     2bc:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     2be:	2b00      	cmp	r3, #0
     2c0:	d0f3      	beq.n	2aa <nvm_write_buffer+0x7e>
     2c2:	e7bb      	b.n	23c <nvm_write_buffer+0x10>
     2c4:	200001e8 	.word	0x200001e8
     2c8:	41004000 	.word	0x41004000
     2cc:	ffffa544 	.word	0xffffa544
     2d0:	0000018d 	.word	0x0000018d

000002d4 <nvm_read_buffer>:
{
     2d4:	b570      	push	{r4, r5, r6, lr}
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     2d6:	4b18      	ldr	r3, [pc, #96]	; (338 <nvm_read_buffer+0x64>)
     2d8:	881d      	ldrh	r5, [r3, #0]
     2da:	885b      	ldrh	r3, [r3, #2]
     2dc:	436b      	muls	r3, r5
		return STATUS_ERR_BAD_ADDRESS;
     2de:	2418      	movs	r4, #24
	if (source_address >
     2e0:	4283      	cmp	r3, r0
     2e2:	d201      	bcs.n	2e8 <nvm_read_buffer+0x14>
}
     2e4:	0020      	movs	r0, r4
     2e6:	bd70      	pop	{r4, r5, r6, pc}
	if (source_address & (_nvm_dev.page_size - 1)) {
     2e8:	1e6b      	subs	r3, r5, #1
     2ea:	4218      	tst	r0, r3
     2ec:	d1fa      	bne.n	2e4 <nvm_read_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
     2ee:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
     2f0:	4295      	cmp	r5, r2
     2f2:	d3f7      	bcc.n	2e4 <nvm_read_buffer+0x10>
     2f4:	4b11      	ldr	r3, [pc, #68]	; (33c <nvm_read_buffer+0x68>)
     2f6:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     2f8:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
     2fa:	07db      	lsls	r3, r3, #31
     2fc:	d5f2      	bpl.n	2e4 <nvm_read_buffer+0x10>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     2fe:	2420      	movs	r4, #32
     300:	34ff      	adds	r4, #255	; 0xff
     302:	4b0e      	ldr	r3, [pc, #56]	; (33c <nvm_read_buffer+0x68>)
     304:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
     306:	2a00      	cmp	r2, #0
     308:	d014      	beq.n	334 <nvm_read_buffer+0x60>
     30a:	2301      	movs	r3, #1
     30c:	4398      	bics	r0, r3
     30e:	2300      	movs	r3, #0
		if (i < (length - 1)) {
     310:	1e56      	subs	r6, r2, #1
     312:	e004      	b.n	31e <nvm_read_buffer+0x4a>
	for (uint16_t i = 0; i < length; i += 2) {
     314:	3302      	adds	r3, #2
     316:	b29b      	uxth	r3, r3
     318:	3002      	adds	r0, #2
     31a:	429a      	cmp	r2, r3
     31c:	d908      	bls.n	330 <nvm_read_buffer+0x5c>
		uint16_t data = NVM_MEMORY[page_address++];
     31e:	8804      	ldrh	r4, [r0, #0]
     320:	b2a4      	uxth	r4, r4
		buffer[i] = (data & 0xFF);
     322:	54cc      	strb	r4, [r1, r3]
		if (i < (length - 1)) {
     324:	42b3      	cmp	r3, r6
     326:	daf5      	bge.n	314 <nvm_read_buffer+0x40>
			buffer[i + 1] = (data >> 8);
     328:	18cd      	adds	r5, r1, r3
     32a:	0a24      	lsrs	r4, r4, #8
     32c:	706c      	strb	r4, [r5, #1]
     32e:	e7f1      	b.n	314 <nvm_read_buffer+0x40>
	return STATUS_OK;
     330:	2400      	movs	r4, #0
     332:	e7d7      	b.n	2e4 <nvm_read_buffer+0x10>
     334:	2400      	movs	r4, #0
     336:	e7d5      	b.n	2e4 <nvm_read_buffer+0x10>
     338:	200001e8 	.word	0x200001e8
     33c:	41004000 	.word	0x41004000

00000340 <nvm_erase_row>:
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     340:	4b13      	ldr	r3, [pc, #76]	; (390 <nvm_erase_row+0x50>)
     342:	881a      	ldrh	r2, [r3, #0]
     344:	885b      	ldrh	r3, [r3, #2]
     346:	4353      	muls	r3, r2
		return STATUS_ERR_BAD_ADDRESS;
     348:	2118      	movs	r1, #24
	if (row_address >
     34a:	4283      	cmp	r3, r0
     34c:	d201      	bcs.n	352 <nvm_erase_row+0x12>
}
     34e:	0008      	movs	r0, r1
     350:	4770      	bx	lr
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
     352:	0092      	lsls	r2, r2, #2
     354:	3a01      	subs	r2, #1
     356:	4210      	tst	r0, r2
     358:	d1f9      	bne.n	34e <nvm_erase_row+0xe>
     35a:	4b0e      	ldr	r3, [pc, #56]	; (394 <nvm_erase_row+0x54>)
     35c:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     35e:	3913      	subs	r1, #19
	if (!nvm_is_ready()) {
     360:	07db      	lsls	r3, r3, #31
     362:	d5f4      	bpl.n	34e <nvm_erase_row+0xe>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     364:	4b0b      	ldr	r3, [pc, #44]	; (394 <nvm_erase_row+0x54>)
     366:	2220      	movs	r2, #32
     368:	32ff      	adds	r2, #255	; 0xff
     36a:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
     36c:	0880      	lsrs	r0, r0, #2
     36e:	0040      	lsls	r0, r0, #1
     370:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
     372:	4a09      	ldr	r2, [pc, #36]	; (398 <nvm_erase_row+0x58>)
     374:	801a      	strh	r2, [r3, #0]
     376:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
     378:	2201      	movs	r2, #1
     37a:	7d0b      	ldrb	r3, [r1, #20]
     37c:	4213      	tst	r3, r2
     37e:	d0fc      	beq.n	37a <nvm_erase_row+0x3a>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
     380:	4b04      	ldr	r3, [pc, #16]	; (394 <nvm_erase_row+0x54>)
     382:	8b19      	ldrh	r1, [r3, #24]
     384:	201c      	movs	r0, #28
     386:	4001      	ands	r1, r0
	return STATUS_OK;
     388:	1e48      	subs	r0, r1, #1
     38a:	4181      	sbcs	r1, r0
     38c:	0089      	lsls	r1, r1, #2
     38e:	e7de      	b.n	34e <nvm_erase_row+0xe>
     390:	200001e8 	.word	0x200001e8
     394:	41004000 	.word	0x41004000
     398:	ffffa502 	.word	0xffffa502

0000039c <watchdog_early_warning_callback>:


void watchdog_early_warning_callback(void)
{
	
}
     39c:	4770      	bx	lr
	...

000003a0 <configure_wdt>:

void configure_wdt(void)
{
     3a0:	b500      	push	{lr}
     3a2:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->always_on            = false;
     3a4:	2300      	movs	r3, #0
     3a6:	466a      	mov	r2, sp
     3a8:	7013      	strb	r3, [r2, #0]
	config->enable               = true;
     3aa:	2201      	movs	r2, #1
     3ac:	4669      	mov	r1, sp
     3ae:	704a      	strb	r2, [r1, #1]
#if !(SAML21) && !(SAML22) && !(SAMC20) && !(SAMC21) && !(SAMR30)
	config->clock_source         = GCLK_GENERATOR_4;
     3b0:	3203      	adds	r2, #3
     3b2:	708a      	strb	r2, [r1, #2]
#endif
	config->timeout_period       = WDT_PERIOD_16384CLK;
	config->window_period        = WDT_PERIOD_NONE;
     3b4:	710b      	strb	r3, [r1, #4]
	//! [setup_3]
	config_wdt.always_on            = false;
#if !((SAML21) || (SAMC21) || (SAML22) || (SAMR30))
	config_wdt.clock_source         = GCLK_GENERATOR_4;
#endif
	config_wdt.timeout_period       = WDT_PERIOD_4096CLK;
     3b6:	330a      	adds	r3, #10
     3b8:	70cb      	strb	r3, [r1, #3]
	config_wdt.early_warning_period = WDT_PERIOD_2048CLK;
     3ba:	3b01      	subs	r3, #1
     3bc:	714b      	strb	r3, [r1, #5]
	//! [setup_3]

	/* Initialize and enable the Watchdog with the user settings */
	//! [setup_4]
	wdt_set_config(&config_wdt);
     3be:	4668      	mov	r0, sp
     3c0:	4b01      	ldr	r3, [pc, #4]	; (3c8 <configure_wdt+0x28>)
     3c2:	4798      	blx	r3
	//! [setup_4]
}
     3c4:	b003      	add	sp, #12
     3c6:	bd00      	pop	{pc}
     3c8:	0000093d 	.word	0x0000093d

000003cc <configure_wdt_callbacks>:

void configure_wdt_callbacks(void)
{
     3cc:	b510      	push	{r4, lr}
	//! [setup_5]
	wdt_register_callback(watchdog_early_warning_callback,
     3ce:	2100      	movs	r1, #0
     3d0:	4803      	ldr	r0, [pc, #12]	; (3e0 <configure_wdt_callbacks+0x14>)
     3d2:	4b04      	ldr	r3, [pc, #16]	; (3e4 <configure_wdt_callbacks+0x18>)
     3d4:	4798      	blx	r3
		WDT_CALLBACK_EARLY_WARNING);
	//! [setup_5]

	//! [setup_6]
	wdt_enable_callback(WDT_CALLBACK_EARLY_WARNING);
     3d6:	2000      	movs	r0, #0
     3d8:	4b03      	ldr	r3, [pc, #12]	; (3e8 <configure_wdt_callbacks+0x1c>)
     3da:	4798      	blx	r3
	//! [setup_6]
}
     3dc:	bd10      	pop	{r4, pc}
     3de:	46c0      	nop			; (mov r8, r8)
     3e0:	0000039d 	.word	0x0000039d
     3e4:	00000a55 	.word	0x00000a55
     3e8:	00000a69 	.word	0x00000a69

000003ec <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     3ec:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     3ee:	2a00      	cmp	r2, #0
     3f0:	d001      	beq.n	3f6 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     3f2:	0018      	movs	r0, r3
     3f4:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
     3f6:	008b      	lsls	r3, r1, #2
     3f8:	4a06      	ldr	r2, [pc, #24]	; (414 <extint_register_callback+0x28>)
     3fa:	589b      	ldr	r3, [r3, r2]
     3fc:	2b00      	cmp	r3, #0
     3fe:	d003      	beq.n	408 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
     400:	4283      	cmp	r3, r0
     402:	d005      	beq.n	410 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
     404:	231d      	movs	r3, #29
     406:	e7f4      	b.n	3f2 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     408:	0089      	lsls	r1, r1, #2
     40a:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     40c:	2300      	movs	r3, #0
     40e:	e7f0      	b.n	3f2 <extint_register_callback+0x6>
		return STATUS_OK;
     410:	2300      	movs	r3, #0
     412:	e7ee      	b.n	3f2 <extint_register_callback+0x6>
     414:	20004338 	.word	0x20004338

00000418 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     418:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     41a:	2900      	cmp	r1, #0
     41c:	d001      	beq.n	422 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
     41e:	0018      	movs	r0, r3
     420:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     422:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     424:	281f      	cmp	r0, #31
     426:	d800      	bhi.n	42a <extint_chan_enable_callback+0x12>
		return eics[eic_index];
     428:	4a02      	ldr	r2, [pc, #8]	; (434 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
     42a:	2301      	movs	r3, #1
     42c:	4083      	lsls	r3, r0
     42e:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
     430:	2300      	movs	r3, #0
     432:	e7f4      	b.n	41e <extint_chan_enable_callback+0x6>
     434:	40001800 	.word	0x40001800

00000438 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     438:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     43a:	2200      	movs	r2, #0
     43c:	4b10      	ldr	r3, [pc, #64]	; (480 <EIC_Handler+0x48>)
     43e:	701a      	strb	r2, [r3, #0]
     440:	2300      	movs	r3, #0
     442:	4910      	ldr	r1, [pc, #64]	; (484 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     444:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     446:	4e10      	ldr	r6, [pc, #64]	; (488 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     448:	4c0d      	ldr	r4, [pc, #52]	; (480 <EIC_Handler+0x48>)
     44a:	e00a      	b.n	462 <EIC_Handler+0x2a>
		return eics[eic_index];
     44c:	490d      	ldr	r1, [pc, #52]	; (484 <EIC_Handler+0x4c>)
     44e:	e008      	b.n	462 <EIC_Handler+0x2a>
     450:	7823      	ldrb	r3, [r4, #0]
     452:	3301      	adds	r3, #1
     454:	b2db      	uxtb	r3, r3
     456:	7023      	strb	r3, [r4, #0]
     458:	2b0f      	cmp	r3, #15
     45a:	d810      	bhi.n	47e <EIC_Handler+0x46>
		return NULL;
     45c:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     45e:	2b1f      	cmp	r3, #31
     460:	d9f4      	bls.n	44c <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     462:	0028      	movs	r0, r5
     464:	4018      	ands	r0, r3
     466:	2201      	movs	r2, #1
     468:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     46a:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     46c:	4210      	tst	r0, r2
     46e:	d0ef      	beq.n	450 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     470:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     472:	009b      	lsls	r3, r3, #2
     474:	599b      	ldr	r3, [r3, r6]
     476:	2b00      	cmp	r3, #0
     478:	d0ea      	beq.n	450 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     47a:	4798      	blx	r3
     47c:	e7e8      	b.n	450 <EIC_Handler+0x18>
			}
		}
	}
}
     47e:	bd70      	pop	{r4, r5, r6, pc}
     480:	20004334 	.word	0x20004334
     484:	40001800 	.word	0x40001800
     488:	20004338 	.word	0x20004338

0000048c <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     48c:	4a04      	ldr	r2, [pc, #16]	; (4a0 <_extint_enable+0x14>)
     48e:	7813      	ldrb	r3, [r2, #0]
     490:	2102      	movs	r1, #2
     492:	430b      	orrs	r3, r1
     494:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     496:	7853      	ldrb	r3, [r2, #1]
     498:	b25b      	sxtb	r3, r3
     49a:	2b00      	cmp	r3, #0
     49c:	dbfb      	blt.n	496 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     49e:	4770      	bx	lr
     4a0:	40001800 	.word	0x40001800

000004a4 <_system_extint_init>:
{
     4a4:	b500      	push	{lr}
     4a6:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     4a8:	4a12      	ldr	r2, [pc, #72]	; (4f4 <_system_extint_init+0x50>)
     4aa:	6993      	ldr	r3, [r2, #24]
     4ac:	2140      	movs	r1, #64	; 0x40
     4ae:	430b      	orrs	r3, r1
     4b0:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     4b2:	a901      	add	r1, sp, #4
     4b4:	2300      	movs	r3, #0
     4b6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     4b8:	2003      	movs	r0, #3
     4ba:	4b0f      	ldr	r3, [pc, #60]	; (4f8 <_system_extint_init+0x54>)
     4bc:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     4be:	2003      	movs	r0, #3
     4c0:	4b0e      	ldr	r3, [pc, #56]	; (4fc <_system_extint_init+0x58>)
     4c2:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     4c4:	4a0e      	ldr	r2, [pc, #56]	; (500 <_system_extint_init+0x5c>)
     4c6:	7813      	ldrb	r3, [r2, #0]
     4c8:	2101      	movs	r1, #1
     4ca:	430b      	orrs	r3, r1
     4cc:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     4ce:	7853      	ldrb	r3, [r2, #1]
     4d0:	b25b      	sxtb	r3, r3
     4d2:	2b00      	cmp	r3, #0
     4d4:	dbfb      	blt.n	4ce <_system_extint_init+0x2a>
     4d6:	4b0b      	ldr	r3, [pc, #44]	; (504 <_system_extint_init+0x60>)
     4d8:	0019      	movs	r1, r3
     4da:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     4dc:	2200      	movs	r2, #0
     4de:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     4e0:	4299      	cmp	r1, r3
     4e2:	d1fc      	bne.n	4de <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     4e4:	2210      	movs	r2, #16
     4e6:	4b08      	ldr	r3, [pc, #32]	; (508 <_system_extint_init+0x64>)
     4e8:	601a      	str	r2, [r3, #0]
	_extint_enable();
     4ea:	4b08      	ldr	r3, [pc, #32]	; (50c <_system_extint_init+0x68>)
     4ec:	4798      	blx	r3
}
     4ee:	b003      	add	sp, #12
     4f0:	bd00      	pop	{pc}
     4f2:	46c0      	nop			; (mov r8, r8)
     4f4:	40000400 	.word	0x40000400
     4f8:	00002d3d 	.word	0x00002d3d
     4fc:	00002cb1 	.word	0x00002cb1
     500:	40001800 	.word	0x40001800
     504:	20004338 	.word	0x20004338
     508:	e000e100 	.word	0xe000e100
     50c:	0000048d 	.word	0x0000048d

00000510 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     510:	2300      	movs	r3, #0
     512:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     514:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     516:	2201      	movs	r2, #1
     518:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     51a:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     51c:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     51e:	3302      	adds	r3, #2
     520:	72c3      	strb	r3, [r0, #11]
}
     522:	4770      	bx	lr

00000524 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     524:	b5f0      	push	{r4, r5, r6, r7, lr}
     526:	b083      	sub	sp, #12
     528:	0005      	movs	r5, r0
     52a:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     52c:	a901      	add	r1, sp, #4
     52e:	2300      	movs	r3, #0
     530:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     532:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     534:	7923      	ldrb	r3, [r4, #4]
     536:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     538:	7a23      	ldrb	r3, [r4, #8]
     53a:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     53c:	7820      	ldrb	r0, [r4, #0]
     53e:	4b15      	ldr	r3, [pc, #84]	; (594 <extint_chan_set_config+0x70>)
     540:	4798      	blx	r3
		return NULL;
     542:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
     544:	2d1f      	cmp	r5, #31
     546:	d800      	bhi.n	54a <extint_chan_set_config+0x26>
		return eics[eic_index];
     548:	4813      	ldr	r0, [pc, #76]	; (598 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     54a:	2207      	movs	r2, #7
     54c:	402a      	ands	r2, r5
     54e:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     550:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     552:	7aa3      	ldrb	r3, [r4, #10]
     554:	2b00      	cmp	r3, #0
     556:	d001      	beq.n	55c <extint_chan_set_config+0x38>
     558:	2308      	movs	r3, #8
     55a:	431f      	orrs	r7, r3
     55c:	08eb      	lsrs	r3, r5, #3
     55e:	009b      	lsls	r3, r3, #2
     560:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     562:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     564:	260f      	movs	r6, #15
     566:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     568:	43b1      	bics	r1, r6
			(new_config << config_pos);
     56a:	4097      	lsls	r7, r2
     56c:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     56e:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     570:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     572:	7a63      	ldrb	r3, [r4, #9]
     574:	2b00      	cmp	r3, #0
     576:	d106      	bne.n	586 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     578:	6943      	ldr	r3, [r0, #20]
     57a:	2201      	movs	r2, #1
     57c:	40aa      	lsls	r2, r5
     57e:	4393      	bics	r3, r2
     580:	6143      	str	r3, [r0, #20]
	}
}
     582:	b003      	add	sp, #12
     584:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     586:	6942      	ldr	r2, [r0, #20]
     588:	2301      	movs	r3, #1
     58a:	40ab      	lsls	r3, r5
     58c:	4313      	orrs	r3, r2
     58e:	6143      	str	r3, [r0, #20]
     590:	e7f7      	b.n	582 <extint_chan_set_config+0x5e>
     592:	46c0      	nop			; (mov r8, r8)
     594:	00002e65 	.word	0x00002e65
     598:	40001800 	.word	0x40001800

0000059c <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     59c:	1c93      	adds	r3, r2, #2
     59e:	009b      	lsls	r3, r3, #2
     5a0:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
     5a2:	2a02      	cmp	r2, #2
     5a4:	d009      	beq.n	5ba <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
     5a6:	2a03      	cmp	r2, #3
     5a8:	d00c      	beq.n	5c4 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
     5aa:	2301      	movs	r3, #1
     5ac:	4093      	lsls	r3, r2
     5ae:	001a      	movs	r2, r3
     5b0:	7e03      	ldrb	r3, [r0, #24]
     5b2:	4313      	orrs	r3, r2
     5b4:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
     5b6:	2000      	movs	r0, #0
     5b8:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
     5ba:	7e03      	ldrb	r3, [r0, #24]
     5bc:	2210      	movs	r2, #16
     5be:	4313      	orrs	r3, r2
     5c0:	7603      	strb	r3, [r0, #24]
     5c2:	e7f8      	b.n	5b6 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
     5c4:	7e03      	ldrb	r3, [r0, #24]
     5c6:	2220      	movs	r2, #32
     5c8:	4313      	orrs	r3, r2
     5ca:	7603      	strb	r3, [r0, #24]
     5cc:	e7f3      	b.n	5b6 <tc_register_callback+0x1a>
	...

000005d0 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     5d0:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     5d2:	0080      	lsls	r0, r0, #2
     5d4:	4b16      	ldr	r3, [pc, #88]	; (630 <_tc_interrupt_handler+0x60>)
     5d6:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     5d8:	6823      	ldr	r3, [r4, #0]
     5da:	7b9d      	ldrb	r5, [r3, #14]
     5dc:	7e22      	ldrb	r2, [r4, #24]
     5de:	7e63      	ldrb	r3, [r4, #25]
     5e0:	4013      	ands	r3, r2
     5e2:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     5e4:	07eb      	lsls	r3, r5, #31
     5e6:	d406      	bmi.n	5f6 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     5e8:	07ab      	lsls	r3, r5, #30
     5ea:	d40b      	bmi.n	604 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     5ec:	06eb      	lsls	r3, r5, #27
     5ee:	d410      	bmi.n	612 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     5f0:	06ab      	lsls	r3, r5, #26
     5f2:	d415      	bmi.n	620 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
     5f4:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     5f6:	0020      	movs	r0, r4
     5f8:	68a3      	ldr	r3, [r4, #8]
     5fa:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     5fc:	2301      	movs	r3, #1
     5fe:	6822      	ldr	r2, [r4, #0]
     600:	7393      	strb	r3, [r2, #14]
     602:	e7f1      	b.n	5e8 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
     604:	0020      	movs	r0, r4
     606:	68e3      	ldr	r3, [r4, #12]
     608:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     60a:	2302      	movs	r3, #2
     60c:	6822      	ldr	r2, [r4, #0]
     60e:	7393      	strb	r3, [r2, #14]
     610:	e7ec      	b.n	5ec <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     612:	0020      	movs	r0, r4
     614:	6923      	ldr	r3, [r4, #16]
     616:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     618:	2310      	movs	r3, #16
     61a:	6822      	ldr	r2, [r4, #0]
     61c:	7393      	strb	r3, [r2, #14]
     61e:	e7e7      	b.n	5f0 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     620:	0020      	movs	r0, r4
     622:	6963      	ldr	r3, [r4, #20]
     624:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     626:	6823      	ldr	r3, [r4, #0]
     628:	2220      	movs	r2, #32
     62a:	739a      	strb	r2, [r3, #14]
}
     62c:	e7e2      	b.n	5f4 <_tc_interrupt_handler+0x24>
     62e:	46c0      	nop			; (mov r8, r8)
     630:	20004378 	.word	0x20004378

00000634 <TC0_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     634:	b510      	push	{r4, lr}
     636:	2000      	movs	r0, #0
     638:	4b01      	ldr	r3, [pc, #4]	; (640 <TC0_Handler+0xc>)
     63a:	4798      	blx	r3
     63c:	bd10      	pop	{r4, pc}
     63e:	46c0      	nop			; (mov r8, r8)
     640:	000005d1 	.word	0x000005d1

00000644 <TC1_Handler>:
     644:	b510      	push	{r4, lr}
     646:	2001      	movs	r0, #1
     648:	4b01      	ldr	r3, [pc, #4]	; (650 <TC1_Handler+0xc>)
     64a:	4798      	blx	r3
     64c:	bd10      	pop	{r4, pc}
     64e:	46c0      	nop			; (mov r8, r8)
     650:	000005d1 	.word	0x000005d1

00000654 <TC2_Handler>:
     654:	b510      	push	{r4, lr}
     656:	2002      	movs	r0, #2
     658:	4b01      	ldr	r3, [pc, #4]	; (660 <TC2_Handler+0xc>)
     65a:	4798      	blx	r3
     65c:	bd10      	pop	{r4, pc}
     65e:	46c0      	nop			; (mov r8, r8)
     660:	000005d1 	.word	0x000005d1

00000664 <TC3_Handler>:
     664:	b510      	push	{r4, lr}
     666:	2003      	movs	r0, #3
     668:	4b01      	ldr	r3, [pc, #4]	; (670 <TC3_Handler+0xc>)
     66a:	4798      	blx	r3
     66c:	bd10      	pop	{r4, pc}
     66e:	46c0      	nop			; (mov r8, r8)
     670:	000005d1 	.word	0x000005d1

00000674 <TC4_Handler>:
     674:	b510      	push	{r4, lr}
     676:	2004      	movs	r0, #4
     678:	4b01      	ldr	r3, [pc, #4]	; (680 <TC4_Handler+0xc>)
     67a:	4798      	blx	r3
     67c:	bd10      	pop	{r4, pc}
     67e:	46c0      	nop			; (mov r8, r8)
     680:	000005d1 	.word	0x000005d1

00000684 <TC5_Handler>:
     684:	b510      	push	{r4, lr}
     686:	2005      	movs	r0, #5
     688:	4b01      	ldr	r3, [pc, #4]	; (690 <TC5_Handler+0xc>)
     68a:	4798      	blx	r3
     68c:	bd10      	pop	{r4, pc}
     68e:	46c0      	nop			; (mov r8, r8)
     690:	000005d1 	.word	0x000005d1

00000694 <TC6_Handler>:
     694:	b510      	push	{r4, lr}
     696:	2006      	movs	r0, #6
     698:	4b01      	ldr	r3, [pc, #4]	; (6a0 <TC6_Handler+0xc>)
     69a:	4798      	blx	r3
     69c:	bd10      	pop	{r4, pc}
     69e:	46c0      	nop			; (mov r8, r8)
     6a0:	000005d1 	.word	0x000005d1

000006a4 <TC7_Handler>:
     6a4:	b510      	push	{r4, lr}
     6a6:	2007      	movs	r0, #7
     6a8:	4b01      	ldr	r3, [pc, #4]	; (6b0 <TC7_Handler+0xc>)
     6aa:	4798      	blx	r3
     6ac:	bd10      	pop	{r4, pc}
     6ae:	46c0      	nop			; (mov r8, r8)
     6b0:	000005d1 	.word	0x000005d1

000006b4 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
     6b4:	b530      	push	{r4, r5, lr}
     6b6:	b089      	sub	sp, #36	; 0x24
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
     6b8:	4b0c      	ldr	r3, [pc, #48]	; (6ec <_tc_get_inst_index+0x38>)
     6ba:	466a      	mov	r2, sp
     6bc:	cb32      	ldmia	r3!, {r1, r4, r5}
     6be:	c232      	stmia	r2!, {r1, r4, r5}
     6c0:	cb32      	ldmia	r3!, {r1, r4, r5}
     6c2:	c232      	stmia	r2!, {r1, r4, r5}
     6c4:	cb12      	ldmia	r3!, {r1, r4}
     6c6:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
     6c8:	9b00      	ldr	r3, [sp, #0]
     6ca:	4298      	cmp	r0, r3
     6cc:	d00b      	beq.n	6e6 <_tc_get_inst_index+0x32>
     6ce:	2301      	movs	r3, #1
     6d0:	009a      	lsls	r2, r3, #2
     6d2:	4669      	mov	r1, sp
     6d4:	5852      	ldr	r2, [r2, r1]
     6d6:	4282      	cmp	r2, r0
     6d8:	d006      	beq.n	6e8 <_tc_get_inst_index+0x34>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     6da:	3301      	adds	r3, #1
     6dc:	2b08      	cmp	r3, #8
     6de:	d1f7      	bne.n	6d0 <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     6e0:	2000      	movs	r0, #0
}
     6e2:	b009      	add	sp, #36	; 0x24
     6e4:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     6e6:	2300      	movs	r3, #0
			return i;
     6e8:	b2d8      	uxtb	r0, r3
     6ea:	e7fa      	b.n	6e2 <_tc_get_inst_index+0x2e>
     6ec:	00003674 	.word	0x00003674

000006f0 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
     6f0:	b5f0      	push	{r4, r5, r6, r7, lr}
     6f2:	b089      	sub	sp, #36	; 0x24
     6f4:	0004      	movs	r4, r0
     6f6:	000d      	movs	r5, r1
     6f8:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
     6fa:	0008      	movs	r0, r1
     6fc:	4b87      	ldr	r3, [pc, #540]	; (91c <tc_init+0x22c>)
     6fe:	4798      	blx	r3
     700:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
     702:	ab06      	add	r3, sp, #24
     704:	2213      	movs	r2, #19
     706:	701a      	strb	r2, [r3, #0]
     708:	705a      	strb	r2, [r3, #1]
     70a:	3201      	adds	r2, #1
     70c:	709a      	strb	r2, [r3, #2]
     70e:	70da      	strb	r2, [r3, #3]
     710:	3201      	adds	r2, #1
     712:	711a      	strb	r2, [r3, #4]
     714:	715a      	strb	r2, [r3, #5]
     716:	3201      	adds	r2, #1
     718:	719a      	strb	r2, [r3, #6]
     71a:	71da      	strb	r2, [r3, #7]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
     71c:	3a06      	subs	r2, #6
     71e:	4980      	ldr	r1, [pc, #512]	; (920 <tc_init+0x230>)
     720:	3120      	adds	r1, #32
     722:	a802      	add	r0, sp, #8
     724:	4b7f      	ldr	r3, [pc, #508]	; (924 <tc_init+0x234>)
     726:	4798      	blx	r3
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
     728:	2300      	movs	r3, #0
     72a:	60a3      	str	r3, [r4, #8]
     72c:	60e3      	str	r3, [r4, #12]
     72e:	6123      	str	r3, [r4, #16]
     730:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
     732:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
     734:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
     736:	00ba      	lsls	r2, r7, #2
     738:	4b7b      	ldr	r3, [pc, #492]	; (928 <tc_init+0x238>)
     73a:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
     73c:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     73e:	78b3      	ldrb	r3, [r6, #2]
     740:	2b08      	cmp	r3, #8
     742:	d006      	beq.n	752 <tc_init+0x62>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
     744:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     746:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     748:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     74a:	07db      	lsls	r3, r3, #31
     74c:	d505      	bpl.n	75a <tc_init+0x6a>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
     74e:	b009      	add	sp, #36	; 0x24
     750:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
     752:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     754:	07fa      	lsls	r2, r7, #31
     756:	d4fa      	bmi.n	74e <tc_init+0x5e>
     758:	e7f4      	b.n	744 <tc_init+0x54>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     75a:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
     75c:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     75e:	06db      	lsls	r3, r3, #27
     760:	d4f5      	bmi.n	74e <tc_init+0x5e>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
     762:	882b      	ldrh	r3, [r5, #0]
     764:	079b      	lsls	r3, r3, #30
     766:	d4f2      	bmi.n	74e <tc_init+0x5e>
	if (config->pwm_channel[0].enabled) {
     768:	7c33      	ldrb	r3, [r6, #16]
     76a:	2b00      	cmp	r3, #0
     76c:	d000      	beq.n	770 <tc_init+0x80>
     76e:	e07a      	b.n	866 <tc_init+0x176>
	if (config->pwm_channel[1].enabled) {
     770:	7f33      	ldrb	r3, [r6, #28]
     772:	2b00      	cmp	r3, #0
     774:	d000      	beq.n	778 <tc_init+0x88>
     776:	e082      	b.n	87e <tc_init+0x18e>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     778:	496c      	ldr	r1, [pc, #432]	; (92c <tc_init+0x23c>)
     77a:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
     77c:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     77e:	ab02      	add	r3, sp, #8
     780:	5ad3      	ldrh	r3, [r2, r3]
     782:	4303      	orrs	r3, r0
     784:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
     786:	78b3      	ldrb	r3, [r6, #2]
     788:	2b08      	cmp	r3, #8
     78a:	d100      	bne.n	78e <tc_init+0x9e>
     78c:	e087      	b.n	89e <tc_init+0x1ae>
	gclk_chan_config.source_generator = config->clock_source;
     78e:	7833      	ldrb	r3, [r6, #0]
     790:	466a      	mov	r2, sp
     792:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
     794:	ab06      	add	r3, sp, #24
     796:	5ddf      	ldrb	r7, [r3, r7]
     798:	4669      	mov	r1, sp
     79a:	0038      	movs	r0, r7
     79c:	4b64      	ldr	r3, [pc, #400]	; (930 <tc_init+0x240>)
     79e:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
     7a0:	0038      	movs	r0, r7
     7a2:	4b64      	ldr	r3, [pc, #400]	; (934 <tc_init+0x244>)
     7a4:	4798      	blx	r3
	ctrla_tmp =
     7a6:	8931      	ldrh	r1, [r6, #8]
     7a8:	88b3      	ldrh	r3, [r6, #4]
     7aa:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
     7ac:	78b1      	ldrb	r1, [r6, #2]
     7ae:	79b2      	ldrb	r2, [r6, #6]
     7b0:	4311      	orrs	r1, r2
	ctrla_tmp =
     7b2:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
     7b4:	7873      	ldrb	r3, [r6, #1]
     7b6:	2b00      	cmp	r3, #0
     7b8:	d002      	beq.n	7c0 <tc_init+0xd0>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
     7ba:	2380      	movs	r3, #128	; 0x80
     7bc:	011b      	lsls	r3, r3, #4
     7be:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     7c0:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     7c2:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     7c4:	b25b      	sxtb	r3, r3
     7c6:	2b00      	cmp	r3, #0
     7c8:	dbfb      	blt.n	7c2 <tc_init+0xd2>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
     7ca:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
     7cc:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
     7ce:	1e4b      	subs	r3, r1, #1
     7d0:	4199      	sbcs	r1, r3
     7d2:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
     7d4:	7bb3      	ldrb	r3, [r6, #14]
     7d6:	2b00      	cmp	r3, #0
     7d8:	d001      	beq.n	7de <tc_init+0xee>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
     7da:	2301      	movs	r3, #1
     7dc:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     7de:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     7e0:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     7e2:	b25b      	sxtb	r3, r3
     7e4:	2b00      	cmp	r3, #0
     7e6:	dbfb      	blt.n	7e0 <tc_init+0xf0>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
     7e8:	23ff      	movs	r3, #255	; 0xff
     7ea:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
     7ec:	2900      	cmp	r1, #0
     7ee:	d005      	beq.n	7fc <tc_init+0x10c>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     7f0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     7f2:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
     7f4:	b25b      	sxtb	r3, r3
     7f6:	2b00      	cmp	r3, #0
     7f8:	dbfb      	blt.n	7f2 <tc_init+0x102>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
     7fa:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
     7fc:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
     7fe:	7af3      	ldrb	r3, [r6, #11]
     800:	2b00      	cmp	r3, #0
     802:	d001      	beq.n	808 <tc_init+0x118>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     804:	2310      	movs	r3, #16
     806:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
     808:	7b33      	ldrb	r3, [r6, #12]
     80a:	2b00      	cmp	r3, #0
     80c:	d001      	beq.n	812 <tc_init+0x122>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     80e:	2320      	movs	r3, #32
     810:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     812:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     814:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     816:	b25b      	sxtb	r3, r3
     818:	2b00      	cmp	r3, #0
     81a:	dbfb      	blt.n	814 <tc_init+0x124>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
     81c:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     81e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     820:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     822:	b25b      	sxtb	r3, r3
     824:	2b00      	cmp	r3, #0
     826:	dbfb      	blt.n	820 <tc_init+0x130>
	switch (module_inst->counter_size) {
     828:	7923      	ldrb	r3, [r4, #4]
     82a:	2b04      	cmp	r3, #4
     82c:	d03f      	beq.n	8ae <tc_init+0x1be>
     82e:	2b08      	cmp	r3, #8
     830:	d05e      	beq.n	8f0 <tc_init+0x200>
	return STATUS_ERR_INVALID_ARG;
     832:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
     834:	2b00      	cmp	r3, #0
     836:	d000      	beq.n	83a <tc_init+0x14a>
     838:	e789      	b.n	74e <tc_init+0x5e>
     83a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     83c:	b25b      	sxtb	r3, r3
     83e:	2b00      	cmp	r3, #0
     840:	dbfb      	blt.n	83a <tc_init+0x14a>
				= config->counter_16_bit.value;
     842:	8d33      	ldrh	r3, [r6, #40]	; 0x28
     844:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     846:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     848:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     84a:	b25b      	sxtb	r3, r3
     84c:	2b00      	cmp	r3, #0
     84e:	dbfb      	blt.n	848 <tc_init+0x158>
					config->counter_16_bit.compare_capture_channel[0];
     850:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
     852:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     854:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     856:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     858:	b25b      	sxtb	r3, r3
     85a:	2b00      	cmp	r3, #0
     85c:	dbfb      	blt.n	856 <tc_init+0x166>
					config->counter_16_bit.compare_capture_channel[1];
     85e:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
     860:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
     862:	2000      	movs	r0, #0
     864:	e773      	b.n	74e <tc_init+0x5e>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     866:	a901      	add	r1, sp, #4
     868:	2301      	movs	r3, #1
     86a:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     86c:	2200      	movs	r2, #0
     86e:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
     870:	7e32      	ldrb	r2, [r6, #24]
     872:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     874:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     876:	7d30      	ldrb	r0, [r6, #20]
     878:	4b2f      	ldr	r3, [pc, #188]	; (938 <tc_init+0x248>)
     87a:	4798      	blx	r3
     87c:	e778      	b.n	770 <tc_init+0x80>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     87e:	a901      	add	r1, sp, #4
     880:	2301      	movs	r3, #1
     882:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     884:	2200      	movs	r2, #0
     886:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
     888:	3224      	adds	r2, #36	; 0x24
     88a:	18b2      	adds	r2, r6, r2
     88c:	7812      	ldrb	r2, [r2, #0]
     88e:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     890:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     892:	331f      	adds	r3, #31
     894:	18f3      	adds	r3, r6, r3
     896:	7818      	ldrb	r0, [r3, #0]
     898:	4b27      	ldr	r3, [pc, #156]	; (938 <tc_init+0x248>)
     89a:	4798      	blx	r3
     89c:	e76c      	b.n	778 <tc_init+0x88>
     89e:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
     8a0:	1c7a      	adds	r2, r7, #1
     8a2:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     8a4:	ab02      	add	r3, sp, #8
     8a6:	5ad3      	ldrh	r3, [r2, r3]
     8a8:	4303      	orrs	r3, r0
     8aa:	620b      	str	r3, [r1, #32]
     8ac:	e76f      	b.n	78e <tc_init+0x9e>
     8ae:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     8b0:	b25b      	sxtb	r3, r3
     8b2:	2b00      	cmp	r3, #0
     8b4:	dbfb      	blt.n	8ae <tc_init+0x1be>
					config->counter_8_bit.value;
     8b6:	2328      	movs	r3, #40	; 0x28
     8b8:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
     8ba:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     8bc:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     8be:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     8c0:	b25b      	sxtb	r3, r3
     8c2:	2b00      	cmp	r3, #0
     8c4:	dbfb      	blt.n	8be <tc_init+0x1ce>
					config->counter_8_bit.period;
     8c6:	2329      	movs	r3, #41	; 0x29
     8c8:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
     8ca:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     8cc:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     8ce:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     8d0:	b25b      	sxtb	r3, r3
     8d2:	2b00      	cmp	r3, #0
     8d4:	dbfb      	blt.n	8ce <tc_init+0x1de>
					config->counter_8_bit.compare_capture_channel[0];
     8d6:	232a      	movs	r3, #42	; 0x2a
     8d8:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
     8da:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     8dc:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     8de:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     8e0:	b25b      	sxtb	r3, r3
     8e2:	2b00      	cmp	r3, #0
     8e4:	dbfb      	blt.n	8de <tc_init+0x1ee>
					config->counter_8_bit.compare_capture_channel[1];
     8e6:	232b      	movs	r3, #43	; 0x2b
     8e8:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
     8ea:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
     8ec:	2000      	movs	r0, #0
     8ee:	e72e      	b.n	74e <tc_init+0x5e>
     8f0:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     8f2:	b25b      	sxtb	r3, r3
     8f4:	2b00      	cmp	r3, #0
     8f6:	dbfb      	blt.n	8f0 <tc_init+0x200>
				= config->counter_32_bit.value;
     8f8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     8fa:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     8fc:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     8fe:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     900:	b25b      	sxtb	r3, r3
     902:	2b00      	cmp	r3, #0
     904:	dbfb      	blt.n	8fe <tc_init+0x20e>
			hw->COUNT32.CC[0].reg =
     906:	6af3      	ldr	r3, [r6, #44]	; 0x2c
     908:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     90a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     90c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     90e:	b25b      	sxtb	r3, r3
     910:	2b00      	cmp	r3, #0
     912:	dbfb      	blt.n	90c <tc_init+0x21c>
					config->counter_32_bit.compare_capture_channel[1];
     914:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
     916:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
     918:	2000      	movs	r0, #0
     91a:	e718      	b.n	74e <tc_init+0x5e>
     91c:	000006b5 	.word	0x000006b5
     920:	00003674 	.word	0x00003674
     924:	00003549 	.word	0x00003549
     928:	20004378 	.word	0x20004378
     92c:	40000400 	.word	0x40000400
     930:	00002d3d 	.word	0x00002d3d
     934:	00002cb1 	.word	0x00002cb1
     938:	00002e65 	.word	0x00002e65

0000093c <wdt_set_config>:
	return STATUS_OK;
}
#else
enum status_code wdt_set_config(
		const struct wdt_conf *const config)
{
     93c:	b510      	push	{r4, lr}
     93e:	b082      	sub	sp, #8
     940:	0004      	movs	r4, r0
			PM->APBAMASK.reg |= mask;
     942:	4a39      	ldr	r2, [pc, #228]	; (a28 <wdt_set_config+0xec>)
     944:	6993      	ldr	r3, [r2, #24]
     946:	2110      	movs	r1, #16
     948:	430b      	orrs	r3, r1
     94a:	6193      	str	r3, [r2, #24]
	Wdt *const WDT_module = WDT;

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (WDT_module->CTRLA.reg & WDT_CTRLA_ALWAYSON);
#else
	return (WDT_module->CTRL.reg & WDT_CTRL_ALWAYSON);
     94c:	4b37      	ldr	r3, [pc, #220]	; (a2c <wdt_set_config+0xf0>)
     94e:	781b      	ldrb	r3, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_WDT);

	/* Check of the Watchdog has been locked to be always on, if so, abort */
	if (wdt_is_locked()) {
     950:	b25b      	sxtb	r3, r3
		return STATUS_ERR_IO;
     952:	2010      	movs	r0, #16
	if (wdt_is_locked()) {
     954:	2b00      	cmp	r3, #0
     956:	db03      	blt.n	960 <wdt_set_config+0x24>
	}

	/* Check for an invalid timeout period, abort if found */
	if (config->timeout_period == WDT_PERIOD_NONE) {
     958:	78e3      	ldrb	r3, [r4, #3]
		return STATUS_ERR_INVALID_ARG;
     95a:	3007      	adds	r0, #7
	if (config->timeout_period == WDT_PERIOD_NONE) {
     95c:	2b00      	cmp	r3, #0
     95e:	d101      	bne.n	964 <wdt_set_config+0x28>
	while (wdt_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}

	return STATUS_OK;
}
     960:	b002      	add	sp, #8
     962:	bd10      	pop	{r4, pc}
	if ((config->timeout_period < config->window_period) ||
     964:	7922      	ldrb	r2, [r4, #4]
     966:	429a      	cmp	r2, r3
     968:	d8fa      	bhi.n	960 <wdt_set_config+0x24>
     96a:	7962      	ldrb	r2, [r4, #5]
     96c:	429a      	cmp	r2, r3
     96e:	d8f7      	bhi.n	960 <wdt_set_config+0x24>
	WDT_module->CTRL.reg &= ~WDT_CTRL_ENABLE;
     970:	4a2e      	ldr	r2, [pc, #184]	; (a2c <wdt_set_config+0xf0>)
     972:	7813      	ldrb	r3, [r2, #0]
     974:	390e      	subs	r1, #14
     976:	438b      	bics	r3, r1
     978:	7013      	strb	r3, [r2, #0]
	if (WDT_module->STATUS.reg & WDT_STATUS_SYNCBUSY) {
     97a:	79d3      	ldrb	r3, [r2, #7]
	while (wdt_is_syncing()) {
     97c:	b25b      	sxtb	r3, r3
     97e:	2b00      	cmp	r3, #0
     980:	dbfb      	blt.n	97a <wdt_set_config+0x3e>
	if(config->enable == false) {
     982:	7863      	ldrb	r3, [r4, #1]
		return STATUS_OK;
     984:	2000      	movs	r0, #0
	if(config->enable == false) {
     986:	2b00      	cmp	r3, #0
     988:	d0ea      	beq.n	960 <wdt_set_config+0x24>
	gclk_chan_conf.source_generator = config->clock_source;
     98a:	a901      	add	r1, sp, #4
     98c:	78a3      	ldrb	r3, [r4, #2]
     98e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(WDT_GCLK_ID, &gclk_chan_conf);
     990:	3001      	adds	r0, #1
     992:	4b27      	ldr	r3, [pc, #156]	; (a30 <wdt_set_config+0xf4>)
     994:	4798      	blx	r3
	system_gclk_chan_enable(WDT_GCLK_ID);
     996:	2001      	movs	r0, #1
     998:	4b26      	ldr	r3, [pc, #152]	; (a34 <wdt_set_config+0xf8>)
     99a:	4798      	blx	r3
	if (config->always_on) {
     99c:	7823      	ldrb	r3, [r4, #0]
     99e:	2b00      	cmp	r3, #0
     9a0:	d127      	bne.n	9f2 <wdt_set_config+0xb6>
	new_config |= (config->timeout_period - 1) << WDT_CONFIG_PER_Pos;
     9a2:	78e3      	ldrb	r3, [r4, #3]
     9a4:	3b01      	subs	r3, #1
	if (config->window_period != WDT_PERIOD_NONE) {
     9a6:	7922      	ldrb	r2, [r4, #4]
     9a8:	2a00      	cmp	r2, #0
     9aa:	d026      	beq.n	9fa <wdt_set_config+0xbe>
		WDT_module->CTRL.reg |= WDT_CTRL_WEN;
     9ac:	491f      	ldr	r1, [pc, #124]	; (a2c <wdt_set_config+0xf0>)
     9ae:	780a      	ldrb	r2, [r1, #0]
     9b0:	2004      	movs	r0, #4
     9b2:	4302      	orrs	r2, r0
     9b4:	700a      	strb	r2, [r1, #0]
		new_config |= (config->window_period - 1) << WDT_CONFIG_WINDOW_Pos;
     9b6:	7922      	ldrb	r2, [r4, #4]
     9b8:	3a01      	subs	r2, #1
     9ba:	4082      	lsls	r2, r0
     9bc:	4313      	orrs	r3, r2
     9be:	491b      	ldr	r1, [pc, #108]	; (a2c <wdt_set_config+0xf0>)
     9c0:	79ca      	ldrb	r2, [r1, #7]
	while (wdt_is_syncing()) {
     9c2:	b252      	sxtb	r2, r2
     9c4:	2a00      	cmp	r2, #0
     9c6:	dbfb      	blt.n	9c0 <wdt_set_config+0x84>
	WDT_module->CONFIG.reg = new_config;
     9c8:	b2db      	uxtb	r3, r3
     9ca:	4a18      	ldr	r2, [pc, #96]	; (a2c <wdt_set_config+0xf0>)
     9cc:	7053      	strb	r3, [r2, #1]
	if (config->early_warning_period != WDT_PERIOD_NONE) {
     9ce:	7963      	ldrb	r3, [r4, #5]
     9d0:	2b00      	cmp	r3, #0
     9d2:	d118      	bne.n	a06 <wdt_set_config+0xca>
	if (config->always_on) {
     9d4:	7823      	ldrb	r3, [r4, #0]
     9d6:	2b00      	cmp	r3, #0
     9d8:	d01f      	beq.n	a1a <wdt_set_config+0xde>
		WDT_module->CTRL.reg |= WDT_CTRL_ALWAYSON;
     9da:	4a14      	ldr	r2, [pc, #80]	; (a2c <wdt_set_config+0xf0>)
     9dc:	7813      	ldrb	r3, [r2, #0]
     9de:	2180      	movs	r1, #128	; 0x80
     9e0:	430b      	orrs	r3, r1
     9e2:	7013      	strb	r3, [r2, #0]
     9e4:	4a11      	ldr	r2, [pc, #68]	; (a2c <wdt_set_config+0xf0>)
     9e6:	79d3      	ldrb	r3, [r2, #7]
	while (wdt_is_syncing()) {
     9e8:	b25b      	sxtb	r3, r3
     9ea:	2b00      	cmp	r3, #0
     9ec:	dbfb      	blt.n	9e6 <wdt_set_config+0xaa>
	return STATUS_OK;
     9ee:	2000      	movs	r0, #0
     9f0:	e7b6      	b.n	960 <wdt_set_config+0x24>
		system_gclk_chan_lock(WDT_GCLK_ID);
     9f2:	2001      	movs	r0, #1
     9f4:	4b10      	ldr	r3, [pc, #64]	; (a38 <wdt_set_config+0xfc>)
     9f6:	4798      	blx	r3
     9f8:	e7d3      	b.n	9a2 <wdt_set_config+0x66>
		WDT_module->CTRL.reg &= ~WDT_CTRL_WEN;
     9fa:	490c      	ldr	r1, [pc, #48]	; (a2c <wdt_set_config+0xf0>)
     9fc:	780a      	ldrb	r2, [r1, #0]
     9fe:	2004      	movs	r0, #4
     a00:	4382      	bics	r2, r0
     a02:	700a      	strb	r2, [r1, #0]
     a04:	e7db      	b.n	9be <wdt_set_config+0x82>
     a06:	0011      	movs	r1, r2
     a08:	79ca      	ldrb	r2, [r1, #7]
		while (wdt_is_syncing()) {
     a0a:	b252      	sxtb	r2, r2
     a0c:	2a00      	cmp	r2, #0
     a0e:	dbfb      	blt.n	a08 <wdt_set_config+0xcc>
			= (config->early_warning_period - 1) << WDT_EWCTRL_EWOFFSET_Pos;
     a10:	3b01      	subs	r3, #1
     a12:	b2db      	uxtb	r3, r3
     a14:	4a05      	ldr	r2, [pc, #20]	; (a2c <wdt_set_config+0xf0>)
     a16:	7093      	strb	r3, [r2, #2]
     a18:	e7dc      	b.n	9d4 <wdt_set_config+0x98>
		WDT_module->CTRL.reg |= WDT_CTRL_ENABLE;
     a1a:	4a04      	ldr	r2, [pc, #16]	; (a2c <wdt_set_config+0xf0>)
     a1c:	7813      	ldrb	r3, [r2, #0]
     a1e:	2102      	movs	r1, #2
     a20:	430b      	orrs	r3, r1
     a22:	7013      	strb	r3, [r2, #0]
     a24:	e7de      	b.n	9e4 <wdt_set_config+0xa8>
     a26:	46c0      	nop			; (mov r8, r8)
     a28:	40000400 	.word	0x40000400
     a2c:	40001000 	.word	0x40001000
     a30:	00002d3d 	.word	0x00002d3d
     a34:	00002cb1 	.word	0x00002cb1
     a38:	00002d59 	.word	0x00002d59

00000a3c <wdt_reset_count>:
void wdt_reset_count(void)
{
	Wdt *const WDT_module = WDT;

	/* Disable the Watchdog module */
	WDT_module->CLEAR.reg = WDT_CLEAR_CLEAR_KEY;
     a3c:	22a5      	movs	r2, #165	; 0xa5
     a3e:	4b04      	ldr	r3, [pc, #16]	; (a50 <wdt_reset_count+0x14>)
     a40:	721a      	strb	r2, [r3, #8]
     a42:	001a      	movs	r2, r3
     a44:	79d3      	ldrb	r3, [r2, #7]

	while (wdt_is_syncing()) {
     a46:	b25b      	sxtb	r3, r3
     a48:	2b00      	cmp	r3, #0
     a4a:	dbfb      	blt.n	a44 <wdt_reset_count+0x8>
		/* Wait for all hardware modules to complete synchronization */
	}
}
     a4c:	4770      	bx	lr
     a4e:	46c0      	nop			; (mov r8, r8)
     a50:	40001000 	.word	0x40001000

00000a54 <wdt_register_callback>:
		const enum wdt_callback type)
{
	/* Sanity check arguments */
	Assert(callback);

	switch (type)
     a54:	2900      	cmp	r1, #0
     a56:	d001      	beq.n	a5c <wdt_register_callback+0x8>
	case WDT_CALLBACK_EARLY_WARNING:
		wdt_early_warning_callback = callback;
		return STATUS_OK;
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     a58:	2017      	movs	r0, #23
	}
}
     a5a:	4770      	bx	lr
		wdt_early_warning_callback = callback;
     a5c:	4b01      	ldr	r3, [pc, #4]	; (a64 <wdt_register_callback+0x10>)
     a5e:	6018      	str	r0, [r3, #0]
		return STATUS_OK;
     a60:	2000      	movs	r0, #0
     a62:	e7fa      	b.n	a5a <wdt_register_callback+0x6>
     a64:	20004398 	.word	0x20004398

00000a68 <wdt_enable_callback>:
enum status_code wdt_enable_callback(
		const enum wdt_callback type)
{
	Wdt *const WDT_module = WDT;

	switch (type)
     a68:	2800      	cmp	r0, #0
     a6a:	d001      	beq.n	a70 <wdt_enable_callback+0x8>
		WDT_module->INTENSET.reg = WDT_INTENSET_EW;
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_WDT);
		return STATUS_OK;
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     a6c:	2017      	movs	r0, #23
	}
}
     a6e:	4770      	bx	lr
		WDT_module->INTENSET.reg = WDT_INTENSET_EW;
     a70:	2201      	movs	r2, #1
     a72:	4b03      	ldr	r3, [pc, #12]	; (a80 <wdt_enable_callback+0x18>)
     a74:	715a      	strb	r2, [r3, #5]
     a76:	3203      	adds	r2, #3
     a78:	4b02      	ldr	r3, [pc, #8]	; (a84 <wdt_enable_callback+0x1c>)
     a7a:	601a      	str	r2, [r3, #0]
		return STATUS_OK;
     a7c:	e7f7      	b.n	a6e <wdt_enable_callback+0x6>
     a7e:	46c0      	nop			; (mov r8, r8)
     a80:	40001000 	.word	0x40001000
     a84:	e000e100 	.word	0xe000e100

00000a88 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
     a88:	b510      	push	{r4, lr}
 */
static inline void wdt_clear_early_warning(void)
{
	Wdt *const WDT_module = WDT;

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
     a8a:	2201      	movs	r2, #1
     a8c:	4b03      	ldr	r3, [pc, #12]	; (a9c <WDT_Handler+0x14>)
     a8e:	719a      	strb	r2, [r3, #6]
	wdt_clear_early_warning();

	if (wdt_early_warning_callback) {
     a90:	4b03      	ldr	r3, [pc, #12]	; (aa0 <WDT_Handler+0x18>)
     a92:	681b      	ldr	r3, [r3, #0]
     a94:	2b00      	cmp	r3, #0
     a96:	d000      	beq.n	a9a <WDT_Handler+0x12>
		wdt_early_warning_callback();
     a98:	4798      	blx	r3
	}
}
     a9a:	bd10      	pop	{r4, pc}
     a9c:	40001000 	.word	0x40001000
     aa0:	20004398 	.word	0x20004398

00000aa4 <extint_detection_callback>:

//! [setup_7]
void extint_detection_callback(void)
{
	//usart_write_buffer_wait(&MyUart03, string, sizeof(string));
	if(LoRa_IRQ_Flag == 0)
     aa4:	4b03      	ldr	r3, [pc, #12]	; (ab4 <extint_detection_callback+0x10>)
     aa6:	781b      	ldrb	r3, [r3, #0]
     aa8:	2b00      	cmp	r3, #0
     aaa:	d102      	bne.n	ab2 <extint_detection_callback+0xe>
	{
		LoRa_IRQ_Flag = 1;
     aac:	2201      	movs	r2, #1
     aae:	4b01      	ldr	r3, [pc, #4]	; (ab4 <extint_detection_callback+0x10>)
     ab0:	701a      	strb	r2, [r3, #0]
	}
}
     ab2:	4770      	bx	lr
     ab4:	20004304 	.word	0x20004304

00000ab8 <configure_extint_channel>:
{
     ab8:	b510      	push	{r4, lr}
     aba:	b084      	sub	sp, #16
	extint_chan_get_config_defaults(&config_extint_chan);
     abc:	ac01      	add	r4, sp, #4
     abe:	0020      	movs	r0, r4
     ac0:	4b07      	ldr	r3, [pc, #28]	; (ae0 <configure_extint_channel+0x28>)
     ac2:	4798      	blx	r3
	config_extint_chan.gpio_pin           = PIN_PA11A_EIC_EXTINT11;
     ac4:	230b      	movs	r3, #11
     ac6:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux       = MUX_PA11A_EIC_EXTINT11;
     ac8:	2300      	movs	r3, #0
     aca:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
     acc:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
     ace:	3301      	adds	r3, #1
     ad0:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(11, &config_extint_chan);
     ad2:	0021      	movs	r1, r4
     ad4:	200b      	movs	r0, #11
     ad6:	4b03      	ldr	r3, [pc, #12]	; (ae4 <configure_extint_channel+0x2c>)
     ad8:	4798      	blx	r3
}
     ada:	b004      	add	sp, #16
     adc:	bd10      	pop	{r4, pc}
     ade:	46c0      	nop			; (mov r8, r8)
     ae0:	00000511 	.word	0x00000511
     ae4:	00000525 	.word	0x00000525

00000ae8 <configure_extint_callbacks>:
{
     ae8:	b510      	push	{r4, lr}
	extint_register_callback(extint_detection_callback, 11, EXTINT_CALLBACK_TYPE_DETECT);
     aea:	2200      	movs	r2, #0
     aec:	210b      	movs	r1, #11
     aee:	4804      	ldr	r0, [pc, #16]	; (b00 <configure_extint_callbacks+0x18>)
     af0:	4b04      	ldr	r3, [pc, #16]	; (b04 <configure_extint_callbacks+0x1c>)
     af2:	4798      	blx	r3
	extint_chan_enable_callback(11, EXTINT_CALLBACK_TYPE_DETECT);
     af4:	2100      	movs	r1, #0
     af6:	200b      	movs	r0, #11
     af8:	4b03      	ldr	r3, [pc, #12]	; (b08 <configure_extint_callbacks+0x20>)
     afa:	4798      	blx	r3
}
     afc:	bd10      	pop	{r4, pc}
     afe:	46c0      	nop			; (mov r8, r8)
     b00:	00000aa5 	.word	0x00000aa5
     b04:	000003ed 	.word	0x000003ed
     b08:	00000419 	.word	0x00000419

00000b0c <lcd_4bit>:
﻿#include <asf.h>
#include <stdio.h>
#include "myDefine.h"

void lcd_4bit(unsigned char rs, unsigned char tmp)
{
     b0c:	b570      	push	{r4, r5, r6, lr}
	UINT8u_t user_data;
	user_data.byte = tmp;
	if(rs == 1)					LCM_RS_High		else	LCM_RS_Low
     b0e:	2801      	cmp	r0, #1
     b10:	d022      	beq.n	b58 <lcd_4bit+0x4c>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     b12:	2208      	movs	r2, #8
     b14:	4b1a      	ldr	r3, [pc, #104]	; (b80 <lcd_4bit+0x74>)
     b16:	615a      	str	r2, [r3, #20]
     b18:	2204      	movs	r2, #4
     b1a:	4b19      	ldr	r3, [pc, #100]	; (b80 <lcd_4bit+0x74>)
     b1c:	615a      	str	r2, [r3, #20]
	LCM_RW_Low
	if(user_data.bit.b0 == 1)	LCM_04_High		else	LCM_04_Low
     b1e:	07cb      	lsls	r3, r1, #31
     b20:	d51e      	bpl.n	b60 <lcd_4bit+0x54>
		port_base->OUTSET.reg = pin_mask;
     b22:	320c      	adds	r2, #12
     b24:	4b16      	ldr	r3, [pc, #88]	; (b80 <lcd_4bit+0x74>)
     b26:	619a      	str	r2, [r3, #24]
	if(user_data.bit.b1 == 1)	LCM_05_High		else	LCM_05_Low
     b28:	078b      	lsls	r3, r1, #30
     b2a:	d51d      	bpl.n	b68 <lcd_4bit+0x5c>
     b2c:	2220      	movs	r2, #32
     b2e:	4b14      	ldr	r3, [pc, #80]	; (b80 <lcd_4bit+0x74>)
     b30:	619a      	str	r2, [r3, #24]
	if(user_data.bit.b2 == 1)	LCM_06_High		else	LCM_06_Low
     b32:	074b      	lsls	r3, r1, #29
     b34:	d51c      	bpl.n	b70 <lcd_4bit+0x64>
     b36:	2240      	movs	r2, #64	; 0x40
     b38:	4b11      	ldr	r3, [pc, #68]	; (b80 <lcd_4bit+0x74>)
     b3a:	619a      	str	r2, [r3, #24]
	if(user_data.bit.b3 == 1)	LCM_07_High		else	LCM_07_Low
     b3c:	070b      	lsls	r3, r1, #28
     b3e:	d41b      	bmi.n	b78 <lcd_4bit+0x6c>
		port_base->OUTCLR.reg = pin_mask;
     b40:	2280      	movs	r2, #128	; 0x80
     b42:	4b0f      	ldr	r3, [pc, #60]	; (b80 <lcd_4bit+0x74>)
     b44:	615a      	str	r2, [r3, #20]
		port_base->OUTSET.reg = pin_mask;
     b46:	4c0e      	ldr	r4, [pc, #56]	; (b80 <lcd_4bit+0x74>)
     b48:	2580      	movs	r5, #128	; 0x80
     b4a:	006d      	lsls	r5, r5, #1
     b4c:	61a5      	str	r5, [r4, #24]
	LCM_EN_High		
	delay_us(15);			//等待寫入
     b4e:	200f      	movs	r0, #15
     b50:	4b0c      	ldr	r3, [pc, #48]	; (b84 <lcd_4bit+0x78>)
     b52:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
     b54:	6165      	str	r5, [r4, #20]
	LCM_EN_Low
}
     b56:	bd70      	pop	{r4, r5, r6, pc}
		port_base->OUTSET.reg = pin_mask;
     b58:	2208      	movs	r2, #8
     b5a:	4b09      	ldr	r3, [pc, #36]	; (b80 <lcd_4bit+0x74>)
     b5c:	619a      	str	r2, [r3, #24]
     b5e:	e7db      	b.n	b18 <lcd_4bit+0xc>
		port_base->OUTCLR.reg = pin_mask;
     b60:	2210      	movs	r2, #16
     b62:	4b07      	ldr	r3, [pc, #28]	; (b80 <lcd_4bit+0x74>)
     b64:	615a      	str	r2, [r3, #20]
     b66:	e7df      	b.n	b28 <lcd_4bit+0x1c>
     b68:	2220      	movs	r2, #32
     b6a:	4b05      	ldr	r3, [pc, #20]	; (b80 <lcd_4bit+0x74>)
     b6c:	615a      	str	r2, [r3, #20]
     b6e:	e7e0      	b.n	b32 <lcd_4bit+0x26>
     b70:	2240      	movs	r2, #64	; 0x40
     b72:	4b03      	ldr	r3, [pc, #12]	; (b80 <lcd_4bit+0x74>)
     b74:	615a      	str	r2, [r3, #20]
     b76:	e7e1      	b.n	b3c <lcd_4bit+0x30>
		port_base->OUTSET.reg = pin_mask;
     b78:	2280      	movs	r2, #128	; 0x80
     b7a:	4b01      	ldr	r3, [pc, #4]	; (b80 <lcd_4bit+0x74>)
     b7c:	619a      	str	r2, [r3, #24]
     b7e:	e7e2      	b.n	b46 <lcd_4bit+0x3a>
     b80:	41004400 	.word	0x41004400
     b84:	00001eed 	.word	0x00001eed

00000b88 <lcd_command>:

void lcd_command(unsigned char rs, unsigned char tmp)
{
     b88:	b570      	push	{r4, r5, r6, lr}
     b8a:	0005      	movs	r5, r0
     b8c:	000c      	movs	r4, r1
	UINT8u_t	data;
	data.byte = tmp;
	lcd_4bit(rs, data.HL.H);
     b8e:	0909      	lsrs	r1, r1, #4
     b90:	4e03      	ldr	r6, [pc, #12]	; (ba0 <lcd_command+0x18>)
     b92:	47b0      	blx	r6
	lcd_4bit(rs, data.HL.L);
     b94:	0721      	lsls	r1, r4, #28
     b96:	0f09      	lsrs	r1, r1, #28
     b98:	0028      	movs	r0, r5
     b9a:	47b0      	blx	r6
}
     b9c:	bd70      	pop	{r4, r5, r6, pc}
     b9e:	46c0      	nop			; (mov r8, r8)
     ba0:	00000b0d 	.word	0x00000b0d

00000ba4 <UartToLora>:
	//delay_us(10);
	return (tmpA ^ tmpB);
}

void UartToLora(unsigned char Myindex)
{
     ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     ba6:	46de      	mov	lr, fp
     ba8:	4647      	mov	r7, r8
     baa:	b580      	push	{r7, lr}
	unsigned char XORtmp;
	unsigned char i;
	//計算要傳給Lora模組的CRC
	XORtmp = 0x00;
	for(i = 0; i < MyLoRaTmpCount[Myindex]; i++)
     bac:	4680      	mov	r8, r0
     bae:	4b27      	ldr	r3, [pc, #156]	; (c4c <UartToLora+0xa8>)
     bb0:	5c1d      	ldrb	r5, [r3, r0]
     bb2:	2d00      	cmp	r5, #0
     bb4:	d033      	beq.n	c1e <UartToLora+0x7a>
     bb6:	0041      	lsls	r1, r0, #1
     bb8:	1808      	adds	r0, r1, r0
     bba:	00c1      	lsls	r1, r0, #3
     bbc:	1840      	adds	r0, r0, r1
     bbe:	4924      	ldr	r1, [pc, #144]	; (c50 <UartToLora+0xac>)
     bc0:	180b      	adds	r3, r1, r0
     bc2:	3001      	adds	r0, #1
     bc4:	3d01      	subs	r5, #1
     bc6:	b2ed      	uxtb	r5, r5
     bc8:	1940      	adds	r0, r0, r5
     bca:	1809      	adds	r1, r1, r0
     bcc:	2500      	movs	r5, #0
	return (tmpA ^ tmpB);
     bce:	781a      	ldrb	r2, [r3, #0]
     bd0:	4055      	eors	r5, r2
     bd2:	3301      	adds	r3, #1
	for(i = 0; i < MyLoRaTmpCount[Myindex]; i++)
     bd4:	4299      	cmp	r1, r3
     bd6:	d1fa      	bne.n	bce <UartToLora+0x2a>
     bd8:	2400      	movs	r4, #0
	}
	
	//開始將資料傳給Lora模組
	for(i = 0; i < MyLoRaTmpCount[Myindex]; i++)
	{
		uTXByte(&MyUart03, MyLoRaTmp[Myindex][i]);
     bda:	4643      	mov	r3, r8
     bdc:	005b      	lsls	r3, r3, #1
     bde:	4443      	add	r3, r8
     be0:	00da      	lsls	r2, r3, #3
     be2:	189b      	adds	r3, r3, r2
     be4:	4f1a      	ldr	r7, [pc, #104]	; (c50 <UartToLora+0xac>)
     be6:	18ff      	adds	r7, r7, r3
     be8:	4e1a      	ldr	r6, [pc, #104]	; (c54 <UartToLora+0xb0>)
		if(Lora_Debug_Flag == 1)
		{
			uart_send_ascii_byte(Debug_COM, MyLoRaTmp[Myindex][i]);
     bea:	46bb      	mov	fp, r7
     bec:	e006      	b.n	bfc <UartToLora+0x58>
	for(i = 0; i < MyLoRaTmpCount[Myindex]; i++)
     bee:	3401      	adds	r4, #1
     bf0:	b2e4      	uxtb	r4, r4
     bf2:	4b16      	ldr	r3, [pc, #88]	; (c4c <UartToLora+0xa8>)
     bf4:	4642      	mov	r2, r8
     bf6:	5c9b      	ldrb	r3, [r3, r2]
     bf8:	42a3      	cmp	r3, r4
     bfa:	d910      	bls.n	c1e <UartToLora+0x7a>
		uTXByte(&MyUart03, MyLoRaTmp[Myindex][i]);
     bfc:	5d39      	ldrb	r1, [r7, r4]
     bfe:	4816      	ldr	r0, [pc, #88]	; (c58 <UartToLora+0xb4>)
     c00:	47b0      	blx	r6
		if(Lora_Debug_Flag == 1)
     c02:	4b16      	ldr	r3, [pc, #88]	; (c5c <UartToLora+0xb8>)
     c04:	781b      	ldrb	r3, [r3, #0]
     c06:	071b      	lsls	r3, r3, #28
     c08:	d5f1      	bpl.n	bee <UartToLora+0x4a>
			uart_send_ascii_byte(Debug_COM, MyLoRaTmp[Myindex][i]);
     c0a:	465b      	mov	r3, fp
     c0c:	5d19      	ldrb	r1, [r3, r4]
     c0e:	4814      	ldr	r0, [pc, #80]	; (c60 <UartToLora+0xbc>)
     c10:	4b14      	ldr	r3, [pc, #80]	; (c64 <UartToLora+0xc0>)
     c12:	4798      	blx	r3
			uTXByte(Debug_COM, ' ');
     c14:	2120      	movs	r1, #32
     c16:	4812      	ldr	r0, [pc, #72]	; (c60 <UartToLora+0xbc>)
     c18:	4b0e      	ldr	r3, [pc, #56]	; (c54 <UartToLora+0xb0>)
     c1a:	4798      	blx	r3
     c1c:	e7e7      	b.n	bee <UartToLora+0x4a>
		}
	}
	//傳送資料的CRC
	uTXByte(&MyUart03, XORtmp);
     c1e:	0029      	movs	r1, r5
     c20:	480d      	ldr	r0, [pc, #52]	; (c58 <UartToLora+0xb4>)
     c22:	4b0c      	ldr	r3, [pc, #48]	; (c54 <UartToLora+0xb0>)
     c24:	4798      	blx	r3
	if(Lora_Debug_Flag == 1)
     c26:	4b0d      	ldr	r3, [pc, #52]	; (c5c <UartToLora+0xb8>)
     c28:	781b      	ldrb	r3, [r3, #0]
     c2a:	071b      	lsls	r3, r3, #28
     c2c:	d403      	bmi.n	c36 <UartToLora+0x92>
	{
		uart_send_ascii_byte(Debug_COM, XORtmp);
		uTXByte(Debug_COM, 0x0d);
	}
}
     c2e:	bc0c      	pop	{r2, r3}
     c30:	4690      	mov	r8, r2
     c32:	469b      	mov	fp, r3
     c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_send_ascii_byte(Debug_COM, XORtmp);
     c36:	4c0a      	ldr	r4, [pc, #40]	; (c60 <UartToLora+0xbc>)
     c38:	0029      	movs	r1, r5
     c3a:	0020      	movs	r0, r4
     c3c:	4b09      	ldr	r3, [pc, #36]	; (c64 <UartToLora+0xc0>)
     c3e:	4798      	blx	r3
		uTXByte(Debug_COM, 0x0d);
     c40:	210d      	movs	r1, #13
     c42:	0020      	movs	r0, r4
     c44:	4b03      	ldr	r3, [pc, #12]	; (c54 <UartToLora+0xb0>)
     c46:	4798      	blx	r3
}
     c48:	e7f1      	b.n	c2e <UartToLora+0x8a>
     c4a:	46c0      	nop			; (mov r8, r8)
     c4c:	200001b0 	.word	0x200001b0
     c50:	20000000 	.word	0x20000000
     c54:	00001da5 	.word	0x00001da5
     c58:	200042e0 	.word	0x200042e0
     c5c:	2000414c 	.word	0x2000414c
     c60:	200040b4 	.word	0x200040b4
     c64:	00001dc5 	.word	0x00001dc5

00000c68 <Write_LoRa_TxBuffer>:

//寫入資料
void Write_LoRa_TxBuffer(void)
{
     c68:	b510      	push	{r4, lr}
	MyBufferCount = 0;
     c6a:	2400      	movs	r4, #0
     c6c:	4b06      	ldr	r3, [pc, #24]	; (c88 <Write_LoRa_TxBuffer+0x20>)
     c6e:	701c      	strb	r4, [r3, #0]
	UserRxCountMax = 4;
     c70:	2204      	movs	r2, #4
     c72:	4b06      	ldr	r3, [pc, #24]	; (c8c <Write_LoRa_TxBuffer+0x24>)
     c74:	701a      	strb	r2, [r3, #0]
	UartToLora(Write_LoRa_TxBuffer_Index);
     c76:	2005      	movs	r0, #5
     c78:	4b05      	ldr	r3, [pc, #20]	; (c90 <Write_LoRa_TxBuffer+0x28>)
     c7a:	4798      	blx	r3
	NowStatus = WaitRxData;
     c7c:	2267      	movs	r2, #103	; 0x67
     c7e:	4b05      	ldr	r3, [pc, #20]	; (c94 <Write_LoRa_TxBuffer+0x2c>)
     c80:	701a      	strb	r2, [r3, #0]
	f_count = 0;
     c82:	4b05      	ldr	r3, [pc, #20]	; (c98 <Write_LoRa_TxBuffer+0x30>)
     c84:	601c      	str	r4, [r3, #0]
}
     c86:	bd10      	pop	{r4, pc}
     c88:	20004149 	.word	0x20004149
     c8c:	20004305 	.word	0x20004305
     c90:	00000ba5 	.word	0x00000ba5
     c94:	200040ac 	.word	0x200040ac
     c98:	200042dc 	.word	0x200042dc

00000c9c <Read_LoRa_RxBuffer>:


//讀取資料
void Read_LoRa_RxBuffer(void)
{
     c9c:	b510      	push	{r4, lr}
	MyBufferCount = 0;
     c9e:	2400      	movs	r4, #0
     ca0:	4b06      	ldr	r3, [pc, #24]	; (cbc <Read_LoRa_RxBuffer+0x20>)
     ca2:	701c      	strb	r4, [r3, #0]
	UserRxCountMax = 29;
     ca4:	221d      	movs	r2, #29
     ca6:	4b06      	ldr	r3, [pc, #24]	; (cc0 <Read_LoRa_RxBuffer+0x24>)
     ca8:	701a      	strb	r2, [r3, #0]
	UartToLora(Read_LoRa_RxBuffer_Index);
     caa:	2006      	movs	r0, #6
     cac:	4b05      	ldr	r3, [pc, #20]	; (cc4 <Read_LoRa_RxBuffer+0x28>)
     cae:	4798      	blx	r3
	NowStatus = WaitRxData;
     cb0:	2267      	movs	r2, #103	; 0x67
     cb2:	4b05      	ldr	r3, [pc, #20]	; (cc8 <Read_LoRa_RxBuffer+0x2c>)
     cb4:	701a      	strb	r2, [r3, #0]
	f_count = 0;
     cb6:	4b05      	ldr	r3, [pc, #20]	; (ccc <Read_LoRa_RxBuffer+0x30>)
     cb8:	601c      	str	r4, [r3, #0]
}
     cba:	bd10      	pop	{r4, pc}
     cbc:	20004149 	.word	0x20004149
     cc0:	20004305 	.word	0x20004305
     cc4:	00000ba5 	.word	0x00000ba5
     cc8:	200040ac 	.word	0x200040ac
     ccc:	200042dc 	.word	0x200042dc

00000cd0 <Read_LoRa_RxCount>:

//讀取接收計數器
void Read_LoRa_RxCount(void)
{
     cd0:	b510      	push	{r4, lr}
	MyBufferCount = 0;
     cd2:	2400      	movs	r4, #0
     cd4:	4b06      	ldr	r3, [pc, #24]	; (cf0 <Read_LoRa_RxCount+0x20>)
     cd6:	701c      	strb	r4, [r3, #0]
	UserRxCountMax = 5;
     cd8:	2205      	movs	r2, #5
     cda:	4b06      	ldr	r3, [pc, #24]	; (cf4 <Read_LoRa_RxCount+0x24>)
     cdc:	701a      	strb	r2, [r3, #0]
	UartToLora(Read_LoRa_RxCount_Index);
     cde:	2007      	movs	r0, #7
     ce0:	4b05      	ldr	r3, [pc, #20]	; (cf8 <Read_LoRa_RxCount+0x28>)
     ce2:	4798      	blx	r3
	NowStatus = WaitRxData;
     ce4:	2267      	movs	r2, #103	; 0x67
     ce6:	4b05      	ldr	r3, [pc, #20]	; (cfc <Read_LoRa_RxCount+0x2c>)
     ce8:	701a      	strb	r2, [r3, #0]
	f_count = 0;
     cea:	4b05      	ldr	r3, [pc, #20]	; (d00 <Read_LoRa_RxCount+0x30>)
     cec:	601c      	str	r4, [r3, #0]
}
     cee:	bd10      	pop	{r4, pc}
     cf0:	20004149 	.word	0x20004149
     cf4:	20004305 	.word	0x20004305
     cf8:	00000ba5 	.word	0x00000ba5
     cfc:	200040ac 	.word	0x200040ac
     d00:	200042dc 	.word	0x200042dc

00000d04 <Write_LoRa_Mode_FQ>:

//設定模式與頻率
void Write_LoRa_Mode_FQ(unsigned char tmpMode)
{
     d04:	b510      	push	{r4, lr}
	MyBufferCount = 0;
     d06:	2400      	movs	r4, #0
     d08:	4b08      	ldr	r3, [pc, #32]	; (d2c <Write_LoRa_Mode_FQ+0x28>)
     d0a:	701c      	strb	r4, [r3, #0]
	UserRxCountMax = 4;
     d0c:	2204      	movs	r2, #4
     d0e:	4b08      	ldr	r3, [pc, #32]	; (d30 <Write_LoRa_Mode_FQ+0x2c>)
     d10:	701a      	strb	r2, [r3, #0]
	MyLoRaTmp[Write_LoRa_Mode_FQ_Index][3] = tmpMode;	
     d12:	2354      	movs	r3, #84	; 0x54
     d14:	4a07      	ldr	r2, [pc, #28]	; (d34 <Write_LoRa_Mode_FQ+0x30>)
     d16:	54d0      	strb	r0, [r2, r3]
	UartToLora(Write_LoRa_Mode_FQ_Index);
     d18:	2003      	movs	r0, #3
     d1a:	4b07      	ldr	r3, [pc, #28]	; (d38 <Write_LoRa_Mode_FQ+0x34>)
     d1c:	4798      	blx	r3
	NowStatus = WaitRxData;
     d1e:	2267      	movs	r2, #103	; 0x67
     d20:	4b06      	ldr	r3, [pc, #24]	; (d3c <Write_LoRa_Mode_FQ+0x38>)
     d22:	701a      	strb	r2, [r3, #0]
	f_count = 0;
     d24:	4b06      	ldr	r3, [pc, #24]	; (d40 <Write_LoRa_Mode_FQ+0x3c>)
     d26:	601c      	str	r4, [r3, #0]
}
     d28:	bd10      	pop	{r4, pc}
     d2a:	46c0      	nop			; (mov r8, r8)
     d2c:	20004149 	.word	0x20004149
     d30:	20004305 	.word	0x20004305
     d34:	20000000 	.word	0x20000000
     d38:	00000ba5 	.word	0x00000ba5
     d3c:	200040ac 	.word	0x200040ac
     d40:	200042dc 	.word	0x200042dc

00000d44 <Write_LoRa_Setting>:

//設定Lora參數
void Write_LoRa_Setting(void)
{
     d44:	b510      	push	{r4, lr}
	MyBufferCount = 0;
     d46:	2400      	movs	r4, #0
     d48:	4b06      	ldr	r3, [pc, #24]	; (d64 <Write_LoRa_Setting+0x20>)
     d4a:	701c      	strb	r4, [r3, #0]
	UserRxCountMax = 4;
     d4c:	2204      	movs	r2, #4
     d4e:	4b06      	ldr	r3, [pc, #24]	; (d68 <Write_LoRa_Setting+0x24>)
     d50:	701a      	strb	r2, [r3, #0]
	UartToLora(Write_LoRa_Setting_Index);
     d52:	2004      	movs	r0, #4
     d54:	4b05      	ldr	r3, [pc, #20]	; (d6c <Write_LoRa_Setting+0x28>)
     d56:	4798      	blx	r3
	NowStatus = WaitRxData;
     d58:	2267      	movs	r2, #103	; 0x67
     d5a:	4b05      	ldr	r3, [pc, #20]	; (d70 <Write_LoRa_Setting+0x2c>)
     d5c:	701a      	strb	r2, [r3, #0]
	f_count = 0;
     d5e:	4b05      	ldr	r3, [pc, #20]	; (d74 <Write_LoRa_Setting+0x30>)
     d60:	601c      	str	r4, [r3, #0]
}
     d62:	bd10      	pop	{r4, pc}
     d64:	20004149 	.word	0x20004149
     d68:	20004305 	.word	0x20004305
     d6c:	00000ba5 	.word	0x00000ba5
     d70:	200040ac 	.word	0x200040ac
     d74:	200042dc 	.word	0x200042dc

00000d78 <Read_LoRa_Setting>:

//讀取設定狀態
void Read_LoRa_Setting(void)
{
     d78:	b510      	push	{r4, lr}
	MyBufferCount = 0;
     d7a:	2400      	movs	r4, #0
     d7c:	4b06      	ldr	r3, [pc, #24]	; (d98 <Read_LoRa_Setting+0x20>)
     d7e:	701c      	strb	r4, [r3, #0]
	UserRxCountMax = 11;
     d80:	220b      	movs	r2, #11
     d82:	4b06      	ldr	r3, [pc, #24]	; (d9c <Read_LoRa_Setting+0x24>)
     d84:	701a      	strb	r2, [r3, #0]
	UartToLora(Read_LoRa_Setting_Index);
     d86:	2002      	movs	r0, #2
     d88:	4b05      	ldr	r3, [pc, #20]	; (da0 <Read_LoRa_Setting+0x28>)
     d8a:	4798      	blx	r3
	NowStatus = WaitRxData;
     d8c:	2267      	movs	r2, #103	; 0x67
     d8e:	4b05      	ldr	r3, [pc, #20]	; (da4 <Read_LoRa_Setting+0x2c>)
     d90:	701a      	strb	r2, [r3, #0]
	f_count = 0;
     d92:	4b05      	ldr	r3, [pc, #20]	; (da8 <Read_LoRa_Setting+0x30>)
     d94:	601c      	str	r4, [r3, #0]
}
     d96:	bd10      	pop	{r4, pc}
     d98:	20004149 	.word	0x20004149
     d9c:	20004305 	.word	0x20004305
     da0:	00000ba5 	.word	0x00000ba5
     da4:	200040ac 	.word	0x200040ac
     da8:	200042dc 	.word	0x200042dc

00000dac <Read_LoRa_ID>:

//讀取FW版本、Chip ID
void Read_LoRa_ID(void)
{
     dac:	b510      	push	{r4, lr}
	MyBufferCount = 0;
     dae:	2400      	movs	r4, #0
     db0:	4b06      	ldr	r3, [pc, #24]	; (dcc <Read_LoRa_ID+0x20>)
     db2:	701c      	strb	r4, [r3, #0]
	UserRxCountMax = 9;
     db4:	2209      	movs	r2, #9
     db6:	4b06      	ldr	r3, [pc, #24]	; (dd0 <Read_LoRa_ID+0x24>)
     db8:	701a      	strb	r2, [r3, #0]
	UartToLora(Read_LoRa_ID_Index);	
     dba:	2000      	movs	r0, #0
     dbc:	4b05      	ldr	r3, [pc, #20]	; (dd4 <Read_LoRa_ID+0x28>)
     dbe:	4798      	blx	r3
	NowStatus = WaitRxData;
     dc0:	2267      	movs	r2, #103	; 0x67
     dc2:	4b05      	ldr	r3, [pc, #20]	; (dd8 <Read_LoRa_ID+0x2c>)
     dc4:	701a      	strb	r2, [r3, #0]
	f_count = 0;
     dc6:	4b05      	ldr	r3, [pc, #20]	; (ddc <Read_LoRa_ID+0x30>)
     dc8:	601c      	str	r4, [r3, #0]
}
     dca:	bd10      	pop	{r4, pc}
     dcc:	20004149 	.word	0x20004149
     dd0:	20004305 	.word	0x20004305
     dd4:	00000ba5 	.word	0x00000ba5
     dd8:	200040ac 	.word	0x200040ac
     ddc:	200042dc 	.word	0x200042dc

00000de0 <Reset_LoRa>:



//重置、初始化
void Reset_LoRa(void)
{
     de0:	b510      	push	{r4, lr}
	MyBufferCount = 0;
     de2:	2400      	movs	r4, #0
     de4:	4b06      	ldr	r3, [pc, #24]	; (e00 <Reset_LoRa+0x20>)
     de6:	701c      	strb	r4, [r3, #0]
	UserRxCountMax = 4;
     de8:	2204      	movs	r2, #4
     dea:	4b06      	ldr	r3, [pc, #24]	; (e04 <Reset_LoRa+0x24>)
     dec:	701a      	strb	r2, [r3, #0]
	UartToLora(Reset_LoRa_Index);	
     dee:	2001      	movs	r0, #1
     df0:	4b05      	ldr	r3, [pc, #20]	; (e08 <Reset_LoRa+0x28>)
     df2:	4798      	blx	r3
	NowStatus = WaitRxData;
     df4:	2267      	movs	r2, #103	; 0x67
     df6:	4b05      	ldr	r3, [pc, #20]	; (e0c <Reset_LoRa+0x2c>)
     df8:	701a      	strb	r2, [r3, #0]
	f_count = 0;
     dfa:	4b05      	ldr	r3, [pc, #20]	; (e10 <Reset_LoRa+0x30>)
     dfc:	601c      	str	r4, [r3, #0]
}
     dfe:	bd10      	pop	{r4, pc}
     e00:	20004149 	.word	0x20004149
     e04:	20004305 	.word	0x20004305
     e08:	00000ba5 	.word	0x00000ba5
     e0c:	200040ac 	.word	0x200040ac
     e10:	200042dc 	.word	0x200042dc

00000e14 <Catch_Lora_RX_Count_Form_Module>:

void Catch_Lora_RX_Count_Form_Module(void)
{
	UINT16u_t	tmp16;
		
	tmp16.byte[1] = MyBuffer[3];
     e14:	4b03      	ldr	r3, [pc, #12]	; (e24 <Catch_Lora_RX_Count_Form_Module+0x10>)
     e16:	78da      	ldrb	r2, [r3, #3]
	tmp16.byte[0] = MyBuffer[4];
     e18:	791b      	ldrb	r3, [r3, #4]
     e1a:	0212      	lsls	r2, r2, #8
	Lora_RX_Count_Form_Module = tmp16.word;
     e1c:	4313      	orrs	r3, r2
     e1e:	4a02      	ldr	r2, [pc, #8]	; (e28 <Catch_Lora_RX_Count_Form_Module+0x14>)
     e20:	6013      	str	r3, [r2, #0]
}
     e22:	4770      	bx	lr
     e24:	200042bc 	.word	0x200042bc
     e28:	200040a8 	.word	0x200040a8

00000e2c <Lora_CMD_Func>:
{
     e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
     e2e:	b083      	sub	sp, #12
	switch(NowStatus)
     e30:	4bd6      	ldr	r3, [pc, #856]	; (118c <Lora_CMD_Func+0x360>)
     e32:	781a      	ldrb	r2, [r3, #0]
     e34:	2a6d      	cmp	r2, #109	; 0x6d
     e36:	d900      	bls.n	e3a <Lora_CMD_Func+0xe>
     e38:	e08c      	b.n	f54 <Lora_CMD_Func+0x128>
     e3a:	0093      	lsls	r3, r2, #2
     e3c:	4ad4      	ldr	r2, [pc, #848]	; (1190 <Lora_CMD_Func+0x364>)
     e3e:	58d3      	ldr	r3, [r2, r3]
     e40:	469f      	mov	pc, r3
			if(f_count > 1000)
     e42:	4bd4      	ldr	r3, [pc, #848]	; (1194 <Lora_CMD_Func+0x368>)
     e44:	681a      	ldr	r2, [r3, #0]
     e46:	23fa      	movs	r3, #250	; 0xfa
     e48:	009b      	lsls	r3, r3, #2
     e4a:	429a      	cmp	r2, r3
     e4c:	d800      	bhi.n	e50 <Lora_CMD_Func+0x24>
     e4e:	e081      	b.n	f54 <Lora_CMD_Func+0x128>
				Print_Delay_LoRa_CMD_Msg();
     e50:	4bd1      	ldr	r3, [pc, #836]	; (1198 <Lora_CMD_Func+0x36c>)
     e52:	4798      	blx	r3
				if(Lora_CRC_Flag == CRCisOK)
     e54:	4bd1      	ldr	r3, [pc, #836]	; (119c <Lora_CMD_Func+0x370>)
     e56:	781b      	ldrb	r3, [r3, #0]
     e58:	075b      	lsls	r3, r3, #29
     e5a:	d404      	bmi.n	e66 <Lora_CMD_Func+0x3a>
					NowStatus = NextStatus;	
     e5c:	4bd0      	ldr	r3, [pc, #832]	; (11a0 <Lora_CMD_Func+0x374>)
     e5e:	781a      	ldrb	r2, [r3, #0]
     e60:	4bca      	ldr	r3, [pc, #808]	; (118c <Lora_CMD_Func+0x360>)
     e62:	701a      	strb	r2, [r3, #0]
     e64:	e076      	b.n	f54 <Lora_CMD_Func+0x128>
					NowStatus = LastStatus;	
     e66:	4bcf      	ldr	r3, [pc, #828]	; (11a4 <Lora_CMD_Func+0x378>)
     e68:	781a      	ldrb	r2, [r3, #0]
     e6a:	4bc8      	ldr	r3, [pc, #800]	; (118c <Lora_CMD_Func+0x360>)
     e6c:	701a      	strb	r2, [r3, #0]
     e6e:	e071      	b.n	f54 <Lora_CMD_Func+0x128>
			if(f_count < 500) //尚未Time Out
     e70:	4bc8      	ldr	r3, [pc, #800]	; (1194 <Lora_CMD_Func+0x368>)
     e72:	681a      	ldr	r2, [r3, #0]
     e74:	23f4      	movs	r3, #244	; 0xf4
     e76:	33ff      	adds	r3, #255	; 0xff
     e78:	429a      	cmp	r2, r3
     e7a:	d80c      	bhi.n	e96 <Lora_CMD_Func+0x6a>
				if(MyBufferCount != UserRxCountMax) //若資料長度不如預期長度
     e7c:	4bca      	ldr	r3, [pc, #808]	; (11a8 <Lora_CMD_Func+0x37c>)
     e7e:	781a      	ldrb	r2, [r3, #0]
     e80:	4bca      	ldr	r3, [pc, #808]	; (11ac <Lora_CMD_Func+0x380>)
     e82:	781b      	ldrb	r3, [r3, #0]
     e84:	429a      	cmp	r2, r3
     e86:	d165      	bne.n	f54 <Lora_CMD_Func+0x128>
					Lora_TimeOut_Count = 0; //清除TimeOutCount
     e88:	2200      	movs	r2, #0
     e8a:	4bc9      	ldr	r3, [pc, #804]	; (11b0 <Lora_CMD_Func+0x384>)
     e8c:	601a      	str	r2, [r3, #0]
					NowStatus = CheckRxCRC;	//進入CRC檢查
     e8e:	3268      	adds	r2, #104	; 0x68
     e90:	4bbe      	ldr	r3, [pc, #760]	; (118c <Lora_CMD_Func+0x360>)
     e92:	701a      	strb	r2, [r3, #0]
     e94:	e05e      	b.n	f54 <Lora_CMD_Func+0x128>
				Lora_TimeOut_Count++;
     e96:	4bc6      	ldr	r3, [pc, #792]	; (11b0 <Lora_CMD_Func+0x384>)
     e98:	681a      	ldr	r2, [r3, #0]
     e9a:	3201      	adds	r2, #1
     e9c:	601a      	str	r2, [r3, #0]
				if(Lora_TimeOut_Count > 3)	//若Time Out三次
     e9e:	681b      	ldr	r3, [r3, #0]
     ea0:	2b03      	cmp	r3, #3
     ea2:	d905      	bls.n	eb0 <Lora_CMD_Func+0x84>
					NowStatus = Read_LoRa_ID_Index;
     ea4:	2200      	movs	r2, #0
     ea6:	4bb9      	ldr	r3, [pc, #740]	; (118c <Lora_CMD_Func+0x360>)
     ea8:	701a      	strb	r2, [r3, #0]
				Print_Time_Out_Msg();
     eaa:	4bc2      	ldr	r3, [pc, #776]	; (11b4 <Lora_CMD_Func+0x388>)
     eac:	4798      	blx	r3
     eae:	e051      	b.n	f54 <Lora_CMD_Func+0x128>
					NowStatus = LastStatus;	//重傳上一次的指令
     eb0:	4bbc      	ldr	r3, [pc, #752]	; (11a4 <Lora_CMD_Func+0x378>)
     eb2:	781a      	ldrb	r2, [r3, #0]
     eb4:	4bb5      	ldr	r3, [pc, #724]	; (118c <Lora_CMD_Func+0x360>)
     eb6:	701a      	strb	r2, [r3, #0]
     eb8:	e7f7      	b.n	eaa <Lora_CMD_Func+0x7e>
			if(Lora_Debug_Flag == 1)
     eba:	4bb8      	ldr	r3, [pc, #736]	; (119c <Lora_CMD_Func+0x370>)
     ebc:	781b      	ldrb	r3, [r3, #0]
     ebe:	071b      	lsls	r3, r3, #28
     ec0:	d40c      	bmi.n	edc <Lora_CMD_Func+0xb0>
			XORtmp = 0x00;
     ec2:	2200      	movs	r2, #0
     ec4:	466b      	mov	r3, sp
     ec6:	71da      	strb	r2, [r3, #7]
			for(i = 0; i < (MyBufferCount - 1); i++)
     ec8:	4bb7      	ldr	r3, [pc, #732]	; (11a8 <Lora_CMD_Func+0x37c>)
     eca:	781b      	ldrb	r3, [r3, #0]
     ecc:	3b01      	subs	r3, #1
     ece:	2b00      	cmp	r3, #0
     ed0:	dd24      	ble.n	f1c <Lora_CMD_Func+0xf0>
     ed2:	2700      	movs	r7, #0
     ed4:	2400      	movs	r4, #0
				if(Lora_Debug_Flag == 1)
     ed6:	4eb1      	ldr	r6, [pc, #708]	; (119c <Lora_CMD_Func+0x370>)
					uart_send_ascii_byte(Debug_COM, MyBuffer[i]);
     ed8:	4db7      	ldr	r5, [pc, #732]	; (11b8 <Lora_CMD_Func+0x38c>)
     eda:	e013      	b.n	f04 <Lora_CMD_Func+0xd8>
				uTXByte(Debug_COM, 0x09);
     edc:	2109      	movs	r1, #9
     ede:	48b7      	ldr	r0, [pc, #732]	; (11bc <Lora_CMD_Func+0x390>)
     ee0:	4bb7      	ldr	r3, [pc, #732]	; (11c0 <Lora_CMD_Func+0x394>)
     ee2:	4798      	blx	r3
     ee4:	e7ed      	b.n	ec2 <Lora_CMD_Func+0x96>
				XORtmp = XORtmp ^ MyBuffer[i];
     ee6:	466b      	mov	r3, sp
     ee8:	1dda      	adds	r2, r3, #7
     eea:	79db      	ldrb	r3, [r3, #7]
     eec:	49b2      	ldr	r1, [pc, #712]	; (11b8 <Lora_CMD_Func+0x38c>)
     eee:	5dc9      	ldrb	r1, [r1, r7]
     ef0:	404b      	eors	r3, r1
     ef2:	7013      	strb	r3, [r2, #0]
			for(i = 0; i < (MyBufferCount - 1); i++)
     ef4:	3401      	adds	r4, #1
     ef6:	b2e4      	uxtb	r4, r4
     ef8:	0027      	movs	r7, r4
     efa:	4bab      	ldr	r3, [pc, #684]	; (11a8 <Lora_CMD_Func+0x37c>)
     efc:	781b      	ldrb	r3, [r3, #0]
     efe:	3b01      	subs	r3, #1
     f00:	429c      	cmp	r4, r3
     f02:	da0b      	bge.n	f1c <Lora_CMD_Func+0xf0>
				if(Lora_Debug_Flag == 1)
     f04:	7833      	ldrb	r3, [r6, #0]
     f06:	071b      	lsls	r3, r3, #28
     f08:	d5ed      	bpl.n	ee6 <Lora_CMD_Func+0xba>
					uart_send_ascii_byte(Debug_COM, MyBuffer[i]);
     f0a:	5de9      	ldrb	r1, [r5, r7]
     f0c:	48ab      	ldr	r0, [pc, #684]	; (11bc <Lora_CMD_Func+0x390>)
     f0e:	4bad      	ldr	r3, [pc, #692]	; (11c4 <Lora_CMD_Func+0x398>)
     f10:	4798      	blx	r3
					uTXByte(Debug_COM, ' ');
     f12:	2120      	movs	r1, #32
     f14:	48a9      	ldr	r0, [pc, #676]	; (11bc <Lora_CMD_Func+0x390>)
     f16:	4baa      	ldr	r3, [pc, #680]	; (11c0 <Lora_CMD_Func+0x394>)
     f18:	4798      	blx	r3
     f1a:	e7e4      	b.n	ee6 <Lora_CMD_Func+0xba>
			if(Lora_Debug_Flag == 1)
     f1c:	4b9f      	ldr	r3, [pc, #636]	; (119c <Lora_CMD_Func+0x370>)
     f1e:	781b      	ldrb	r3, [r3, #0]
     f20:	071b      	lsls	r3, r3, #28
     f22:	d419      	bmi.n	f58 <Lora_CMD_Func+0x12c>
			if(MyBuffer[(MyBufferCount - 1)] != XORtmp) //如果CRC錯誤
     f24:	466b      	mov	r3, sp
     f26:	79da      	ldrb	r2, [r3, #7]
     f28:	b2d2      	uxtb	r2, r2
     f2a:	4b9f      	ldr	r3, [pc, #636]	; (11a8 <Lora_CMD_Func+0x37c>)
     f2c:	7819      	ldrb	r1, [r3, #0]
     f2e:	4ba2      	ldr	r3, [pc, #648]	; (11b8 <Lora_CMD_Func+0x38c>)
     f30:	185b      	adds	r3, r3, r1
     f32:	3b01      	subs	r3, #1
     f34:	781b      	ldrb	r3, [r3, #0]
     f36:	4293      	cmp	r3, r2
     f38:	d031      	beq.n	f9e <Lora_CMD_Func+0x172>
				Print_CRC_ERROR();	
     f3a:	4ba3      	ldr	r3, [pc, #652]	; (11c8 <Lora_CMD_Func+0x39c>)
     f3c:	4798      	blx	r3
				Lora_CRC_Flag = CRCisErr;
     f3e:	4a97      	ldr	r2, [pc, #604]	; (119c <Lora_CMD_Func+0x370>)
     f40:	7813      	ldrb	r3, [r2, #0]
     f42:	2104      	movs	r1, #4
     f44:	430b      	orrs	r3, r1
     f46:	7013      	strb	r3, [r2, #0]
			f_count = 0;
     f48:	2200      	movs	r2, #0
     f4a:	4b92      	ldr	r3, [pc, #584]	; (1194 <Lora_CMD_Func+0x368>)
     f4c:	601a      	str	r2, [r3, #0]
			NowStatus = Lora_CMD_Delay_Index;	//進入DelayTime，再進行資料傳輸
     f4e:	326b      	adds	r2, #107	; 0x6b
     f50:	4b8e      	ldr	r3, [pc, #568]	; (118c <Lora_CMD_Func+0x360>)
     f52:	701a      	strb	r2, [r3, #0]
}
     f54:	b003      	add	sp, #12
     f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
				uTXByte(Debug_COM, '-');
     f58:	4c98      	ldr	r4, [pc, #608]	; (11bc <Lora_CMD_Func+0x390>)
     f5a:	212d      	movs	r1, #45	; 0x2d
     f5c:	0020      	movs	r0, r4
     f5e:	4d98      	ldr	r5, [pc, #608]	; (11c0 <Lora_CMD_Func+0x394>)
     f60:	47a8      	blx	r5
				uTXByte(Debug_COM, ' ');
     f62:	2120      	movs	r1, #32
     f64:	0020      	movs	r0, r4
     f66:	47a8      	blx	r5
				uart_send_ascii_byte(Debug_COM, MyBuffer[(MyBufferCount-1)]);
     f68:	4f8f      	ldr	r7, [pc, #572]	; (11a8 <Lora_CMD_Func+0x37c>)
     f6a:	783a      	ldrb	r2, [r7, #0]
     f6c:	4b92      	ldr	r3, [pc, #584]	; (11b8 <Lora_CMD_Func+0x38c>)
     f6e:	189b      	adds	r3, r3, r2
     f70:	3b01      	subs	r3, #1
     f72:	7819      	ldrb	r1, [r3, #0]
     f74:	0020      	movs	r0, r4
     f76:	4e93      	ldr	r6, [pc, #588]	; (11c4 <Lora_CMD_Func+0x398>)
     f78:	47b0      	blx	r6
				uTXByte(Debug_COM, ' ');
     f7a:	2120      	movs	r1, #32
     f7c:	0020      	movs	r0, r4
     f7e:	47a8      	blx	r5
				uart_send_ascii_byte(Debug_COM, MyBufferCount);
     f80:	7839      	ldrb	r1, [r7, #0]
     f82:	0020      	movs	r0, r4
     f84:	47b0      	blx	r6
				uTXByte(Debug_COM, ' ');
     f86:	2120      	movs	r1, #32
     f88:	0020      	movs	r0, r4
     f8a:	47a8      	blx	r5
				uart_send_ascii_byte(Debug_COM, XORtmp);
     f8c:	466b      	mov	r3, sp
     f8e:	79d9      	ldrb	r1, [r3, #7]
     f90:	b2c9      	uxtb	r1, r1
     f92:	0020      	movs	r0, r4
     f94:	47b0      	blx	r6
				uTXByte(Debug_COM, ' ');
     f96:	2120      	movs	r1, #32
     f98:	0020      	movs	r0, r4
     f9a:	47a8      	blx	r5
     f9c:	e7c2      	b.n	f24 <Lora_CMD_Func+0xf8>
				Print_CRC_OK();
     f9e:	4b8b      	ldr	r3, [pc, #556]	; (11cc <Lora_CMD_Func+0x3a0>)
     fa0:	4798      	blx	r3
				Lora_CRC_Flag = CRCisOK;
     fa2:	4a7e      	ldr	r2, [pc, #504]	; (119c <Lora_CMD_Func+0x370>)
     fa4:	7813      	ldrb	r3, [r2, #0]
     fa6:	2104      	movs	r1, #4
     fa8:	438b      	bics	r3, r1
     faa:	7013      	strb	r3, [r2, #0]
     fac:	e7cc      	b.n	f48 <Lora_CMD_Func+0x11c>
			Lora_initial_Flag = 0;
     fae:	4a7b      	ldr	r2, [pc, #492]	; (119c <Lora_CMD_Func+0x370>)
     fb0:	7813      	ldrb	r3, [r2, #0]
     fb2:	2102      	movs	r1, #2
     fb4:	438b      	bics	r3, r1
     fb6:	7013      	strb	r3, [r2, #0]
			LastStatus = Read_LoRa_ID_Index;	//記得現在位置
     fb8:	2200      	movs	r2, #0
     fba:	4b7a      	ldr	r3, [pc, #488]	; (11a4 <Lora_CMD_Func+0x378>)
     fbc:	701a      	strb	r2, [r3, #0]
			NextStatus = Catch_LoRa_ID_Index;	//CRC OK後，要去的位置
     fbe:	3269      	adds	r2, #105	; 0x69
     fc0:	4b77      	ldr	r3, [pc, #476]	; (11a0 <Lora_CMD_Func+0x374>)
     fc2:	701a      	strb	r2, [r3, #0]
			Print_Read_LoRa_ID_Msg();
     fc4:	4b82      	ldr	r3, [pc, #520]	; (11d0 <Lora_CMD_Func+0x3a4>)
     fc6:	4798      	blx	r3
			Read_LoRa_ID();			//送出Read_LoRa_ID後，再進入WaitRxData等待Uart回傳
     fc8:	4b82      	ldr	r3, [pc, #520]	; (11d4 <Lora_CMD_Func+0x3a8>)
     fca:	4798      	blx	r3
			break;
     fcc:	e7c2      	b.n	f54 <Lora_CMD_Func+0x128>
			Lora_initial_Flag = 0;
     fce:	4a73      	ldr	r2, [pc, #460]	; (119c <Lora_CMD_Func+0x370>)
     fd0:	7813      	ldrb	r3, [r2, #0]
     fd2:	2102      	movs	r1, #2
     fd4:	438b      	bics	r3, r1
     fd6:	7013      	strb	r3, [r2, #0]
			MyLoRaFW = MyBuffer[4]; 
     fd8:	4b77      	ldr	r3, [pc, #476]	; (11b8 <Lora_CMD_Func+0x38c>)
     fda:	7919      	ldrb	r1, [r3, #4]
     fdc:	4a7e      	ldr	r2, [pc, #504]	; (11d8 <Lora_CMD_Func+0x3ac>)
     fde:	7011      	strb	r1, [r2, #0]
			MyLoRaID[0] = MyBuffer[5];
     fe0:	4a7e      	ldr	r2, [pc, #504]	; (11dc <Lora_CMD_Func+0x3b0>)
     fe2:	7959      	ldrb	r1, [r3, #5]
     fe4:	7011      	strb	r1, [r2, #0]
			MyLoRaID[1] = MyBuffer[6];
     fe6:	7999      	ldrb	r1, [r3, #6]
     fe8:	7051      	strb	r1, [r2, #1]
			MyLoRaID[2] = MyBuffer[7];
     fea:	79d9      	ldrb	r1, [r3, #7]
     fec:	7091      	strb	r1, [r2, #2]
			MyLoRaID[3] = MyBuffer[8];
     fee:	7a1b      	ldrb	r3, [r3, #8]
     ff0:	70d3      	strb	r3, [r2, #3]
			Print_Catch_LoRa_ID_Msg();
     ff2:	4b7b      	ldr	r3, [pc, #492]	; (11e0 <Lora_CMD_Func+0x3b4>)
     ff4:	4798      	blx	r3
			NowStatus = Reset_LoRa_Index;
     ff6:	2201      	movs	r2, #1
     ff8:	4b64      	ldr	r3, [pc, #400]	; (118c <Lora_CMD_Func+0x360>)
     ffa:	701a      	strb	r2, [r3, #0]
			break;
     ffc:	e7aa      	b.n	f54 <Lora_CMD_Func+0x128>
			Lora_initial_Flag = 0;
     ffe:	4967      	ldr	r1, [pc, #412]	; (119c <Lora_CMD_Func+0x370>)
    1000:	780b      	ldrb	r3, [r1, #0]
    1002:	2202      	movs	r2, #2
    1004:	4393      	bics	r3, r2
    1006:	700b      	strb	r3, [r1, #0]
			LastStatus = Reset_LoRa_Index;
    1008:	2101      	movs	r1, #1
    100a:	4b66      	ldr	r3, [pc, #408]	; (11a4 <Lora_CMD_Func+0x378>)
    100c:	7019      	strb	r1, [r3, #0]
			NextStatus = Read_LoRa_Setting_Index;
    100e:	4b64      	ldr	r3, [pc, #400]	; (11a0 <Lora_CMD_Func+0x374>)
    1010:	701a      	strb	r2, [r3, #0]
			Print_Reset_LoRa_Msg();
    1012:	4b74      	ldr	r3, [pc, #464]	; (11e4 <Lora_CMD_Func+0x3b8>)
    1014:	4798      	blx	r3
			Reset_LoRa();
    1016:	4b74      	ldr	r3, [pc, #464]	; (11e8 <Lora_CMD_Func+0x3bc>)
    1018:	4798      	blx	r3
			break;
    101a:	e79b      	b.n	f54 <Lora_CMD_Func+0x128>
			Lora_initial_Flag = 0;
    101c:	495f      	ldr	r1, [pc, #380]	; (119c <Lora_CMD_Func+0x370>)
    101e:	780b      	ldrb	r3, [r1, #0]
    1020:	2202      	movs	r2, #2
    1022:	4393      	bics	r3, r2
    1024:	700b      	strb	r3, [r1, #0]
			LastStatus = Read_LoRa_Setting_Index;
    1026:	4b5f      	ldr	r3, [pc, #380]	; (11a4 <Lora_CMD_Func+0x378>)
    1028:	701a      	strb	r2, [r3, #0]
			NextStatus = Write_LoRa_Setting_Index;
    102a:	3202      	adds	r2, #2
    102c:	4b5c      	ldr	r3, [pc, #368]	; (11a0 <Lora_CMD_Func+0x374>)
    102e:	701a      	strb	r2, [r3, #0]
			Print_Read_LoRa_Setting_Msg();
    1030:	4b6e      	ldr	r3, [pc, #440]	; (11ec <Lora_CMD_Func+0x3c0>)
    1032:	4798      	blx	r3
			Read_LoRa_Setting();
    1034:	4b6e      	ldr	r3, [pc, #440]	; (11f0 <Lora_CMD_Func+0x3c4>)
    1036:	4798      	blx	r3
			break;
    1038:	e78c      	b.n	f54 <Lora_CMD_Func+0x128>
			Lora_initial_Flag = 0;
    103a:	4a58      	ldr	r2, [pc, #352]	; (119c <Lora_CMD_Func+0x370>)
    103c:	7813      	ldrb	r3, [r2, #0]
    103e:	2102      	movs	r1, #2
    1040:	438b      	bics	r3, r1
    1042:	7013      	strb	r3, [r2, #0]
			LastStatus = Write_LoRa_Setting_Index;
    1044:	2204      	movs	r2, #4
    1046:	4b57      	ldr	r3, [pc, #348]	; (11a4 <Lora_CMD_Func+0x378>)
    1048:	701a      	strb	r2, [r3, #0]
			NextStatus = Write_LoRa_Mode_FQ_Index;			
    104a:	3a01      	subs	r2, #1
    104c:	4b54      	ldr	r3, [pc, #336]	; (11a0 <Lora_CMD_Func+0x374>)
    104e:	701a      	strb	r2, [r3, #0]
			Print_Write_LoRa_Setting_Msg();
    1050:	4b68      	ldr	r3, [pc, #416]	; (11f4 <Lora_CMD_Func+0x3c8>)
    1052:	4798      	blx	r3
			Write_LoRa_Setting();
    1054:	4b68      	ldr	r3, [pc, #416]	; (11f8 <Lora_CMD_Func+0x3cc>)
    1056:	4798      	blx	r3
			break;
    1058:	e77c      	b.n	f54 <Lora_CMD_Func+0x128>
			Lora_initial_Flag = 0;
    105a:	4a50      	ldr	r2, [pc, #320]	; (119c <Lora_CMD_Func+0x370>)
    105c:	7813      	ldrb	r3, [r2, #0]
    105e:	2102      	movs	r1, #2
    1060:	438b      	bics	r3, r1
    1062:	7013      	strb	r3, [r2, #0]
			LastStatus = Write_LoRa_Mode_FQ_Index;
    1064:	2203      	movs	r2, #3
    1066:	4b4f      	ldr	r3, [pc, #316]	; (11a4 <Lora_CMD_Func+0x378>)
    1068:	701a      	strb	r2, [r3, #0]
			Print_Write_LoRa_Mode_FQ_Msg();
    106a:	4b64      	ldr	r3, [pc, #400]	; (11fc <Lora_CMD_Func+0x3d0>)
    106c:	4798      	blx	r3
			if(LoRa_TxRx_Mode_Flag == SetRx)
    106e:	4b64      	ldr	r3, [pc, #400]	; (1200 <Lora_CMD_Func+0x3d4>)
    1070:	781b      	ldrb	r3, [r3, #0]
    1072:	2b03      	cmp	r3, #3
    1074:	d006      	beq.n	1084 <Lora_CMD_Func+0x258>
				NextStatus = Write_LoRa_TxBuffer_Index;
    1076:	2205      	movs	r2, #5
    1078:	4b49      	ldr	r3, [pc, #292]	; (11a0 <Lora_CMD_Func+0x374>)
    107a:	701a      	strb	r2, [r3, #0]
				Write_LoRa_Mode_FQ(SetTx);
    107c:	2002      	movs	r0, #2
    107e:	4b61      	ldr	r3, [pc, #388]	; (1204 <Lora_CMD_Func+0x3d8>)
    1080:	4798      	blx	r3
    1082:	e767      	b.n	f54 <Lora_CMD_Func+0x128>
				NextStatus = Read_LoRa_RxCount_Index;
    1084:	2207      	movs	r2, #7
    1086:	4b46      	ldr	r3, [pc, #280]	; (11a0 <Lora_CMD_Func+0x374>)
    1088:	701a      	strb	r2, [r3, #0]
				Write_LoRa_Mode_FQ(SetRx);
    108a:	2003      	movs	r0, #3
    108c:	4b5d      	ldr	r3, [pc, #372]	; (1204 <Lora_CMD_Func+0x3d8>)
    108e:	4798      	blx	r3
    1090:	e760      	b.n	f54 <Lora_CMD_Func+0x128>
			Lora_initial_Flag = 1;
    1092:	4a42      	ldr	r2, [pc, #264]	; (119c <Lora_CMD_Func+0x370>)
    1094:	7813      	ldrb	r3, [r2, #0]
    1096:	2102      	movs	r1, #2
    1098:	430b      	orrs	r3, r1
    109a:	7013      	strb	r3, [r2, #0]
			if(LoRa_IRQ_Flag == 1)
    109c:	4b5a      	ldr	r3, [pc, #360]	; (1208 <Lora_CMD_Func+0x3dc>)
    109e:	781b      	ldrb	r3, [r3, #0]
    10a0:	2b01      	cmp	r3, #1
    10a2:	d000      	beq.n	10a6 <Lora_CMD_Func+0x27a>
    10a4:	e756      	b.n	f54 <Lora_CMD_Func+0x128>
		port_base->OUTCLR.reg = pin_mask;
    10a6:	2280      	movs	r2, #128	; 0x80
    10a8:	0512      	lsls	r2, r2, #20
    10aa:	4b58      	ldr	r3, [pc, #352]	; (120c <Lora_CMD_Func+0x3e0>)
    10ac:	615a      	str	r2, [r3, #20]
				wdt_reset_count();
    10ae:	4b58      	ldr	r3, [pc, #352]	; (1210 <Lora_CMD_Func+0x3e4>)
    10b0:	4798      	blx	r3
				LastStatus = Read_LoRa_RxCount_Index;
    10b2:	2207      	movs	r2, #7
    10b4:	4b3b      	ldr	r3, [pc, #236]	; (11a4 <Lora_CMD_Func+0x378>)
    10b6:	701a      	strb	r2, [r3, #0]
				NextStatus = Catch_Lora_RX_Count_Form_Module_Index;
    10b8:	3266      	adds	r2, #102	; 0x66
    10ba:	4b39      	ldr	r3, [pc, #228]	; (11a0 <Lora_CMD_Func+0x374>)
    10bc:	701a      	strb	r2, [r3, #0]
				Print_Read_LoRa_RxCount_Msg();
    10be:	4b55      	ldr	r3, [pc, #340]	; (1214 <Lora_CMD_Func+0x3e8>)
    10c0:	4798      	blx	r3
				Read_LoRa_RxCount();
    10c2:	4b55      	ldr	r3, [pc, #340]	; (1218 <Lora_CMD_Func+0x3ec>)
    10c4:	4798      	blx	r3
    10c6:	e745      	b.n	f54 <Lora_CMD_Func+0x128>
			Catch_Lora_RX_Count_Form_Module();
    10c8:	4b54      	ldr	r3, [pc, #336]	; (121c <Lora_CMD_Func+0x3f0>)
    10ca:	4798      	blx	r3
			NowStatus = Read_LoRa_RxBuffer_Index;
    10cc:	2206      	movs	r2, #6
    10ce:	4b2f      	ldr	r3, [pc, #188]	; (118c <Lora_CMD_Func+0x360>)
    10d0:	701a      	strb	r2, [r3, #0]
			break;
    10d2:	e73f      	b.n	f54 <Lora_CMD_Func+0x128>
		port_base->OUTSET.reg = pin_mask;
    10d4:	2280      	movs	r2, #128	; 0x80
    10d6:	0512      	lsls	r2, r2, #20
    10d8:	4b4c      	ldr	r3, [pc, #304]	; (120c <Lora_CMD_Func+0x3e0>)
    10da:	619a      	str	r2, [r3, #24]
			LastStatus = Read_LoRa_RxBuffer_Index;
    10dc:	2206      	movs	r2, #6
    10de:	4b31      	ldr	r3, [pc, #196]	; (11a4 <Lora_CMD_Func+0x378>)
    10e0:	701a      	strb	r2, [r3, #0]
			NextStatus = Reset_IRQ_Flag_Index;
    10e2:	325e      	adds	r2, #94	; 0x5e
    10e4:	4b2e      	ldr	r3, [pc, #184]	; (11a0 <Lora_CMD_Func+0x374>)
    10e6:	701a      	strb	r2, [r3, #0]
			Print_Read_LoRa_RxBuffer_Msg();
    10e8:	4b4d      	ldr	r3, [pc, #308]	; (1220 <Lora_CMD_Func+0x3f4>)
    10ea:	4798      	blx	r3
			Read_LoRa_RxBuffer();
    10ec:	4b4d      	ldr	r3, [pc, #308]	; (1224 <Lora_CMD_Func+0x3f8>)
    10ee:	4798      	blx	r3
			break;
    10f0:	e730      	b.n	f54 <Lora_CMD_Func+0x128>
			LoRa_IRQ_Flag = 0;
    10f2:	2200      	movs	r2, #0
    10f4:	4b44      	ldr	r3, [pc, #272]	; (1208 <Lora_CMD_Func+0x3dc>)
    10f6:	701a      	strb	r2, [r3, #0]
			LoRa_Rx_Flag = LoraRxDataReady;
    10f8:	3204      	adds	r2, #4
    10fa:	4b4b      	ldr	r3, [pc, #300]	; (1228 <Lora_CMD_Func+0x3fc>)
    10fc:	701a      	strb	r2, [r3, #0]
			Print_Reset_IRQ_Flag_Msg();
    10fe:	4b4b      	ldr	r3, [pc, #300]	; (122c <Lora_CMD_Func+0x400>)
    1100:	4798      	blx	r3
			NowStatus = Read_LoRa_RxCount_Index;
    1102:	2207      	movs	r2, #7
    1104:	4b21      	ldr	r3, [pc, #132]	; (118c <Lora_CMD_Func+0x360>)
    1106:	701a      	strb	r2, [r3, #0]
			break;
    1108:	e724      	b.n	f54 <Lora_CMD_Func+0x128>
			Lora_initial_Flag = 1;
    110a:	4a24      	ldr	r2, [pc, #144]	; (119c <Lora_CMD_Func+0x370>)
    110c:	7813      	ldrb	r3, [r2, #0]
    110e:	2102      	movs	r1, #2
    1110:	430b      	orrs	r3, r1
    1112:	7013      	strb	r3, [r2, #0]
			LastStatus = Write_LoRa_TxBuffer_Index;
    1114:	2205      	movs	r2, #5
    1116:	4b23      	ldr	r3, [pc, #140]	; (11a4 <Lora_CMD_Func+0x378>)
    1118:	701a      	strb	r2, [r3, #0]
			NextStatus = Wait_TX_Finish_Index;
    111a:	3267      	adds	r2, #103	; 0x67
    111c:	4b20      	ldr	r3, [pc, #128]	; (11a0 <Lora_CMD_Func+0x374>)
    111e:	701a      	strb	r2, [r3, #0]
			Print_Write_LoRa_TxBuffer_Msg();
    1120:	4b43      	ldr	r3, [pc, #268]	; (1230 <Lora_CMD_Func+0x404>)
    1122:	4798      	blx	r3
			Write_LoRa_TxBuffer();
    1124:	4b43      	ldr	r3, [pc, #268]	; (1234 <Lora_CMD_Func+0x408>)
    1126:	4798      	blx	r3
			break;
    1128:	e714      	b.n	f54 <Lora_CMD_Func+0x128>
			if(LoRa_IRQ_Flag == 1)
    112a:	4b37      	ldr	r3, [pc, #220]	; (1208 <Lora_CMD_Func+0x3dc>)
    112c:	781b      	ldrb	r3, [r3, #0]
    112e:	2b01      	cmp	r3, #1
    1130:	d000      	beq.n	1134 <Lora_CMD_Func+0x308>
    1132:	e70f      	b.n	f54 <Lora_CMD_Func+0x128>
    1134:	2280      	movs	r2, #128	; 0x80
    1136:	0552      	lsls	r2, r2, #21
    1138:	4b34      	ldr	r3, [pc, #208]	; (120c <Lora_CMD_Func+0x3e0>)
    113a:	619a      	str	r2, [r3, #24]
				Print_Wait_TX_Finish_Msg();
    113c:	4b3e      	ldr	r3, [pc, #248]	; (1238 <Lora_CMD_Func+0x40c>)
    113e:	4798      	blx	r3
				LoRa_IRQ_Flag = 0;
    1140:	2200      	movs	r2, #0
    1142:	4b31      	ldr	r3, [pc, #196]	; (1208 <Lora_CMD_Func+0x3dc>)
    1144:	701a      	strb	r2, [r3, #0]
				NowStatus = Leave_LoRa_Tx_Mode_Index;
    1146:	3265      	adds	r2, #101	; 0x65
    1148:	4b10      	ldr	r3, [pc, #64]	; (118c <Lora_CMD_Func+0x360>)
    114a:	701a      	strb	r2, [r3, #0]
    114c:	e702      	b.n	f54 <Lora_CMD_Func+0x128>
			if(Lora_Delay_Count == 0)
    114e:	4b3b      	ldr	r3, [pc, #236]	; (123c <Lora_CMD_Func+0x410>)
    1150:	681b      	ldr	r3, [r3, #0]
    1152:	2b00      	cmp	r3, #0
    1154:	d010      	beq.n	1178 <Lora_CMD_Func+0x34c>
			else if(f_count > 2000)
    1156:	4b0f      	ldr	r3, [pc, #60]	; (1194 <Lora_CMD_Func+0x368>)
    1158:	681a      	ldr	r2, [r3, #0]
    115a:	23fa      	movs	r3, #250	; 0xfa
    115c:	00db      	lsls	r3, r3, #3
    115e:	429a      	cmp	r2, r3
    1160:	d800      	bhi.n	1164 <Lora_CMD_Func+0x338>
    1162:	e6f7      	b.n	f54 <Lora_CMD_Func+0x128>
				NowStatus = Change_LoRa_Tx_Mode_Data_Index;
    1164:	226a      	movs	r2, #106	; 0x6a
    1166:	4b09      	ldr	r3, [pc, #36]	; (118c <Lora_CMD_Func+0x360>)
    1168:	701a      	strb	r2, [r3, #0]
					LoRa_TxRx_Mode_Flag = SetRx;
    116a:	3a67      	subs	r2, #103	; 0x67
    116c:	4b24      	ldr	r3, [pc, #144]	; (1200 <Lora_CMD_Func+0x3d4>)
    116e:	701a      	strb	r2, [r3, #0]
				Lora_Delay_Count = 0;
    1170:	2200      	movs	r2, #0
    1172:	4b32      	ldr	r3, [pc, #200]	; (123c <Lora_CMD_Func+0x410>)
    1174:	601a      	str	r2, [r3, #0]
    1176:	e6ed      	b.n	f54 <Lora_CMD_Func+0x128>
				Print_Leave_LoRa_Tx_Mode_Msg();
    1178:	4b31      	ldr	r3, [pc, #196]	; (1240 <Lora_CMD_Func+0x414>)
    117a:	4798      	blx	r3
				f_count = 0;
    117c:	2200      	movs	r2, #0
    117e:	4b05      	ldr	r3, [pc, #20]	; (1194 <Lora_CMD_Func+0x368>)
    1180:	601a      	str	r2, [r3, #0]
				Lora_Delay_Count = 1;
    1182:	3201      	adds	r2, #1
    1184:	4b2d      	ldr	r3, [pc, #180]	; (123c <Lora_CMD_Func+0x410>)
    1186:	601a      	str	r2, [r3, #0]
    1188:	e6e4      	b.n	f54 <Lora_CMD_Func+0x128>
    118a:	46c0      	nop			; (mov r8, r8)
    118c:	200040ac 	.word	0x200040ac
    1190:	000036a4 	.word	0x000036a4
    1194:	200042dc 	.word	0x200042dc
    1198:	00001341 	.word	0x00001341
    119c:	2000414c 	.word	0x2000414c
    11a0:	20004155 	.word	0x20004155
    11a4:	2000414a 	.word	0x2000414a
    11a8:	20004149 	.word	0x20004149
    11ac:	20004305 	.word	0x20004305
    11b0:	200042b8 	.word	0x200042b8
    11b4:	0000139d 	.word	0x0000139d
    11b8:	200042bc 	.word	0x200042bc
    11bc:	200040b4 	.word	0x200040b4
    11c0:	00001da5 	.word	0x00001da5
    11c4:	00001dc5 	.word	0x00001dc5
    11c8:	00001669 	.word	0x00001669
    11cc:	000016b9 	.word	0x000016b9
    11d0:	000012fd 	.word	0x000012fd
    11d4:	00000dad 	.word	0x00000dad
    11d8:	20004274 	.word	0x20004274
    11dc:	20004140 	.word	0x20004140
    11e0:	00001731 	.word	0x00001731
    11e4:	000013f1 	.word	0x000013f1
    11e8:	00000de1 	.word	0x00000de1
    11ec:	00001439 	.word	0x00001439
    11f0:	00000d79 	.word	0x00000d79
    11f4:	000014c1 	.word	0x000014c1
    11f8:	00000d45 	.word	0x00000d45
    11fc:	0000147d 	.word	0x0000147d
    1200:	20004275 	.word	0x20004275
    1204:	00000d05 	.word	0x00000d05
    1208:	20004304 	.word	0x20004304
    120c:	41004400 	.word	0x41004400
    1210:	00000a3d 	.word	0x00000a3d
    1214:	00001505 	.word	0x00001505
    1218:	00000cd1 	.word	0x00000cd1
    121c:	00000e15 	.word	0x00000e15
    1220:	00001549 	.word	0x00001549
    1224:	00000c9d 	.word	0x00000c9d
    1228:	200040f4 	.word	0x200040f4
    122c:	0000158d 	.word	0x0000158d
    1230:	000015dd 	.word	0x000015dd
    1234:	00000c69 	.word	0x00000c69
    1238:	00001a1d 	.word	0x00001a1d
    123c:	20004150 	.word	0x20004150
    1240:	00001621 	.word	0x00001621
			NowStatus = Write_LoRa_Setting_Index;
    1244:	2204      	movs	r2, #4
    1246:	4b01      	ldr	r3, [pc, #4]	; (124c <Lora_CMD_Func+0x420>)
    1248:	701a      	strb	r2, [r3, #0]
}
    124a:	e683      	b.n	f54 <Lora_CMD_Func+0x128>
    124c:	200040ac 	.word	0x200040ac

00001250 <Display_Rssi>:



void Display_Rssi(void)
{
    1250:	b5f0      	push	{r4, r5, r6, r7, lr}
    1252:	46c6      	mov	lr, r8
    1254:	b500      	push	{lr}
	UINT16u_t	tmp16;
	UINT8u_t	tmp8;
	
	tmp16.byte[1] = MyBuffer[27];
    1256:	4f22      	ldr	r7, [pc, #136]	; (12e0 <Display_Rssi+0x90>)
    1258:	7efb      	ldrb	r3, [r7, #27]
	tmp16.byte[0] = MyBuffer[28];
    125a:	7f38      	ldrb	r0, [r7, #28]
    125c:	021b      	lsls	r3, r3, #8
	RSSIValue = tmp16.word;
    125e:	4303      	orrs	r3, r0
	
	RSSIValue = 65536 - RSSIValue;
    1260:	2080      	movs	r0, #128	; 0x80
    1262:	0240      	lsls	r0, r0, #9
    1264:	1ac0      	subs	r0, r0, r3
    1266:	4b1f      	ldr	r3, [pc, #124]	; (12e4 <Display_Rssi+0x94>)
    1268:	6018      	str	r0, [r3, #0]
	tmp16.word = hex_to_bcd(RSSIValue);
    126a:	4b1f      	ldr	r3, [pc, #124]	; (12e8 <Display_Rssi+0x98>)
    126c:	4798      	blx	r3
    126e:	0006      	movs	r6, r0
	tmp8.byte = tmp16.byte[1];
    1270:	0404      	lsls	r4, r0, #16
    1272:	0e24      	lsrs	r4, r4, #24
	lcd_command(lcd_instr, 0x87);
    1274:	2187      	movs	r1, #135	; 0x87
    1276:	2000      	movs	r0, #0
    1278:	4d1c      	ldr	r5, [pc, #112]	; (12ec <Display_Rssi+0x9c>)
    127a:	47a8      	blx	r5
	lcd_command(lcd_data, hex_to_ascii(tmp8.HL.H));
    127c:	0620      	lsls	r0, r4, #24
    127e:	0f00      	lsrs	r0, r0, #28
    1280:	4b1b      	ldr	r3, [pc, #108]	; (12f0 <Display_Rssi+0xa0>)
    1282:	4698      	mov	r8, r3
    1284:	4798      	blx	r3
    1286:	0001      	movs	r1, r0
    1288:	2001      	movs	r0, #1
    128a:	47a8      	blx	r5
	lcd_command(lcd_data, hex_to_ascii(tmp8.HL.L));
    128c:	0724      	lsls	r4, r4, #28
    128e:	0f20      	lsrs	r0, r4, #28
    1290:	47c0      	blx	r8
    1292:	0001      	movs	r1, r0
    1294:	2001      	movs	r0, #1
    1296:	47a8      	blx	r5
	tmp8.byte = tmp16.byte[0];
	lcd_command(lcd_data, hex_to_ascii(tmp8.HL.H));
    1298:	0630      	lsls	r0, r6, #24
    129a:	0f00      	lsrs	r0, r0, #28
    129c:	47c0      	blx	r8
    129e:	0001      	movs	r1, r0
    12a0:	2001      	movs	r0, #1
    12a2:	47a8      	blx	r5
	lcd_command(lcd_data, hex_to_ascii(tmp8.HL.L));
    12a4:	0730      	lsls	r0, r6, #28
    12a6:	0f00      	lsrs	r0, r0, #28
    12a8:	47c0      	blx	r8
    12aa:	0001      	movs	r1, r0
    12ac:	2001      	movs	r0, #1
    12ae:	47a8      	blx	r5
	
	lcd_command(lcd_instr, 0xCE);
    12b0:	21ce      	movs	r1, #206	; 0xce
    12b2:	2000      	movs	r0, #0
    12b4:	47a8      	blx	r5
	lcd_command(lcd_data, MyBuffer[7]);
    12b6:	79f9      	ldrb	r1, [r7, #7]
    12b8:	2001      	movs	r0, #1
    12ba:	47a8      	blx	r5
	return (port_base->IN.reg & pin_mask);
    12bc:	4b0d      	ldr	r3, [pc, #52]	; (12f4 <Display_Rssi+0xa4>)
    12be:	6a1b      	ldr	r3, [r3, #32]
	
	if(port_pin_get_input_level(PIN_PA00) == 1)
    12c0:	07db      	lsls	r3, r3, #31
    12c2:	d506      	bpl.n	12d2 <Display_Rssi+0x82>
	{
		if(TACT_SW_Value < 17)
    12c4:	4b0c      	ldr	r3, [pc, #48]	; (12f8 <Display_Rssi+0xa8>)
    12c6:	781b      	ldrb	r3, [r3, #0]
    12c8:	2b10      	cmp	r3, #16
    12ca:	d905      	bls.n	12d8 <Display_Rssi+0x88>
		{
			TACT_SW_Value++;
		}
		else
		{
			TACT_SW_Value = 2;
    12cc:	2202      	movs	r2, #2
    12ce:	4b0a      	ldr	r3, [pc, #40]	; (12f8 <Display_Rssi+0xa8>)
    12d0:	701a      	strb	r2, [r3, #0]
		}
	}
    12d2:	bc04      	pop	{r2}
    12d4:	4690      	mov	r8, r2
    12d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			TACT_SW_Value++;
    12d8:	3301      	adds	r3, #1
    12da:	4a07      	ldr	r2, [pc, #28]	; (12f8 <Display_Rssi+0xa8>)
    12dc:	7013      	strb	r3, [r2, #0]
    12de:	e7f8      	b.n	12d2 <Display_Rssi+0x82>
    12e0:	200042bc 	.word	0x200042bc
    12e4:	20004144 	.word	0x20004144
    12e8:	00001e3d 	.word	0x00001e3d
    12ec:	00000b89 	.word	0x00000b89
    12f0:	00001db5 	.word	0x00001db5
    12f4:	41004400 	.word	0x41004400
    12f8:	20004276 	.word	0x20004276

000012fc <Print_Read_LoRa_ID_Msg>:
#include <stdio.h>
#include "myDefine.h"


void Print_Read_LoRa_ID_Msg(void)
{
    12fc:	b570      	push	{r4, r5, r6, lr}
	if(Lora_Debug_Flag == 0) return;
    12fe:	4b0d      	ldr	r3, [pc, #52]	; (1334 <Print_Read_LoRa_ID_Msg+0x38>)
    1300:	781b      	ldrb	r3, [r3, #0]
    1302:	071b      	lsls	r3, r3, #28
    1304:	d400      	bmi.n	1308 <Print_Read_LoRa_ID_Msg+0xc>
	uTXByte(Debug_COM, 'd');
	uTXByte(Debug_COM, ' ');
	uTXByte(Debug_COM, 'I');
	uTXByte(Debug_COM, 'D');
	uTXByte(Debug_COM, 0x09);
}
    1306:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'R');
    1308:	4d0b      	ldr	r5, [pc, #44]	; (1338 <Print_Read_LoRa_ID_Msg+0x3c>)
    130a:	2152      	movs	r1, #82	; 0x52
    130c:	0028      	movs	r0, r5
    130e:	4c0b      	ldr	r4, [pc, #44]	; (133c <Print_Read_LoRa_ID_Msg+0x40>)
    1310:	47a0      	blx	r4
	uTXByte(Debug_COM, 'd');
    1312:	2164      	movs	r1, #100	; 0x64
    1314:	0028      	movs	r0, r5
    1316:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    1318:	2120      	movs	r1, #32
    131a:	0028      	movs	r0, r5
    131c:	47a0      	blx	r4
	uTXByte(Debug_COM, 'I');
    131e:	2149      	movs	r1, #73	; 0x49
    1320:	0028      	movs	r0, r5
    1322:	47a0      	blx	r4
	uTXByte(Debug_COM, 'D');
    1324:	2144      	movs	r1, #68	; 0x44
    1326:	0028      	movs	r0, r5
    1328:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x09);
    132a:	2109      	movs	r1, #9
    132c:	0028      	movs	r0, r5
    132e:	47a0      	blx	r4
    1330:	e7e9      	b.n	1306 <Print_Read_LoRa_ID_Msg+0xa>
    1332:	46c0      	nop			; (mov r8, r8)
    1334:	2000414c 	.word	0x2000414c
    1338:	200040b4 	.word	0x200040b4
    133c:	00001da5 	.word	0x00001da5

00001340 <Print_Delay_LoRa_CMD_Msg>:

void Print_Delay_LoRa_CMD_Msg(void)
{
    1340:	b570      	push	{r4, r5, r6, lr}
	if(Lora_Debug_Flag == 0) return;
    1342:	4b13      	ldr	r3, [pc, #76]	; (1390 <Print_Delay_LoRa_CMD_Msg+0x50>)
    1344:	781b      	ldrb	r3, [r3, #0]
    1346:	071b      	lsls	r3, r3, #28
    1348:	d400      	bmi.n	134c <Print_Delay_LoRa_CMD_Msg+0xc>
	uTXByte(Debug_COM, 'e');
	uTXByte(Debug_COM, 'l');
	uTXByte(Debug_COM, 'a');
	uTXByte(Debug_COM, 'y');
	uTXByte(Debug_COM, 0x0d);	
}
    134a:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'C');
    134c:	4d11      	ldr	r5, [pc, #68]	; (1394 <Print_Delay_LoRa_CMD_Msg+0x54>)
    134e:	2143      	movs	r1, #67	; 0x43
    1350:	0028      	movs	r0, r5
    1352:	4c11      	ldr	r4, [pc, #68]	; (1398 <Print_Delay_LoRa_CMD_Msg+0x58>)
    1354:	47a0      	blx	r4
	uTXByte(Debug_COM, 'M');
    1356:	214d      	movs	r1, #77	; 0x4d
    1358:	0028      	movs	r0, r5
    135a:	47a0      	blx	r4
	uTXByte(Debug_COM, 'D');
    135c:	2144      	movs	r1, #68	; 0x44
    135e:	0028      	movs	r0, r5
    1360:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    1362:	2120      	movs	r1, #32
    1364:	0028      	movs	r0, r5
    1366:	47a0      	blx	r4
	uTXByte(Debug_COM, 'D');
    1368:	2144      	movs	r1, #68	; 0x44
    136a:	0028      	movs	r0, r5
    136c:	47a0      	blx	r4
	uTXByte(Debug_COM, 'e');
    136e:	2165      	movs	r1, #101	; 0x65
    1370:	0028      	movs	r0, r5
    1372:	47a0      	blx	r4
	uTXByte(Debug_COM, 'l');
    1374:	216c      	movs	r1, #108	; 0x6c
    1376:	0028      	movs	r0, r5
    1378:	47a0      	blx	r4
	uTXByte(Debug_COM, 'a');
    137a:	2161      	movs	r1, #97	; 0x61
    137c:	0028      	movs	r0, r5
    137e:	47a0      	blx	r4
	uTXByte(Debug_COM, 'y');
    1380:	2179      	movs	r1, #121	; 0x79
    1382:	0028      	movs	r0, r5
    1384:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);	
    1386:	210d      	movs	r1, #13
    1388:	0028      	movs	r0, r5
    138a:	47a0      	blx	r4
    138c:	e7dd      	b.n	134a <Print_Delay_LoRa_CMD_Msg+0xa>
    138e:	46c0      	nop			; (mov r8, r8)
    1390:	2000414c 	.word	0x2000414c
    1394:	200040b4 	.word	0x200040b4
    1398:	00001da5 	.word	0x00001da5

0000139c <Print_Time_Out_Msg>:

void Print_Time_Out_Msg(void)
{
    139c:	b570      	push	{r4, r5, r6, lr}
	if(Lora_Debug_Flag == 0) return;
    139e:	4b11      	ldr	r3, [pc, #68]	; (13e4 <Print_Time_Out_Msg+0x48>)
    13a0:	781b      	ldrb	r3, [r3, #0]
    13a2:	071b      	lsls	r3, r3, #28
    13a4:	d400      	bmi.n	13a8 <Print_Time_Out_Msg+0xc>
	uTXByte(Debug_COM, ' ');
	uTXByte(Debug_COM, 'O');
	uTXByte(Debug_COM, 'u');
	uTXByte(Debug_COM, 't');
	uTXByte(Debug_COM, 0x0d);
}
    13a6:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'T');
    13a8:	4d0f      	ldr	r5, [pc, #60]	; (13e8 <Print_Time_Out_Msg+0x4c>)
    13aa:	2154      	movs	r1, #84	; 0x54
    13ac:	0028      	movs	r0, r5
    13ae:	4c0f      	ldr	r4, [pc, #60]	; (13ec <Print_Time_Out_Msg+0x50>)
    13b0:	47a0      	blx	r4
	uTXByte(Debug_COM, 'i');
    13b2:	2169      	movs	r1, #105	; 0x69
    13b4:	0028      	movs	r0, r5
    13b6:	47a0      	blx	r4
	uTXByte(Debug_COM, 'm');
    13b8:	216d      	movs	r1, #109	; 0x6d
    13ba:	0028      	movs	r0, r5
    13bc:	47a0      	blx	r4
	uTXByte(Debug_COM, 'e');
    13be:	2165      	movs	r1, #101	; 0x65
    13c0:	0028      	movs	r0, r5
    13c2:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    13c4:	2120      	movs	r1, #32
    13c6:	0028      	movs	r0, r5
    13c8:	47a0      	blx	r4
	uTXByte(Debug_COM, 'O');
    13ca:	214f      	movs	r1, #79	; 0x4f
    13cc:	0028      	movs	r0, r5
    13ce:	47a0      	blx	r4
	uTXByte(Debug_COM, 'u');
    13d0:	2175      	movs	r1, #117	; 0x75
    13d2:	0028      	movs	r0, r5
    13d4:	47a0      	blx	r4
	uTXByte(Debug_COM, 't');
    13d6:	2174      	movs	r1, #116	; 0x74
    13d8:	0028      	movs	r0, r5
    13da:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);
    13dc:	210d      	movs	r1, #13
    13de:	0028      	movs	r0, r5
    13e0:	47a0      	blx	r4
    13e2:	e7e0      	b.n	13a6 <Print_Time_Out_Msg+0xa>
    13e4:	2000414c 	.word	0x2000414c
    13e8:	200040b4 	.word	0x200040b4
    13ec:	00001da5 	.word	0x00001da5

000013f0 <Print_Reset_LoRa_Msg>:
	Print_Line_Msg();
}


void Print_Reset_LoRa_Msg(void)
{
    13f0:	b570      	push	{r4, r5, r6, lr}
	if(Lora_Debug_Flag == 0) return;
    13f2:	4b0e      	ldr	r3, [pc, #56]	; (142c <Print_Reset_LoRa_Msg+0x3c>)
    13f4:	781b      	ldrb	r3, [r3, #0]
    13f6:	071b      	lsls	r3, r3, #28
    13f8:	d400      	bmi.n	13fc <Print_Reset_LoRa_Msg+0xc>
	uTXByte(Debug_COM, ' ');
	uTXByte(Debug_COM, 'R');
	uTXByte(Debug_COM, 'S');
	uTXByte(Debug_COM, 'T');
	uTXByte(Debug_COM, 0x09);
}
    13fa:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'L');
    13fc:	4d0c      	ldr	r5, [pc, #48]	; (1430 <Print_Reset_LoRa_Msg+0x40>)
    13fe:	214c      	movs	r1, #76	; 0x4c
    1400:	0028      	movs	r0, r5
    1402:	4c0c      	ldr	r4, [pc, #48]	; (1434 <Print_Reset_LoRa_Msg+0x44>)
    1404:	47a0      	blx	r4
	uTXByte(Debug_COM, 'R');
    1406:	2152      	movs	r1, #82	; 0x52
    1408:	0028      	movs	r0, r5
    140a:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    140c:	2120      	movs	r1, #32
    140e:	0028      	movs	r0, r5
    1410:	47a0      	blx	r4
	uTXByte(Debug_COM, 'R');
    1412:	2152      	movs	r1, #82	; 0x52
    1414:	0028      	movs	r0, r5
    1416:	47a0      	blx	r4
	uTXByte(Debug_COM, 'S');
    1418:	2153      	movs	r1, #83	; 0x53
    141a:	0028      	movs	r0, r5
    141c:	47a0      	blx	r4
	uTXByte(Debug_COM, 'T');
    141e:	2154      	movs	r1, #84	; 0x54
    1420:	0028      	movs	r0, r5
    1422:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x09);
    1424:	2109      	movs	r1, #9
    1426:	0028      	movs	r0, r5
    1428:	47a0      	blx	r4
    142a:	e7e6      	b.n	13fa <Print_Reset_LoRa_Msg+0xa>
    142c:	2000414c 	.word	0x2000414c
    1430:	200040b4 	.word	0x200040b4
    1434:	00001da5 	.word	0x00001da5

00001438 <Print_Read_LoRa_Setting_Msg>:

void Print_Read_LoRa_Setting_Msg(void)
{
    1438:	b570      	push	{r4, r5, r6, lr}
	if(Lora_Debug_Flag == 0) return;
    143a:	4b0d      	ldr	r3, [pc, #52]	; (1470 <Print_Read_LoRa_Setting_Msg+0x38>)
    143c:	781b      	ldrb	r3, [r3, #0]
    143e:	071b      	lsls	r3, r3, #28
    1440:	d400      	bmi.n	1444 <Print_Read_LoRa_Setting_Msg+0xc>
	uTXByte(Debug_COM, 'd');
	uTXByte(Debug_COM, ' ');
	uTXByte(Debug_COM, 'S');
	uTXByte(Debug_COM, 't');
	uTXByte(Debug_COM, 0x09);	
}
    1442:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'R');
    1444:	4d0b      	ldr	r5, [pc, #44]	; (1474 <Print_Read_LoRa_Setting_Msg+0x3c>)
    1446:	2152      	movs	r1, #82	; 0x52
    1448:	0028      	movs	r0, r5
    144a:	4c0b      	ldr	r4, [pc, #44]	; (1478 <Print_Read_LoRa_Setting_Msg+0x40>)
    144c:	47a0      	blx	r4
	uTXByte(Debug_COM, 'd');
    144e:	2164      	movs	r1, #100	; 0x64
    1450:	0028      	movs	r0, r5
    1452:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    1454:	2120      	movs	r1, #32
    1456:	0028      	movs	r0, r5
    1458:	47a0      	blx	r4
	uTXByte(Debug_COM, 'S');
    145a:	2153      	movs	r1, #83	; 0x53
    145c:	0028      	movs	r0, r5
    145e:	47a0      	blx	r4
	uTXByte(Debug_COM, 't');
    1460:	2174      	movs	r1, #116	; 0x74
    1462:	0028      	movs	r0, r5
    1464:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x09);	
    1466:	2109      	movs	r1, #9
    1468:	0028      	movs	r0, r5
    146a:	47a0      	blx	r4
    146c:	e7e9      	b.n	1442 <Print_Read_LoRa_Setting_Msg+0xa>
    146e:	46c0      	nop			; (mov r8, r8)
    1470:	2000414c 	.word	0x2000414c
    1474:	200040b4 	.word	0x200040b4
    1478:	00001da5 	.word	0x00001da5

0000147c <Print_Write_LoRa_Mode_FQ_Msg>:
void Print_Write_LoRa_Mode_FQ_Msg(void)
{
    147c:	b570      	push	{r4, r5, r6, lr}
	if(Lora_Debug_Flag == 0) return;
    147e:	4b0d      	ldr	r3, [pc, #52]	; (14b4 <Print_Write_LoRa_Mode_FQ_Msg+0x38>)
    1480:	781b      	ldrb	r3, [r3, #0]
    1482:	071b      	lsls	r3, r3, #28
    1484:	d400      	bmi.n	1488 <Print_Write_LoRa_Mode_FQ_Msg+0xc>
	uTXByte(Debug_COM, 'r');
	uTXByte(Debug_COM, ' ');
	uTXByte(Debug_COM, 'F');
	uTXByte(Debug_COM, 'Q');
	uTXByte(Debug_COM, 0x09);
}
    1486:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'W');
    1488:	4d0b      	ldr	r5, [pc, #44]	; (14b8 <Print_Write_LoRa_Mode_FQ_Msg+0x3c>)
    148a:	2157      	movs	r1, #87	; 0x57
    148c:	0028      	movs	r0, r5
    148e:	4c0b      	ldr	r4, [pc, #44]	; (14bc <Print_Write_LoRa_Mode_FQ_Msg+0x40>)
    1490:	47a0      	blx	r4
	uTXByte(Debug_COM, 'r');
    1492:	2172      	movs	r1, #114	; 0x72
    1494:	0028      	movs	r0, r5
    1496:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    1498:	2120      	movs	r1, #32
    149a:	0028      	movs	r0, r5
    149c:	47a0      	blx	r4
	uTXByte(Debug_COM, 'F');
    149e:	2146      	movs	r1, #70	; 0x46
    14a0:	0028      	movs	r0, r5
    14a2:	47a0      	blx	r4
	uTXByte(Debug_COM, 'Q');
    14a4:	2151      	movs	r1, #81	; 0x51
    14a6:	0028      	movs	r0, r5
    14a8:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x09);
    14aa:	2109      	movs	r1, #9
    14ac:	0028      	movs	r0, r5
    14ae:	47a0      	blx	r4
    14b0:	e7e9      	b.n	1486 <Print_Write_LoRa_Mode_FQ_Msg+0xa>
    14b2:	46c0      	nop			; (mov r8, r8)
    14b4:	2000414c 	.word	0x2000414c
    14b8:	200040b4 	.word	0x200040b4
    14bc:	00001da5 	.word	0x00001da5

000014c0 <Print_Write_LoRa_Setting_Msg>:
void Print_Write_LoRa_Setting_Msg(void)
{
    14c0:	b570      	push	{r4, r5, r6, lr}
	if(Lora_Debug_Flag == 0) return;
    14c2:	4b0d      	ldr	r3, [pc, #52]	; (14f8 <Print_Write_LoRa_Setting_Msg+0x38>)
    14c4:	781b      	ldrb	r3, [r3, #0]
    14c6:	071b      	lsls	r3, r3, #28
    14c8:	d400      	bmi.n	14cc <Print_Write_LoRa_Setting_Msg+0xc>
	uTXByte(Debug_COM, 'r');
	uTXByte(Debug_COM, ' ');
	uTXByte(Debug_COM, 'S');
	uTXByte(Debug_COM, 't');
	uTXByte(Debug_COM, 0x09);	
}
    14ca:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'W');
    14cc:	4d0b      	ldr	r5, [pc, #44]	; (14fc <Print_Write_LoRa_Setting_Msg+0x3c>)
    14ce:	2157      	movs	r1, #87	; 0x57
    14d0:	0028      	movs	r0, r5
    14d2:	4c0b      	ldr	r4, [pc, #44]	; (1500 <Print_Write_LoRa_Setting_Msg+0x40>)
    14d4:	47a0      	blx	r4
	uTXByte(Debug_COM, 'r');
    14d6:	2172      	movs	r1, #114	; 0x72
    14d8:	0028      	movs	r0, r5
    14da:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    14dc:	2120      	movs	r1, #32
    14de:	0028      	movs	r0, r5
    14e0:	47a0      	blx	r4
	uTXByte(Debug_COM, 'S');
    14e2:	2153      	movs	r1, #83	; 0x53
    14e4:	0028      	movs	r0, r5
    14e6:	47a0      	blx	r4
	uTXByte(Debug_COM, 't');
    14e8:	2174      	movs	r1, #116	; 0x74
    14ea:	0028      	movs	r0, r5
    14ec:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x09);	
    14ee:	2109      	movs	r1, #9
    14f0:	0028      	movs	r0, r5
    14f2:	47a0      	blx	r4
    14f4:	e7e9      	b.n	14ca <Print_Write_LoRa_Setting_Msg+0xa>
    14f6:	46c0      	nop			; (mov r8, r8)
    14f8:	2000414c 	.word	0x2000414c
    14fc:	200040b4 	.word	0x200040b4
    1500:	00001da5 	.word	0x00001da5

00001504 <Print_Read_LoRa_RxCount_Msg>:
void Print_Read_LoRa_RxCount_Msg(void)
{
    1504:	b570      	push	{r4, r5, r6, lr}
	if(Lora_Debug_Flag == 0) return;
    1506:	4b0d      	ldr	r3, [pc, #52]	; (153c <Print_Read_LoRa_RxCount_Msg+0x38>)
    1508:	781b      	ldrb	r3, [r3, #0]
    150a:	071b      	lsls	r3, r3, #28
    150c:	d400      	bmi.n	1510 <Print_Read_LoRa_RxCount_Msg+0xc>
	uTXByte(Debug_COM, 'd');
	uTXByte(Debug_COM, ' ');
	uTXByte(Debug_COM, 'C');
	uTXByte(Debug_COM, 'T');
	uTXByte(Debug_COM, 0x09);	
}
    150e:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'R');
    1510:	4d0b      	ldr	r5, [pc, #44]	; (1540 <Print_Read_LoRa_RxCount_Msg+0x3c>)
    1512:	2152      	movs	r1, #82	; 0x52
    1514:	0028      	movs	r0, r5
    1516:	4c0b      	ldr	r4, [pc, #44]	; (1544 <Print_Read_LoRa_RxCount_Msg+0x40>)
    1518:	47a0      	blx	r4
	uTXByte(Debug_COM, 'd');
    151a:	2164      	movs	r1, #100	; 0x64
    151c:	0028      	movs	r0, r5
    151e:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    1520:	2120      	movs	r1, #32
    1522:	0028      	movs	r0, r5
    1524:	47a0      	blx	r4
	uTXByte(Debug_COM, 'C');
    1526:	2143      	movs	r1, #67	; 0x43
    1528:	0028      	movs	r0, r5
    152a:	47a0      	blx	r4
	uTXByte(Debug_COM, 'T');
    152c:	2154      	movs	r1, #84	; 0x54
    152e:	0028      	movs	r0, r5
    1530:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x09);	
    1532:	2109      	movs	r1, #9
    1534:	0028      	movs	r0, r5
    1536:	47a0      	blx	r4
    1538:	e7e9      	b.n	150e <Print_Read_LoRa_RxCount_Msg+0xa>
    153a:	46c0      	nop			; (mov r8, r8)
    153c:	2000414c 	.word	0x2000414c
    1540:	200040b4 	.word	0x200040b4
    1544:	00001da5 	.word	0x00001da5

00001548 <Print_Read_LoRa_RxBuffer_Msg>:
void Print_Read_LoRa_RxBuffer_Msg(void)
{
    1548:	b570      	push	{r4, r5, r6, lr}
	if(Lora_Debug_Flag == 0) return;
    154a:	4b0d      	ldr	r3, [pc, #52]	; (1580 <Print_Read_LoRa_RxBuffer_Msg+0x38>)
    154c:	781b      	ldrb	r3, [r3, #0]
    154e:	071b      	lsls	r3, r3, #28
    1550:	d400      	bmi.n	1554 <Print_Read_LoRa_RxBuffer_Msg+0xc>
	uTXByte(Debug_COM, 'd');
	uTXByte(Debug_COM, ' ');
	uTXByte(Debug_COM, 'B');
	uTXByte(Debug_COM, 'F');
	uTXByte(Debug_COM, 0x09);
}
    1552:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'R');
    1554:	4d0b      	ldr	r5, [pc, #44]	; (1584 <Print_Read_LoRa_RxBuffer_Msg+0x3c>)
    1556:	2152      	movs	r1, #82	; 0x52
    1558:	0028      	movs	r0, r5
    155a:	4c0b      	ldr	r4, [pc, #44]	; (1588 <Print_Read_LoRa_RxBuffer_Msg+0x40>)
    155c:	47a0      	blx	r4
	uTXByte(Debug_COM, 'd');
    155e:	2164      	movs	r1, #100	; 0x64
    1560:	0028      	movs	r0, r5
    1562:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    1564:	2120      	movs	r1, #32
    1566:	0028      	movs	r0, r5
    1568:	47a0      	blx	r4
	uTXByte(Debug_COM, 'B');
    156a:	2142      	movs	r1, #66	; 0x42
    156c:	0028      	movs	r0, r5
    156e:	47a0      	blx	r4
	uTXByte(Debug_COM, 'F');
    1570:	2146      	movs	r1, #70	; 0x46
    1572:	0028      	movs	r0, r5
    1574:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x09);
    1576:	2109      	movs	r1, #9
    1578:	0028      	movs	r0, r5
    157a:	47a0      	blx	r4
    157c:	e7e9      	b.n	1552 <Print_Read_LoRa_RxBuffer_Msg+0xa>
    157e:	46c0      	nop			; (mov r8, r8)
    1580:	2000414c 	.word	0x2000414c
    1584:	200040b4 	.word	0x200040b4
    1588:	00001da5 	.word	0x00001da5

0000158c <Print_Reset_IRQ_Flag_Msg>:
void Print_Reset_IRQ_Flag_Msg(void)
{
    158c:	b570      	push	{r4, r5, r6, lr}
	if(Lora_Debug_Flag == 0) return;
    158e:	4b10      	ldr	r3, [pc, #64]	; (15d0 <Print_Reset_IRQ_Flag_Msg+0x44>)
    1590:	781b      	ldrb	r3, [r3, #0]
    1592:	071b      	lsls	r3, r3, #28
    1594:	d400      	bmi.n	1598 <Print_Reset_IRQ_Flag_Msg+0xc>
	uTXByte(Debug_COM, ' ');
	uTXByte(Debug_COM, 'I');
	uTXByte(Debug_COM, 'R');
	uTXByte(Debug_COM, 'Q');
	uTXByte(Debug_COM, 0x0d);	
}
    1596:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'R');
    1598:	4d0e      	ldr	r5, [pc, #56]	; (15d4 <Print_Reset_IRQ_Flag_Msg+0x48>)
    159a:	2152      	movs	r1, #82	; 0x52
    159c:	0028      	movs	r0, r5
    159e:	4c0e      	ldr	r4, [pc, #56]	; (15d8 <Print_Reset_IRQ_Flag_Msg+0x4c>)
    15a0:	47a0      	blx	r4
	uTXByte(Debug_COM, 'S');
    15a2:	2153      	movs	r1, #83	; 0x53
    15a4:	0028      	movs	r0, r5
    15a6:	47a0      	blx	r4
	uTXByte(Debug_COM, 'T');
    15a8:	2154      	movs	r1, #84	; 0x54
    15aa:	0028      	movs	r0, r5
    15ac:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    15ae:	2120      	movs	r1, #32
    15b0:	0028      	movs	r0, r5
    15b2:	47a0      	blx	r4
	uTXByte(Debug_COM, 'I');
    15b4:	2149      	movs	r1, #73	; 0x49
    15b6:	0028      	movs	r0, r5
    15b8:	47a0      	blx	r4
	uTXByte(Debug_COM, 'R');
    15ba:	2152      	movs	r1, #82	; 0x52
    15bc:	0028      	movs	r0, r5
    15be:	47a0      	blx	r4
	uTXByte(Debug_COM, 'Q');
    15c0:	2151      	movs	r1, #81	; 0x51
    15c2:	0028      	movs	r0, r5
    15c4:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);	
    15c6:	210d      	movs	r1, #13
    15c8:	0028      	movs	r0, r5
    15ca:	47a0      	blx	r4
    15cc:	e7e3      	b.n	1596 <Print_Reset_IRQ_Flag_Msg+0xa>
    15ce:	46c0      	nop			; (mov r8, r8)
    15d0:	2000414c 	.word	0x2000414c
    15d4:	200040b4 	.word	0x200040b4
    15d8:	00001da5 	.word	0x00001da5

000015dc <Print_Write_LoRa_TxBuffer_Msg>:
void Print_Write_LoRa_TxBuffer_Msg(void)
{
    15dc:	b570      	push	{r4, r5, r6, lr}
	if(Lora_Debug_Flag == 0) return;
    15de:	4b0d      	ldr	r3, [pc, #52]	; (1614 <Print_Write_LoRa_TxBuffer_Msg+0x38>)
    15e0:	781b      	ldrb	r3, [r3, #0]
    15e2:	071b      	lsls	r3, r3, #28
    15e4:	d400      	bmi.n	15e8 <Print_Write_LoRa_TxBuffer_Msg+0xc>
	uTXByte(Debug_COM, 'r');
	uTXByte(Debug_COM, ' ');
	uTXByte(Debug_COM, 'B');
	uTXByte(Debug_COM, 'F');
	uTXByte(Debug_COM, 0x09);	
}
    15e6:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'W');
    15e8:	4d0b      	ldr	r5, [pc, #44]	; (1618 <Print_Write_LoRa_TxBuffer_Msg+0x3c>)
    15ea:	2157      	movs	r1, #87	; 0x57
    15ec:	0028      	movs	r0, r5
    15ee:	4c0b      	ldr	r4, [pc, #44]	; (161c <Print_Write_LoRa_TxBuffer_Msg+0x40>)
    15f0:	47a0      	blx	r4
	uTXByte(Debug_COM, 'r');
    15f2:	2172      	movs	r1, #114	; 0x72
    15f4:	0028      	movs	r0, r5
    15f6:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    15f8:	2120      	movs	r1, #32
    15fa:	0028      	movs	r0, r5
    15fc:	47a0      	blx	r4
	uTXByte(Debug_COM, 'B');
    15fe:	2142      	movs	r1, #66	; 0x42
    1600:	0028      	movs	r0, r5
    1602:	47a0      	blx	r4
	uTXByte(Debug_COM, 'F');
    1604:	2146      	movs	r1, #70	; 0x46
    1606:	0028      	movs	r0, r5
    1608:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x09);	
    160a:	2109      	movs	r1, #9
    160c:	0028      	movs	r0, r5
    160e:	47a0      	blx	r4
    1610:	e7e9      	b.n	15e6 <Print_Write_LoRa_TxBuffer_Msg+0xa>
    1612:	46c0      	nop			; (mov r8, r8)
    1614:	2000414c 	.word	0x2000414c
    1618:	200040b4 	.word	0x200040b4
    161c:	00001da5 	.word	0x00001da5

00001620 <Print_Leave_LoRa_Tx_Mode_Msg>:
void Print_Leave_LoRa_Tx_Mode_Msg(void)
{
    1620:	b570      	push	{r4, r5, r6, lr}
	if(Lora_Debug_Flag == 0) return;
    1622:	4b0e      	ldr	r3, [pc, #56]	; (165c <Print_Leave_LoRa_Tx_Mode_Msg+0x3c>)
    1624:	781b      	ldrb	r3, [r3, #0]
    1626:	071b      	lsls	r3, r3, #28
    1628:	d400      	bmi.n	162c <Print_Leave_LoRa_Tx_Mode_Msg+0xc>
	uTXByte(Debug_COM, 'v');
	uTXByte(Debug_COM, ' ');
	uTXByte(Debug_COM, 'T');
	uTXByte(Debug_COM, 'X');
	uTXByte(Debug_COM, 0x0d);	
}
    162a:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'L');
    162c:	4d0c      	ldr	r5, [pc, #48]	; (1660 <Print_Leave_LoRa_Tx_Mode_Msg+0x40>)
    162e:	214c      	movs	r1, #76	; 0x4c
    1630:	0028      	movs	r0, r5
    1632:	4c0c      	ldr	r4, [pc, #48]	; (1664 <Print_Leave_LoRa_Tx_Mode_Msg+0x44>)
    1634:	47a0      	blx	r4
	uTXByte(Debug_COM, 'e');
    1636:	2165      	movs	r1, #101	; 0x65
    1638:	0028      	movs	r0, r5
    163a:	47a0      	blx	r4
	uTXByte(Debug_COM, 'v');
    163c:	2176      	movs	r1, #118	; 0x76
    163e:	0028      	movs	r0, r5
    1640:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    1642:	2120      	movs	r1, #32
    1644:	0028      	movs	r0, r5
    1646:	47a0      	blx	r4
	uTXByte(Debug_COM, 'T');
    1648:	2154      	movs	r1, #84	; 0x54
    164a:	0028      	movs	r0, r5
    164c:	47a0      	blx	r4
	uTXByte(Debug_COM, 'X');
    164e:	2158      	movs	r1, #88	; 0x58
    1650:	0028      	movs	r0, r5
    1652:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);	
    1654:	210d      	movs	r1, #13
    1656:	0028      	movs	r0, r5
    1658:	47a0      	blx	r4
    165a:	e7e6      	b.n	162a <Print_Leave_LoRa_Tx_Mode_Msg+0xa>
    165c:	2000414c 	.word	0x2000414c
    1660:	200040b4 	.word	0x200040b4
    1664:	00001da5 	.word	0x00001da5

00001668 <Print_CRC_ERROR>:
	uTXByte(Debug_COM, 'P');
	uTXByte(Debug_COM, 0x0d);
}
					
void Print_CRC_ERROR(void)				
{
    1668:	b570      	push	{r4, r5, r6, lr}
	if(Lora_Debug_Flag == 0) return;
    166a:	4b10      	ldr	r3, [pc, #64]	; (16ac <Print_CRC_ERROR+0x44>)
    166c:	781b      	ldrb	r3, [r3, #0]
    166e:	071b      	lsls	r3, r3, #28
    1670:	d400      	bmi.n	1674 <Print_CRC_ERROR+0xc>
	uTXByte(Debug_COM, ' ');
	uTXByte(Debug_COM, 'E');
	uTXByte(Debug_COM, 'r');
	uTXByte(Debug_COM, 'r');
	uTXByte(Debug_COM, 0x0d);
}
    1672:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'C');
    1674:	4d0e      	ldr	r5, [pc, #56]	; (16b0 <Print_CRC_ERROR+0x48>)
    1676:	2143      	movs	r1, #67	; 0x43
    1678:	0028      	movs	r0, r5
    167a:	4c0e      	ldr	r4, [pc, #56]	; (16b4 <Print_CRC_ERROR+0x4c>)
    167c:	47a0      	blx	r4
	uTXByte(Debug_COM, 'R');
    167e:	2152      	movs	r1, #82	; 0x52
    1680:	0028      	movs	r0, r5
    1682:	47a0      	blx	r4
	uTXByte(Debug_COM, 'C');
    1684:	2143      	movs	r1, #67	; 0x43
    1686:	0028      	movs	r0, r5
    1688:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    168a:	2120      	movs	r1, #32
    168c:	0028      	movs	r0, r5
    168e:	47a0      	blx	r4
	uTXByte(Debug_COM, 'E');
    1690:	2145      	movs	r1, #69	; 0x45
    1692:	0028      	movs	r0, r5
    1694:	47a0      	blx	r4
	uTXByte(Debug_COM, 'r');
    1696:	2172      	movs	r1, #114	; 0x72
    1698:	0028      	movs	r0, r5
    169a:	47a0      	blx	r4
	uTXByte(Debug_COM, 'r');
    169c:	2172      	movs	r1, #114	; 0x72
    169e:	0028      	movs	r0, r5
    16a0:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);
    16a2:	210d      	movs	r1, #13
    16a4:	0028      	movs	r0, r5
    16a6:	47a0      	blx	r4
    16a8:	e7e3      	b.n	1672 <Print_CRC_ERROR+0xa>
    16aa:	46c0      	nop			; (mov r8, r8)
    16ac:	2000414c 	.word	0x2000414c
    16b0:	200040b4 	.word	0x200040b4
    16b4:	00001da5 	.word	0x00001da5

000016b8 <Print_CRC_OK>:


void Print_CRC_OK(void)
{
    16b8:	b570      	push	{r4, r5, r6, lr}
	if(Lora_Debug_Flag == 0) return;
    16ba:	4b0e      	ldr	r3, [pc, #56]	; (16f4 <Print_CRC_OK+0x3c>)
    16bc:	781b      	ldrb	r3, [r3, #0]
    16be:	071b      	lsls	r3, r3, #28
    16c0:	d400      	bmi.n	16c4 <Print_CRC_OK+0xc>
	uTXByte(Debug_COM, 'C');
	uTXByte(Debug_COM, ' ');
	uTXByte(Debug_COM, 'O');
	uTXByte(Debug_COM, 'K');
	uTXByte(Debug_COM, 0x0d);
}
    16c2:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'C');
    16c4:	4d0c      	ldr	r5, [pc, #48]	; (16f8 <Print_CRC_OK+0x40>)
    16c6:	2143      	movs	r1, #67	; 0x43
    16c8:	0028      	movs	r0, r5
    16ca:	4c0c      	ldr	r4, [pc, #48]	; (16fc <Print_CRC_OK+0x44>)
    16cc:	47a0      	blx	r4
	uTXByte(Debug_COM, 'R');
    16ce:	2152      	movs	r1, #82	; 0x52
    16d0:	0028      	movs	r0, r5
    16d2:	47a0      	blx	r4
	uTXByte(Debug_COM, 'C');
    16d4:	2143      	movs	r1, #67	; 0x43
    16d6:	0028      	movs	r0, r5
    16d8:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    16da:	2120      	movs	r1, #32
    16dc:	0028      	movs	r0, r5
    16de:	47a0      	blx	r4
	uTXByte(Debug_COM, 'O');
    16e0:	214f      	movs	r1, #79	; 0x4f
    16e2:	0028      	movs	r0, r5
    16e4:	47a0      	blx	r4
	uTXByte(Debug_COM, 'K');
    16e6:	214b      	movs	r1, #75	; 0x4b
    16e8:	0028      	movs	r0, r5
    16ea:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);
    16ec:	210d      	movs	r1, #13
    16ee:	0028      	movs	r0, r5
    16f0:	47a0      	blx	r4
    16f2:	e7e6      	b.n	16c2 <Print_CRC_OK+0xa>
    16f4:	2000414c 	.word	0x2000414c
    16f8:	200040b4 	.word	0x200040b4
    16fc:	00001da5 	.word	0x00001da5

00001700 <Print_Line_Msg>:
	Print_Line_Msg();
	uTXByte(Debug_COM, 0x0d);
}

void Print_Line_Msg(void)
{
    1700:	b570      	push	{r4, r5, r6, lr}
    1702:	240f      	movs	r4, #15
	unsigned char i;
	for(i = 0; i < 15; i++)
	{
		uTXByte(Debug_COM, '-');
    1704:	4e08      	ldr	r6, [pc, #32]	; (1728 <Print_Line_Msg+0x28>)
    1706:	4d09      	ldr	r5, [pc, #36]	; (172c <Print_Line_Msg+0x2c>)
    1708:	212d      	movs	r1, #45	; 0x2d
    170a:	0030      	movs	r0, r6
    170c:	47a8      	blx	r5
		uTXByte(Debug_COM, ' ');
    170e:	2120      	movs	r1, #32
    1710:	0030      	movs	r0, r6
    1712:	47a8      	blx	r5
    1714:	3c01      	subs	r4, #1
    1716:	b2e4      	uxtb	r4, r4
	for(i = 0; i < 15; i++)
    1718:	2c00      	cmp	r4, #0
    171a:	d1f5      	bne.n	1708 <Print_Line_Msg+0x8>
	}
	uTXByte(Debug_COM, 0x0d);
    171c:	210d      	movs	r1, #13
    171e:	4802      	ldr	r0, [pc, #8]	; (1728 <Print_Line_Msg+0x28>)
    1720:	4b02      	ldr	r3, [pc, #8]	; (172c <Print_Line_Msg+0x2c>)
    1722:	4798      	blx	r3
}
    1724:	bd70      	pop	{r4, r5, r6, pc}
    1726:	46c0      	nop			; (mov r8, r8)
    1728:	200040b4 	.word	0x200040b4
    172c:	00001da5 	.word	0x00001da5

00001730 <Print_Catch_LoRa_ID_Msg>:
{
    1730:	b5f0      	push	{r4, r5, r6, r7, lr}
    1732:	46c6      	mov	lr, r8
    1734:	b500      	push	{lr}
	Print_Line_Msg();
    1736:	4b24      	ldr	r3, [pc, #144]	; (17c8 <Print_Catch_LoRa_ID_Msg+0x98>)
    1738:	4698      	mov	r8, r3
    173a:	4798      	blx	r3
	uTXByte(Debug_COM, '[');
    173c:	4c23      	ldr	r4, [pc, #140]	; (17cc <Print_Catch_LoRa_ID_Msg+0x9c>)
    173e:	215b      	movs	r1, #91	; 0x5b
    1740:	0020      	movs	r0, r4
    1742:	4d23      	ldr	r5, [pc, #140]	; (17d0 <Print_Catch_LoRa_ID_Msg+0xa0>)
    1744:	47a8      	blx	r5
	uTXByte(Debug_COM, 'L');
    1746:	214c      	movs	r1, #76	; 0x4c
    1748:	0020      	movs	r0, r4
    174a:	47a8      	blx	r5
	uTXByte(Debug_COM, 'o');
    174c:	216f      	movs	r1, #111	; 0x6f
    174e:	0020      	movs	r0, r4
    1750:	47a8      	blx	r5
	uTXByte(Debug_COM, 'R');
    1752:	2152      	movs	r1, #82	; 0x52
    1754:	0020      	movs	r0, r4
    1756:	47a8      	blx	r5
	uTXByte(Debug_COM, 'a');
    1758:	2161      	movs	r1, #97	; 0x61
    175a:	0020      	movs	r0, r4
    175c:	47a8      	blx	r5
	uTXByte(Debug_COM, ']');
    175e:	215d      	movs	r1, #93	; 0x5d
    1760:	0020      	movs	r0, r4
    1762:	47a8      	blx	r5
	uTXByte(Debug_COM, 0x0d);
    1764:	210d      	movs	r1, #13
    1766:	0020      	movs	r0, r4
    1768:	47a8      	blx	r5
	uTXByte(Debug_COM, 'F');
    176a:	2146      	movs	r1, #70	; 0x46
    176c:	0020      	movs	r0, r4
    176e:	47a8      	blx	r5
	uTXByte(Debug_COM, 'W');
    1770:	2157      	movs	r1, #87	; 0x57
    1772:	0020      	movs	r0, r4
    1774:	47a8      	blx	r5
	uTXByte(Debug_COM, ':');
    1776:	213a      	movs	r1, #58	; 0x3a
    1778:	0020      	movs	r0, r4
    177a:	47a8      	blx	r5
	uart_send_ascii_byte(Debug_COM, MyLoRaFW);
    177c:	4b15      	ldr	r3, [pc, #84]	; (17d4 <Print_Catch_LoRa_ID_Msg+0xa4>)
    177e:	7819      	ldrb	r1, [r3, #0]
    1780:	0020      	movs	r0, r4
    1782:	4e15      	ldr	r6, [pc, #84]	; (17d8 <Print_Catch_LoRa_ID_Msg+0xa8>)
    1784:	47b0      	blx	r6
	uTXByte(Debug_COM, 0x0d);
    1786:	210d      	movs	r1, #13
    1788:	0020      	movs	r0, r4
    178a:	47a8      	blx	r5
	uTXByte(Debug_COM, 'I');
    178c:	2149      	movs	r1, #73	; 0x49
    178e:	0020      	movs	r0, r4
    1790:	47a8      	blx	r5
	uTXByte(Debug_COM, 'D');
    1792:	2144      	movs	r1, #68	; 0x44
    1794:	0020      	movs	r0, r4
    1796:	47a8      	blx	r5
	uTXByte(Debug_COM, ':');
    1798:	213a      	movs	r1, #58	; 0x3a
    179a:	0020      	movs	r0, r4
    179c:	47a8      	blx	r5
	uart_send_ascii_byte(Debug_COM, MyLoRaID[0]);
    179e:	4f0f      	ldr	r7, [pc, #60]	; (17dc <Print_Catch_LoRa_ID_Msg+0xac>)
    17a0:	7839      	ldrb	r1, [r7, #0]
    17a2:	0020      	movs	r0, r4
    17a4:	47b0      	blx	r6
	uart_send_ascii_byte(Debug_COM, MyLoRaID[1]);
    17a6:	7879      	ldrb	r1, [r7, #1]
    17a8:	0020      	movs	r0, r4
    17aa:	47b0      	blx	r6
	uart_send_ascii_byte(Debug_COM, MyLoRaID[2]);
    17ac:	78b9      	ldrb	r1, [r7, #2]
    17ae:	0020      	movs	r0, r4
    17b0:	47b0      	blx	r6
	uart_send_ascii_byte(Debug_COM, MyLoRaID[3]);
    17b2:	78f9      	ldrb	r1, [r7, #3]
    17b4:	0020      	movs	r0, r4
    17b6:	47b0      	blx	r6
	uTXByte(Debug_COM, 0x0d);
    17b8:	210d      	movs	r1, #13
    17ba:	0020      	movs	r0, r4
    17bc:	47a8      	blx	r5
	Print_Line_Msg();
    17be:	47c0      	blx	r8
}
    17c0:	bc04      	pop	{r2}
    17c2:	4690      	mov	r8, r2
    17c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17c6:	46c0      	nop			; (mov r8, r8)
    17c8:	00001701 	.word	0x00001701
    17cc:	200040b4 	.word	0x200040b4
    17d0:	00001da5 	.word	0x00001da5
    17d4:	20004274 	.word	0x20004274
    17d8:	00001dc5 	.word	0x00001dc5
    17dc:	20004140 	.word	0x20004140

000017e0 <Print_Start_Msg>:
{
    17e0:	b570      	push	{r4, r5, r6, lr}
	if(Lora_Debug_Flag == 0) return;
    17e2:	4b24      	ldr	r3, [pc, #144]	; (1874 <Print_Start_Msg+0x94>)
    17e4:	781b      	ldrb	r3, [r3, #0]
    17e6:	071b      	lsls	r3, r3, #28
    17e8:	d400      	bmi.n	17ec <Print_Start_Msg+0xc>
}
    17ea:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 0x0d);
    17ec:	4d22      	ldr	r5, [pc, #136]	; (1878 <Print_Start_Msg+0x98>)
    17ee:	210d      	movs	r1, #13
    17f0:	0028      	movs	r0, r5
    17f2:	4c22      	ldr	r4, [pc, #136]	; (187c <Print_Start_Msg+0x9c>)
    17f4:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);
    17f6:	210d      	movs	r1, #13
    17f8:	0028      	movs	r0, r5
    17fa:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);
    17fc:	210d      	movs	r1, #13
    17fe:	0028      	movs	r0, r5
    1800:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);
    1802:	210d      	movs	r1, #13
    1804:	0028      	movs	r0, r5
    1806:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);
    1808:	210d      	movs	r1, #13
    180a:	0028      	movs	r0, r5
    180c:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);
    180e:	210d      	movs	r1, #13
    1810:	0028      	movs	r0, r5
    1812:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);
    1814:	210d      	movs	r1, #13
    1816:	0028      	movs	r0, r5
    1818:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);
    181a:	210d      	movs	r1, #13
    181c:	0028      	movs	r0, r5
    181e:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);
    1820:	210d      	movs	r1, #13
    1822:	0028      	movs	r0, r5
    1824:	47a0      	blx	r4
	uTXByte(Debug_COM, 'S');
    1826:	2153      	movs	r1, #83	; 0x53
    1828:	0028      	movs	r0, r5
    182a:	47a0      	blx	r4
	uTXByte(Debug_COM, 'H');
    182c:	2148      	movs	r1, #72	; 0x48
    182e:	0028      	movs	r0, r5
    1830:	47a0      	blx	r4
	uTXByte(Debug_COM, 'H');
    1832:	2148      	movs	r1, #72	; 0x48
    1834:	0028      	movs	r0, r5
    1836:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    1838:	2120      	movs	r1, #32
    183a:	0028      	movs	r0, r5
    183c:	47a0      	blx	r4
	uTXByte(Debug_COM, 'S');
    183e:	2153      	movs	r1, #83	; 0x53
    1840:	0028      	movs	r0, r5
    1842:	47a0      	blx	r4
	uTXByte(Debug_COM, 'y');
    1844:	2179      	movs	r1, #121	; 0x79
    1846:	0028      	movs	r0, r5
    1848:	47a0      	blx	r4
	uTXByte(Debug_COM, 's');
    184a:	2173      	movs	r1, #115	; 0x73
    184c:	0028      	movs	r0, r5
    184e:	47a0      	blx	r4
	uTXByte(Debug_COM, 't');
    1850:	2174      	movs	r1, #116	; 0x74
    1852:	0028      	movs	r0, r5
    1854:	47a0      	blx	r4
	uTXByte(Debug_COM, 'e');
    1856:	2165      	movs	r1, #101	; 0x65
    1858:	0028      	movs	r0, r5
    185a:	47a0      	blx	r4
	uTXByte(Debug_COM, 'm');
    185c:	216d      	movs	r1, #109	; 0x6d
    185e:	0028      	movs	r0, r5
    1860:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);
    1862:	210d      	movs	r1, #13
    1864:	0028      	movs	r0, r5
    1866:	47a0      	blx	r4
	Print_Line_Msg();
    1868:	4b05      	ldr	r3, [pc, #20]	; (1880 <Print_Start_Msg+0xa0>)
    186a:	4798      	blx	r3
	uTXByte(Debug_COM, 0x0d);
    186c:	210d      	movs	r1, #13
    186e:	0028      	movs	r0, r5
    1870:	47a0      	blx	r4
    1872:	e7ba      	b.n	17ea <Print_Start_Msg+0xa>
    1874:	2000414c 	.word	0x2000414c
    1878:	200040b4 	.word	0x200040b4
    187c:	00001da5 	.word	0x00001da5
    1880:	00001701 	.word	0x00001701

00001884 <Print_RSSI_Msg>:

void Print_RSSI_Msg(void)
{
    1884:	b570      	push	{r4, r5, r6, lr}
	uTXByte(Debug_COM, 'R');
    1886:	4c17      	ldr	r4, [pc, #92]	; (18e4 <Print_RSSI_Msg+0x60>)
    1888:	2152      	movs	r1, #82	; 0x52
    188a:	0020      	movs	r0, r4
    188c:	4d16      	ldr	r5, [pc, #88]	; (18e8 <Print_RSSI_Msg+0x64>)
    188e:	47a8      	blx	r5
	uTXByte(Debug_COM, 's');
    1890:	2173      	movs	r1, #115	; 0x73
    1892:	0020      	movs	r0, r4
    1894:	47a8      	blx	r5
	uTXByte(Debug_COM, 's');
    1896:	2173      	movs	r1, #115	; 0x73
    1898:	0020      	movs	r0, r4
    189a:	47a8      	blx	r5
	uTXByte(Debug_COM, 'i');
    189c:	2169      	movs	r1, #105	; 0x69
    189e:	0020      	movs	r0, r4
    18a0:	47a8      	blx	r5
	uTXByte(Debug_COM, ':');
    18a2:	213a      	movs	r1, #58	; 0x3a
    18a4:	0020      	movs	r0, r4
    18a6:	47a8      	blx	r5
	uTXByte(Debug_COM, ' ');
    18a8:	2120      	movs	r1, #32
    18aa:	0020      	movs	r0, r4
    18ac:	47a8      	blx	r5
	uTXByte(Debug_COM, '-');
    18ae:	212d      	movs	r1, #45	; 0x2d
    18b0:	0020      	movs	r0, r4
    18b2:	47a8      	blx	r5
	uart_send_word(Debug_COM, hex_to_bcd(RSSIValue));
    18b4:	4b0d      	ldr	r3, [pc, #52]	; (18ec <Print_RSSI_Msg+0x68>)
    18b6:	6818      	ldr	r0, [r3, #0]
    18b8:	4b0d      	ldr	r3, [pc, #52]	; (18f0 <Print_RSSI_Msg+0x6c>)
    18ba:	4798      	blx	r3
    18bc:	0001      	movs	r1, r0
    18be:	0020      	movs	r0, r4
    18c0:	4b0c      	ldr	r3, [pc, #48]	; (18f4 <Print_RSSI_Msg+0x70>)
    18c2:	4798      	blx	r3
	uTXByte(Debug_COM, ' ');
    18c4:	2120      	movs	r1, #32
    18c6:	0020      	movs	r0, r4
    18c8:	47a8      	blx	r5
	uTXByte(Debug_COM, 'd');
    18ca:	2164      	movs	r1, #100	; 0x64
    18cc:	0020      	movs	r0, r4
    18ce:	47a8      	blx	r5
	uTXByte(Debug_COM, 'B');
    18d0:	2142      	movs	r1, #66	; 0x42
    18d2:	0020      	movs	r0, r4
    18d4:	47a8      	blx	r5
	uTXByte(Debug_COM, 'm');
    18d6:	216d      	movs	r1, #109	; 0x6d
    18d8:	0020      	movs	r0, r4
    18da:	47a8      	blx	r5
	uTXByte(Debug_COM, 0x0d);
    18dc:	210d      	movs	r1, #13
    18de:	0020      	movs	r0, r4
    18e0:	47a8      	blx	r5
}
    18e2:	bd70      	pop	{r4, r5, r6, pc}
    18e4:	200040b4 	.word	0x200040b4
    18e8:	00001da5 	.word	0x00001da5
    18ec:	20004144 	.word	0x20004144
    18f0:	00001e3d 	.word	0x00001e3d
    18f4:	00001df1 	.word	0x00001df1

000018f8 <Print_Lora_RX_Count_Form_Module_Msg>:

void Print_Lora_RX_Count_Form_Module_Msg(void)
{
    18f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	UINT16u_t	tmp16;
	tmp16.word = Lora_RX_Count_Form_Module;
    18fa:	4b1a      	ldr	r3, [pc, #104]	; (1964 <Print_Lora_RX_Count_Form_Module_Msg+0x6c>)
    18fc:	681e      	ldr	r6, [r3, #0]
	uTXByte(Debug_COM, 'R');
    18fe:	4c1a      	ldr	r4, [pc, #104]	; (1968 <Print_Lora_RX_Count_Form_Module_Msg+0x70>)
    1900:	2152      	movs	r1, #82	; 0x52
    1902:	0020      	movs	r0, r4
    1904:	4d19      	ldr	r5, [pc, #100]	; (196c <Print_Lora_RX_Count_Form_Module_Msg+0x74>)
    1906:	47a8      	blx	r5
	uTXByte(Debug_COM, 'X');
    1908:	2158      	movs	r1, #88	; 0x58
    190a:	0020      	movs	r0, r4
    190c:	47a8      	blx	r5
	uTXByte(Debug_COM, ' ');
    190e:	2120      	movs	r1, #32
    1910:	0020      	movs	r0, r4
    1912:	47a8      	blx	r5
	uTXByte(Debug_COM, 'C');
    1914:	2143      	movs	r1, #67	; 0x43
    1916:	0020      	movs	r0, r4
    1918:	47a8      	blx	r5
	uTXByte(Debug_COM, 'o');
    191a:	216f      	movs	r1, #111	; 0x6f
    191c:	0020      	movs	r0, r4
    191e:	47a8      	blx	r5
	uTXByte(Debug_COM, 'u');
    1920:	2175      	movs	r1, #117	; 0x75
    1922:	0020      	movs	r0, r4
    1924:	47a8      	blx	r5
	uTXByte(Debug_COM, 'n');
    1926:	216e      	movs	r1, #110	; 0x6e
    1928:	0020      	movs	r0, r4
    192a:	47a8      	blx	r5
	uTXByte(Debug_COM, 't');
    192c:	2174      	movs	r1, #116	; 0x74
    192e:	0020      	movs	r0, r4
    1930:	47a8      	blx	r5
	uTXByte(Debug_COM, ':');
    1932:	213a      	movs	r1, #58	; 0x3a
    1934:	0020      	movs	r0, r4
    1936:	47a8      	blx	r5
	uTXByte(Debug_COM, ' ');
    1938:	2120      	movs	r1, #32
    193a:	0020      	movs	r0, r4
    193c:	47a8      	blx	r5
	uTXByte(Debug_COM, '0');
    193e:	2130      	movs	r1, #48	; 0x30
    1940:	0020      	movs	r0, r4
    1942:	47a8      	blx	r5
	uTXByte(Debug_COM, 'x');
    1944:	2178      	movs	r1, #120	; 0x78
    1946:	0020      	movs	r0, r4
    1948:	47a8      	blx	r5
	uart_send_ascii_byte(Debug_COM, tmp16.byte[1]);
    194a:	0431      	lsls	r1, r6, #16
    194c:	0e09      	lsrs	r1, r1, #24
    194e:	0020      	movs	r0, r4
    1950:	4f07      	ldr	r7, [pc, #28]	; (1970 <Print_Lora_RX_Count_Form_Module_Msg+0x78>)
    1952:	47b8      	blx	r7
	uart_send_ascii_byte(Debug_COM, tmp16.byte[0]);
    1954:	b2f1      	uxtb	r1, r6
    1956:	0020      	movs	r0, r4
    1958:	47b8      	blx	r7
	uTXByte(Debug_COM, 0x0d);
    195a:	210d      	movs	r1, #13
    195c:	0020      	movs	r0, r4
    195e:	47a8      	blx	r5
}
    1960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1962:	46c0      	nop			; (mov r8, r8)
    1964:	200040a8 	.word	0x200040a8
    1968:	200040b4 	.word	0x200040b4
    196c:	00001da5 	.word	0x00001da5
    1970:	00001dc5 	.word	0x00001dc5

00001974 <Print_Debug_Mode_ON_Msg>:



void Print_Debug_Mode_ON_Msg(void)
{
    1974:	b570      	push	{r4, r5, r6, lr}
	Print_Line_Msg();
    1976:	4e10      	ldr	r6, [pc, #64]	; (19b8 <Print_Debug_Mode_ON_Msg+0x44>)
    1978:	47b0      	blx	r6
	uTXByte(Debug_COM, 'D');
    197a:	4d10      	ldr	r5, [pc, #64]	; (19bc <Print_Debug_Mode_ON_Msg+0x48>)
    197c:	2144      	movs	r1, #68	; 0x44
    197e:	0028      	movs	r0, r5
    1980:	4c0f      	ldr	r4, [pc, #60]	; (19c0 <Print_Debug_Mode_ON_Msg+0x4c>)
    1982:	47a0      	blx	r4
	uTXByte(Debug_COM, 'e');
    1984:	2165      	movs	r1, #101	; 0x65
    1986:	0028      	movs	r0, r5
    1988:	47a0      	blx	r4
	uTXByte(Debug_COM, 'B');
    198a:	2142      	movs	r1, #66	; 0x42
    198c:	0028      	movs	r0, r5
    198e:	47a0      	blx	r4
	uTXByte(Debug_COM, 'u');
    1990:	2175      	movs	r1, #117	; 0x75
    1992:	0028      	movs	r0, r5
    1994:	47a0      	blx	r4
	uTXByte(Debug_COM, 'g');
    1996:	2167      	movs	r1, #103	; 0x67
    1998:	0028      	movs	r0, r5
    199a:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    199c:	2120      	movs	r1, #32
    199e:	0028      	movs	r0, r5
    19a0:	47a0      	blx	r4
	uTXByte(Debug_COM, 'O');
    19a2:	214f      	movs	r1, #79	; 0x4f
    19a4:	0028      	movs	r0, r5
    19a6:	47a0      	blx	r4
	uTXByte(Debug_COM, 'N');
    19a8:	214e      	movs	r1, #78	; 0x4e
    19aa:	0028      	movs	r0, r5
    19ac:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);
    19ae:	210d      	movs	r1, #13
    19b0:	0028      	movs	r0, r5
    19b2:	47a0      	blx	r4
	Print_Line_Msg();
    19b4:	47b0      	blx	r6
}
    19b6:	bd70      	pop	{r4, r5, r6, pc}
    19b8:	00001701 	.word	0x00001701
    19bc:	200040b4 	.word	0x200040b4
    19c0:	00001da5 	.word	0x00001da5

000019c4 <Print_Debug_Mode_OFF_Msg>:

void Print_Debug_Mode_OFF_Msg(void)
{
    19c4:	b570      	push	{r4, r5, r6, lr}
	Print_Line_Msg();
    19c6:	4e12      	ldr	r6, [pc, #72]	; (1a10 <Print_Debug_Mode_OFF_Msg+0x4c>)
    19c8:	47b0      	blx	r6
	uTXByte(Debug_COM, 'D');
    19ca:	4d12      	ldr	r5, [pc, #72]	; (1a14 <Print_Debug_Mode_OFF_Msg+0x50>)
    19cc:	2144      	movs	r1, #68	; 0x44
    19ce:	0028      	movs	r0, r5
    19d0:	4c11      	ldr	r4, [pc, #68]	; (1a18 <Print_Debug_Mode_OFF_Msg+0x54>)
    19d2:	47a0      	blx	r4
	uTXByte(Debug_COM, 'e');
    19d4:	2165      	movs	r1, #101	; 0x65
    19d6:	0028      	movs	r0, r5
    19d8:	47a0      	blx	r4
	uTXByte(Debug_COM, 'B');
    19da:	2142      	movs	r1, #66	; 0x42
    19dc:	0028      	movs	r0, r5
    19de:	47a0      	blx	r4
	uTXByte(Debug_COM, 'u');
    19e0:	2175      	movs	r1, #117	; 0x75
    19e2:	0028      	movs	r0, r5
    19e4:	47a0      	blx	r4
	uTXByte(Debug_COM, 'g');
    19e6:	2167      	movs	r1, #103	; 0x67
    19e8:	0028      	movs	r0, r5
    19ea:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    19ec:	2120      	movs	r1, #32
    19ee:	0028      	movs	r0, r5
    19f0:	47a0      	blx	r4
	uTXByte(Debug_COM, 'O');
    19f2:	214f      	movs	r1, #79	; 0x4f
    19f4:	0028      	movs	r0, r5
    19f6:	47a0      	blx	r4
	uTXByte(Debug_COM, 'F');
    19f8:	2146      	movs	r1, #70	; 0x46
    19fa:	0028      	movs	r0, r5
    19fc:	47a0      	blx	r4
	uTXByte(Debug_COM, 'F');
    19fe:	2146      	movs	r1, #70	; 0x46
    1a00:	0028      	movs	r0, r5
    1a02:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);
    1a04:	210d      	movs	r1, #13
    1a06:	0028      	movs	r0, r5
    1a08:	47a0      	blx	r4
	Print_Line_Msg();
    1a0a:	47b0      	blx	r6
}
    1a0c:	bd70      	pop	{r4, r5, r6, pc}
    1a0e:	46c0      	nop			; (mov r8, r8)
    1a10:	00001701 	.word	0x00001701
    1a14:	200040b4 	.word	0x200040b4
    1a18:	00001da5 	.word	0x00001da5

00001a1c <Print_Wait_TX_Finish_Msg>:

void Print_Wait_TX_Finish_Msg(void)
{
    1a1c:	b570      	push	{r4, r5, r6, lr}
	if(Lora_Debug_Flag == 0) return;
    1a1e:	4b16      	ldr	r3, [pc, #88]	; (1a78 <Print_Wait_TX_Finish_Msg+0x5c>)
    1a20:	781b      	ldrb	r3, [r3, #0]
    1a22:	071b      	lsls	r3, r3, #28
    1a24:	d400      	bmi.n	1a28 <Print_Wait_TX_Finish_Msg+0xc>
	uTXByte(Debug_COM, ' ');
	uTXByte(Debug_COM, 'I');
	uTXByte(Debug_COM, 'R');
	uTXByte(Debug_COM, 'Q');
	uTXByte(Debug_COM, 0x0d);
}
    1a26:	bd70      	pop	{r4, r5, r6, pc}
	uTXByte(Debug_COM, 'W');
    1a28:	4d14      	ldr	r5, [pc, #80]	; (1a7c <Print_Wait_TX_Finish_Msg+0x60>)
    1a2a:	2157      	movs	r1, #87	; 0x57
    1a2c:	0028      	movs	r0, r5
    1a2e:	4c14      	ldr	r4, [pc, #80]	; (1a80 <Print_Wait_TX_Finish_Msg+0x64>)
    1a30:	47a0      	blx	r4
	uTXByte(Debug_COM, 'a');
    1a32:	2161      	movs	r1, #97	; 0x61
    1a34:	0028      	movs	r0, r5
    1a36:	47a0      	blx	r4
	uTXByte(Debug_COM, 'i');
    1a38:	2169      	movs	r1, #105	; 0x69
    1a3a:	0028      	movs	r0, r5
    1a3c:	47a0      	blx	r4
	uTXByte(Debug_COM, 'T');
    1a3e:	2154      	movs	r1, #84	; 0x54
    1a40:	0028      	movs	r0, r5
    1a42:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    1a44:	2120      	movs	r1, #32
    1a46:	0028      	movs	r0, r5
    1a48:	47a0      	blx	r4
	uTXByte(Debug_COM, 'T');
    1a4a:	2154      	movs	r1, #84	; 0x54
    1a4c:	0028      	movs	r0, r5
    1a4e:	47a0      	blx	r4
	uTXByte(Debug_COM, 'X');
    1a50:	2158      	movs	r1, #88	; 0x58
    1a52:	0028      	movs	r0, r5
    1a54:	47a0      	blx	r4
	uTXByte(Debug_COM, ' ');
    1a56:	2120      	movs	r1, #32
    1a58:	0028      	movs	r0, r5
    1a5a:	47a0      	blx	r4
	uTXByte(Debug_COM, 'I');
    1a5c:	2149      	movs	r1, #73	; 0x49
    1a5e:	0028      	movs	r0, r5
    1a60:	47a0      	blx	r4
	uTXByte(Debug_COM, 'R');
    1a62:	2152      	movs	r1, #82	; 0x52
    1a64:	0028      	movs	r0, r5
    1a66:	47a0      	blx	r4
	uTXByte(Debug_COM, 'Q');
    1a68:	2151      	movs	r1, #81	; 0x51
    1a6a:	0028      	movs	r0, r5
    1a6c:	47a0      	blx	r4
	uTXByte(Debug_COM, 0x0d);
    1a6e:	210d      	movs	r1, #13
    1a70:	0028      	movs	r0, r5
    1a72:	47a0      	blx	r4
    1a74:	e7d7      	b.n	1a26 <Print_Wait_TX_Finish_Msg+0xa>
    1a76:	46c0      	nop			; (mov r8, r8)
    1a78:	2000414c 	.word	0x2000414c
    1a7c:	200040b4 	.word	0x200040b4
    1a80:	00001da5 	.word	0x00001da5

00001a84 <tc_callback_to_to_period_100us>:



void tc_callback_to_to_period_100us(struct tc_module *const module_inst)
{
	if(f_count < 6000)
    1a84:	4b04      	ldr	r3, [pc, #16]	; (1a98 <tc_callback_to_to_period_100us+0x14>)
    1a86:	681a      	ldr	r2, [r3, #0]
    1a88:	4b04      	ldr	r3, [pc, #16]	; (1a9c <tc_callback_to_to_period_100us+0x18>)
    1a8a:	429a      	cmp	r2, r3
    1a8c:	d803      	bhi.n	1a96 <tc_callback_to_to_period_100us+0x12>
	{
		f_count++;
    1a8e:	4a02      	ldr	r2, [pc, #8]	; (1a98 <tc_callback_to_to_period_100us+0x14>)
    1a90:	6813      	ldr	r3, [r2, #0]
    1a92:	3301      	adds	r3, #1
    1a94:	6013      	str	r3, [r2, #0]
	}
}
    1a96:	4770      	bx	lr
    1a98:	200042dc 	.word	0x200042dc
    1a9c:	0000176f 	.word	0x0000176f

00001aa0 <configure_tc>:

//! [setup]
void configure_tc(void)
{
    1aa0:	b570      	push	{r4, r5, r6, lr}
    1aa2:	b08e      	sub	sp, #56	; 0x38
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    1aa4:	ac01      	add	r4, sp, #4
    1aa6:	2300      	movs	r3, #0
    1aa8:	2200      	movs	r2, #0
    1aaa:	70a3      	strb	r3, [r4, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    1aac:	8123      	strh	r3, [r4, #8]
	config->run_in_standby             = false;
    1aae:	2100      	movs	r1, #0
    1ab0:	7061      	strb	r1, [r4, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    1ab2:	72a2      	strb	r2, [r4, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    1ab4:	72e2      	strb	r2, [r4, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    1ab6:	7322      	strb	r2, [r4, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    1ab8:	73a2      	strb	r2, [r4, #14]
	config->oneshot                    = false;
    1aba:	7362      	strb	r2, [r4, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    1abc:	7422      	strb	r2, [r4, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    1abe:	6163      	str	r3, [r4, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    1ac0:	61a3      	str	r3, [r4, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    1ac2:	7722      	strb	r2, [r4, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    1ac4:	6223      	str	r3, [r4, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    1ac6:	6263      	str	r3, [r4, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    1ac8:	8523      	strh	r3, [r4, #40]	; 0x28
	//! [setup_config_defaults]
	tc_get_config_defaults(&config_tc);
	//! [setup_config_defaults]

	//! [setup_change_config]
	config_tc.clock_source    = GCLK_GENERATOR_1;
    1aca:	3301      	adds	r3, #1
    1acc:	7023      	strb	r3, [r4, #0]
	config_tc.counter_size    = TC_COUNTER_SIZE_16BIT;
	config_tc.clock_prescaler  =TC_CLOCK_PRESCALER_DIV4;
    1ace:	2380      	movs	r3, #128	; 0x80
    1ad0:	009b      	lsls	r3, r3, #2
    1ad2:	80a3      	strh	r3, [r4, #4]
	config_tc.wave_generation = TC_WAVE_GENERATION_MATCH_FREQ;
    1ad4:	3be1      	subs	r3, #225	; 0xe1
    1ad6:	3bff      	subs	r3, #255	; 0xff
    1ad8:	71a3      	strb	r3, [r4, #6]
	config_tc.counter_16_bit.compare_capture_channel[0] = 50;
    1ada:	3312      	adds	r3, #18
    1adc:	8563      	strh	r3, [r4, #42]	; 0x2a
	config_tc.counter_16_bit.compare_capture_channel[1] = 50;
    1ade:	85a3      	strh	r3, [r4, #44]	; 0x2c
	//! [setup_change_config_pwm]

	//! [setup_set_config]
	tc_init(&MyTimer01, TC1, &config_tc);
    1ae0:	4d0f      	ldr	r5, [pc, #60]	; (1b20 <configure_tc+0x80>)
    1ae2:	0022      	movs	r2, r4
    1ae4:	490f      	ldr	r1, [pc, #60]	; (1b24 <configure_tc+0x84>)
    1ae6:	0028      	movs	r0, r5
    1ae8:	4e0f      	ldr	r6, [pc, #60]	; (1b28 <configure_tc+0x88>)
    1aea:	47b0      	blx	r6
	tc_init(&MyTimer02, TC2, &config_tc);
    1aec:	0022      	movs	r2, r4
    1aee:	490f      	ldr	r1, [pc, #60]	; (1b2c <configure_tc+0x8c>)
    1af0:	480f      	ldr	r0, [pc, #60]	; (1b30 <configure_tc+0x90>)
    1af2:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1af4:	682a      	ldr	r2, [r5, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1af6:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    1af8:	b25b      	sxtb	r3, r3
    1afa:	2b00      	cmp	r3, #0
    1afc:	dbfb      	blt.n	1af6 <configure_tc+0x56>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    1afe:	8813      	ldrh	r3, [r2, #0]
    1b00:	2102      	movs	r1, #2
    1b02:	430b      	orrs	r3, r1
    1b04:	8013      	strh	r3, [r2, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1b06:	4b0a      	ldr	r3, [pc, #40]	; (1b30 <configure_tc+0x90>)
    1b08:	681a      	ldr	r2, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1b0a:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1b0c:	b25b      	sxtb	r3, r3
    1b0e:	2b00      	cmp	r3, #0
    1b10:	dbfb      	blt.n	1b0a <configure_tc+0x6a>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    1b12:	8813      	ldrh	r3, [r2, #0]
    1b14:	2102      	movs	r1, #2
    1b16:	430b      	orrs	r3, r1
    1b18:	8013      	strh	r3, [r2, #0]
	
	tc_enable(&MyTimer01);
	tc_enable(&MyTimer02);
	//! [setup_enable]
	
}
    1b1a:	b00e      	add	sp, #56	; 0x38
    1b1c:	bd70      	pop	{r4, r5, r6, pc}
    1b1e:	46c0      	nop			; (mov r8, r8)
    1b20:	20004258 	.word	0x20004258
    1b24:	42002400 	.word	0x42002400
    1b28:	000006f1 	.word	0x000006f1
    1b2c:	42002800 	.word	0x42002800
    1b30:	200040d8 	.word	0x200040d8

00001b34 <configure_tc_callbacks>:
//! [setup]
void configure_tc_callbacks(void)
{
    1b34:	b510      	push	{r4, lr}
	tc_register_callback(&MyTimer02, tc_callback_to_to_period_100us, TC_CALLBACK_CC_CHANNEL1);
    1b36:	4c0c      	ldr	r4, [pc, #48]	; (1b68 <configure_tc_callbacks+0x34>)
    1b38:	2203      	movs	r2, #3
    1b3a:	490c      	ldr	r1, [pc, #48]	; (1b6c <configure_tc_callbacks+0x38>)
    1b3c:	0020      	movs	r0, r4
    1b3e:	4b0c      	ldr	r3, [pc, #48]	; (1b70 <configure_tc_callbacks+0x3c>)
    1b40:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    1b42:	6820      	ldr	r0, [r4, #0]
    1b44:	4b0b      	ldr	r3, [pc, #44]	; (1b74 <configure_tc_callbacks+0x40>)
    1b46:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    1b48:	4b0b      	ldr	r3, [pc, #44]	; (1b78 <configure_tc_callbacks+0x44>)
    1b4a:	5c1b      	ldrb	r3, [r3, r0]
    1b4c:	221f      	movs	r2, #31
    1b4e:	401a      	ands	r2, r3
    1b50:	2301      	movs	r3, #1
    1b52:	4093      	lsls	r3, r2
    1b54:	4a09      	ldr	r2, [pc, #36]	; (1b7c <configure_tc_callbacks+0x48>)
    1b56:	6013      	str	r3, [r2, #0]
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
    1b58:	7e63      	ldrb	r3, [r4, #25]
    1b5a:	2220      	movs	r2, #32
    1b5c:	4313      	orrs	r3, r2
    1b5e:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
    1b60:	6823      	ldr	r3, [r4, #0]
    1b62:	2220      	movs	r2, #32
    1b64:	735a      	strb	r2, [r3, #13]
	
	tc_enable_callback(&MyTimer02, TC_CALLBACK_CC_CHANNEL1);
}
    1b66:	bd10      	pop	{r4, pc}
    1b68:	200040d8 	.word	0x200040d8
    1b6c:	00001a85 	.word	0x00001a85
    1b70:	0000059d 	.word	0x0000059d
    1b74:	000006b5 	.word	0x000006b5
    1b78:	0000385c 	.word	0x0000385c
    1b7c:	e000e100 	.word	0xe000e100

00001b80 <timer_configure>:

void timer_configure(void)
{
    1b80:	b510      	push	{r4, lr}
	configure_tc();
    1b82:	4b02      	ldr	r3, [pc, #8]	; (1b8c <timer_configure+0xc>)
    1b84:	4798      	blx	r3
	configure_tc_callbacks();
    1b86:	4b02      	ldr	r3, [pc, #8]	; (1b90 <timer_configure+0x10>)
    1b88:	4798      	blx	r3
    1b8a:	bd10      	pop	{r4, pc}
    1b8c:	00001aa1 	.word	0x00001aa1
    1b90:	00001b35 	.word	0x00001b35

00001b94 <Uart_Form_SX1272_callback>:
//! [rx_buffer_var]

//! [callback_funcs]
void Uart_Form_SX1272_callback(struct usart_module *const usart_module)
{
	if(MyBufferCount <= UserRxCountMax)
    1b94:	4b06      	ldr	r3, [pc, #24]	; (1bb0 <Uart_Form_SX1272_callback+0x1c>)
    1b96:	781b      	ldrb	r3, [r3, #0]
    1b98:	4a06      	ldr	r2, [pc, #24]	; (1bb4 <Uart_Form_SX1272_callback+0x20>)
    1b9a:	7812      	ldrb	r2, [r2, #0]
    1b9c:	429a      	cmp	r2, r3
    1b9e:	d306      	bcc.n	1bae <Uart_Form_SX1272_callback+0x1a>
	{
		MyBuffer[MyBufferCount] = rx_buffer[0];
    1ba0:	4a05      	ldr	r2, [pc, #20]	; (1bb8 <Uart_Form_SX1272_callback+0x24>)
    1ba2:	7811      	ldrb	r1, [r2, #0]
    1ba4:	4a05      	ldr	r2, [pc, #20]	; (1bbc <Uart_Form_SX1272_callback+0x28>)
    1ba6:	54d1      	strb	r1, [r2, r3]
		MyBufferCount++;	
    1ba8:	3301      	adds	r3, #1
    1baa:	4a01      	ldr	r2, [pc, #4]	; (1bb0 <Uart_Form_SX1272_callback+0x1c>)
    1bac:	7013      	strb	r3, [r2, #0]
	}
}
    1bae:	4770      	bx	lr
    1bb0:	20004149 	.word	0x20004149
    1bb4:	20004305 	.word	0x20004305
    1bb8:	20004154 	.word	0x20004154
    1bbc:	200042bc 	.word	0x200042bc

00001bc0 <usart_read_callback>:



void usart_read_callback(struct usart_module *const usart_module)
{
	if(UserKeyInStauts == NOP)
    1bc0:	4b0b      	ldr	r3, [pc, #44]	; (1bf0 <usart_read_callback+0x30>)
    1bc2:	781b      	ldrb	r3, [r3, #0]
    1bc4:	2b00      	cmp	r3, #0
    1bc6:	d10e      	bne.n	1be6 <usart_read_callback+0x26>
	{
		if(UserKeyInBufCount < UserKeyInBufMax)
    1bc8:	4b0a      	ldr	r3, [pc, #40]	; (1bf4 <usart_read_callback+0x34>)
    1bca:	781b      	ldrb	r3, [r3, #0]
    1bcc:	2b1d      	cmp	r3, #29
    1bce:	d806      	bhi.n	1bde <usart_read_callback+0x1e>
		{
			UserKeyInBuf[UserKeyInBufCount] = user_rx_buffer[0];
    1bd0:	4a09      	ldr	r2, [pc, #36]	; (1bf8 <usart_read_callback+0x38>)
    1bd2:	7811      	ldrb	r1, [r2, #0]
    1bd4:	4a09      	ldr	r2, [pc, #36]	; (1bfc <usart_read_callback+0x3c>)
    1bd6:	54d1      	strb	r1, [r2, r3]
			UserKeyInBufCount++;
    1bd8:	3301      	adds	r3, #1
    1bda:	4a06      	ldr	r2, [pc, #24]	; (1bf4 <usart_read_callback+0x34>)
    1bdc:	7013      	strb	r3, [r2, #0]
		}
		if(user_rx_buffer[0] == 0x0d)
    1bde:	4b06      	ldr	r3, [pc, #24]	; (1bf8 <usart_read_callback+0x38>)
    1be0:	781b      	ldrb	r3, [r3, #0]
    1be2:	2b0d      	cmp	r3, #13
    1be4:	d000      	beq.n	1be8 <usart_read_callback+0x28>
		{
			UserKeyInStauts = UserKeyInEnterIndex;
		}
	}
}
    1be6:	4770      	bx	lr
			UserKeyInStauts = UserKeyInEnterIndex;
    1be8:	2201      	movs	r2, #1
    1bea:	4b01      	ldr	r3, [pc, #4]	; (1bf0 <usart_read_callback+0x30>)
    1bec:	701a      	strb	r2, [r3, #0]
}
    1bee:	e7fa      	b.n	1be6 <usart_read_callback+0x26>
    1bf0:	2000414e 	.word	0x2000414e
    1bf4:	20004148 	.word	0x20004148
    1bf8:	200040b0 	.word	0x200040b0
    1bfc:	2000411c 	.word	0x2000411c

00001c00 <configure_usart>:
}
//! [callback_funcs]

//! [setup]
void configure_usart(void)
{
    1c00:	b530      	push	{r4, r5, lr}
    1c02:	b08d      	sub	sp, #52	; 0x34
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1c04:	2380      	movs	r3, #128	; 0x80
    1c06:	05db      	lsls	r3, r3, #23
    1c08:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1c0a:	2300      	movs	r3, #0
    1c0c:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    1c0e:	22ff      	movs	r2, #255	; 0xff
    1c10:	4669      	mov	r1, sp
    1c12:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1c14:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1c16:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    1c18:	2201      	movs	r2, #1
    1c1a:	750a      	strb	r2, [r1, #20]
	config->transmitter_enable = true;
    1c1c:	754a      	strb	r2, [r1, #21]
	config->clock_polarity_inverted = false;
    1c1e:	758b      	strb	r3, [r1, #22]
	config->use_external_clock = false;
    1c20:	75cb      	strb	r3, [r1, #23]
	config->ext_clock_freq   = 0;
    1c22:	9306      	str	r3, [sp, #24]
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1c24:	770b      	strb	r3, [r1, #28]
	config->generator_source = GCLK_GENERATOR_0;
    1c26:	774b      	strb	r3, [r1, #29]
	//! [setup_config_defaults]
	usart_get_config_defaults(&config_usart);
	//! [setup_config_defaults]

	//! [setup_change_config]
	config_usart.baudrate    = 115200;
    1c28:	23e1      	movs	r3, #225	; 0xe1
    1c2a:	025b      	lsls	r3, r3, #9
    1c2c:	9304      	str	r3, [sp, #16]
	config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;
    1c2e:	23c4      	movs	r3, #196	; 0xc4
    1c30:	039b      	lsls	r3, r3, #14
    1c32:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_UNUSED;
    1c34:	2301      	movs	r3, #1
    1c36:	425b      	negs	r3, r3
    1c38:	9308      	str	r3, [sp, #32]
	config_usart.pinmux_pad1 = PINMUX_UNUSED;
    1c3a:	9309      	str	r3, [sp, #36]	; 0x24
	config_usart.pinmux_pad2 = PINMUX_PA24C_SERCOM3_PAD2;
    1c3c:	4b3a      	ldr	r3, [pc, #232]	; (1d28 <configure_usart+0x128>)
    1c3e:	930a      	str	r3, [sp, #40]	; 0x28
	config_usart.pinmux_pad3 = PINMUX_PA25C_SERCOM3_PAD3;
    1c40:	4b3a      	ldr	r3, [pc, #232]	; (1d2c <configure_usart+0x12c>)
    1c42:	930b      	str	r3, [sp, #44]	; 0x2c
	//! [setup_change_config]

	//! [setup_set_config]
	while (usart_init(&MyUart01,
    1c44:	4d3a      	ldr	r5, [pc, #232]	; (1d30 <configure_usart+0x130>)
    1c46:	4c3b      	ldr	r4, [pc, #236]	; (1d34 <configure_usart+0x134>)
    1c48:	466a      	mov	r2, sp
    1c4a:	493b      	ldr	r1, [pc, #236]	; (1d38 <configure_usart+0x138>)
    1c4c:	0028      	movs	r0, r5
    1c4e:	47a0      	blx	r4
    1c50:	2800      	cmp	r0, #0
    1c52:	d1f9      	bne.n	1c48 <configure_usart+0x48>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1c54:	4d36      	ldr	r5, [pc, #216]	; (1d30 <configure_usart+0x130>)
    1c56:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1c58:	0020      	movs	r0, r4
    1c5a:	4b38      	ldr	r3, [pc, #224]	; (1d3c <configure_usart+0x13c>)
    1c5c:	4798      	blx	r3
    1c5e:	231f      	movs	r3, #31
    1c60:	4018      	ands	r0, r3
    1c62:	3b1e      	subs	r3, #30
    1c64:	4083      	lsls	r3, r0
    1c66:	4a36      	ldr	r2, [pc, #216]	; (1d40 <configure_usart+0x140>)
    1c68:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1c6a:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    1c6c:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
    1c6e:	b21b      	sxth	r3, r3
    1c70:	2b00      	cmp	r3, #0
    1c72:	dbfb      	blt.n	1c6c <configure_usart+0x6c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1c74:	6823      	ldr	r3, [r4, #0]
    1c76:	2202      	movs	r2, #2
    1c78:	4313      	orrs	r3, r2
    1c7a:	6023      	str	r3, [r4, #0]
	//! [setup_enable]
	usart_enable(&MyUart01);
	//! [setup_enable]

	//! [setup_change_config]
	config_usart.baudrate    = 115200;
    1c7c:	23e1      	movs	r3, #225	; 0xe1
    1c7e:	025b      	lsls	r3, r3, #9
    1c80:	9304      	str	r3, [sp, #16]
	config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;
    1c82:	23c4      	movs	r3, #196	; 0xc4
    1c84:	039b      	lsls	r3, r3, #14
    1c86:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_UNUSED;
    1c88:	2301      	movs	r3, #1
    1c8a:	425b      	negs	r3, r3
    1c8c:	9308      	str	r3, [sp, #32]
	config_usart.pinmux_pad1 = PINMUX_UNUSED;
    1c8e:	9309      	str	r3, [sp, #36]	; 0x24
	config_usart.pinmux_pad2 = PINMUX_PA18C_SERCOM1_PAD2;
    1c90:	4b2c      	ldr	r3, [pc, #176]	; (1d44 <configure_usart+0x144>)
    1c92:	930a      	str	r3, [sp, #40]	; 0x28
	config_usart.pinmux_pad3 = PINMUX_PA19C_SERCOM1_PAD3;
    1c94:	4b2c      	ldr	r3, [pc, #176]	; (1d48 <configure_usart+0x148>)
    1c96:	930b      	str	r3, [sp, #44]	; 0x2c
	//! [setup_change_config]

	//! [setup_set_config]
	while (usart_init(&MyUart02,
    1c98:	4d2c      	ldr	r5, [pc, #176]	; (1d4c <configure_usart+0x14c>)
    1c9a:	4c26      	ldr	r4, [pc, #152]	; (1d34 <configure_usart+0x134>)
    1c9c:	466a      	mov	r2, sp
    1c9e:	492c      	ldr	r1, [pc, #176]	; (1d50 <configure_usart+0x150>)
    1ca0:	0028      	movs	r0, r5
    1ca2:	47a0      	blx	r4
    1ca4:	2800      	cmp	r0, #0
    1ca6:	d1f9      	bne.n	1c9c <configure_usart+0x9c>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1ca8:	4d28      	ldr	r5, [pc, #160]	; (1d4c <configure_usart+0x14c>)
    1caa:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1cac:	0020      	movs	r0, r4
    1cae:	4b23      	ldr	r3, [pc, #140]	; (1d3c <configure_usart+0x13c>)
    1cb0:	4798      	blx	r3
    1cb2:	231f      	movs	r3, #31
    1cb4:	4018      	ands	r0, r3
    1cb6:	3b1e      	subs	r3, #30
    1cb8:	4083      	lsls	r3, r0
    1cba:	4a21      	ldr	r2, [pc, #132]	; (1d40 <configure_usart+0x140>)
    1cbc:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1cbe:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    1cc0:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
    1cc2:	b21b      	sxth	r3, r3
    1cc4:	2b00      	cmp	r3, #0
    1cc6:	dbfb      	blt.n	1cc0 <configure_usart+0xc0>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1cc8:	6823      	ldr	r3, [r4, #0]
    1cca:	2202      	movs	r2, #2
    1ccc:	4313      	orrs	r3, r2
    1cce:	6023      	str	r3, [r4, #0]
	//! [setup_enable]
	usart_enable(&MyUart02);
	//! [setup_enable]
	
	//! [setup_change_config]
	config_usart.baudrate    = 115200;
    1cd0:	23e1      	movs	r3, #225	; 0xe1
    1cd2:	025b      	lsls	r3, r3, #9
    1cd4:	9304      	str	r3, [sp, #16]
	config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;
    1cd6:	23c4      	movs	r3, #196	; 0xc4
    1cd8:	039b      	lsls	r3, r3, #14
    1cda:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_UNUSED;
    1cdc:	2301      	movs	r3, #1
    1cde:	425b      	negs	r3, r3
    1ce0:	9308      	str	r3, [sp, #32]
	config_usart.pinmux_pad1 = PINMUX_UNUSED;
    1ce2:	9309      	str	r3, [sp, #36]	; 0x24
	config_usart.pinmux_pad2 = PINMUX_PA14C_SERCOM2_PAD2;
    1ce4:	4b1b      	ldr	r3, [pc, #108]	; (1d54 <configure_usart+0x154>)
    1ce6:	930a      	str	r3, [sp, #40]	; 0x28
	config_usart.pinmux_pad3 = PINMUX_PA15C_SERCOM2_PAD3;
    1ce8:	4b1b      	ldr	r3, [pc, #108]	; (1d58 <configure_usart+0x158>)
    1cea:	930b      	str	r3, [sp, #44]	; 0x2c
	//! [setup_change_config]

	//! [setup_set_config]
	while (usart_init(&MyUart03,
    1cec:	4d1b      	ldr	r5, [pc, #108]	; (1d5c <configure_usart+0x15c>)
    1cee:	4c11      	ldr	r4, [pc, #68]	; (1d34 <configure_usart+0x134>)
    1cf0:	466a      	mov	r2, sp
    1cf2:	491b      	ldr	r1, [pc, #108]	; (1d60 <configure_usart+0x160>)
    1cf4:	0028      	movs	r0, r5
    1cf6:	47a0      	blx	r4
    1cf8:	2800      	cmp	r0, #0
    1cfa:	d1f9      	bne.n	1cf0 <configure_usart+0xf0>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1cfc:	4d17      	ldr	r5, [pc, #92]	; (1d5c <configure_usart+0x15c>)
    1cfe:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1d00:	0020      	movs	r0, r4
    1d02:	4b0e      	ldr	r3, [pc, #56]	; (1d3c <configure_usart+0x13c>)
    1d04:	4798      	blx	r3
    1d06:	231f      	movs	r3, #31
    1d08:	4018      	ands	r0, r3
    1d0a:	3b1e      	subs	r3, #30
    1d0c:	4083      	lsls	r3, r0
    1d0e:	4a0c      	ldr	r2, [pc, #48]	; (1d40 <configure_usart+0x140>)
    1d10:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1d12:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    1d14:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
    1d16:	b21b      	sxth	r3, r3
    1d18:	2b00      	cmp	r3, #0
    1d1a:	dbfb      	blt.n	1d14 <configure_usart+0x114>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1d1c:	6823      	ldr	r3, [r4, #0]
    1d1e:	2202      	movs	r2, #2
    1d20:	4313      	orrs	r3, r2
    1d22:	6023      	str	r3, [r4, #0]

	//! [setup_enable]
	usart_enable(&MyUart04);
	//! [setup_enable]
	*/
}
    1d24:	b00d      	add	sp, #52	; 0x34
    1d26:	bd30      	pop	{r4, r5, pc}
    1d28:	00180002 	.word	0x00180002
    1d2c:	00190002 	.word	0x00190002
    1d30:	200040f8 	.word	0x200040f8
    1d34:	000024cd 	.word	0x000024cd
    1d38:	42001400 	.word	0x42001400
    1d3c:	0000243d 	.word	0x0000243d
    1d40:	e000e100 	.word	0xe000e100
    1d44:	00120002 	.word	0x00120002
    1d48:	00130002 	.word	0x00130002
    1d4c:	200040b4 	.word	0x200040b4
    1d50:	42000c00 	.word	0x42000c00
    1d54:	000e0002 	.word	0x000e0002
    1d58:	000f0002 	.word	0x000f0002
    1d5c:	200042e0 	.word	0x200042e0
    1d60:	42001000 	.word	0x42001000

00001d64 <configure_usart_callbacks>:

void configure_usart_callbacks(void)
{
    1d64:	b570      	push	{r4, r5, r6, lr}
//			usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
//	usart_register_callback(&MyUart01,
//			usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
	
		
	usart_register_callback(&MyUart02,
    1d66:	4d0a      	ldr	r5, [pc, #40]	; (1d90 <configure_usart_callbacks+0x2c>)
    1d68:	2201      	movs	r2, #1
    1d6a:	490a      	ldr	r1, [pc, #40]	; (1d94 <configure_usart_callbacks+0x30>)
    1d6c:	0028      	movs	r0, r5
    1d6e:	4e0a      	ldr	r6, [pc, #40]	; (1d98 <configure_usart_callbacks+0x34>)
    1d70:	47b0      	blx	r6
			usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
	usart_register_callback(&MyUart03,
    1d72:	4c0a      	ldr	r4, [pc, #40]	; (1d9c <configure_usart_callbacks+0x38>)
    1d74:	2201      	movs	r2, #1
    1d76:	490a      	ldr	r1, [pc, #40]	; (1da0 <configure_usart_callbacks+0x3c>)
    1d78:	0020      	movs	r0, r4
    1d7a:	47b0      	blx	r6
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    1d7c:	2321      	movs	r3, #33	; 0x21
    1d7e:	2002      	movs	r0, #2
    1d80:	5ce9      	ldrb	r1, [r5, r3]
    1d82:	4301      	orrs	r1, r0
    1d84:	54e9      	strb	r1, [r5, r3]
    1d86:	5ce2      	ldrb	r2, [r4, r3]
    1d88:	4302      	orrs	r2, r0
    1d8a:	54e2      	strb	r2, [r4, r3]
	
//	usart_enable_callback(&MyUart03, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable_callback(&MyUart02, USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&MyUart03, USART_CALLBACK_BUFFER_RECEIVED);
	//! [setup_enable_callbacks]
}
    1d8c:	bd70      	pop	{r4, r5, r6, pc}
    1d8e:	46c0      	nop			; (mov r8, r8)
    1d90:	200040b4 	.word	0x200040b4
    1d94:	00001bc1 	.word	0x00001bc1
    1d98:	0000278d 	.word	0x0000278d
    1d9c:	200042e0 	.word	0x200042e0
    1da0:	00001b95 	.word	0x00001b95

00001da4 <uTXByte>:
	uTXByte(usart_module, hex_to_ascii(tmp8.HL.L));
}


void uTXByte(struct usart_module *const usart_module, uint8_t tmp_data)
{
    1da4:	b510      	push	{r4, lr}
	usart_write_wait(usart_module, tmp_data);
    1da6:	b289      	uxth	r1, r1
    1da8:	4b01      	ldr	r3, [pc, #4]	; (1db0 <uTXByte+0xc>)
    1daa:	4798      	blx	r3
}
    1dac:	bd10      	pop	{r4, pc}
    1dae:	46c0      	nop			; (mov r8, r8)
    1db0:	00002721 	.word	0x00002721

00001db4 <hex_to_ascii>:

unsigned char hex_to_ascii(unsigned char tmp)
{
	if(tmp > 9)
    1db4:	2809      	cmp	r0, #9
    1db6:	d802      	bhi.n	1dbe <hex_to_ascii+0xa>
	{
		return (tmp + 0x37);
	}
	else
	{
		return (tmp + 0x30);
    1db8:	3030      	adds	r0, #48	; 0x30
    1dba:	b2c0      	uxtb	r0, r0
	}
}
    1dbc:	4770      	bx	lr
		return (tmp + 0x37);
    1dbe:	3037      	adds	r0, #55	; 0x37
    1dc0:	b2c0      	uxtb	r0, r0
    1dc2:	e7fb      	b.n	1dbc <hex_to_ascii+0x8>

00001dc4 <uart_send_ascii_byte>:
{
    1dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1dc6:	0005      	movs	r5, r0
    1dc8:	000c      	movs	r4, r1
	uTXByte(usart_module, hex_to_ascii(tmp8.HL.H));
    1dca:	0908      	lsrs	r0, r1, #4
    1dcc:	4f06      	ldr	r7, [pc, #24]	; (1de8 <uart_send_ascii_byte+0x24>)
    1dce:	47b8      	blx	r7
	usart_write_wait(usart_module, tmp_data);
    1dd0:	b281      	uxth	r1, r0
    1dd2:	0028      	movs	r0, r5
    1dd4:	4e05      	ldr	r6, [pc, #20]	; (1dec <uart_send_ascii_byte+0x28>)
    1dd6:	47b0      	blx	r6
	uTXByte(usart_module, hex_to_ascii(tmp8.HL.L));
    1dd8:	0720      	lsls	r0, r4, #28
    1dda:	0f00      	lsrs	r0, r0, #28
    1ddc:	47b8      	blx	r7
	usart_write_wait(usart_module, tmp_data);
    1dde:	b281      	uxth	r1, r0
    1de0:	0028      	movs	r0, r5
    1de2:	47b0      	blx	r6
}
    1de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1de6:	46c0      	nop			; (mov r8, r8)
    1de8:	00001db5 	.word	0x00001db5
    1dec:	00002721 	.word	0x00002721

00001df0 <uart_send_word>:
{
    1df0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1df2:	b083      	sub	sp, #12
    1df4:	9001      	str	r0, [sp, #4]
    1df6:	000c      	movs	r4, r1
	tmp8.byte = tmp16.byte[1];
    1df8:	0408      	lsls	r0, r1, #16
	uTXByte(usart_module, hex_to_ascii(tmp8.HL.H));
    1dfa:	0e06      	lsrs	r6, r0, #24
    1dfc:	0f00      	lsrs	r0, r0, #28
    1dfe:	4d0d      	ldr	r5, [pc, #52]	; (1e34 <uart_send_word+0x44>)
    1e00:	47a8      	blx	r5
	usart_write_wait(usart_module, tmp_data);
    1e02:	b281      	uxth	r1, r0
    1e04:	9801      	ldr	r0, [sp, #4]
    1e06:	4f0c      	ldr	r7, [pc, #48]	; (1e38 <uart_send_word+0x48>)
    1e08:	47b8      	blx	r7
	uTXByte(usart_module, hex_to_ascii(tmp8.HL.L));
    1e0a:	0730      	lsls	r0, r6, #28
    1e0c:	0f00      	lsrs	r0, r0, #28
    1e0e:	47a8      	blx	r5
	usart_write_wait(usart_module, tmp_data);
    1e10:	b281      	uxth	r1, r0
    1e12:	9801      	ldr	r0, [sp, #4]
    1e14:	47b8      	blx	r7
	uTXByte(usart_module, hex_to_ascii(tmp8.HL.H));
    1e16:	0620      	lsls	r0, r4, #24
    1e18:	0f00      	lsrs	r0, r0, #28
    1e1a:	47a8      	blx	r5
	usart_write_wait(usart_module, tmp_data);
    1e1c:	b281      	uxth	r1, r0
    1e1e:	9801      	ldr	r0, [sp, #4]
    1e20:	47b8      	blx	r7
	uTXByte(usart_module, hex_to_ascii(tmp8.HL.L));
    1e22:	0720      	lsls	r0, r4, #28
    1e24:	0f00      	lsrs	r0, r0, #28
    1e26:	47a8      	blx	r5
	usart_write_wait(usart_module, tmp_data);
    1e28:	b281      	uxth	r1, r0
    1e2a:	9801      	ldr	r0, [sp, #4]
    1e2c:	47b8      	blx	r7
}
    1e2e:	b003      	add	sp, #12
    1e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e32:	46c0      	nop			; (mov r8, r8)
    1e34:	00001db5 	.word	0x00001db5
    1e38:	00002721 	.word	0x00002721

00001e3c <hex_to_bcd>:



unsigned int hex_to_bcd(unsigned int tmp)
{
    1e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e3e:	46ce      	mov	lr, r9
    1e40:	b500      	push	{lr}
    1e42:	b082      	sub	sp, #8
    1e44:	0006      	movs	r6, r0
	UINT16u_t	tmp16;
	UINT8u_t	tmp8;

	tmp8.HL.H = tmp / 1000;
    1e46:	4b17      	ldr	r3, [pc, #92]	; (1ea4 <hex_to_bcd+0x68>)
    1e48:	4699      	mov	r9, r3
    1e4a:	21fa      	movs	r1, #250	; 0xfa
    1e4c:	0089      	lsls	r1, r1, #2
    1e4e:	4798      	blx	r3
    1e50:	270f      	movs	r7, #15
    1e52:	0104      	lsls	r4, r0, #4
	tmp8.HL.L = (tmp % 1000) / 100;
    1e54:	4d14      	ldr	r5, [pc, #80]	; (1ea8 <hex_to_bcd+0x6c>)
    1e56:	21fa      	movs	r1, #250	; 0xfa
    1e58:	0089      	lsls	r1, r1, #2
    1e5a:	0030      	movs	r0, r6
    1e5c:	47a8      	blx	r5
    1e5e:	000b      	movs	r3, r1
    1e60:	2164      	movs	r1, #100	; 0x64
    1e62:	9301      	str	r3, [sp, #4]
    1e64:	0018      	movs	r0, r3
    1e66:	47c8      	blx	r9
    1e68:	4038      	ands	r0, r7
    1e6a:	4304      	orrs	r4, r0
	tmp16.byte[1] = tmp8.byte;
    1e6c:	b2e6      	uxtb	r6, r4
    1e6e:	0236      	lsls	r6, r6, #8
	
	tmp8.HL.H = ((tmp % 1000) % 100 ) / 10;
    1e70:	2164      	movs	r1, #100	; 0x64
    1e72:	9801      	ldr	r0, [sp, #4]
    1e74:	47a8      	blx	r5
    1e76:	000b      	movs	r3, r1
    1e78:	210a      	movs	r1, #10
    1e7a:	9301      	str	r3, [sp, #4]
    1e7c:	0018      	movs	r0, r3
    1e7e:	47c8      	blx	r9
    1e80:	0100      	lsls	r0, r0, #4
    1e82:	403c      	ands	r4, r7
    1e84:	4304      	orrs	r4, r0
	tmp8.HL.L = ((tmp % 1000) % 100 ) % 10;
    1e86:	210a      	movs	r1, #10
    1e88:	9801      	ldr	r0, [sp, #4]
    1e8a:	47a8      	blx	r5
    1e8c:	0038      	movs	r0, r7
    1e8e:	4008      	ands	r0, r1
    1e90:	230f      	movs	r3, #15
    1e92:	439c      	bics	r4, r3
    1e94:	4320      	orrs	r0, r4
	tmp16.byte[0] = tmp8.byte;
    1e96:	b2c0      	uxtb	r0, r0
	return tmp16.word;
    1e98:	4330      	orrs	r0, r6
    1e9a:	b002      	add	sp, #8
    1e9c:	bc04      	pop	{r2}
    1e9e:	4691      	mov	r9, r2
    1ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ea2:	46c0      	nop			; (mov r8, r8)
    1ea4:	00003395 	.word	0x00003395
    1ea8:	000034a1 	.word	0x000034a1

00001eac <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    1eac:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    1eae:	2000      	movs	r0, #0
    1eb0:	4b08      	ldr	r3, [pc, #32]	; (1ed4 <delay_init+0x28>)
    1eb2:	4798      	blx	r3
    1eb4:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    1eb6:	4c08      	ldr	r4, [pc, #32]	; (1ed8 <delay_init+0x2c>)
    1eb8:	21fa      	movs	r1, #250	; 0xfa
    1eba:	0089      	lsls	r1, r1, #2
    1ebc:	47a0      	blx	r4
    1ebe:	4b07      	ldr	r3, [pc, #28]	; (1edc <delay_init+0x30>)
    1ec0:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    1ec2:	4907      	ldr	r1, [pc, #28]	; (1ee0 <delay_init+0x34>)
    1ec4:	0028      	movs	r0, r5
    1ec6:	47a0      	blx	r4
    1ec8:	4b06      	ldr	r3, [pc, #24]	; (1ee4 <delay_init+0x38>)
    1eca:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1ecc:	2205      	movs	r2, #5
    1ece:	4b06      	ldr	r3, [pc, #24]	; (1ee8 <delay_init+0x3c>)
    1ed0:	601a      	str	r2, [r3, #0]
}
    1ed2:	bd70      	pop	{r4, r5, r6, pc}
    1ed4:	00002c25 	.word	0x00002c25
    1ed8:	00003395 	.word	0x00003395
    1edc:	200001c0 	.word	0x200001c0
    1ee0:	000f4240 	.word	0x000f4240
    1ee4:	200001c4 	.word	0x200001c4
    1ee8:	e000e010 	.word	0xe000e010

00001eec <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    1eec:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    1eee:	4b08      	ldr	r3, [pc, #32]	; (1f10 <delay_cycles_us+0x24>)
    1ef0:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    1ef2:	4a08      	ldr	r2, [pc, #32]	; (1f14 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    1ef4:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1ef6:	2180      	movs	r1, #128	; 0x80
    1ef8:	0249      	lsls	r1, r1, #9
	while (n--) {
    1efa:	3801      	subs	r0, #1
    1efc:	d307      	bcc.n	1f0e <delay_cycles_us+0x22>
	if (n > 0) {
    1efe:	2c00      	cmp	r4, #0
    1f00:	d0fb      	beq.n	1efa <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    1f02:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    1f04:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1f06:	6813      	ldr	r3, [r2, #0]
    1f08:	420b      	tst	r3, r1
    1f0a:	d0fc      	beq.n	1f06 <delay_cycles_us+0x1a>
    1f0c:	e7f5      	b.n	1efa <delay_cycles_us+0xe>
	}
}
    1f0e:	bd30      	pop	{r4, r5, pc}
    1f10:	200001c4 	.word	0x200001c4
    1f14:	e000e010 	.word	0xe000e010

00001f18 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1f18:	4b0c      	ldr	r3, [pc, #48]	; (1f4c <cpu_irq_enter_critical+0x34>)
    1f1a:	681b      	ldr	r3, [r3, #0]
    1f1c:	2b00      	cmp	r3, #0
    1f1e:	d106      	bne.n	1f2e <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1f20:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1f24:	2b00      	cmp	r3, #0
    1f26:	d007      	beq.n	1f38 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1f28:	2200      	movs	r2, #0
    1f2a:	4b09      	ldr	r3, [pc, #36]	; (1f50 <cpu_irq_enter_critical+0x38>)
    1f2c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1f2e:	4a07      	ldr	r2, [pc, #28]	; (1f4c <cpu_irq_enter_critical+0x34>)
    1f30:	6813      	ldr	r3, [r2, #0]
    1f32:	3301      	adds	r3, #1
    1f34:	6013      	str	r3, [r2, #0]
}
    1f36:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1f38:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1f3a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1f3e:	2200      	movs	r2, #0
    1f40:	4b04      	ldr	r3, [pc, #16]	; (1f54 <cpu_irq_enter_critical+0x3c>)
    1f42:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1f44:	3201      	adds	r2, #1
    1f46:	4b02      	ldr	r3, [pc, #8]	; (1f50 <cpu_irq_enter_critical+0x38>)
    1f48:	701a      	strb	r2, [r3, #0]
    1f4a:	e7f0      	b.n	1f2e <cpu_irq_enter_critical+0x16>
    1f4c:	200001f0 	.word	0x200001f0
    1f50:	200001f4 	.word	0x200001f4
    1f54:	200001c8 	.word	0x200001c8

00001f58 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1f58:	4b08      	ldr	r3, [pc, #32]	; (1f7c <cpu_irq_leave_critical+0x24>)
    1f5a:	681a      	ldr	r2, [r3, #0]
    1f5c:	3a01      	subs	r2, #1
    1f5e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1f60:	681b      	ldr	r3, [r3, #0]
    1f62:	2b00      	cmp	r3, #0
    1f64:	d109      	bne.n	1f7a <cpu_irq_leave_critical+0x22>
    1f66:	4b06      	ldr	r3, [pc, #24]	; (1f80 <cpu_irq_leave_critical+0x28>)
    1f68:	781b      	ldrb	r3, [r3, #0]
    1f6a:	2b00      	cmp	r3, #0
    1f6c:	d005      	beq.n	1f7a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1f6e:	2201      	movs	r2, #1
    1f70:	4b04      	ldr	r3, [pc, #16]	; (1f84 <cpu_irq_leave_critical+0x2c>)
    1f72:	701a      	strb	r2, [r3, #0]
    1f74:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1f78:	b662      	cpsie	i
	}
}
    1f7a:	4770      	bx	lr
    1f7c:	200001f0 	.word	0x200001f0
    1f80:	200001f4 	.word	0x200001f4
    1f84:	200001c8 	.word	0x200001c8

00001f88 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1f88:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f8a:	46c6      	mov	lr, r8
    1f8c:	b500      	push	{lr}
    1f8e:	b082      	sub	sp, #8
	config->input_pull = PORT_PIN_PULL_UP;
    1f90:	ac01      	add	r4, sp, #4
    1f92:	2701      	movs	r7, #1
    1f94:	7067      	strb	r7, [r4, #1]
	config->powersave  = false;
    1f96:	2300      	movs	r3, #0
    1f98:	4698      	mov	r8, r3
    1f9a:	70a3      	strb	r3, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
	
	/* Configure LEDs as outputs, turn them off */
	
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1f9c:	7027      	strb	r7, [r4, #0]
	//	RGB LED PIN DEFINE
	port_pin_set_config(PIN_PA23, &pin_conf);
    1f9e:	0021      	movs	r1, r4
    1fa0:	2017      	movs	r0, #23
    1fa2:	4e2e      	ldr	r6, [pc, #184]	; (205c <STACK_SIZE+0x5c>)
    1fa4:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    1fa6:	4d2e      	ldr	r5, [pc, #184]	; (2060 <STACK_SIZE+0x60>)
    1fa8:	2380      	movs	r3, #128	; 0x80
    1faa:	041b      	lsls	r3, r3, #16
    1fac:	61ab      	str	r3, [r5, #24]
	port_pin_set_output_level(PIN_PA23, true);
	port_pin_set_config(PIN_PA27, &pin_conf);
    1fae:	0021      	movs	r1, r4
    1fb0:	201b      	movs	r0, #27
    1fb2:	47b0      	blx	r6
    1fb4:	2380      	movs	r3, #128	; 0x80
    1fb6:	051b      	lsls	r3, r3, #20
    1fb8:	61ab      	str	r3, [r5, #24]
	port_pin_set_output_level(PIN_PA27, true);
	port_pin_set_config(PIN_PA28, &pin_conf);
    1fba:	0021      	movs	r1, r4
    1fbc:	201c      	movs	r0, #28
    1fbe:	47b0      	blx	r6
    1fc0:	2380      	movs	r3, #128	; 0x80
    1fc2:	055b      	lsls	r3, r3, #21
    1fc4:	61ab      	str	r3, [r5, #24]
	port_pin_set_output_level(PIN_PA28, true);


	//	LCM PIN DEFINE	
	port_pin_set_config(PIN_PA02, &pin_conf);
    1fc6:	0021      	movs	r1, r4
    1fc8:	2002      	movs	r0, #2
    1fca:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    1fcc:	2304      	movs	r3, #4
    1fce:	616b      	str	r3, [r5, #20]
	port_pin_set_output_level(PIN_PA02, false);
	port_pin_set_config(PIN_PA03, &pin_conf);
    1fd0:	0021      	movs	r1, r4
    1fd2:	2003      	movs	r0, #3
    1fd4:	47b0      	blx	r6
    1fd6:	2308      	movs	r3, #8
    1fd8:	616b      	str	r3, [r5, #20]
	port_pin_set_output_level(PIN_PA03, false);
	port_pin_set_config(PIN_PA04, &pin_conf);
    1fda:	0021      	movs	r1, r4
    1fdc:	2004      	movs	r0, #4
    1fde:	47b0      	blx	r6
    1fe0:	2310      	movs	r3, #16
    1fe2:	616b      	str	r3, [r5, #20]
	port_pin_set_output_level(PIN_PA04, false);
	port_pin_set_config(PIN_PA05, &pin_conf);
    1fe4:	0021      	movs	r1, r4
    1fe6:	2005      	movs	r0, #5
    1fe8:	47b0      	blx	r6
    1fea:	2320      	movs	r3, #32
    1fec:	616b      	str	r3, [r5, #20]
	port_pin_set_output_level(PIN_PA05, false);
	port_pin_set_config(PIN_PA06, &pin_conf);
    1fee:	0021      	movs	r1, r4
    1ff0:	2006      	movs	r0, #6
    1ff2:	47b0      	blx	r6
    1ff4:	2340      	movs	r3, #64	; 0x40
    1ff6:	616b      	str	r3, [r5, #20]
	port_pin_set_output_level(PIN_PA06, false);
	port_pin_set_config(PIN_PA07, &pin_conf);
    1ff8:	0021      	movs	r1, r4
    1ffa:	2007      	movs	r0, #7
    1ffc:	47b0      	blx	r6
    1ffe:	2380      	movs	r3, #128	; 0x80
    2000:	616b      	str	r3, [r5, #20]
	port_pin_set_output_level(PIN_PA07, false);
	port_pin_set_config(PIN_PA08, &pin_conf);
    2002:	0021      	movs	r1, r4
    2004:	2008      	movs	r0, #8
    2006:	47b0      	blx	r6
    2008:	2380      	movs	r3, #128	; 0x80
    200a:	005b      	lsls	r3, r3, #1
    200c:	616b      	str	r3, [r5, #20]
	port_pin_set_output_level(PIN_PA08, false);
	
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    200e:	4643      	mov	r3, r8
    2010:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(PIN_PA11, &pin_conf);
    2012:	0021      	movs	r1, r4
    2014:	200b      	movs	r0, #11
    2016:	47b0      	blx	r6
    2018:	2380      	movs	r3, #128	; 0x80
    201a:	011b      	lsls	r3, r3, #4
    201c:	616b      	str	r3, [r5, #20]
	port_pin_set_output_level(PIN_PA11, false);
	
	// DIP SWITCH 4
	port_pin_set_config(PIN_PA22, &pin_conf);
    201e:	0021      	movs	r1, r4
    2020:	2016      	movs	r0, #22
    2022:	47b0      	blx	r6
    2024:	2380      	movs	r3, #128	; 0x80
    2026:	03db      	lsls	r3, r3, #15
    2028:	616b      	str	r3, [r5, #20]
	port_pin_set_output_level(PIN_PA22, false);
	port_pin_set_config(PIN_PA17, &pin_conf);
    202a:	0021      	movs	r1, r4
    202c:	2011      	movs	r0, #17
    202e:	47b0      	blx	r6
    2030:	2380      	movs	r3, #128	; 0x80
    2032:	029b      	lsls	r3, r3, #10
    2034:	616b      	str	r3, [r5, #20]
	port_pin_set_output_level(PIN_PA17, false);
	port_pin_set_config(PIN_PA16, &pin_conf);
    2036:	0021      	movs	r1, r4
    2038:	2010      	movs	r0, #16
    203a:	47b0      	blx	r6
    203c:	2380      	movs	r3, #128	; 0x80
    203e:	025b      	lsls	r3, r3, #9
    2040:	616b      	str	r3, [r5, #20]
	port_pin_set_output_level(PIN_PA16, false);
	port_pin_set_config(PIN_PA01, &pin_conf);
    2042:	0021      	movs	r1, r4
    2044:	2001      	movs	r0, #1
    2046:	47b0      	blx	r6
    2048:	2302      	movs	r3, #2
    204a:	616b      	str	r3, [r5, #20]
	port_pin_set_output_level(PIN_PA01, false);

	// TACT SWITCH
	port_pin_set_config(PIN_PA00, &pin_conf);
    204c:	0021      	movs	r1, r4
    204e:	2000      	movs	r0, #0
    2050:	47b0      	blx	r6
    2052:	616f      	str	r7, [r5, #20]
	port_pin_set_output_level(PIN_PA00, false);

}
    2054:	b002      	add	sp, #8
    2056:	bc04      	pop	{r2}
    2058:	4690      	mov	r8, r2
    205a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    205c:	00002065 	.word	0x00002065
    2060:	41004400 	.word	0x41004400

00002064 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    2064:	b500      	push	{lr}
    2066:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2068:	ab01      	add	r3, sp, #4
    206a:	2280      	movs	r2, #128	; 0x80
    206c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    206e:	780a      	ldrb	r2, [r1, #0]
    2070:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    2072:	784a      	ldrb	r2, [r1, #1]
    2074:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    2076:	788a      	ldrb	r2, [r1, #2]
    2078:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    207a:	0019      	movs	r1, r3
    207c:	4b01      	ldr	r3, [pc, #4]	; (2084 <port_pin_set_config+0x20>)
    207e:	4798      	blx	r3
}
    2080:	b003      	add	sp, #12
    2082:	bd00      	pop	{pc}
    2084:	00002e65 	.word	0x00002e65

00002088 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    2088:	b5f0      	push	{r4, r5, r6, r7, lr}
    208a:	46de      	mov	lr, fp
    208c:	4657      	mov	r7, sl
    208e:	464e      	mov	r6, r9
    2090:	4645      	mov	r5, r8
    2092:	b5e0      	push	{r5, r6, r7, lr}
    2094:	b087      	sub	sp, #28
    2096:	4680      	mov	r8, r0
    2098:	9104      	str	r1, [sp, #16]
    209a:	0016      	movs	r6, r2
    209c:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    209e:	2200      	movs	r2, #0
    20a0:	2300      	movs	r3, #0
    20a2:	2100      	movs	r1, #0
    20a4:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    20a6:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    20a8:	2001      	movs	r0, #1
    20aa:	0021      	movs	r1, r4
    20ac:	9600      	str	r6, [sp, #0]
    20ae:	9701      	str	r7, [sp, #4]
    20b0:	465c      	mov	r4, fp
    20b2:	9403      	str	r4, [sp, #12]
    20b4:	4644      	mov	r4, r8
    20b6:	9405      	str	r4, [sp, #20]
    20b8:	e013      	b.n	20e2 <long_division+0x5a>
    20ba:	2420      	movs	r4, #32
    20bc:	1a64      	subs	r4, r4, r1
    20be:	0005      	movs	r5, r0
    20c0:	40e5      	lsrs	r5, r4
    20c2:	46a8      	mov	r8, r5
    20c4:	e014      	b.n	20f0 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    20c6:	9c00      	ldr	r4, [sp, #0]
    20c8:	9d01      	ldr	r5, [sp, #4]
    20ca:	1b12      	subs	r2, r2, r4
    20cc:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    20ce:	465c      	mov	r4, fp
    20d0:	464d      	mov	r5, r9
    20d2:	432c      	orrs	r4, r5
    20d4:	46a3      	mov	fp, r4
    20d6:	9c03      	ldr	r4, [sp, #12]
    20d8:	4645      	mov	r5, r8
    20da:	432c      	orrs	r4, r5
    20dc:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    20de:	3901      	subs	r1, #1
    20e0:	d325      	bcc.n	212e <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    20e2:	2420      	movs	r4, #32
    20e4:	4264      	negs	r4, r4
    20e6:	190c      	adds	r4, r1, r4
    20e8:	d4e7      	bmi.n	20ba <long_division+0x32>
    20ea:	0005      	movs	r5, r0
    20ec:	40a5      	lsls	r5, r4
    20ee:	46a8      	mov	r8, r5
    20f0:	0004      	movs	r4, r0
    20f2:	408c      	lsls	r4, r1
    20f4:	46a1      	mov	r9, r4
		r = r << 1;
    20f6:	1892      	adds	r2, r2, r2
    20f8:	415b      	adcs	r3, r3
    20fa:	0014      	movs	r4, r2
    20fc:	001d      	movs	r5, r3
		if (n & bit_shift) {
    20fe:	9e05      	ldr	r6, [sp, #20]
    2100:	464f      	mov	r7, r9
    2102:	403e      	ands	r6, r7
    2104:	46b4      	mov	ip, r6
    2106:	9e04      	ldr	r6, [sp, #16]
    2108:	4647      	mov	r7, r8
    210a:	403e      	ands	r6, r7
    210c:	46b2      	mov	sl, r6
    210e:	4666      	mov	r6, ip
    2110:	4657      	mov	r7, sl
    2112:	433e      	orrs	r6, r7
    2114:	d003      	beq.n	211e <long_division+0x96>
			r |= 0x01;
    2116:	0006      	movs	r6, r0
    2118:	4326      	orrs	r6, r4
    211a:	0032      	movs	r2, r6
    211c:	002b      	movs	r3, r5
		if (r >= d) {
    211e:	9c00      	ldr	r4, [sp, #0]
    2120:	9d01      	ldr	r5, [sp, #4]
    2122:	429d      	cmp	r5, r3
    2124:	d8db      	bhi.n	20de <long_division+0x56>
    2126:	d1ce      	bne.n	20c6 <long_division+0x3e>
    2128:	4294      	cmp	r4, r2
    212a:	d8d8      	bhi.n	20de <long_division+0x56>
    212c:	e7cb      	b.n	20c6 <long_division+0x3e>
    212e:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    2130:	4658      	mov	r0, fp
    2132:	0019      	movs	r1, r3
    2134:	b007      	add	sp, #28
    2136:	bc3c      	pop	{r2, r3, r4, r5}
    2138:	4690      	mov	r8, r2
    213a:	4699      	mov	r9, r3
    213c:	46a2      	mov	sl, r4
    213e:	46ab      	mov	fp, r5
    2140:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002142 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    2142:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    2144:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2146:	2340      	movs	r3, #64	; 0x40
    2148:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    214a:	4281      	cmp	r1, r0
    214c:	d202      	bcs.n	2154 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    214e:	0018      	movs	r0, r3
    2150:	bd10      	pop	{r4, pc}
		baud_calculated++;
    2152:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    2154:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    2156:	1c63      	adds	r3, r4, #1
    2158:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    215a:	4288      	cmp	r0, r1
    215c:	d9f9      	bls.n	2152 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    215e:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    2160:	2cff      	cmp	r4, #255	; 0xff
    2162:	d8f4      	bhi.n	214e <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    2164:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    2166:	2300      	movs	r3, #0
    2168:	e7f1      	b.n	214e <_sercom_get_sync_baud_val+0xc>
	...

0000216c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    216c:	b5f0      	push	{r4, r5, r6, r7, lr}
    216e:	b083      	sub	sp, #12
    2170:	000f      	movs	r7, r1
    2172:	0016      	movs	r6, r2
    2174:	aa08      	add	r2, sp, #32
    2176:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    2178:	0004      	movs	r4, r0
    217a:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    217c:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    217e:	42bc      	cmp	r4, r7
    2180:	d902      	bls.n	2188 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    2182:	0010      	movs	r0, r2
    2184:	b003      	add	sp, #12
    2186:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    2188:	2b00      	cmp	r3, #0
    218a:	d114      	bne.n	21b6 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    218c:	0002      	movs	r2, r0
    218e:	0008      	movs	r0, r1
    2190:	2100      	movs	r1, #0
    2192:	4c19      	ldr	r4, [pc, #100]	; (21f8 <_sercom_get_async_baud_val+0x8c>)
    2194:	47a0      	blx	r4
    2196:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    2198:	003a      	movs	r2, r7
    219a:	2300      	movs	r3, #0
    219c:	2000      	movs	r0, #0
    219e:	4c17      	ldr	r4, [pc, #92]	; (21fc <_sercom_get_async_baud_val+0x90>)
    21a0:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    21a2:	2200      	movs	r2, #0
    21a4:	2301      	movs	r3, #1
    21a6:	1a12      	subs	r2, r2, r0
    21a8:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    21aa:	0c12      	lsrs	r2, r2, #16
    21ac:	041b      	lsls	r3, r3, #16
    21ae:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    21b0:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    21b2:	2200      	movs	r2, #0
    21b4:	e7e5      	b.n	2182 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    21b6:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    21b8:	2b01      	cmp	r3, #1
    21ba:	d1f9      	bne.n	21b0 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    21bc:	000a      	movs	r2, r1
    21be:	2300      	movs	r3, #0
    21c0:	2100      	movs	r1, #0
    21c2:	4c0d      	ldr	r4, [pc, #52]	; (21f8 <_sercom_get_async_baud_val+0x8c>)
    21c4:	47a0      	blx	r4
    21c6:	0002      	movs	r2, r0
    21c8:	000b      	movs	r3, r1
    21ca:	9200      	str	r2, [sp, #0]
    21cc:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    21ce:	0038      	movs	r0, r7
    21d0:	2100      	movs	r1, #0
    21d2:	4c0a      	ldr	r4, [pc, #40]	; (21fc <_sercom_get_async_baud_val+0x90>)
    21d4:	47a0      	blx	r4
    21d6:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    21d8:	2380      	movs	r3, #128	; 0x80
    21da:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    21dc:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    21de:	4298      	cmp	r0, r3
    21e0:	d8cf      	bhi.n	2182 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    21e2:	0f79      	lsrs	r1, r7, #29
    21e4:	00f8      	lsls	r0, r7, #3
    21e6:	9a00      	ldr	r2, [sp, #0]
    21e8:	9b01      	ldr	r3, [sp, #4]
    21ea:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    21ec:	00ea      	lsls	r2, r5, #3
    21ee:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    21f0:	b2d2      	uxtb	r2, r2
    21f2:	0352      	lsls	r2, r2, #13
    21f4:	432a      	orrs	r2, r5
    21f6:	e7db      	b.n	21b0 <_sercom_get_async_baud_val+0x44>
    21f8:	000034ad 	.word	0x000034ad
    21fc:	00002089 	.word	0x00002089

00002200 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    2200:	b510      	push	{r4, lr}
    2202:	b082      	sub	sp, #8
    2204:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    2206:	4b0e      	ldr	r3, [pc, #56]	; (2240 <sercom_set_gclk_generator+0x40>)
    2208:	781b      	ldrb	r3, [r3, #0]
    220a:	2b00      	cmp	r3, #0
    220c:	d007      	beq.n	221e <sercom_set_gclk_generator+0x1e>
    220e:	2900      	cmp	r1, #0
    2210:	d105      	bne.n	221e <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    2212:	4b0b      	ldr	r3, [pc, #44]	; (2240 <sercom_set_gclk_generator+0x40>)
    2214:	785b      	ldrb	r3, [r3, #1]
    2216:	4283      	cmp	r3, r0
    2218:	d010      	beq.n	223c <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    221a:	201d      	movs	r0, #29
    221c:	e00c      	b.n	2238 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    221e:	a901      	add	r1, sp, #4
    2220:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    2222:	200c      	movs	r0, #12
    2224:	4b07      	ldr	r3, [pc, #28]	; (2244 <sercom_set_gclk_generator+0x44>)
    2226:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    2228:	200c      	movs	r0, #12
    222a:	4b07      	ldr	r3, [pc, #28]	; (2248 <sercom_set_gclk_generator+0x48>)
    222c:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    222e:	4b04      	ldr	r3, [pc, #16]	; (2240 <sercom_set_gclk_generator+0x40>)
    2230:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    2232:	2201      	movs	r2, #1
    2234:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    2236:	2000      	movs	r0, #0
}
    2238:	b002      	add	sp, #8
    223a:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    223c:	2000      	movs	r0, #0
    223e:	e7fb      	b.n	2238 <sercom_set_gclk_generator+0x38>
    2240:	200001f8 	.word	0x200001f8
    2244:	00002d3d 	.word	0x00002d3d
    2248:	00002cb1 	.word	0x00002cb1

0000224c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    224c:	4b40      	ldr	r3, [pc, #256]	; (2350 <_sercom_get_default_pad+0x104>)
    224e:	4298      	cmp	r0, r3
    2250:	d031      	beq.n	22b6 <_sercom_get_default_pad+0x6a>
    2252:	d90a      	bls.n	226a <_sercom_get_default_pad+0x1e>
    2254:	4b3f      	ldr	r3, [pc, #252]	; (2354 <_sercom_get_default_pad+0x108>)
    2256:	4298      	cmp	r0, r3
    2258:	d04d      	beq.n	22f6 <_sercom_get_default_pad+0xaa>
    225a:	4b3f      	ldr	r3, [pc, #252]	; (2358 <_sercom_get_default_pad+0x10c>)
    225c:	4298      	cmp	r0, r3
    225e:	d05a      	beq.n	2316 <_sercom_get_default_pad+0xca>
    2260:	4b3e      	ldr	r3, [pc, #248]	; (235c <_sercom_get_default_pad+0x110>)
    2262:	4298      	cmp	r0, r3
    2264:	d037      	beq.n	22d6 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    2266:	2000      	movs	r0, #0
}
    2268:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    226a:	4b3d      	ldr	r3, [pc, #244]	; (2360 <_sercom_get_default_pad+0x114>)
    226c:	4298      	cmp	r0, r3
    226e:	d00c      	beq.n	228a <_sercom_get_default_pad+0x3e>
    2270:	4b3c      	ldr	r3, [pc, #240]	; (2364 <_sercom_get_default_pad+0x118>)
    2272:	4298      	cmp	r0, r3
    2274:	d1f7      	bne.n	2266 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2276:	2901      	cmp	r1, #1
    2278:	d017      	beq.n	22aa <_sercom_get_default_pad+0x5e>
    227a:	2900      	cmp	r1, #0
    227c:	d05d      	beq.n	233a <_sercom_get_default_pad+0xee>
    227e:	2902      	cmp	r1, #2
    2280:	d015      	beq.n	22ae <_sercom_get_default_pad+0x62>
    2282:	2903      	cmp	r1, #3
    2284:	d015      	beq.n	22b2 <_sercom_get_default_pad+0x66>
	return 0;
    2286:	2000      	movs	r0, #0
    2288:	e7ee      	b.n	2268 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    228a:	2901      	cmp	r1, #1
    228c:	d007      	beq.n	229e <_sercom_get_default_pad+0x52>
    228e:	2900      	cmp	r1, #0
    2290:	d051      	beq.n	2336 <_sercom_get_default_pad+0xea>
    2292:	2902      	cmp	r1, #2
    2294:	d005      	beq.n	22a2 <_sercom_get_default_pad+0x56>
    2296:	2903      	cmp	r1, #3
    2298:	d005      	beq.n	22a6 <_sercom_get_default_pad+0x5a>
	return 0;
    229a:	2000      	movs	r0, #0
    229c:	e7e4      	b.n	2268 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    229e:	4832      	ldr	r0, [pc, #200]	; (2368 <_sercom_get_default_pad+0x11c>)
    22a0:	e7e2      	b.n	2268 <_sercom_get_default_pad+0x1c>
    22a2:	4832      	ldr	r0, [pc, #200]	; (236c <_sercom_get_default_pad+0x120>)
    22a4:	e7e0      	b.n	2268 <_sercom_get_default_pad+0x1c>
    22a6:	4832      	ldr	r0, [pc, #200]	; (2370 <_sercom_get_default_pad+0x124>)
    22a8:	e7de      	b.n	2268 <_sercom_get_default_pad+0x1c>
    22aa:	4832      	ldr	r0, [pc, #200]	; (2374 <_sercom_get_default_pad+0x128>)
    22ac:	e7dc      	b.n	2268 <_sercom_get_default_pad+0x1c>
    22ae:	4832      	ldr	r0, [pc, #200]	; (2378 <_sercom_get_default_pad+0x12c>)
    22b0:	e7da      	b.n	2268 <_sercom_get_default_pad+0x1c>
    22b2:	4832      	ldr	r0, [pc, #200]	; (237c <_sercom_get_default_pad+0x130>)
    22b4:	e7d8      	b.n	2268 <_sercom_get_default_pad+0x1c>
    22b6:	2901      	cmp	r1, #1
    22b8:	d007      	beq.n	22ca <_sercom_get_default_pad+0x7e>
    22ba:	2900      	cmp	r1, #0
    22bc:	d03f      	beq.n	233e <_sercom_get_default_pad+0xf2>
    22be:	2902      	cmp	r1, #2
    22c0:	d005      	beq.n	22ce <_sercom_get_default_pad+0x82>
    22c2:	2903      	cmp	r1, #3
    22c4:	d005      	beq.n	22d2 <_sercom_get_default_pad+0x86>
	return 0;
    22c6:	2000      	movs	r0, #0
    22c8:	e7ce      	b.n	2268 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    22ca:	482d      	ldr	r0, [pc, #180]	; (2380 <_sercom_get_default_pad+0x134>)
    22cc:	e7cc      	b.n	2268 <_sercom_get_default_pad+0x1c>
    22ce:	482d      	ldr	r0, [pc, #180]	; (2384 <_sercom_get_default_pad+0x138>)
    22d0:	e7ca      	b.n	2268 <_sercom_get_default_pad+0x1c>
    22d2:	482d      	ldr	r0, [pc, #180]	; (2388 <_sercom_get_default_pad+0x13c>)
    22d4:	e7c8      	b.n	2268 <_sercom_get_default_pad+0x1c>
    22d6:	2901      	cmp	r1, #1
    22d8:	d007      	beq.n	22ea <_sercom_get_default_pad+0x9e>
    22da:	2900      	cmp	r1, #0
    22dc:	d031      	beq.n	2342 <_sercom_get_default_pad+0xf6>
    22de:	2902      	cmp	r1, #2
    22e0:	d005      	beq.n	22ee <_sercom_get_default_pad+0xa2>
    22e2:	2903      	cmp	r1, #3
    22e4:	d005      	beq.n	22f2 <_sercom_get_default_pad+0xa6>
	return 0;
    22e6:	2000      	movs	r0, #0
    22e8:	e7be      	b.n	2268 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    22ea:	4828      	ldr	r0, [pc, #160]	; (238c <_sercom_get_default_pad+0x140>)
    22ec:	e7bc      	b.n	2268 <_sercom_get_default_pad+0x1c>
    22ee:	4828      	ldr	r0, [pc, #160]	; (2390 <_sercom_get_default_pad+0x144>)
    22f0:	e7ba      	b.n	2268 <_sercom_get_default_pad+0x1c>
    22f2:	4828      	ldr	r0, [pc, #160]	; (2394 <_sercom_get_default_pad+0x148>)
    22f4:	e7b8      	b.n	2268 <_sercom_get_default_pad+0x1c>
    22f6:	2901      	cmp	r1, #1
    22f8:	d007      	beq.n	230a <_sercom_get_default_pad+0xbe>
    22fa:	2900      	cmp	r1, #0
    22fc:	d023      	beq.n	2346 <_sercom_get_default_pad+0xfa>
    22fe:	2902      	cmp	r1, #2
    2300:	d005      	beq.n	230e <_sercom_get_default_pad+0xc2>
    2302:	2903      	cmp	r1, #3
    2304:	d005      	beq.n	2312 <_sercom_get_default_pad+0xc6>
	return 0;
    2306:	2000      	movs	r0, #0
    2308:	e7ae      	b.n	2268 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    230a:	4823      	ldr	r0, [pc, #140]	; (2398 <_sercom_get_default_pad+0x14c>)
    230c:	e7ac      	b.n	2268 <_sercom_get_default_pad+0x1c>
    230e:	4823      	ldr	r0, [pc, #140]	; (239c <_sercom_get_default_pad+0x150>)
    2310:	e7aa      	b.n	2268 <_sercom_get_default_pad+0x1c>
    2312:	4823      	ldr	r0, [pc, #140]	; (23a0 <_sercom_get_default_pad+0x154>)
    2314:	e7a8      	b.n	2268 <_sercom_get_default_pad+0x1c>
    2316:	2901      	cmp	r1, #1
    2318:	d007      	beq.n	232a <_sercom_get_default_pad+0xde>
    231a:	2900      	cmp	r1, #0
    231c:	d015      	beq.n	234a <_sercom_get_default_pad+0xfe>
    231e:	2902      	cmp	r1, #2
    2320:	d005      	beq.n	232e <_sercom_get_default_pad+0xe2>
    2322:	2903      	cmp	r1, #3
    2324:	d005      	beq.n	2332 <_sercom_get_default_pad+0xe6>
	return 0;
    2326:	2000      	movs	r0, #0
    2328:	e79e      	b.n	2268 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    232a:	481e      	ldr	r0, [pc, #120]	; (23a4 <_sercom_get_default_pad+0x158>)
    232c:	e79c      	b.n	2268 <_sercom_get_default_pad+0x1c>
    232e:	481e      	ldr	r0, [pc, #120]	; (23a8 <_sercom_get_default_pad+0x15c>)
    2330:	e79a      	b.n	2268 <_sercom_get_default_pad+0x1c>
    2332:	481e      	ldr	r0, [pc, #120]	; (23ac <_sercom_get_default_pad+0x160>)
    2334:	e798      	b.n	2268 <_sercom_get_default_pad+0x1c>
    2336:	481e      	ldr	r0, [pc, #120]	; (23b0 <_sercom_get_default_pad+0x164>)
    2338:	e796      	b.n	2268 <_sercom_get_default_pad+0x1c>
    233a:	2003      	movs	r0, #3
    233c:	e794      	b.n	2268 <_sercom_get_default_pad+0x1c>
    233e:	481d      	ldr	r0, [pc, #116]	; (23b4 <_sercom_get_default_pad+0x168>)
    2340:	e792      	b.n	2268 <_sercom_get_default_pad+0x1c>
    2342:	481d      	ldr	r0, [pc, #116]	; (23b8 <_sercom_get_default_pad+0x16c>)
    2344:	e790      	b.n	2268 <_sercom_get_default_pad+0x1c>
    2346:	481d      	ldr	r0, [pc, #116]	; (23bc <_sercom_get_default_pad+0x170>)
    2348:	e78e      	b.n	2268 <_sercom_get_default_pad+0x1c>
    234a:	481d      	ldr	r0, [pc, #116]	; (23c0 <_sercom_get_default_pad+0x174>)
    234c:	e78c      	b.n	2268 <_sercom_get_default_pad+0x1c>
    234e:	46c0      	nop			; (mov r8, r8)
    2350:	42001000 	.word	0x42001000
    2354:	42001800 	.word	0x42001800
    2358:	42001c00 	.word	0x42001c00
    235c:	42001400 	.word	0x42001400
    2360:	42000800 	.word	0x42000800
    2364:	42000c00 	.word	0x42000c00
    2368:	00050003 	.word	0x00050003
    236c:	00060003 	.word	0x00060003
    2370:	00070003 	.word	0x00070003
    2374:	00010003 	.word	0x00010003
    2378:	001e0003 	.word	0x001e0003
    237c:	001f0003 	.word	0x001f0003
    2380:	00090003 	.word	0x00090003
    2384:	000a0003 	.word	0x000a0003
    2388:	000b0003 	.word	0x000b0003
    238c:	00110003 	.word	0x00110003
    2390:	00120003 	.word	0x00120003
    2394:	00130003 	.word	0x00130003
    2398:	000d0003 	.word	0x000d0003
    239c:	000e0003 	.word	0x000e0003
    23a0:	000f0003 	.word	0x000f0003
    23a4:	00170003 	.word	0x00170003
    23a8:	00180003 	.word	0x00180003
    23ac:	00190003 	.word	0x00190003
    23b0:	00040003 	.word	0x00040003
    23b4:	00080003 	.word	0x00080003
    23b8:	00100003 	.word	0x00100003
    23bc:	000c0003 	.word	0x000c0003
    23c0:	00160003 	.word	0x00160003

000023c4 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    23c4:	b530      	push	{r4, r5, lr}
    23c6:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    23c8:	4b0b      	ldr	r3, [pc, #44]	; (23f8 <_sercom_get_sercom_inst_index+0x34>)
    23ca:	466a      	mov	r2, sp
    23cc:	cb32      	ldmia	r3!, {r1, r4, r5}
    23ce:	c232      	stmia	r2!, {r1, r4, r5}
    23d0:	cb32      	ldmia	r3!, {r1, r4, r5}
    23d2:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    23d4:	9b00      	ldr	r3, [sp, #0]
    23d6:	4283      	cmp	r3, r0
    23d8:	d00b      	beq.n	23f2 <_sercom_get_sercom_inst_index+0x2e>
    23da:	2301      	movs	r3, #1
    23dc:	009a      	lsls	r2, r3, #2
    23de:	4669      	mov	r1, sp
    23e0:	5852      	ldr	r2, [r2, r1]
    23e2:	4282      	cmp	r2, r0
    23e4:	d006      	beq.n	23f4 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    23e6:	3301      	adds	r3, #1
    23e8:	2b06      	cmp	r3, #6
    23ea:	d1f7      	bne.n	23dc <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    23ec:	2000      	movs	r0, #0
}
    23ee:	b007      	add	sp, #28
    23f0:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    23f2:	2300      	movs	r3, #0
			return i;
    23f4:	b2d8      	uxtb	r0, r3
    23f6:	e7fa      	b.n	23ee <_sercom_get_sercom_inst_index+0x2a>
    23f8:	00003864 	.word	0x00003864

000023fc <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    23fc:	4770      	bx	lr
	...

00002400 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    2400:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    2402:	4b0a      	ldr	r3, [pc, #40]	; (242c <_sercom_set_handler+0x2c>)
    2404:	781b      	ldrb	r3, [r3, #0]
    2406:	2b00      	cmp	r3, #0
    2408:	d10c      	bne.n	2424 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    240a:	4f09      	ldr	r7, [pc, #36]	; (2430 <_sercom_set_handler+0x30>)
    240c:	4e09      	ldr	r6, [pc, #36]	; (2434 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    240e:	4d0a      	ldr	r5, [pc, #40]	; (2438 <_sercom_set_handler+0x38>)
    2410:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2412:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    2414:	195a      	adds	r2, r3, r5
    2416:	6014      	str	r4, [r2, #0]
    2418:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    241a:	2b18      	cmp	r3, #24
    241c:	d1f9      	bne.n	2412 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    241e:	2201      	movs	r2, #1
    2420:	4b02      	ldr	r3, [pc, #8]	; (242c <_sercom_set_handler+0x2c>)
    2422:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2424:	0080      	lsls	r0, r0, #2
    2426:	4b02      	ldr	r3, [pc, #8]	; (2430 <_sercom_set_handler+0x30>)
    2428:	50c1      	str	r1, [r0, r3]
}
    242a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    242c:	200001fa 	.word	0x200001fa
    2430:	200001fc 	.word	0x200001fc
    2434:	000023fd 	.word	0x000023fd
    2438:	2000439c 	.word	0x2000439c

0000243c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    243c:	b500      	push	{lr}
    243e:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    2440:	2307      	movs	r3, #7
    2442:	466a      	mov	r2, sp
    2444:	7013      	strb	r3, [r2, #0]
    2446:	3301      	adds	r3, #1
    2448:	7053      	strb	r3, [r2, #1]
    244a:	3301      	adds	r3, #1
    244c:	7093      	strb	r3, [r2, #2]
    244e:	3301      	adds	r3, #1
    2450:	70d3      	strb	r3, [r2, #3]
    2452:	3301      	adds	r3, #1
    2454:	7113      	strb	r3, [r2, #4]
    2456:	3301      	adds	r3, #1
    2458:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    245a:	4b03      	ldr	r3, [pc, #12]	; (2468 <_sercom_get_interrupt_vector+0x2c>)
    245c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    245e:	466b      	mov	r3, sp
    2460:	5618      	ldrsb	r0, [r3, r0]
}
    2462:	b003      	add	sp, #12
    2464:	bd00      	pop	{pc}
    2466:	46c0      	nop			; (mov r8, r8)
    2468:	000023c5 	.word	0x000023c5

0000246c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    246c:	b510      	push	{r4, lr}
    246e:	4b02      	ldr	r3, [pc, #8]	; (2478 <SERCOM0_Handler+0xc>)
    2470:	681b      	ldr	r3, [r3, #0]
    2472:	2000      	movs	r0, #0
    2474:	4798      	blx	r3
    2476:	bd10      	pop	{r4, pc}
    2478:	200001fc 	.word	0x200001fc

0000247c <SERCOM1_Handler>:
    247c:	b510      	push	{r4, lr}
    247e:	4b02      	ldr	r3, [pc, #8]	; (2488 <SERCOM1_Handler+0xc>)
    2480:	685b      	ldr	r3, [r3, #4]
    2482:	2001      	movs	r0, #1
    2484:	4798      	blx	r3
    2486:	bd10      	pop	{r4, pc}
    2488:	200001fc 	.word	0x200001fc

0000248c <SERCOM2_Handler>:
    248c:	b510      	push	{r4, lr}
    248e:	4b02      	ldr	r3, [pc, #8]	; (2498 <SERCOM2_Handler+0xc>)
    2490:	689b      	ldr	r3, [r3, #8]
    2492:	2002      	movs	r0, #2
    2494:	4798      	blx	r3
    2496:	bd10      	pop	{r4, pc}
    2498:	200001fc 	.word	0x200001fc

0000249c <SERCOM3_Handler>:
    249c:	b510      	push	{r4, lr}
    249e:	4b02      	ldr	r3, [pc, #8]	; (24a8 <SERCOM3_Handler+0xc>)
    24a0:	68db      	ldr	r3, [r3, #12]
    24a2:	2003      	movs	r0, #3
    24a4:	4798      	blx	r3
    24a6:	bd10      	pop	{r4, pc}
    24a8:	200001fc 	.word	0x200001fc

000024ac <SERCOM4_Handler>:
    24ac:	b510      	push	{r4, lr}
    24ae:	4b02      	ldr	r3, [pc, #8]	; (24b8 <SERCOM4_Handler+0xc>)
    24b0:	691b      	ldr	r3, [r3, #16]
    24b2:	2004      	movs	r0, #4
    24b4:	4798      	blx	r3
    24b6:	bd10      	pop	{r4, pc}
    24b8:	200001fc 	.word	0x200001fc

000024bc <SERCOM5_Handler>:
    24bc:	b510      	push	{r4, lr}
    24be:	4b02      	ldr	r3, [pc, #8]	; (24c8 <SERCOM5_Handler+0xc>)
    24c0:	695b      	ldr	r3, [r3, #20]
    24c2:	2005      	movs	r0, #5
    24c4:	4798      	blx	r3
    24c6:	bd10      	pop	{r4, pc}
    24c8:	200001fc 	.word	0x200001fc

000024cc <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    24cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    24ce:	46de      	mov	lr, fp
    24d0:	4657      	mov	r7, sl
    24d2:	464e      	mov	r6, r9
    24d4:	4645      	mov	r5, r8
    24d6:	b5e0      	push	{r5, r6, r7, lr}
    24d8:	b08d      	sub	sp, #52	; 0x34
    24da:	0005      	movs	r5, r0
    24dc:	000c      	movs	r4, r1
    24de:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    24e0:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    24e2:	0008      	movs	r0, r1
    24e4:	4b80      	ldr	r3, [pc, #512]	; (26e8 <usart_init+0x21c>)
    24e6:	4798      	blx	r3
    24e8:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    24ea:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    24ec:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    24ee:	07db      	lsls	r3, r3, #31
    24f0:	d506      	bpl.n	2500 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    24f2:	b00d      	add	sp, #52	; 0x34
    24f4:	bc3c      	pop	{r2, r3, r4, r5}
    24f6:	4690      	mov	r8, r2
    24f8:	4699      	mov	r9, r3
    24fa:	46a2      	mov	sl, r4
    24fc:	46ab      	mov	fp, r5
    24fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2500:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    2502:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2504:	079b      	lsls	r3, r3, #30
    2506:	d4f4      	bmi.n	24f2 <usart_init+0x26>
			PM->APBCMASK.reg |= mask;
    2508:	4978      	ldr	r1, [pc, #480]	; (26ec <usart_init+0x220>)
    250a:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    250c:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    250e:	2301      	movs	r3, #1
    2510:	40bb      	lsls	r3, r7
    2512:	4303      	orrs	r3, r0
    2514:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    2516:	a90b      	add	r1, sp, #44	; 0x2c
    2518:	7f73      	ldrb	r3, [r6, #29]
    251a:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    251c:	320d      	adds	r2, #13
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    251e:	b2d7      	uxtb	r7, r2
    2520:	0038      	movs	r0, r7
    2522:	4b73      	ldr	r3, [pc, #460]	; (26f0 <usart_init+0x224>)
    2524:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2526:	0038      	movs	r0, r7
    2528:	4b72      	ldr	r3, [pc, #456]	; (26f4 <usart_init+0x228>)
    252a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    252c:	7f70      	ldrb	r0, [r6, #29]
    252e:	2100      	movs	r1, #0
    2530:	4b71      	ldr	r3, [pc, #452]	; (26f8 <usart_init+0x22c>)
    2532:	4798      	blx	r3
	module->character_size = config->character_size;
    2534:	7af3      	ldrb	r3, [r6, #11]
    2536:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    2538:	7d33      	ldrb	r3, [r6, #20]
    253a:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    253c:	7d73      	ldrb	r3, [r6, #21]
    253e:	71eb      	strb	r3, [r5, #7]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2540:	682b      	ldr	r3, [r5, #0]
    2542:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2544:	0018      	movs	r0, r3
    2546:	4b68      	ldr	r3, [pc, #416]	; (26e8 <usart_init+0x21c>)
    2548:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    254a:	300d      	adds	r0, #13
	uint16_t baud  = 0;
    254c:	2200      	movs	r2, #0
    254e:	230e      	movs	r3, #14
    2550:	a902      	add	r1, sp, #8
    2552:	468c      	mov	ip, r1
    2554:	4463      	add	r3, ip
    2556:	801a      	strh	r2, [r3, #0]
	ctrla = (uint32_t)config->data_order |
    2558:	6833      	ldr	r3, [r6, #0]
    255a:	9303      	str	r3, [sp, #12]
		(uint32_t)config->mux_setting |
    255c:	68f3      	ldr	r3, [r6, #12]
    255e:	469a      	mov	sl, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2560:	7db3      	ldrb	r3, [r6, #22]
    2562:	469b      	mov	fp, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    2564:	6873      	ldr	r3, [r6, #4]
    2566:	4699      	mov	r9, r3
	switch (transfer_mode)
    2568:	2b00      	cmp	r3, #0
    256a:	d014      	beq.n	2596 <usart_init+0xca>
    256c:	2380      	movs	r3, #128	; 0x80
    256e:	055b      	lsls	r3, r3, #21
    2570:	4599      	cmp	r9, r3
    2572:	d130      	bne.n	25d6 <usart_init+0x10a>
			if (!config->use_external_clock) {
    2574:	7df3      	ldrb	r3, [r6, #23]
    2576:	2b00      	cmp	r3, #0
    2578:	d131      	bne.n	25de <usart_init+0x112>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    257a:	6933      	ldr	r3, [r6, #16]
    257c:	001f      	movs	r7, r3
    257e:	b2c0      	uxtb	r0, r0
    2580:	4b5e      	ldr	r3, [pc, #376]	; (26fc <usart_init+0x230>)
    2582:	4798      	blx	r3
    2584:	0001      	movs	r1, r0
    2586:	220e      	movs	r2, #14
    2588:	ab02      	add	r3, sp, #8
    258a:	469c      	mov	ip, r3
    258c:	4462      	add	r2, ip
    258e:	0038      	movs	r0, r7
    2590:	4b5b      	ldr	r3, [pc, #364]	; (2700 <usart_init+0x234>)
    2592:	4798      	blx	r3
    2594:	e020      	b.n	25d8 <usart_init+0x10c>
			if (config->use_external_clock) {
    2596:	7df3      	ldrb	r3, [r6, #23]
    2598:	2b00      	cmp	r3, #0
    259a:	d00b      	beq.n	25b4 <usart_init+0xe8>
				status_code =
    259c:	2310      	movs	r3, #16
    259e:	9300      	str	r3, [sp, #0]
    25a0:	2300      	movs	r3, #0
    25a2:	220e      	movs	r2, #14
    25a4:	a902      	add	r1, sp, #8
    25a6:	468c      	mov	ip, r1
    25a8:	4462      	add	r2, ip
    25aa:	69b1      	ldr	r1, [r6, #24]
    25ac:	6930      	ldr	r0, [r6, #16]
    25ae:	4f55      	ldr	r7, [pc, #340]	; (2704 <usart_init+0x238>)
    25b0:	47b8      	blx	r7
    25b2:	e011      	b.n	25d8 <usart_init+0x10c>
						_sercom_get_async_baud_val(config->baudrate,
    25b4:	6933      	ldr	r3, [r6, #16]
    25b6:	001f      	movs	r7, r3
    25b8:	b2c0      	uxtb	r0, r0
    25ba:	4b50      	ldr	r3, [pc, #320]	; (26fc <usart_init+0x230>)
    25bc:	4798      	blx	r3
    25be:	0001      	movs	r1, r0
				status_code =
    25c0:	2310      	movs	r3, #16
    25c2:	9300      	str	r3, [sp, #0]
    25c4:	2300      	movs	r3, #0
    25c6:	220e      	movs	r2, #14
    25c8:	a802      	add	r0, sp, #8
    25ca:	4684      	mov	ip, r0
    25cc:	4462      	add	r2, ip
    25ce:	0038      	movs	r0, r7
    25d0:	4f4c      	ldr	r7, [pc, #304]	; (2704 <usart_init+0x238>)
    25d2:	47b8      	blx	r7
    25d4:	e000      	b.n	25d8 <usart_init+0x10c>
	enum status_code status_code = STATUS_OK;
    25d6:	2000      	movs	r0, #0
	if (status_code != STATUS_OK) {
    25d8:	2800      	cmp	r0, #0
    25da:	d000      	beq.n	25de <usart_init+0x112>
    25dc:	e789      	b.n	24f2 <usart_init+0x26>
	SercomUsart *const usart_hw = &(module->hw->USART);
    25de:	682a      	ldr	r2, [r5, #0]
    25e0:	9f03      	ldr	r7, [sp, #12]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    25e2:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
    25e4:	b21b      	sxth	r3, r3
    25e6:	2b00      	cmp	r3, #0
    25e8:	dbfb      	blt.n	25e2 <usart_init+0x116>
	usart_hw->BAUD.reg = baud;
    25ea:	230e      	movs	r3, #14
    25ec:	aa02      	add	r2, sp, #8
    25ee:	4694      	mov	ip, r2
    25f0:	4463      	add	r3, ip
    25f2:	881b      	ldrh	r3, [r3, #0]
    25f4:	4642      	mov	r2, r8
    25f6:	8153      	strh	r3, [r2, #10]
	ctrla |= transfer_mode;
    25f8:	4653      	mov	r3, sl
    25fa:	431f      	orrs	r7, r3
    25fc:	464b      	mov	r3, r9
    25fe:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2600:	465b      	mov	r3, fp
    2602:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    2604:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    2606:	7df3      	ldrb	r3, [r6, #23]
    2608:	2b00      	cmp	r3, #0
    260a:	d101      	bne.n	2610 <usart_init+0x144>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    260c:	3304      	adds	r3, #4
    260e:	431f      	orrs	r7, r3
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2610:	7d31      	ldrb	r1, [r6, #20]
    2612:	0449      	lsls	r1, r1, #17
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    2614:	7d73      	ldrb	r3, [r6, #21]
    2616:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2618:	430b      	orrs	r3, r1
	ctrlb |= (uint32_t)config->character_size;
    261a:	7ab1      	ldrb	r1, [r6, #10]
    261c:	7af2      	ldrb	r2, [r6, #11]
    261e:	4311      	orrs	r1, r2
    2620:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    2622:	8933      	ldrh	r3, [r6, #8]
    2624:	2bff      	cmp	r3, #255	; 0xff
    2626:	d003      	beq.n	2630 <usart_init+0x164>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    2628:	2280      	movs	r2, #128	; 0x80
    262a:	0452      	lsls	r2, r2, #17
    262c:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    262e:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    2630:	7f33      	ldrb	r3, [r6, #28]
    2632:	2b00      	cmp	r3, #0
    2634:	d103      	bne.n	263e <usart_init+0x172>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    2636:	4b34      	ldr	r3, [pc, #208]	; (2708 <usart_init+0x23c>)
    2638:	789b      	ldrb	r3, [r3, #2]
    263a:	079b      	lsls	r3, r3, #30
    263c:	d501      	bpl.n	2642 <usart_init+0x176>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    263e:	2380      	movs	r3, #128	; 0x80
    2640:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    2642:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    2644:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
    2646:	b21b      	sxth	r3, r3
    2648:	2b00      	cmp	r3, #0
    264a:	dbfb      	blt.n	2644 <usart_init+0x178>
	usart_hw->CTRLB.reg = ctrlb;
    264c:	4643      	mov	r3, r8
    264e:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2650:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    2652:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
    2654:	b21b      	sxth	r3, r3
    2656:	2b00      	cmp	r3, #0
    2658:	dbfb      	blt.n	2652 <usart_init+0x186>
	usart_hw->CTRLA.reg = ctrla;
    265a:	4643      	mov	r3, r8
    265c:	601f      	str	r7, [r3, #0]
    265e:	ab0a      	add	r3, sp, #40	; 0x28
    2660:	2280      	movs	r2, #128	; 0x80
    2662:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2664:	2200      	movs	r2, #0
    2666:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    2668:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    266a:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    266c:	6a33      	ldr	r3, [r6, #32]
    266e:	9306      	str	r3, [sp, #24]
    2670:	6a73      	ldr	r3, [r6, #36]	; 0x24
    2672:	9307      	str	r3, [sp, #28]
    2674:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    2676:	9308      	str	r3, [sp, #32]
    2678:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    267a:	9303      	str	r3, [sp, #12]
    267c:	9309      	str	r3, [sp, #36]	; 0x24
    267e:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2680:	ae06      	add	r6, sp, #24
    2682:	e006      	b.n	2692 <usart_init+0x1c6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2684:	0020      	movs	r0, r4
    2686:	4b21      	ldr	r3, [pc, #132]	; (270c <usart_init+0x240>)
    2688:	4798      	blx	r3
    268a:	e007      	b.n	269c <usart_init+0x1d0>
    268c:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    268e:	2f04      	cmp	r7, #4
    2690:	d00d      	beq.n	26ae <usart_init+0x1e2>
    2692:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2694:	00bb      	lsls	r3, r7, #2
    2696:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    2698:	2800      	cmp	r0, #0
    269a:	d0f3      	beq.n	2684 <usart_init+0x1b8>
		if (current_pinmux != PINMUX_UNUSED) {
    269c:	1c43      	adds	r3, r0, #1
    269e:	d0f5      	beq.n	268c <usart_init+0x1c0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    26a0:	a90a      	add	r1, sp, #40	; 0x28
    26a2:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    26a4:	0c00      	lsrs	r0, r0, #16
    26a6:	b2c0      	uxtb	r0, r0
    26a8:	4b19      	ldr	r3, [pc, #100]	; (2710 <usart_init+0x244>)
    26aa:	4798      	blx	r3
    26ac:	e7ee      	b.n	268c <usart_init+0x1c0>
		module->callback[i]            = NULL;
    26ae:	2300      	movs	r3, #0
    26b0:	60ab      	str	r3, [r5, #8]
    26b2:	60eb      	str	r3, [r5, #12]
    26b4:	612b      	str	r3, [r5, #16]
	module->tx_buffer_ptr              = NULL;
    26b6:	61ab      	str	r3, [r5, #24]
	module->rx_buffer_ptr              = NULL;
    26b8:	616b      	str	r3, [r5, #20]
	module->remaining_tx_buffer_length = 0x0000;
    26ba:	2200      	movs	r2, #0
    26bc:	83eb      	strh	r3, [r5, #30]
	module->remaining_rx_buffer_length = 0x0000;
    26be:	83ab      	strh	r3, [r5, #28]
	module->callback_reg_mask          = 0x00;
    26c0:	3320      	adds	r3, #32
    26c2:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    26c4:	3301      	adds	r3, #1
    26c6:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    26c8:	3301      	adds	r3, #1
    26ca:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    26cc:	3301      	adds	r3, #1
    26ce:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    26d0:	6828      	ldr	r0, [r5, #0]
    26d2:	4b05      	ldr	r3, [pc, #20]	; (26e8 <usart_init+0x21c>)
    26d4:	4798      	blx	r3
    26d6:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    26d8:	490e      	ldr	r1, [pc, #56]	; (2714 <usart_init+0x248>)
    26da:	4b0f      	ldr	r3, [pc, #60]	; (2718 <usart_init+0x24c>)
    26dc:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    26de:	00a4      	lsls	r4, r4, #2
    26e0:	4b0e      	ldr	r3, [pc, #56]	; (271c <usart_init+0x250>)
    26e2:	50e5      	str	r5, [r4, r3]
	return status_code;
    26e4:	2000      	movs	r0, #0
    26e6:	e704      	b.n	24f2 <usart_init+0x26>
    26e8:	000023c5 	.word	0x000023c5
    26ec:	40000400 	.word	0x40000400
    26f0:	00002d3d 	.word	0x00002d3d
    26f4:	00002cb1 	.word	0x00002cb1
    26f8:	00002201 	.word	0x00002201
    26fc:	00002d89 	.word	0x00002d89
    2700:	00002143 	.word	0x00002143
    2704:	0000216d 	.word	0x0000216d
    2708:	41002000 	.word	0x41002000
    270c:	0000224d 	.word	0x0000224d
    2710:	00002e65 	.word	0x00002e65
    2714:	000027c5 	.word	0x000027c5
    2718:	00002401 	.word	0x00002401
    271c:	2000439c 	.word	0x2000439c

00002720 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2720:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    2722:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    2724:	2a00      	cmp	r2, #0
    2726:	d101      	bne.n	272c <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    2728:	0018      	movs	r0, r3
    272a:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    272c:	8bc2      	ldrh	r2, [r0, #30]
    272e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2730:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    2732:	2a00      	cmp	r2, #0
    2734:	d1f8      	bne.n	2728 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2736:	6802      	ldr	r2, [r0, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    2738:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
    273a:	b21b      	sxth	r3, r3
    273c:	2b00      	cmp	r3, #0
    273e:	dbfb      	blt.n	2738 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    2740:	8311      	strh	r1, [r2, #24]
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    2742:	2102      	movs	r1, #2
    2744:	7b93      	ldrb	r3, [r2, #14]
    2746:	420b      	tst	r3, r1
    2748:	d0fc      	beq.n	2744 <usart_write_wait+0x24>
	return STATUS_OK;
    274a:	2300      	movs	r3, #0
    274c:	e7ec      	b.n	2728 <usart_write_wait+0x8>
	...

00002750 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2752:	0006      	movs	r6, r0
    2754:	000c      	movs	r4, r1
    2756:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2758:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    275a:	4b0a      	ldr	r3, [pc, #40]	; (2784 <_usart_read_buffer+0x34>)
    275c:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    275e:	8bb3      	ldrh	r3, [r6, #28]
    2760:	b29b      	uxth	r3, r3
    2762:	2b00      	cmp	r3, #0
    2764:	d003      	beq.n	276e <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    2766:	4b08      	ldr	r3, [pc, #32]	; (2788 <_usart_read_buffer+0x38>)
    2768:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    276a:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    276c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    276e:	83b5      	strh	r5, [r6, #28]
    2770:	4b05      	ldr	r3, [pc, #20]	; (2788 <_usart_read_buffer+0x38>)
    2772:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    2774:	6174      	str	r4, [r6, #20]
	module->rx_status                  = STATUS_BUSY;
    2776:	2205      	movs	r2, #5
    2778:	2322      	movs	r3, #34	; 0x22
    277a:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    277c:	3b1e      	subs	r3, #30
    277e:	737b      	strb	r3, [r7, #13]
	return STATUS_OK;
    2780:	2000      	movs	r0, #0
    2782:	e7f3      	b.n	276c <_usart_read_buffer+0x1c>
    2784:	00001f19 	.word	0x00001f19
    2788:	00001f59 	.word	0x00001f59

0000278c <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    278c:	1c93      	adds	r3, r2, #2
    278e:	009b      	lsls	r3, r3, #2
    2790:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    2792:	2120      	movs	r1, #32
    2794:	2301      	movs	r3, #1
    2796:	4093      	lsls	r3, r2
    2798:	001a      	movs	r2, r3
    279a:	5c43      	ldrb	r3, [r0, r1]
    279c:	4313      	orrs	r3, r2
    279e:	5443      	strb	r3, [r0, r1]
}
    27a0:	4770      	bx	lr
	...

000027a4 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    27a4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    27a6:	2317      	movs	r3, #23
	if (length == 0) {
    27a8:	2a00      	cmp	r2, #0
    27aa:	d101      	bne.n	27b0 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    27ac:	0018      	movs	r0, r3
    27ae:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    27b0:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    27b2:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    27b4:	2c00      	cmp	r4, #0
    27b6:	d0f9      	beq.n	27ac <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    27b8:	4b01      	ldr	r3, [pc, #4]	; (27c0 <usart_read_buffer_job+0x1c>)
    27ba:	4798      	blx	r3
    27bc:	0003      	movs	r3, r0
    27be:	e7f5      	b.n	27ac <usart_read_buffer_job+0x8>
    27c0:	00002751 	.word	0x00002751

000027c4 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    27c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    27c6:	0080      	lsls	r0, r0, #2
    27c8:	4b46      	ldr	r3, [pc, #280]	; (28e4 <_usart_interrupt_handler+0x120>)
    27ca:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    27cc:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    27ce:	8a23      	ldrh	r3, [r4, #16]
	while (usart_is_syncing(module)) {
    27d0:	b21b      	sxth	r3, r3
    27d2:	2b00      	cmp	r3, #0
    27d4:	dbfb      	blt.n	27ce <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    27d6:	7ba3      	ldrb	r3, [r4, #14]
	interrupt_status &= usart_hw->INTENSET.reg;
    27d8:	7b66      	ldrb	r6, [r4, #13]
    27da:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    27dc:	2320      	movs	r3, #32
    27de:	5ceb      	ldrb	r3, [r5, r3]
    27e0:	2221      	movs	r2, #33	; 0x21
    27e2:	5caf      	ldrb	r7, [r5, r2]
    27e4:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    27e6:	07f3      	lsls	r3, r6, #31
    27e8:	d522      	bpl.n	2830 <_usart_interrupt_handler+0x6c>
		if (module->remaining_tx_buffer_length) {
    27ea:	8beb      	ldrh	r3, [r5, #30]
    27ec:	b29b      	uxth	r3, r3
    27ee:	2b00      	cmp	r3, #0
    27f0:	d01c      	beq.n	282c <_usart_interrupt_handler+0x68>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    27f2:	69aa      	ldr	r2, [r5, #24]
    27f4:	7813      	ldrb	r3, [r2, #0]
    27f6:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    27f8:	1c51      	adds	r1, r2, #1
    27fa:	61a9      	str	r1, [r5, #24]

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    27fc:	7969      	ldrb	r1, [r5, #5]
    27fe:	2901      	cmp	r1, #1
    2800:	d00e      	beq.n	2820 <_usart_interrupt_handler+0x5c>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2802:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2804:	05db      	lsls	r3, r3, #23
    2806:	0ddb      	lsrs	r3, r3, #23
    2808:	8323      	strh	r3, [r4, #24]

			if (--(module->remaining_tx_buffer_length) == 0) {
    280a:	8beb      	ldrh	r3, [r5, #30]
    280c:	3b01      	subs	r3, #1
    280e:	b29b      	uxth	r3, r3
    2810:	83eb      	strh	r3, [r5, #30]
    2812:	2b00      	cmp	r3, #0
    2814:	d10c      	bne.n	2830 <_usart_interrupt_handler+0x6c>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2816:	3301      	adds	r3, #1
    2818:	7323      	strb	r3, [r4, #12]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    281a:	3301      	adds	r3, #1
    281c:	7363      	strb	r3, [r4, #13]
    281e:	e007      	b.n	2830 <_usart_interrupt_handler+0x6c>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2820:	7851      	ldrb	r1, [r2, #1]
    2822:	0209      	lsls	r1, r1, #8
    2824:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    2826:	3202      	adds	r2, #2
    2828:	61aa      	str	r2, [r5, #24]
    282a:	e7eb      	b.n	2804 <_usart_interrupt_handler+0x40>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    282c:	2301      	movs	r3, #1
    282e:	7323      	strb	r3, [r4, #12]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2830:	07b3      	lsls	r3, r6, #30
    2832:	d506      	bpl.n	2842 <_usart_interrupt_handler+0x7e>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2834:	2302      	movs	r3, #2
    2836:	7323      	strb	r3, [r4, #12]
		module->tx_status = STATUS_OK;
    2838:	2200      	movs	r2, #0
    283a:	3321      	adds	r3, #33	; 0x21
    283c:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    283e:	07fb      	lsls	r3, r7, #31
    2840:	d416      	bmi.n	2870 <_usart_interrupt_handler+0xac>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2842:	0773      	lsls	r3, r6, #29
    2844:	d54d      	bpl.n	28e2 <_usart_interrupt_handler+0x11e>

		if (module->remaining_rx_buffer_length) {
    2846:	8bab      	ldrh	r3, [r5, #28]
    2848:	b29b      	uxth	r3, r3
    284a:	2b00      	cmp	r3, #0
    284c:	d047      	beq.n	28de <_usart_interrupt_handler+0x11a>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    284e:	8a23      	ldrh	r3, [r4, #16]
    2850:	b2db      	uxtb	r3, r3
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2852:	075a      	lsls	r2, r3, #29
    2854:	d020      	beq.n	2898 <_usart_interrupt_handler+0xd4>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2856:	079a      	lsls	r2, r3, #30
    2858:	d50e      	bpl.n	2878 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    285a:	221a      	movs	r2, #26
    285c:	2322      	movs	r3, #34	; 0x22
    285e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2860:	3b20      	subs	r3, #32
    2862:	8223      	strh	r3, [r4, #16]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    2864:	077b      	lsls	r3, r7, #29
    2866:	d53c      	bpl.n	28e2 <_usart_interrupt_handler+0x11e>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2868:	692b      	ldr	r3, [r5, #16]
    286a:	0028      	movs	r0, r5
    286c:	4798      	blx	r3
    286e:	e038      	b.n	28e2 <_usart_interrupt_handler+0x11e>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2870:	0028      	movs	r0, r5
    2872:	68ab      	ldr	r3, [r5, #8]
    2874:	4798      	blx	r3
    2876:	e7e4      	b.n	2842 <_usart_interrupt_handler+0x7e>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2878:	075a      	lsls	r2, r3, #29
    287a:	d505      	bpl.n	2888 <_usart_interrupt_handler+0xc4>
					module->rx_status = STATUS_ERR_OVERFLOW;
    287c:	221e      	movs	r2, #30
    287e:	2322      	movs	r3, #34	; 0x22
    2880:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2882:	3b1e      	subs	r3, #30
    2884:	8223      	strh	r3, [r4, #16]
    2886:	e7ed      	b.n	2864 <_usart_interrupt_handler+0xa0>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2888:	07db      	lsls	r3, r3, #31
    288a:	d5eb      	bpl.n	2864 <_usart_interrupt_handler+0xa0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    288c:	2213      	movs	r2, #19
    288e:	2322      	movs	r3, #34	; 0x22
    2890:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2892:	3b21      	subs	r3, #33	; 0x21
    2894:	8223      	strh	r3, [r4, #16]
    2896:	e7e5      	b.n	2864 <_usart_interrupt_handler+0xa0>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2898:	8b23      	ldrh	r3, [r4, #24]
    289a:	05db      	lsls	r3, r3, #23
    289c:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    289e:	b2da      	uxtb	r2, r3
    28a0:	6969      	ldr	r1, [r5, #20]
    28a2:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    28a4:	696a      	ldr	r2, [r5, #20]
    28a6:	1c51      	adds	r1, r2, #1
    28a8:	6169      	str	r1, [r5, #20]

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    28aa:	7969      	ldrb	r1, [r5, #5]
    28ac:	2901      	cmp	r1, #1
    28ae:	d010      	beq.n	28d2 <_usart_interrupt_handler+0x10e>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    28b0:	8bab      	ldrh	r3, [r5, #28]
    28b2:	3b01      	subs	r3, #1
    28b4:	b29b      	uxth	r3, r3
    28b6:	83ab      	strh	r3, [r5, #28]
    28b8:	2b00      	cmp	r3, #0
    28ba:	d112      	bne.n	28e2 <_usart_interrupt_handler+0x11e>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    28bc:	3304      	adds	r3, #4
    28be:	7323      	strb	r3, [r4, #12]
					module->rx_status = STATUS_OK;
    28c0:	2200      	movs	r2, #0
    28c2:	331e      	adds	r3, #30
    28c4:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    28c6:	07bb      	lsls	r3, r7, #30
    28c8:	d50b      	bpl.n	28e2 <_usart_interrupt_handler+0x11e>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    28ca:	68eb      	ldr	r3, [r5, #12]
    28cc:	0028      	movs	r0, r5
    28ce:	4798      	blx	r3
    28d0:	e007      	b.n	28e2 <_usart_interrupt_handler+0x11e>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    28d2:	0a1b      	lsrs	r3, r3, #8
    28d4:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    28d6:	696b      	ldr	r3, [r5, #20]
    28d8:	3301      	adds	r3, #1
    28da:	616b      	str	r3, [r5, #20]
    28dc:	e7e8      	b.n	28b0 <_usart_interrupt_handler+0xec>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    28de:	2304      	movs	r3, #4
    28e0:	7323      	strb	r3, [r4, #12]
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    28e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    28e4:	2000439c 	.word	0x2000439c

000028e8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    28e8:	b510      	push	{r4, lr}
	switch (clock_source) {
    28ea:	2807      	cmp	r0, #7
    28ec:	d803      	bhi.n	28f6 <system_clock_source_get_hz+0xe>
    28ee:	0080      	lsls	r0, r0, #2
    28f0:	4b16      	ldr	r3, [pc, #88]	; (294c <system_clock_source_get_hz+0x64>)
    28f2:	581b      	ldr	r3, [r3, r0]
    28f4:	469f      	mov	pc, r3
		}

		return 48000000UL;

	default:
		return 0;
    28f6:	2000      	movs	r0, #0
    28f8:	e027      	b.n	294a <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc.frequency;
    28fa:	4b15      	ldr	r3, [pc, #84]	; (2950 <system_clock_source_get_hz+0x68>)
    28fc:	68d8      	ldr	r0, [r3, #12]
    28fe:	e024      	b.n	294a <system_clock_source_get_hz+0x62>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2900:	4b14      	ldr	r3, [pc, #80]	; (2954 <system_clock_source_get_hz+0x6c>)
    2902:	6a1b      	ldr	r3, [r3, #32]
    2904:	059b      	lsls	r3, r3, #22
    2906:	0f9b      	lsrs	r3, r3, #30
    2908:	4813      	ldr	r0, [pc, #76]	; (2958 <system_clock_source_get_hz+0x70>)
    290a:	40d8      	lsrs	r0, r3
    290c:	e01d      	b.n	294a <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc32k.frequency;
    290e:	4b10      	ldr	r3, [pc, #64]	; (2950 <system_clock_source_get_hz+0x68>)
    2910:	6918      	ldr	r0, [r3, #16]
    2912:	e01a      	b.n	294a <system_clock_source_get_hz+0x62>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2914:	4b0e      	ldr	r3, [pc, #56]	; (2950 <system_clock_source_get_hz+0x68>)
    2916:	681b      	ldr	r3, [r3, #0]
			return 0;
    2918:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    291a:	079b      	lsls	r3, r3, #30
    291c:	d515      	bpl.n	294a <system_clock_source_get_hz+0x62>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    291e:	490d      	ldr	r1, [pc, #52]	; (2954 <system_clock_source_get_hz+0x6c>)
    2920:	2210      	movs	r2, #16
    2922:	68cb      	ldr	r3, [r1, #12]
    2924:	421a      	tst	r2, r3
    2926:	d0fc      	beq.n	2922 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    2928:	4b09      	ldr	r3, [pc, #36]	; (2950 <system_clock_source_get_hz+0x68>)
    292a:	681b      	ldr	r3, [r3, #0]
    292c:	075b      	lsls	r3, r3, #29
    292e:	d401      	bmi.n	2934 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    2930:	480a      	ldr	r0, [pc, #40]	; (295c <system_clock_source_get_hz+0x74>)
    2932:	e00a      	b.n	294a <system_clock_source_get_hz+0x62>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2934:	2000      	movs	r0, #0
    2936:	4b0a      	ldr	r3, [pc, #40]	; (2960 <system_clock_source_get_hz+0x78>)
    2938:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    293a:	4b05      	ldr	r3, [pc, #20]	; (2950 <system_clock_source_get_hz+0x68>)
    293c:	689b      	ldr	r3, [r3, #8]
    293e:	041b      	lsls	r3, r3, #16
    2940:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2942:	4358      	muls	r0, r3
    2944:	e001      	b.n	294a <system_clock_source_get_hz+0x62>
		return 32768UL;
    2946:	2080      	movs	r0, #128	; 0x80
    2948:	0200      	lsls	r0, r0, #8
	}
}
    294a:	bd10      	pop	{r4, pc}
    294c:	0000387c 	.word	0x0000387c
    2950:	20000214 	.word	0x20000214
    2954:	40000800 	.word	0x40000800
    2958:	007a1200 	.word	0x007a1200
    295c:	02dc6c00 	.word	0x02dc6c00
    2960:	00002d89 	.word	0x00002d89

00002964 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2964:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2966:	490c      	ldr	r1, [pc, #48]	; (2998 <system_clock_source_osc8m_set_config+0x34>)
    2968:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    296a:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    296c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    296e:	7840      	ldrb	r0, [r0, #1]
    2970:	2201      	movs	r2, #1
    2972:	4010      	ands	r0, r2
    2974:	0180      	lsls	r0, r0, #6
    2976:	2640      	movs	r6, #64	; 0x40
    2978:	43b3      	bics	r3, r6
    297a:	4303      	orrs	r3, r0
    297c:	402a      	ands	r2, r5
    297e:	01d2      	lsls	r2, r2, #7
    2980:	2080      	movs	r0, #128	; 0x80
    2982:	4383      	bics	r3, r0
    2984:	4313      	orrs	r3, r2
    2986:	2203      	movs	r2, #3
    2988:	4022      	ands	r2, r4
    298a:	0212      	lsls	r2, r2, #8
    298c:	4803      	ldr	r0, [pc, #12]	; (299c <system_clock_source_osc8m_set_config+0x38>)
    298e:	4003      	ands	r3, r0
    2990:	4313      	orrs	r3, r2
    2992:	620b      	str	r3, [r1, #32]
}
    2994:	bd70      	pop	{r4, r5, r6, pc}
    2996:	46c0      	nop			; (mov r8, r8)
    2998:	40000800 	.word	0x40000800
    299c:	fffffcff 	.word	0xfffffcff

000029a0 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    29a0:	2807      	cmp	r0, #7
    29a2:	d803      	bhi.n	29ac <system_clock_source_enable+0xc>
    29a4:	0080      	lsls	r0, r0, #2
    29a6:	4b1e      	ldr	r3, [pc, #120]	; (2a20 <system_clock_source_enable+0x80>)
    29a8:	581b      	ldr	r3, [r3, r0]
    29aa:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    29ac:	2017      	movs	r0, #23
    29ae:	e036      	b.n	2a1e <system_clock_source_enable+0x7e>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    29b0:	4a1c      	ldr	r2, [pc, #112]	; (2a24 <system_clock_source_enable+0x84>)
    29b2:	6a13      	ldr	r3, [r2, #32]
    29b4:	2102      	movs	r1, #2
    29b6:	430b      	orrs	r3, r1
    29b8:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    29ba:	2000      	movs	r0, #0
    29bc:	e02f      	b.n	2a1e <system_clock_source_enable+0x7e>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    29be:	4a19      	ldr	r2, [pc, #100]	; (2a24 <system_clock_source_enable+0x84>)
    29c0:	6993      	ldr	r3, [r2, #24]
    29c2:	2102      	movs	r1, #2
    29c4:	430b      	orrs	r3, r1
    29c6:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    29c8:	2000      	movs	r0, #0
		break;
    29ca:	e028      	b.n	2a1e <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    29cc:	4a15      	ldr	r2, [pc, #84]	; (2a24 <system_clock_source_enable+0x84>)
    29ce:	8a13      	ldrh	r3, [r2, #16]
    29d0:	2102      	movs	r1, #2
    29d2:	430b      	orrs	r3, r1
    29d4:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    29d6:	2000      	movs	r0, #0
		break;
    29d8:	e021      	b.n	2a1e <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    29da:	4a12      	ldr	r2, [pc, #72]	; (2a24 <system_clock_source_enable+0x84>)
    29dc:	8a93      	ldrh	r3, [r2, #20]
    29de:	2102      	movs	r1, #2
    29e0:	430b      	orrs	r3, r1
    29e2:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    29e4:	2000      	movs	r0, #0
		break;
    29e6:	e01a      	b.n	2a1e <system_clock_source_enable+0x7e>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    29e8:	4b0f      	ldr	r3, [pc, #60]	; (2a28 <system_clock_source_enable+0x88>)
    29ea:	681a      	ldr	r2, [r3, #0]
    29ec:	2102      	movs	r1, #2
    29ee:	430a      	orrs	r2, r1
    29f0:	601a      	str	r2, [r3, #0]
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    29f2:	681b      	ldr	r3, [r3, #0]
    29f4:	4a0d      	ldr	r2, [pc, #52]	; (2a2c <system_clock_source_enable+0x8c>)
    29f6:	4013      	ands	r3, r2
    29f8:	4a0a      	ldr	r2, [pc, #40]	; (2a24 <system_clock_source_enable+0x84>)
    29fa:	8493      	strh	r3, [r2, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    29fc:	0011      	movs	r1, r2
    29fe:	2210      	movs	r2, #16
    2a00:	68cb      	ldr	r3, [r1, #12]
    2a02:	421a      	tst	r2, r3
    2a04:	d0fc      	beq.n	2a00 <system_clock_source_enable+0x60>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2a06:	4a08      	ldr	r2, [pc, #32]	; (2a28 <system_clock_source_enable+0x88>)
    2a08:	6891      	ldr	r1, [r2, #8]
    2a0a:	4b06      	ldr	r3, [pc, #24]	; (2a24 <system_clock_source_enable+0x84>)
    2a0c:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2a0e:	6851      	ldr	r1, [r2, #4]
    2a10:	6299      	str	r1, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2a12:	6812      	ldr	r2, [r2, #0]
    2a14:	b292      	uxth	r2, r2
    2a16:	849a      	strh	r2, [r3, #36]	; 0x24
	return STATUS_OK;
    2a18:	2000      	movs	r0, #0
    2a1a:	e000      	b.n	2a1e <system_clock_source_enable+0x7e>
		return STATUS_OK;
    2a1c:	2000      	movs	r0, #0
}
    2a1e:	4770      	bx	lr
    2a20:	0000389c 	.word	0x0000389c
    2a24:	40000800 	.word	0x40000800
    2a28:	20000214 	.word	0x20000214
    2a2c:	0000ff7f 	.word	0x0000ff7f

00002a30 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2a30:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a32:	46c6      	mov	lr, r8
    2a34:	b500      	push	{lr}
    2a36:	b084      	sub	sp, #16
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2a38:	22c2      	movs	r2, #194	; 0xc2
    2a3a:	00d2      	lsls	r2, r2, #3
    2a3c:	4b28      	ldr	r3, [pc, #160]	; (2ae0 <system_clock_init+0xb0>)
    2a3e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2a40:	4a28      	ldr	r2, [pc, #160]	; (2ae4 <system_clock_init+0xb4>)
    2a42:	6853      	ldr	r3, [r2, #4]
    2a44:	211e      	movs	r1, #30
    2a46:	438b      	bics	r3, r1
    2a48:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    2a4a:	2302      	movs	r3, #2
    2a4c:	466a      	mov	r2, sp
    2a4e:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2a50:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2a52:	4d25      	ldr	r5, [pc, #148]	; (2ae8 <system_clock_init+0xb8>)
    2a54:	b2e0      	uxtb	r0, r4
    2a56:	4669      	mov	r1, sp
    2a58:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2a5a:	3401      	adds	r4, #1
    2a5c:	2c1c      	cmp	r4, #28
    2a5e:	d1f9      	bne.n	2a54 <system_clock_init+0x24>
	config->run_in_standby  = false;
    2a60:	a803      	add	r0, sp, #12
    2a62:	2400      	movs	r4, #0
    2a64:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    2a66:	2301      	movs	r3, #1
    2a68:	4698      	mov	r8, r3
    2a6a:	7083      	strb	r3, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    2a6c:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    2a6e:	4b1f      	ldr	r3, [pc, #124]	; (2aec <system_clock_init+0xbc>)
    2a70:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    2a72:	2006      	movs	r0, #6
    2a74:	4b1e      	ldr	r3, [pc, #120]	; (2af0 <system_clock_init+0xc0>)
    2a76:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2a78:	4b1e      	ldr	r3, [pc, #120]	; (2af4 <system_clock_init+0xc4>)
    2a7a:	4798      	blx	r3
	config->high_when_disabled = false;
    2a7c:	466b      	mov	r3, sp
    2a7e:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    2a80:	2706      	movs	r7, #6
    2a82:	701f      	strb	r7, [r3, #0]
	config->run_in_standby     = false;
    2a84:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    2a86:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    2a88:	2308      	movs	r3, #8
    2a8a:	9301      	str	r3, [sp, #4]
    2a8c:	4669      	mov	r1, sp
    2a8e:	2001      	movs	r0, #1
    2a90:	4e19      	ldr	r6, [pc, #100]	; (2af8 <system_clock_init+0xc8>)
    2a92:	47b0      	blx	r6
    2a94:	2001      	movs	r0, #1
    2a96:	4d19      	ldr	r5, [pc, #100]	; (2afc <system_clock_init+0xcc>)
    2a98:	47a8      	blx	r5
	config->high_when_disabled = false;
    2a9a:	466b      	mov	r3, sp
    2a9c:	705c      	strb	r4, [r3, #1]
	config->run_in_standby     = false;
    2a9e:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    2aa0:	725c      	strb	r4, [r3, #9]
    2aa2:	2303      	movs	r3, #3
    2aa4:	466a      	mov	r2, sp
    2aa6:	7013      	strb	r3, [r2, #0]
    2aa8:	331d      	adds	r3, #29
    2aaa:	9301      	str	r3, [sp, #4]
    2aac:	4669      	mov	r1, sp
    2aae:	2004      	movs	r0, #4
    2ab0:	47b0      	blx	r6
    2ab2:	2004      	movs	r0, #4
    2ab4:	47a8      	blx	r5
	PM->CPUSEL.reg = (uint32_t)divider;
    2ab6:	4b12      	ldr	r3, [pc, #72]	; (2b00 <system_clock_init+0xd0>)
    2ab8:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    2aba:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    2abc:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    2abe:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    2ac0:	4643      	mov	r3, r8
    2ac2:	9301      	str	r3, [sp, #4]
	config->high_when_disabled = false;
    2ac4:	466b      	mov	r3, sp
    2ac6:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    2ac8:	701f      	strb	r7, [r3, #0]
	config->run_in_standby     = false;
    2aca:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    2acc:	725c      	strb	r4, [r3, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2ace:	4669      	mov	r1, sp
    2ad0:	2000      	movs	r0, #0
    2ad2:	47b0      	blx	r6
    2ad4:	2000      	movs	r0, #0
    2ad6:	47a8      	blx	r5
#endif
}
    2ad8:	b004      	add	sp, #16
    2ada:	bc04      	pop	{r2}
    2adc:	4690      	mov	r8, r2
    2ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ae0:	40000800 	.word	0x40000800
    2ae4:	41004000 	.word	0x41004000
    2ae8:	00002d3d 	.word	0x00002d3d
    2aec:	00002965 	.word	0x00002965
    2af0:	000029a1 	.word	0x000029a1
    2af4:	00002b05 	.word	0x00002b05
    2af8:	00002b29 	.word	0x00002b29
    2afc:	00002be1 	.word	0x00002be1
    2b00:	40000400 	.word	0x40000400

00002b04 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    2b04:	4a06      	ldr	r2, [pc, #24]	; (2b20 <system_gclk_init+0x1c>)
    2b06:	6993      	ldr	r3, [r2, #24]
    2b08:	2108      	movs	r1, #8
    2b0a:	430b      	orrs	r3, r1
    2b0c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    2b0e:	2201      	movs	r2, #1
    2b10:	4b04      	ldr	r3, [pc, #16]	; (2b24 <system_gclk_init+0x20>)
    2b12:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2b14:	0019      	movs	r1, r3
    2b16:	780b      	ldrb	r3, [r1, #0]
    2b18:	4213      	tst	r3, r2
    2b1a:	d1fc      	bne.n	2b16 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2b1c:	4770      	bx	lr
    2b1e:	46c0      	nop			; (mov r8, r8)
    2b20:	40000400 	.word	0x40000400
    2b24:	40000c00 	.word	0x40000c00

00002b28 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2b28:	b570      	push	{r4, r5, r6, lr}
    2b2a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2b2c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2b2e:	780d      	ldrb	r5, [r1, #0]
    2b30:	022d      	lsls	r5, r5, #8
    2b32:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2b34:	784b      	ldrb	r3, [r1, #1]
    2b36:	2b00      	cmp	r3, #0
    2b38:	d002      	beq.n	2b40 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2b3a:	2380      	movs	r3, #128	; 0x80
    2b3c:	02db      	lsls	r3, r3, #11
    2b3e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2b40:	7a4b      	ldrb	r3, [r1, #9]
    2b42:	2b00      	cmp	r3, #0
    2b44:	d002      	beq.n	2b4c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2b46:	2380      	movs	r3, #128	; 0x80
    2b48:	031b      	lsls	r3, r3, #12
    2b4a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2b4c:	6848      	ldr	r0, [r1, #4]
    2b4e:	2801      	cmp	r0, #1
    2b50:	d910      	bls.n	2b74 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2b52:	1e43      	subs	r3, r0, #1
    2b54:	4218      	tst	r0, r3
    2b56:	d134      	bne.n	2bc2 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2b58:	2802      	cmp	r0, #2
    2b5a:	d930      	bls.n	2bbe <system_gclk_gen_set_config+0x96>
    2b5c:	2302      	movs	r3, #2
    2b5e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2b60:	3201      	adds	r2, #1
						mask <<= 1) {
    2b62:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    2b64:	4298      	cmp	r0, r3
    2b66:	d8fb      	bhi.n	2b60 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2b68:	0212      	lsls	r2, r2, #8
    2b6a:	4332      	orrs	r2, r6
    2b6c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2b6e:	2380      	movs	r3, #128	; 0x80
    2b70:	035b      	lsls	r3, r3, #13
    2b72:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2b74:	7a0b      	ldrb	r3, [r1, #8]
    2b76:	2b00      	cmp	r3, #0
    2b78:	d002      	beq.n	2b80 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2b7a:	2380      	movs	r3, #128	; 0x80
    2b7c:	039b      	lsls	r3, r3, #14
    2b7e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2b80:	4a13      	ldr	r2, [pc, #76]	; (2bd0 <system_gclk_gen_set_config+0xa8>)
    2b82:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    2b84:	b25b      	sxtb	r3, r3
    2b86:	2b00      	cmp	r3, #0
    2b88:	dbfb      	blt.n	2b82 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    2b8a:	4b12      	ldr	r3, [pc, #72]	; (2bd4 <system_gclk_gen_set_config+0xac>)
    2b8c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2b8e:	4b12      	ldr	r3, [pc, #72]	; (2bd8 <system_gclk_gen_set_config+0xb0>)
    2b90:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2b92:	4a0f      	ldr	r2, [pc, #60]	; (2bd0 <system_gclk_gen_set_config+0xa8>)
    2b94:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    2b96:	b25b      	sxtb	r3, r3
    2b98:	2b00      	cmp	r3, #0
    2b9a:	dbfb      	blt.n	2b94 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2b9c:	4b0c      	ldr	r3, [pc, #48]	; (2bd0 <system_gclk_gen_set_config+0xa8>)
    2b9e:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2ba0:	001a      	movs	r2, r3
    2ba2:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    2ba4:	b25b      	sxtb	r3, r3
    2ba6:	2b00      	cmp	r3, #0
    2ba8:	dbfb      	blt.n	2ba2 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2baa:	4a09      	ldr	r2, [pc, #36]	; (2bd0 <system_gclk_gen_set_config+0xa8>)
    2bac:	6853      	ldr	r3, [r2, #4]
    2bae:	2180      	movs	r1, #128	; 0x80
    2bb0:	0249      	lsls	r1, r1, #9
    2bb2:	400b      	ands	r3, r1
    2bb4:	431d      	orrs	r5, r3
    2bb6:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    2bb8:	4b08      	ldr	r3, [pc, #32]	; (2bdc <system_gclk_gen_set_config+0xb4>)
    2bba:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2bbc:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    2bbe:	2200      	movs	r2, #0
    2bc0:	e7d2      	b.n	2b68 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    2bc2:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    2bc4:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2bc6:	2380      	movs	r3, #128	; 0x80
    2bc8:	029b      	lsls	r3, r3, #10
    2bca:	431d      	orrs	r5, r3
    2bcc:	e7d2      	b.n	2b74 <system_gclk_gen_set_config+0x4c>
    2bce:	46c0      	nop			; (mov r8, r8)
    2bd0:	40000c00 	.word	0x40000c00
    2bd4:	00001f19 	.word	0x00001f19
    2bd8:	40000c08 	.word	0x40000c08
    2bdc:	00001f59 	.word	0x00001f59

00002be0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2be0:	b510      	push	{r4, lr}
    2be2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2be4:	4a0b      	ldr	r2, [pc, #44]	; (2c14 <system_gclk_gen_enable+0x34>)
    2be6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2be8:	b25b      	sxtb	r3, r3
    2bea:	2b00      	cmp	r3, #0
    2bec:	dbfb      	blt.n	2be6 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    2bee:	4b0a      	ldr	r3, [pc, #40]	; (2c18 <system_gclk_gen_enable+0x38>)
    2bf0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2bf2:	4b0a      	ldr	r3, [pc, #40]	; (2c1c <system_gclk_gen_enable+0x3c>)
    2bf4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2bf6:	4a07      	ldr	r2, [pc, #28]	; (2c14 <system_gclk_gen_enable+0x34>)
    2bf8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2bfa:	b25b      	sxtb	r3, r3
    2bfc:	2b00      	cmp	r3, #0
    2bfe:	dbfb      	blt.n	2bf8 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2c00:	4a04      	ldr	r2, [pc, #16]	; (2c14 <system_gclk_gen_enable+0x34>)
    2c02:	6851      	ldr	r1, [r2, #4]
    2c04:	2380      	movs	r3, #128	; 0x80
    2c06:	025b      	lsls	r3, r3, #9
    2c08:	430b      	orrs	r3, r1
    2c0a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    2c0c:	4b04      	ldr	r3, [pc, #16]	; (2c20 <system_gclk_gen_enable+0x40>)
    2c0e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2c10:	bd10      	pop	{r4, pc}
    2c12:	46c0      	nop			; (mov r8, r8)
    2c14:	40000c00 	.word	0x40000c00
    2c18:	00001f19 	.word	0x00001f19
    2c1c:	40000c04 	.word	0x40000c04
    2c20:	00001f59 	.word	0x00001f59

00002c24 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2c24:	b570      	push	{r4, r5, r6, lr}
    2c26:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2c28:	4a1a      	ldr	r2, [pc, #104]	; (2c94 <system_gclk_gen_get_hz+0x70>)
    2c2a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2c2c:	b25b      	sxtb	r3, r3
    2c2e:	2b00      	cmp	r3, #0
    2c30:	dbfb      	blt.n	2c2a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    2c32:	4b19      	ldr	r3, [pc, #100]	; (2c98 <system_gclk_gen_get_hz+0x74>)
    2c34:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2c36:	4b19      	ldr	r3, [pc, #100]	; (2c9c <system_gclk_gen_get_hz+0x78>)
    2c38:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2c3a:	4a16      	ldr	r2, [pc, #88]	; (2c94 <system_gclk_gen_get_hz+0x70>)
    2c3c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2c3e:	b25b      	sxtb	r3, r3
    2c40:	2b00      	cmp	r3, #0
    2c42:	dbfb      	blt.n	2c3c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2c44:	4e13      	ldr	r6, [pc, #76]	; (2c94 <system_gclk_gen_get_hz+0x70>)
    2c46:	6870      	ldr	r0, [r6, #4]
    2c48:	04c0      	lsls	r0, r0, #19
    2c4a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2c4c:	4b14      	ldr	r3, [pc, #80]	; (2ca0 <system_gclk_gen_get_hz+0x7c>)
    2c4e:	4798      	blx	r3
    2c50:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2c52:	4b12      	ldr	r3, [pc, #72]	; (2c9c <system_gclk_gen_get_hz+0x78>)
    2c54:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    2c56:	6876      	ldr	r6, [r6, #4]
    2c58:	02f6      	lsls	r6, r6, #11
    2c5a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2c5c:	4b11      	ldr	r3, [pc, #68]	; (2ca4 <system_gclk_gen_get_hz+0x80>)
    2c5e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2c60:	4a0c      	ldr	r2, [pc, #48]	; (2c94 <system_gclk_gen_get_hz+0x70>)
    2c62:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2c64:	b25b      	sxtb	r3, r3
    2c66:	2b00      	cmp	r3, #0
    2c68:	dbfb      	blt.n	2c62 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    2c6a:	4b0a      	ldr	r3, [pc, #40]	; (2c94 <system_gclk_gen_get_hz+0x70>)
    2c6c:	689c      	ldr	r4, [r3, #8]
    2c6e:	0224      	lsls	r4, r4, #8
    2c70:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    2c72:	4b0d      	ldr	r3, [pc, #52]	; (2ca8 <system_gclk_gen_get_hz+0x84>)
    2c74:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2c76:	2e00      	cmp	r6, #0
    2c78:	d107      	bne.n	2c8a <system_gclk_gen_get_hz+0x66>
    2c7a:	2c01      	cmp	r4, #1
    2c7c:	d907      	bls.n	2c8e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    2c7e:	0021      	movs	r1, r4
    2c80:	0028      	movs	r0, r5
    2c82:	4b0a      	ldr	r3, [pc, #40]	; (2cac <system_gclk_gen_get_hz+0x88>)
    2c84:	4798      	blx	r3
    2c86:	0005      	movs	r5, r0
    2c88:	e001      	b.n	2c8e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    2c8a:	3401      	adds	r4, #1
    2c8c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    2c8e:	0028      	movs	r0, r5
    2c90:	bd70      	pop	{r4, r5, r6, pc}
    2c92:	46c0      	nop			; (mov r8, r8)
    2c94:	40000c00 	.word	0x40000c00
    2c98:	00001f19 	.word	0x00001f19
    2c9c:	40000c04 	.word	0x40000c04
    2ca0:	000028e9 	.word	0x000028e9
    2ca4:	40000c08 	.word	0x40000c08
    2ca8:	00001f59 	.word	0x00001f59
    2cac:	00003395 	.word	0x00003395

00002cb0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2cb0:	b510      	push	{r4, lr}
    2cb2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2cb4:	4b06      	ldr	r3, [pc, #24]	; (2cd0 <system_gclk_chan_enable+0x20>)
    2cb6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2cb8:	4b06      	ldr	r3, [pc, #24]	; (2cd4 <system_gclk_chan_enable+0x24>)
    2cba:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2cbc:	4a06      	ldr	r2, [pc, #24]	; (2cd8 <system_gclk_chan_enable+0x28>)
    2cbe:	8853      	ldrh	r3, [r2, #2]
    2cc0:	2180      	movs	r1, #128	; 0x80
    2cc2:	01c9      	lsls	r1, r1, #7
    2cc4:	430b      	orrs	r3, r1
    2cc6:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    2cc8:	4b04      	ldr	r3, [pc, #16]	; (2cdc <system_gclk_chan_enable+0x2c>)
    2cca:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2ccc:	bd10      	pop	{r4, pc}
    2cce:	46c0      	nop			; (mov r8, r8)
    2cd0:	00001f19 	.word	0x00001f19
    2cd4:	40000c02 	.word	0x40000c02
    2cd8:	40000c00 	.word	0x40000c00
    2cdc:	00001f59 	.word	0x00001f59

00002ce0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2ce0:	b510      	push	{r4, lr}
    2ce2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2ce4:	4b0f      	ldr	r3, [pc, #60]	; (2d24 <system_gclk_chan_disable+0x44>)
    2ce6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2ce8:	4b0f      	ldr	r3, [pc, #60]	; (2d28 <system_gclk_chan_disable+0x48>)
    2cea:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2cec:	4a0f      	ldr	r2, [pc, #60]	; (2d2c <system_gclk_chan_disable+0x4c>)
    2cee:	8853      	ldrh	r3, [r2, #2]
    2cf0:	051b      	lsls	r3, r3, #20
    2cf2:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2cf4:	8853      	ldrh	r3, [r2, #2]
    2cf6:	490e      	ldr	r1, [pc, #56]	; (2d30 <system_gclk_chan_disable+0x50>)
    2cf8:	400b      	ands	r3, r1
    2cfa:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2cfc:	8853      	ldrh	r3, [r2, #2]
    2cfe:	490d      	ldr	r1, [pc, #52]	; (2d34 <system_gclk_chan_disable+0x54>)
    2d00:	400b      	ands	r3, r1
    2d02:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2d04:	0011      	movs	r1, r2
    2d06:	2280      	movs	r2, #128	; 0x80
    2d08:	01d2      	lsls	r2, r2, #7
    2d0a:	884b      	ldrh	r3, [r1, #2]
    2d0c:	4213      	tst	r3, r2
    2d0e:	d1fc      	bne.n	2d0a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2d10:	4906      	ldr	r1, [pc, #24]	; (2d2c <system_gclk_chan_disable+0x4c>)
    2d12:	884a      	ldrh	r2, [r1, #2]
    2d14:	0203      	lsls	r3, r0, #8
    2d16:	4806      	ldr	r0, [pc, #24]	; (2d30 <system_gclk_chan_disable+0x50>)
    2d18:	4002      	ands	r2, r0
    2d1a:	4313      	orrs	r3, r2
    2d1c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    2d1e:	4b06      	ldr	r3, [pc, #24]	; (2d38 <system_gclk_chan_disable+0x58>)
    2d20:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2d22:	bd10      	pop	{r4, pc}
    2d24:	00001f19 	.word	0x00001f19
    2d28:	40000c02 	.word	0x40000c02
    2d2c:	40000c00 	.word	0x40000c00
    2d30:	fffff0ff 	.word	0xfffff0ff
    2d34:	ffffbfff 	.word	0xffffbfff
    2d38:	00001f59 	.word	0x00001f59

00002d3c <system_gclk_chan_set_config>:
{
    2d3c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2d3e:	780c      	ldrb	r4, [r1, #0]
    2d40:	0224      	lsls	r4, r4, #8
    2d42:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    2d44:	4b02      	ldr	r3, [pc, #8]	; (2d50 <system_gclk_chan_set_config+0x14>)
    2d46:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2d48:	b2a4      	uxth	r4, r4
    2d4a:	4b02      	ldr	r3, [pc, #8]	; (2d54 <system_gclk_chan_set_config+0x18>)
    2d4c:	805c      	strh	r4, [r3, #2]
}
    2d4e:	bd10      	pop	{r4, pc}
    2d50:	00002ce1 	.word	0x00002ce1
    2d54:	40000c00 	.word	0x40000c00

00002d58 <system_gclk_chan_lock>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_lock(
		const uint8_t channel)
{
    2d58:	b510      	push	{r4, lr}
    2d5a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2d5c:	4b06      	ldr	r3, [pc, #24]	; (2d78 <system_gclk_chan_lock+0x20>)
    2d5e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2d60:	4b06      	ldr	r3, [pc, #24]	; (2d7c <system_gclk_chan_lock+0x24>)
    2d62:	701c      	strb	r4, [r3, #0]

	/* Lock the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_WRTLOCK | GCLK_CLKCTRL_CLKEN;
    2d64:	4a06      	ldr	r2, [pc, #24]	; (2d80 <system_gclk_chan_lock+0x28>)
    2d66:	8853      	ldrh	r3, [r2, #2]
    2d68:	21c0      	movs	r1, #192	; 0xc0
    2d6a:	0209      	lsls	r1, r1, #8
    2d6c:	430b      	orrs	r3, r1
    2d6e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    2d70:	4b04      	ldr	r3, [pc, #16]	; (2d84 <system_gclk_chan_lock+0x2c>)
    2d72:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2d74:	bd10      	pop	{r4, pc}
    2d76:	46c0      	nop			; (mov r8, r8)
    2d78:	00001f19 	.word	0x00001f19
    2d7c:	40000c02 	.word	0x40000c02
    2d80:	40000c00 	.word	0x40000c00
    2d84:	00001f59 	.word	0x00001f59

00002d88 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2d88:	b510      	push	{r4, lr}
    2d8a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2d8c:	4b06      	ldr	r3, [pc, #24]	; (2da8 <system_gclk_chan_get_hz+0x20>)
    2d8e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2d90:	4b06      	ldr	r3, [pc, #24]	; (2dac <system_gclk_chan_get_hz+0x24>)
    2d92:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2d94:	4b06      	ldr	r3, [pc, #24]	; (2db0 <system_gclk_chan_get_hz+0x28>)
    2d96:	885c      	ldrh	r4, [r3, #2]
    2d98:	0524      	lsls	r4, r4, #20
    2d9a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    2d9c:	4b05      	ldr	r3, [pc, #20]	; (2db4 <system_gclk_chan_get_hz+0x2c>)
    2d9e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2da0:	0020      	movs	r0, r4
    2da2:	4b05      	ldr	r3, [pc, #20]	; (2db8 <system_gclk_chan_get_hz+0x30>)
    2da4:	4798      	blx	r3
}
    2da6:	bd10      	pop	{r4, pc}
    2da8:	00001f19 	.word	0x00001f19
    2dac:	40000c02 	.word	0x40000c02
    2db0:	40000c00 	.word	0x40000c00
    2db4:	00001f59 	.word	0x00001f59
    2db8:	00002c25 	.word	0x00002c25

00002dbc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2dbc:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2dbe:	78d3      	ldrb	r3, [r2, #3]
    2dc0:	2b00      	cmp	r3, #0
    2dc2:	d135      	bne.n	2e30 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2dc4:	7813      	ldrb	r3, [r2, #0]
    2dc6:	2b80      	cmp	r3, #128	; 0x80
    2dc8:	d029      	beq.n	2e1e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2dca:	061b      	lsls	r3, r3, #24
    2dcc:	2480      	movs	r4, #128	; 0x80
    2dce:	0264      	lsls	r4, r4, #9
    2dd0:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2dd2:	7854      	ldrb	r4, [r2, #1]
    2dd4:	2502      	movs	r5, #2
    2dd6:	43ac      	bics	r4, r5
    2dd8:	d106      	bne.n	2de8 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2dda:	7894      	ldrb	r4, [r2, #2]
    2ddc:	2c00      	cmp	r4, #0
    2dde:	d120      	bne.n	2e22 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    2de0:	2480      	movs	r4, #128	; 0x80
    2de2:	02a4      	lsls	r4, r4, #10
    2de4:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2de6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2de8:	7854      	ldrb	r4, [r2, #1]
    2dea:	3c01      	subs	r4, #1
    2dec:	2c01      	cmp	r4, #1
    2dee:	d91c      	bls.n	2e2a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2df0:	040d      	lsls	r5, r1, #16
    2df2:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2df4:	24a0      	movs	r4, #160	; 0xa0
    2df6:	05e4      	lsls	r4, r4, #23
    2df8:	432c      	orrs	r4, r5
    2dfa:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2dfc:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2dfe:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2e00:	24d0      	movs	r4, #208	; 0xd0
    2e02:	0624      	lsls	r4, r4, #24
    2e04:	432c      	orrs	r4, r5
    2e06:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2e08:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2e0a:	78d4      	ldrb	r4, [r2, #3]
    2e0c:	2c00      	cmp	r4, #0
    2e0e:	d122      	bne.n	2e56 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2e10:	035b      	lsls	r3, r3, #13
    2e12:	d51c      	bpl.n	2e4e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2e14:	7893      	ldrb	r3, [r2, #2]
    2e16:	2b01      	cmp	r3, #1
    2e18:	d01e      	beq.n	2e58 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    2e1a:	6141      	str	r1, [r0, #20]
    2e1c:	e017      	b.n	2e4e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    2e1e:	2300      	movs	r3, #0
    2e20:	e7d7      	b.n	2dd2 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2e22:	24c0      	movs	r4, #192	; 0xc0
    2e24:	02e4      	lsls	r4, r4, #11
    2e26:	4323      	orrs	r3, r4
    2e28:	e7dd      	b.n	2de6 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2e2a:	4c0d      	ldr	r4, [pc, #52]	; (2e60 <_system_pinmux_config+0xa4>)
    2e2c:	4023      	ands	r3, r4
    2e2e:	e7df      	b.n	2df0 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    2e30:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2e32:	040c      	lsls	r4, r1, #16
    2e34:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2e36:	23a0      	movs	r3, #160	; 0xa0
    2e38:	05db      	lsls	r3, r3, #23
    2e3a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2e3c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2e3e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2e40:	23d0      	movs	r3, #208	; 0xd0
    2e42:	061b      	lsls	r3, r3, #24
    2e44:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2e46:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2e48:	78d3      	ldrb	r3, [r2, #3]
    2e4a:	2b00      	cmp	r3, #0
    2e4c:	d103      	bne.n	2e56 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2e4e:	7853      	ldrb	r3, [r2, #1]
    2e50:	3b01      	subs	r3, #1
    2e52:	2b01      	cmp	r3, #1
    2e54:	d902      	bls.n	2e5c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    2e56:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    2e58:	6181      	str	r1, [r0, #24]
    2e5a:	e7f8      	b.n	2e4e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    2e5c:	6081      	str	r1, [r0, #8]
}
    2e5e:	e7fa      	b.n	2e56 <_system_pinmux_config+0x9a>
    2e60:	fffbffff 	.word	0xfffbffff

00002e64 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2e64:	b510      	push	{r4, lr}
    2e66:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2e68:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2e6a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2e6c:	2900      	cmp	r1, #0
    2e6e:	d104      	bne.n	2e7a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    2e70:	0943      	lsrs	r3, r0, #5
    2e72:	01db      	lsls	r3, r3, #7
    2e74:	4905      	ldr	r1, [pc, #20]	; (2e8c <system_pinmux_pin_set_config+0x28>)
    2e76:	468c      	mov	ip, r1
    2e78:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2e7a:	241f      	movs	r4, #31
    2e7c:	4020      	ands	r0, r4
    2e7e:	2101      	movs	r1, #1
    2e80:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    2e82:	0018      	movs	r0, r3
    2e84:	4b02      	ldr	r3, [pc, #8]	; (2e90 <system_pinmux_pin_set_config+0x2c>)
    2e86:	4798      	blx	r3
}
    2e88:	bd10      	pop	{r4, pc}
    2e8a:	46c0      	nop			; (mov r8, r8)
    2e8c:	41004400 	.word	0x41004400
    2e90:	00002dbd 	.word	0x00002dbd

00002e94 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2e94:	4770      	bx	lr
	...

00002e98 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2e98:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2e9a:	4b05      	ldr	r3, [pc, #20]	; (2eb0 <system_init+0x18>)
    2e9c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2e9e:	4b05      	ldr	r3, [pc, #20]	; (2eb4 <system_init+0x1c>)
    2ea0:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2ea2:	4b05      	ldr	r3, [pc, #20]	; (2eb8 <system_init+0x20>)
    2ea4:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2ea6:	4b05      	ldr	r3, [pc, #20]	; (2ebc <system_init+0x24>)
    2ea8:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2eaa:	4b05      	ldr	r3, [pc, #20]	; (2ec0 <system_init+0x28>)
    2eac:	4798      	blx	r3
}
    2eae:	bd10      	pop	{r4, pc}
    2eb0:	00002a31 	.word	0x00002a31
    2eb4:	00001f89 	.word	0x00001f89
    2eb8:	00002e95 	.word	0x00002e95
    2ebc:	000004a5 	.word	0x000004a5
    2ec0:	00002e95 	.word	0x00002e95

00002ec4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2ec4:	e7fe      	b.n	2ec4 <Dummy_Handler>
	...

00002ec8 <Reset_Handler>:
{
    2ec8:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    2eca:	4a1a      	ldr	r2, [pc, #104]	; (2f34 <Reset_Handler+0x6c>)
    2ecc:	4b1a      	ldr	r3, [pc, #104]	; (2f38 <Reset_Handler+0x70>)
    2ece:	429a      	cmp	r2, r3
    2ed0:	d011      	beq.n	2ef6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    2ed2:	001a      	movs	r2, r3
    2ed4:	4b19      	ldr	r3, [pc, #100]	; (2f3c <Reset_Handler+0x74>)
    2ed6:	429a      	cmp	r2, r3
    2ed8:	d20d      	bcs.n	2ef6 <Reset_Handler+0x2e>
    2eda:	4a19      	ldr	r2, [pc, #100]	; (2f40 <Reset_Handler+0x78>)
    2edc:	3303      	adds	r3, #3
    2ede:	1a9b      	subs	r3, r3, r2
    2ee0:	089b      	lsrs	r3, r3, #2
    2ee2:	3301      	adds	r3, #1
    2ee4:	009b      	lsls	r3, r3, #2
    2ee6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2ee8:	4813      	ldr	r0, [pc, #76]	; (2f38 <Reset_Handler+0x70>)
    2eea:	4912      	ldr	r1, [pc, #72]	; (2f34 <Reset_Handler+0x6c>)
    2eec:	588c      	ldr	r4, [r1, r2]
    2eee:	5084      	str	r4, [r0, r2]
    2ef0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2ef2:	429a      	cmp	r2, r3
    2ef4:	d1fa      	bne.n	2eec <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    2ef6:	4a13      	ldr	r2, [pc, #76]	; (2f44 <Reset_Handler+0x7c>)
    2ef8:	4b13      	ldr	r3, [pc, #76]	; (2f48 <Reset_Handler+0x80>)
    2efa:	429a      	cmp	r2, r3
    2efc:	d20a      	bcs.n	2f14 <Reset_Handler+0x4c>
    2efe:	43d3      	mvns	r3, r2
    2f00:	4911      	ldr	r1, [pc, #68]	; (2f48 <Reset_Handler+0x80>)
    2f02:	185b      	adds	r3, r3, r1
    2f04:	2103      	movs	r1, #3
    2f06:	438b      	bics	r3, r1
    2f08:	3304      	adds	r3, #4
    2f0a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    2f0c:	2100      	movs	r1, #0
    2f0e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2f10:	4293      	cmp	r3, r2
    2f12:	d1fc      	bne.n	2f0e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2f14:	4a0d      	ldr	r2, [pc, #52]	; (2f4c <Reset_Handler+0x84>)
    2f16:	21ff      	movs	r1, #255	; 0xff
    2f18:	4b0d      	ldr	r3, [pc, #52]	; (2f50 <Reset_Handler+0x88>)
    2f1a:	438b      	bics	r3, r1
    2f1c:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2f1e:	4a0d      	ldr	r2, [pc, #52]	; (2f54 <Reset_Handler+0x8c>)
    2f20:	6853      	ldr	r3, [r2, #4]
    2f22:	397f      	subs	r1, #127	; 0x7f
    2f24:	430b      	orrs	r3, r1
    2f26:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2f28:	4b0b      	ldr	r3, [pc, #44]	; (2f58 <Reset_Handler+0x90>)
    2f2a:	4798      	blx	r3
        main();
    2f2c:	4b0b      	ldr	r3, [pc, #44]	; (2f5c <Reset_Handler+0x94>)
    2f2e:	4798      	blx	r3
    2f30:	e7fe      	b.n	2f30 <Reset_Handler+0x68>
    2f32:	46c0      	nop			; (mov r8, r8)
    2f34:	000038dc 	.word	0x000038dc
    2f38:	20000000 	.word	0x20000000
    2f3c:	200001cc 	.word	0x200001cc
    2f40:	20000004 	.word	0x20000004
    2f44:	200001cc 	.word	0x200001cc
    2f48:	200043b4 	.word	0x200043b4
    2f4c:	e000ed00 	.word	0xe000ed00
    2f50:	00000000 	.word	0x00000000
    2f54:	41004000 	.word	0x41004000
    2f58:	00003501 	.word	0x00003501
    2f5c:	00002f91 	.word	0x00002f91

00002f60 <configure_nvm>:

void configure_nvm(void);

//! [setup]
void configure_nvm(void)
{
    2f60:	b500      	push	{lr}
    2f62:	b083      	sub	sp, #12
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    2f64:	2200      	movs	r2, #0
    2f66:	466b      	mov	r3, sp
    2f68:	701a      	strb	r2, [r3, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    2f6a:	4b07      	ldr	r3, [pc, #28]	; (2f88 <configure_nvm+0x28>)
    2f6c:	685b      	ldr	r3, [r3, #4]
    2f6e:	06db      	lsls	r3, r3, #27
    2f70:	0f1b      	lsrs	r3, r3, #28
    2f72:	4669      	mov	r1, sp
    2f74:	708b      	strb	r3, [r1, #2]
	config->disable_cache     = false;
    2f76:	70ca      	strb	r2, [r1, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    2f78:	710a      	strb	r2, [r1, #4]
	//! [setup_2]
	nvm_get_config_defaults(&config_nvm);
	//! [setup_2]

	//! [setup_3]
	config_nvm.manual_page_write = false;
    2f7a:	704a      	strb	r2, [r1, #1]
	//! [setup_3]

	//! [setup_4]
	nvm_set_config(&config_nvm);
    2f7c:	4668      	mov	r0, sp
    2f7e:	4b03      	ldr	r3, [pc, #12]	; (2f8c <configure_nvm+0x2c>)
    2f80:	4798      	blx	r3
	//! [setup_4]
}
    2f82:	b003      	add	sp, #12
    2f84:	bd00      	pop	{pc}
    2f86:	46c0      	nop			; (mov r8, r8)
    2f88:	41004000 	.word	0x41004000
    2f8c:	00000105 	.word	0x00000105

00002f90 <main>:
//! [setup]


int main(void)
{
    2f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f92:	46de      	mov	lr, fp
    2f94:	4657      	mov	r7, sl
    2f96:	464e      	mov	r6, r9
    2f98:	4645      	mov	r5, r8
    2f9a:	b5e0      	push	{r5, r6, r7, lr}
	//uint8_t XORtmp;
	unsigned int i, j;
	enum status_code error_code;
	//UINT16u_t	tmp16;
	
	system_init();
    2f9c:	4bcb      	ldr	r3, [pc, #812]	; (32cc <main+0x33c>)
    2f9e:	4798      	blx	r3
	configure_usart();
    2fa0:	4bcb      	ldr	r3, [pc, #812]	; (32d0 <main+0x340>)
    2fa2:	4798      	blx	r3
	configure_usart_callbacks();
    2fa4:	4bcb      	ldr	r3, [pc, #812]	; (32d4 <main+0x344>)
    2fa6:	4798      	blx	r3
	//configure_adc();
	timer_configure();
    2fa8:	4bcb      	ldr	r3, [pc, #812]	; (32d8 <main+0x348>)
    2faa:	4798      	blx	r3
	configure_extint_channel();
    2fac:	4bcb      	ldr	r3, [pc, #812]	; (32dc <main+0x34c>)
    2fae:	4798      	blx	r3
	configure_extint_callbacks();
    2fb0:	4bcb      	ldr	r3, [pc, #812]	; (32e0 <main+0x350>)
    2fb2:	4798      	blx	r3
	delay_init();
    2fb4:	4bcb      	ldr	r3, [pc, #812]	; (32e4 <main+0x354>)
    2fb6:	4798      	blx	r3
	configure_wdt();
    2fb8:	4bcb      	ldr	r3, [pc, #812]	; (32e8 <main+0x358>)
    2fba:	4798      	blx	r3
	configure_wdt_callbacks();
    2fbc:	4bcb      	ldr	r3, [pc, #812]	; (32ec <main+0x35c>)
    2fbe:	4798      	blx	r3
	configure_nvm();
    2fc0:	4bcb      	ldr	r3, [pc, #812]	; (32f0 <main+0x360>)
    2fc2:	4798      	blx	r3
	cpu_irq_enable();
    2fc4:	2201      	movs	r2, #1
    2fc6:	4bcb      	ldr	r3, [pc, #812]	; (32f4 <main+0x364>)
    2fc8:	701a      	strb	r2, [r3, #0]
    2fca:	f3bf 8f5f 	dmb	sy
    2fce:	b662      	cpsie	i
	system_interrupt_enable_global();

	

	wdt_reset_count();
    2fd0:	4bc9      	ldr	r3, [pc, #804]	; (32f8 <main+0x368>)
    2fd2:	4798      	blx	r3
    2fd4:	4cc9      	ldr	r4, [pc, #804]	; (32fc <main+0x36c>)
	
	j = 0;
    2fd6:	2500      	movs	r5, #0
	
	for ( i = 0; i < NVMCTRL_PAGE_SIZE;i = i+6)
	{
		page_buffer[i] = j;
		page_buffer[i+1] = 1;
    2fd8:	2301      	movs	r3, #1
    2fda:	4699      	mov	r9, r3
		page_buffer[i+2] = 0;
    2fdc:	2600      	movs	r6, #0
		page_buffer[i+3] = 0;
		page_buffer[i+4] = j / 255;
    2fde:	4bc8      	ldr	r3, [pc, #800]	; (3300 <main+0x370>)
    2fe0:	4698      	mov	r8, r3
		page_buffer[i+5] = j % 255;
    2fe2:	4fc8      	ldr	r7, [pc, #800]	; (3304 <main+0x374>)
		page_buffer[i] = j;
    2fe4:	7025      	strb	r5, [r4, #0]
		page_buffer[i+1] = 1;
    2fe6:	464b      	mov	r3, r9
    2fe8:	7063      	strb	r3, [r4, #1]
		page_buffer[i+2] = 0;
    2fea:	70a6      	strb	r6, [r4, #2]
		page_buffer[i+3] = 0;
    2fec:	70e6      	strb	r6, [r4, #3]
		page_buffer[i+4] = j / 255;
    2fee:	21ff      	movs	r1, #255	; 0xff
    2ff0:	0028      	movs	r0, r5
    2ff2:	47c0      	blx	r8
    2ff4:	7120      	strb	r0, [r4, #4]
		page_buffer[i+5] = j % 255;
    2ff6:	21ff      	movs	r1, #255	; 0xff
    2ff8:	0028      	movs	r0, r5
    2ffa:	47b8      	blx	r7
    2ffc:	7161      	strb	r1, [r4, #5]
		j++;
    2ffe:	3501      	adds	r5, #1
    3000:	3406      	adds	r4, #6
	for ( i = 0; i < NVMCTRL_PAGE_SIZE;i = i+6)
    3002:	2d0b      	cmp	r5, #11
    3004:	d1ee      	bne.n	2fe4 <main+0x54>
	}
	
	do
	{
		error_code = nvm_erase_row(
    3006:	25c8      	movs	r5, #200	; 0xc8
    3008:	01ed      	lsls	r5, r5, #7
    300a:	4cbf      	ldr	r4, [pc, #764]	; (3308 <main+0x378>)
    300c:	0028      	movs	r0, r5
    300e:	47a0      	blx	r4
			100 * NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE);
	} while (error_code == STATUS_BUSY);
    3010:	2805      	cmp	r0, #5
    3012:	d0fb      	beq.n	300c <main+0x7c>
	
	do
	{
		error_code = nvm_write_buffer(
    3014:	4eb9      	ldr	r6, [pc, #740]	; (32fc <main+0x36c>)
    3016:	25c8      	movs	r5, #200	; 0xc8
    3018:	01ed      	lsls	r5, r5, #7
    301a:	4cbc      	ldr	r4, [pc, #752]	; (330c <main+0x37c>)
    301c:	2240      	movs	r2, #64	; 0x40
    301e:	0031      	movs	r1, r6
    3020:	0028      	movs	r0, r5
    3022:	47a0      	blx	r4
			100 * NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE,
			page_buffer, NVMCTRL_PAGE_SIZE);
	} while (error_code == STATUS_BUSY);
    3024:	2805      	cmp	r0, #5
    3026:	d0f9      	beq.n	301c <main+0x8c>
	
	do
	{
		error_code = nvm_write_buffer(
    3028:	4eb4      	ldr	r6, [pc, #720]	; (32fc <main+0x36c>)
    302a:	25f0      	movs	r5, #240	; 0xf0
    302c:	01ed      	lsls	r5, r5, #7
    302e:	4cb7      	ldr	r4, [pc, #732]	; (330c <main+0x37c>)
    3030:	2240      	movs	r2, #64	; 0x40
    3032:	0031      	movs	r1, r6
    3034:	0028      	movs	r0, r5
    3036:	47a0      	blx	r4
		120 * NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE,
		page_buffer, NVMCTRL_PAGE_SIZE);
	} while (error_code == STATUS_BUSY);
    3038:	2805      	cmp	r0, #5
    303a:	d0f9      	beq.n	3030 <main+0xa0>
    303c:	4ab4      	ldr	r2, [pc, #720]	; (3310 <main+0x380>)
    303e:	4baf      	ldr	r3, [pc, #700]	; (32fc <main+0x36c>)
    3040:	4699      	mov	r9, r3
	
	for ( i = 0; i < NVMCTRL_PAGE_SIZE;i++)
	{
		page_buffer[i] = 0;
    3042:	2300      	movs	r3, #0
    3044:	4649      	mov	r1, r9
    3046:	700b      	strb	r3, [r1, #0]
    3048:	2101      	movs	r1, #1
    304a:	468c      	mov	ip, r1
    304c:	44e1      	add	r9, ip
	for ( i = 0; i < NVMCTRL_PAGE_SIZE;i++)
    304e:	4591      	cmp	r9, r2
    3050:	d1f8      	bne.n	3044 <main+0xb4>

	
	

	
	wdt_reset_count();
    3052:	4ba9      	ldr	r3, [pc, #676]	; (32f8 <main+0x368>)
    3054:	4798      	blx	r3
	//LED_R_OFF
	//LED_G_OFF
	//LED_B_ON
	Lora_Debug_Flag = 1;
    3056:	4aaf      	ldr	r2, [pc, #700]	; (3314 <main+0x384>)
    3058:	7813      	ldrb	r3, [r2, #0]
    305a:	2108      	movs	r1, #8
    305c:	430b      	orrs	r3, r1
    305e:	7013      	strb	r3, [r2, #0]
	

	Print_Start_Msg();
    3060:	4bad      	ldr	r3, [pc, #692]	; (3318 <main+0x388>)
    3062:	4798      	blx	r3
	
	UserKeyInStauts = NOP;
    3064:	2300      	movs	r3, #0
    3066:	4aad      	ldr	r2, [pc, #692]	; (331c <main+0x38c>)
    3068:	7013      	strb	r3, [r2, #0]
	NowStatus = Read_LoRa_ID_Index;
    306a:	4aad      	ldr	r2, [pc, #692]	; (3320 <main+0x390>)
    306c:	7013      	strb	r3, [r2, #0]
	LoRa_TxRx_Mode_Flag = SetRx;
    306e:	2203      	movs	r2, #3
    3070:	4bac      	ldr	r3, [pc, #688]	; (3324 <main+0x394>)
    3072:	701a      	strb	r2, [r3, #0]
    3074:	4aac      	ldr	r2, [pc, #688]	; (3328 <main+0x398>)
    3076:	23fa      	movs	r3, #250	; 0xfa
    3078:	019b      	lsls	r3, r3, #6
    307a:	18d0      	adds	r0, r2, r3
	
	for(i = 0; i < 1000; i++)
	{
		for(j = 0; j < 16; j++)
		{
			dev[i][j] = '0';
    307c:	2130      	movs	r1, #48	; 0x30
    307e:	e006      	b.n	308e <main+0xfe>
    3080:	54d1      	strb	r1, [r2, r3]
		for(j = 0; j < 16; j++)
    3082:	3301      	adds	r3, #1
    3084:	2b10      	cmp	r3, #16
    3086:	d1fb      	bne.n	3080 <main+0xf0>
    3088:	3210      	adds	r2, #16
	for(i = 0; i < 1000; i++)
    308a:	4290      	cmp	r0, r2
    308c:	d001      	beq.n	3092 <main+0x102>
	} while (error_code == STATUS_BUSY);
    308e:	2300      	movs	r3, #0
    3090:	e7f6      	b.n	3080 <main+0xf0>
		MyLoRaTmp[Write_LoRa_TxBuffer_Index][3] = MyLoRaID[0];
		MyLoRaTmp[Write_LoRa_TxBuffer_Index][4] = MyLoRaID[1];
		MyLoRaTmp[Write_LoRa_TxBuffer_Index][5] = MyLoRaID[2];
		MyLoRaTmp[Write_LoRa_TxBuffer_Index][6] = MyLoRaID[3];

		DIP_SW_Value.byte = 0x00;
    3092:	2400      	movs	r4, #0
    3094:	e097      	b.n	31c6 <main+0x236>
						lcd_command(lcd_data, 0x31);
						lcd_command(lcd_data, 0x30 + (DIP_SW_Value.byte - 10));
					}
					else
					{
						lcd_command(lcd_data, ' ');
    3096:	2120      	movs	r1, #32
    3098:	2001      	movs	r0, #1
    309a:	4fa4      	ldr	r7, [pc, #656]	; (332c <main+0x39c>)
    309c:	47b8      	blx	r7
						lcd_command(lcd_data, 0x30 + DIP_SW_Value.byte);
    309e:	4ba4      	ldr	r3, [pc, #656]	; (3330 <main+0x3a0>)
    30a0:	7819      	ldrb	r1, [r3, #0]
    30a2:	3130      	adds	r1, #48	; 0x30
    30a4:	b2c9      	uxtb	r1, r1
    30a6:	2001      	movs	r0, #1
    30a8:	47b8      	blx	r7
			}
		}
		
		

		if(LoRa_Rx_Flag == LoraRxDataReady)		
    30aa:	4ba2      	ldr	r3, [pc, #648]	; (3334 <main+0x3a4>)
    30ac:	781b      	ldrb	r3, [r3, #0]
    30ae:	2b04      	cmp	r3, #4
    30b0:	d05d      	beq.n	316e <main+0x1de>
			//NowStatus = Write_LoRa_Setting_Index;
			//LoRa_TxRx_Mode_Flag = SetTx;
			LoRa_Rx_Flag = LoraRxNoData;
		}
		
		switch(UserKeyInStauts)
    30b2:	4b9a      	ldr	r3, [pc, #616]	; (331c <main+0x38c>)
    30b4:	781b      	ldrb	r3, [r3, #0]
    30b6:	2b01      	cmp	r3, #1
    30b8:	d05f      	beq.n	317a <main+0x1ea>
		usart_read_buffer_job(Debug_COM, (uint8_t *)user_rx_buffer, MAX_RX_BUFFER_LENGTH);
    30ba:	2201      	movs	r2, #1
    30bc:	499e      	ldr	r1, [pc, #632]	; (3338 <main+0x3a8>)
    30be:	489f      	ldr	r0, [pc, #636]	; (333c <main+0x3ac>)
    30c0:	47a8      	blx	r5
		usart_read_buffer_job(&MyUart03, (uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
    30c2:	2201      	movs	r2, #1
    30c4:	499e      	ldr	r1, [pc, #632]	; (3340 <main+0x3b0>)
    30c6:	489f      	ldr	r0, [pc, #636]	; (3344 <main+0x3b4>)
    30c8:	47a8      	blx	r5
		Lora_CMD_Func();
    30ca:	4b9f      	ldr	r3, [pc, #636]	; (3348 <main+0x3b8>)
    30cc:	4798      	blx	r3
		MyLoRaTmp[Write_LoRa_TxBuffer_Index][3] = MyLoRaID[0];
    30ce:	4b9f      	ldr	r3, [pc, #636]	; (334c <main+0x3bc>)
    30d0:	4a9f      	ldr	r2, [pc, #636]	; (3350 <main+0x3c0>)
    30d2:	7810      	ldrb	r0, [r2, #0]
    30d4:	218a      	movs	r1, #138	; 0x8a
    30d6:	5458      	strb	r0, [r3, r1]
		MyLoRaTmp[Write_LoRa_TxBuffer_Index][4] = MyLoRaID[1];
    30d8:	7850      	ldrb	r0, [r2, #1]
    30da:	3101      	adds	r1, #1
    30dc:	5458      	strb	r0, [r3, r1]
		MyLoRaTmp[Write_LoRa_TxBuffer_Index][5] = MyLoRaID[2];
    30de:	7890      	ldrb	r0, [r2, #2]
    30e0:	3101      	adds	r1, #1
    30e2:	5458      	strb	r0, [r3, r1]
		MyLoRaTmp[Write_LoRa_TxBuffer_Index][6] = MyLoRaID[3];
    30e4:	78d1      	ldrb	r1, [r2, #3]
    30e6:	228d      	movs	r2, #141	; 0x8d
    30e8:	5499      	strb	r1, [r3, r2]
		DIP_SW_Value.byte = 0x00;
    30ea:	4991      	ldr	r1, [pc, #580]	; (3330 <main+0x3a0>)
    30ec:	700c      	strb	r4, [r1, #0]
	return (port_base->IN.reg & pin_mask);
    30ee:	4899      	ldr	r0, [pc, #612]	; (3354 <main+0x3c4>)
    30f0:	6a02      	ldr	r2, [r0, #32]
    30f2:	0d92      	lsrs	r2, r2, #22
    30f4:	2301      	movs	r3, #1
		DIP_SW_Value.bit.b0 = port_pin_get_input_level(PIN_PA22);
    30f6:	401a      	ands	r2, r3
    30f8:	700a      	strb	r2, [r1, #0]
    30fa:	6a02      	ldr	r2, [r0, #32]
    30fc:	0c52      	lsrs	r2, r2, #17
		DIP_SW_Value.bit.b1 = port_pin_get_input_level(PIN_PA17);
    30fe:	401a      	ands	r2, r3
    3100:	0052      	lsls	r2, r2, #1
    3102:	780f      	ldrb	r7, [r1, #0]
    3104:	2602      	movs	r6, #2
    3106:	43b7      	bics	r7, r6
    3108:	433a      	orrs	r2, r7
    310a:	700a      	strb	r2, [r1, #0]
    310c:	6a02      	ldr	r2, [r0, #32]
    310e:	0c12      	lsrs	r2, r2, #16
		DIP_SW_Value.bit.b2 = port_pin_get_input_level(PIN_PA16);
    3110:	4013      	ands	r3, r2
    3112:	009b      	lsls	r3, r3, #2
    3114:	780a      	ldrb	r2, [r1, #0]
    3116:	2004      	movs	r0, #4
    3118:	4382      	bics	r2, r0
		DIP_SW_Value.byte = DIP_SW_Value.byte + 6;	
    311a:	4313      	orrs	r3, r2
    311c:	1d9a      	adds	r2, r3, #6
    311e:	b2d2      	uxtb	r2, r2
    3120:	700a      	strb	r2, [r1, #0]
		if(Lora_initial_Flag == 1)
    3122:	497c      	ldr	r1, [pc, #496]	; (3314 <main+0x384>)
    3124:	7809      	ldrb	r1, [r1, #0]
    3126:	0789      	lsls	r1, r1, #30
    3128:	d5bf      	bpl.n	30aa <main+0x11a>
			if(Last_DIP_SW_Value != DIP_SW_Value.byte)
    312a:	498b      	ldr	r1, [pc, #556]	; (3358 <main+0x3c8>)
    312c:	7809      	ldrb	r1, [r1, #0]
    312e:	4291      	cmp	r1, r2
    3130:	d0bb      	beq.n	30aa <main+0x11a>
				MyLoRaTmp[Write_LoRa_Setting_Index][5] = DIP_SW_Value.byte - 5;
    3132:	3301      	adds	r3, #1
    3134:	2171      	movs	r1, #113	; 0x71
    3136:	4885      	ldr	r0, [pc, #532]	; (334c <main+0x3bc>)
    3138:	5443      	strb	r3, [r0, r1]
				NowStatus = Write_LoRa_Setting_Index;
    313a:	396d      	subs	r1, #109	; 0x6d
    313c:	4b78      	ldr	r3, [pc, #480]	; (3320 <main+0x390>)
    313e:	7019      	strb	r1, [r3, #0]
				Last_DIP_SW_Value = DIP_SW_Value.byte;
    3140:	4b85      	ldr	r3, [pc, #532]	; (3358 <main+0x3c8>)
    3142:	701a      	strb	r2, [r3, #0]
				lcd_command(lcd_instr, 0xC4);
    3144:	31c0      	adds	r1, #192	; 0xc0
    3146:	0020      	movs	r0, r4
    3148:	4b78      	ldr	r3, [pc, #480]	; (332c <main+0x39c>)
    314a:	4798      	blx	r3
				if(DIP_SW_Value.byte < 13)
    314c:	4b78      	ldr	r3, [pc, #480]	; (3330 <main+0x3a0>)
    314e:	781b      	ldrb	r3, [r3, #0]
    3150:	2b0c      	cmp	r3, #12
    3152:	d8aa      	bhi.n	30aa <main+0x11a>
					if(DIP_SW_Value.byte > 9)
    3154:	2b09      	cmp	r3, #9
    3156:	d99e      	bls.n	3096 <main+0x106>
						lcd_command(lcd_data, 0x31);
    3158:	2131      	movs	r1, #49	; 0x31
    315a:	2001      	movs	r0, #1
    315c:	4f73      	ldr	r7, [pc, #460]	; (332c <main+0x39c>)
    315e:	47b8      	blx	r7
						lcd_command(lcd_data, 0x30 + (DIP_SW_Value.byte - 10));
    3160:	4b73      	ldr	r3, [pc, #460]	; (3330 <main+0x3a0>)
    3162:	7819      	ldrb	r1, [r3, #0]
    3164:	3126      	adds	r1, #38	; 0x26
    3166:	b2c9      	uxtb	r1, r1
    3168:	2001      	movs	r0, #1
    316a:	47b8      	blx	r7
    316c:	e79d      	b.n	30aa <main+0x11a>
			Display_Rssi();
    316e:	4b7b      	ldr	r3, [pc, #492]	; (335c <main+0x3cc>)
    3170:	4798      	blx	r3
			LoRa_Rx_Flag = LoraRxNoData;
    3172:	2205      	movs	r2, #5
    3174:	4b6f      	ldr	r3, [pc, #444]	; (3334 <main+0x3a4>)
    3176:	701a      	strb	r2, [r3, #0]
    3178:	e79b      	b.n	30b2 <main+0x122>
		{
			case UserKeyInEnterIndex:
				for(i = 0; i < UserKeyInBufCount; i++)
    317a:	4b79      	ldr	r3, [pc, #484]	; (3360 <main+0x3d0>)
    317c:	781b      	ldrb	r3, [r3, #0]
    317e:	2b00      	cmp	r3, #0
    3180:	d00d      	beq.n	319e <main+0x20e>
    3182:	2700      	movs	r7, #0
				{
					uTXByte(Debug_COM, UserKeyInBuf[i]);
    3184:	4b77      	ldr	r3, [pc, #476]	; (3364 <main+0x3d4>)
    3186:	469a      	mov	sl, r3
    3188:	4e6c      	ldr	r6, [pc, #432]	; (333c <main+0x3ac>)
    318a:	4d77      	ldr	r5, [pc, #476]	; (3368 <main+0x3d8>)
    318c:	4653      	mov	r3, sl
    318e:	5dd9      	ldrb	r1, [r3, r7]
    3190:	0030      	movs	r0, r6
    3192:	47a8      	blx	r5
				for(i = 0; i < UserKeyInBufCount; i++)
    3194:	3701      	adds	r7, #1
    3196:	4b72      	ldr	r3, [pc, #456]	; (3360 <main+0x3d0>)
    3198:	781b      	ldrb	r3, [r3, #0]
    319a:	42bb      	cmp	r3, r7
    319c:	d8f6      	bhi.n	318c <main+0x1fc>
				}
				UserKeyInBufCount = 0;
    319e:	4b70      	ldr	r3, [pc, #448]	; (3360 <main+0x3d0>)
    31a0:	701c      	strb	r4, [r3, #0]
			
				if(UserKeyInBuf[0] == 'd')	///debug mode
    31a2:	4b70      	ldr	r3, [pc, #448]	; (3364 <main+0x3d4>)
    31a4:	781b      	ldrb	r3, [r3, #0]
    31a6:	2b64      	cmp	r3, #100	; 0x64
    31a8:	d00f      	beq.n	31ca <main+0x23a>
					{
						Lora_Debug_Flag = 1;
						Print_Debug_Mode_ON_Msg();
					}
				}
				if(UserKeyInBuf[0] == 's')	///Print Lora FW, ID
    31aa:	4b6e      	ldr	r3, [pc, #440]	; (3364 <main+0x3d4>)
    31ac:	781b      	ldrb	r3, [r3, #0]
    31ae:	2b73      	cmp	r3, #115	; 0x73
    31b0:	d01f      	beq.n	31f2 <main+0x262>
				{
					Print_Catch_LoRa_ID_Msg();
				}
				if(UserKeyInBuf[0] == 'r')	///Print RSSI
    31b2:	4b6c      	ldr	r3, [pc, #432]	; (3364 <main+0x3d4>)
    31b4:	781b      	ldrb	r3, [r3, #0]
    31b6:	2b72      	cmp	r3, #114	; 0x72
    31b8:	d01e      	beq.n	31f8 <main+0x268>
					Print_RSSI_Msg();
					Print_Lora_RX_Count_Form_Module_Msg();
					Print_Line_Msg();
				}
				
				if(UserKeyInBuf[0] == 'l')
    31ba:	4b6a      	ldr	r3, [pc, #424]	; (3364 <main+0x3d4>)
    31bc:	781b      	ldrb	r3, [r3, #0]
    31be:	2b6c      	cmp	r3, #108	; 0x6c
    31c0:	d022      	beq.n	3208 <main+0x278>
						uart_send_ascii_byte(Debug_COM, page_buffer[i+4]);
						uart_send_ascii_byte(Debug_COM, page_buffer[i+5]);
						uTXByte(Debug_COM, 0x0d);
					}
				}
				UserKeyInStauts = NOP;
    31c2:	4b56      	ldr	r3, [pc, #344]	; (331c <main+0x38c>)
    31c4:	701c      	strb	r4, [r3, #0]
		usart_read_buffer_job(Debug_COM, (uint8_t *)user_rx_buffer, MAX_RX_BUFFER_LENGTH);
    31c6:	4d69      	ldr	r5, [pc, #420]	; (336c <main+0x3dc>)
    31c8:	e777      	b.n	30ba <main+0x12a>
					if(Lora_Debug_Flag == 1)
    31ca:	4b52      	ldr	r3, [pc, #328]	; (3314 <main+0x384>)
    31cc:	781b      	ldrb	r3, [r3, #0]
    31ce:	071b      	lsls	r3, r3, #28
    31d0:	d507      	bpl.n	31e2 <main+0x252>
						Lora_Debug_Flag = 0;
    31d2:	4a50      	ldr	r2, [pc, #320]	; (3314 <main+0x384>)
    31d4:	7813      	ldrb	r3, [r2, #0]
    31d6:	2108      	movs	r1, #8
    31d8:	438b      	bics	r3, r1
    31da:	7013      	strb	r3, [r2, #0]
						Print_Debug_Mode_OFF_Msg();
    31dc:	4b64      	ldr	r3, [pc, #400]	; (3370 <main+0x3e0>)
    31de:	4798      	blx	r3
    31e0:	e7e3      	b.n	31aa <main+0x21a>
						Lora_Debug_Flag = 1;
    31e2:	4a4c      	ldr	r2, [pc, #304]	; (3314 <main+0x384>)
    31e4:	7813      	ldrb	r3, [r2, #0]
    31e6:	2108      	movs	r1, #8
    31e8:	430b      	orrs	r3, r1
    31ea:	7013      	strb	r3, [r2, #0]
						Print_Debug_Mode_ON_Msg();
    31ec:	4b61      	ldr	r3, [pc, #388]	; (3374 <main+0x3e4>)
    31ee:	4798      	blx	r3
    31f0:	e7db      	b.n	31aa <main+0x21a>
					Print_Catch_LoRa_ID_Msg();
    31f2:	4b61      	ldr	r3, [pc, #388]	; (3378 <main+0x3e8>)
    31f4:	4798      	blx	r3
    31f6:	e7dc      	b.n	31b2 <main+0x222>
					Print_Line_Msg();
    31f8:	4d60      	ldr	r5, [pc, #384]	; (337c <main+0x3ec>)
    31fa:	47a8      	blx	r5
					Print_RSSI_Msg();
    31fc:	4b60      	ldr	r3, [pc, #384]	; (3380 <main+0x3f0>)
    31fe:	4798      	blx	r3
					Print_Lora_RX_Count_Form_Module_Msg();
    3200:	4b60      	ldr	r3, [pc, #384]	; (3384 <main+0x3f4>)
    3202:	4798      	blx	r3
					Print_Line_Msg();
    3204:	47a8      	blx	r5
    3206:	e7d8      	b.n	31ba <main+0x22a>
						error_code = nvm_read_buffer(
    3208:	4d3c      	ldr	r5, [pc, #240]	; (32fc <main+0x36c>)
    320a:	26c8      	movs	r6, #200	; 0xc8
    320c:	01f6      	lsls	r6, r6, #7
    320e:	4f5e      	ldr	r7, [pc, #376]	; (3388 <main+0x3f8>)
    3210:	2240      	movs	r2, #64	; 0x40
    3212:	0029      	movs	r1, r5
    3214:	0030      	movs	r0, r6
    3216:	47b8      	blx	r7
					} while (error_code == STATUS_BUSY);
    3218:	2805      	cmp	r0, #5
    321a:	d0f9      	beq.n	3210 <main+0x280>
    321c:	4b5b      	ldr	r3, [pc, #364]	; (338c <main+0x3fc>)
    321e:	469b      	mov	fp, r3
    3220:	4d36      	ldr	r5, [pc, #216]	; (32fc <main+0x36c>)
						uart_send_ascii_byte(Debug_COM, page_buffer[i]);
    3222:	4e46      	ldr	r6, [pc, #280]	; (333c <main+0x3ac>)
    3224:	4b5a      	ldr	r3, [pc, #360]	; (3390 <main+0x400>)
    3226:	4698      	mov	r8, r3
						uTXByte(Debug_COM, ' ');
    3228:	4f4f      	ldr	r7, [pc, #316]	; (3368 <main+0x3d8>)
						uart_send_ascii_byte(Debug_COM, page_buffer[i]);
    322a:	7829      	ldrb	r1, [r5, #0]
    322c:	0030      	movs	r0, r6
    322e:	47c0      	blx	r8
						uTXByte(Debug_COM, ' ');
    3230:	2120      	movs	r1, #32
    3232:	0030      	movs	r0, r6
    3234:	47b8      	blx	r7
						uart_send_ascii_byte(Debug_COM, page_buffer[i+1]);
    3236:	7869      	ldrb	r1, [r5, #1]
    3238:	0030      	movs	r0, r6
    323a:	47c0      	blx	r8
						uTXByte(Debug_COM, ' ');
    323c:	2120      	movs	r1, #32
    323e:	0030      	movs	r0, r6
    3240:	47b8      	blx	r7
						uart_send_ascii_byte(Debug_COM, page_buffer[i+2]);
    3242:	78a9      	ldrb	r1, [r5, #2]
    3244:	0030      	movs	r0, r6
    3246:	47c0      	blx	r8
						uart_send_ascii_byte(Debug_COM, page_buffer[i+3]);
    3248:	78e9      	ldrb	r1, [r5, #3]
    324a:	0030      	movs	r0, r6
    324c:	47c0      	blx	r8
						uart_send_ascii_byte(Debug_COM, page_buffer[i+4]);
    324e:	7929      	ldrb	r1, [r5, #4]
    3250:	0030      	movs	r0, r6
    3252:	47c0      	blx	r8
						uart_send_ascii_byte(Debug_COM, page_buffer[i+5]);
    3254:	7969      	ldrb	r1, [r5, #5]
    3256:	0030      	movs	r0, r6
    3258:	47c0      	blx	r8
						uTXByte(Debug_COM, 0x0d);
    325a:	210d      	movs	r1, #13
    325c:	0030      	movs	r0, r6
    325e:	47b8      	blx	r7
    3260:	3506      	adds	r5, #6
					for ( i = 0; i < NVMCTRL_PAGE_SIZE; i=i+6)
    3262:	455d      	cmp	r5, fp
    3264:	d1e1      	bne.n	322a <main+0x29a>
    3266:	4b25      	ldr	r3, [pc, #148]	; (32fc <main+0x36c>)
							page_buffer[i] = 0;
    3268:	701c      	strb	r4, [r3, #0]
    326a:	3301      	adds	r3, #1
						for ( i = 0; i < NVMCTRL_PAGE_SIZE;i++)
    326c:	454b      	cmp	r3, r9
    326e:	d1fb      	bne.n	3268 <main+0x2d8>
						error_code = nvm_read_buffer(
    3270:	4e22      	ldr	r6, [pc, #136]	; (32fc <main+0x36c>)
    3272:	4f45      	ldr	r7, [pc, #276]	; (3388 <main+0x3f8>)
    3274:	2240      	movs	r2, #64	; 0x40
    3276:	0031      	movs	r1, r6
    3278:	20f0      	movs	r0, #240	; 0xf0
    327a:	01c0      	lsls	r0, r0, #7
    327c:	47b8      	blx	r7
					} while (error_code == STATUS_BUSY);
    327e:	2805      	cmp	r0, #5
    3280:	d0f8      	beq.n	3274 <main+0x2e4>
    3282:	4f1e      	ldr	r7, [pc, #120]	; (32fc <main+0x36c>)
						uart_send_ascii_byte(Debug_COM, page_buffer[i]);
    3284:	4e2d      	ldr	r6, [pc, #180]	; (333c <main+0x3ac>)
    3286:	4b42      	ldr	r3, [pc, #264]	; (3390 <main+0x400>)
    3288:	469a      	mov	sl, r3
						uTXByte(Debug_COM, ' ');
    328a:	4b37      	ldr	r3, [pc, #220]	; (3368 <main+0x3d8>)
    328c:	4698      	mov	r8, r3
						uart_send_ascii_byte(Debug_COM, page_buffer[i]);
    328e:	7839      	ldrb	r1, [r7, #0]
    3290:	0030      	movs	r0, r6
    3292:	47d0      	blx	sl
						uTXByte(Debug_COM, ' ');
    3294:	2120      	movs	r1, #32
    3296:	0030      	movs	r0, r6
    3298:	47c0      	blx	r8
						uart_send_ascii_byte(Debug_COM, page_buffer[i+1]);
    329a:	7879      	ldrb	r1, [r7, #1]
    329c:	0030      	movs	r0, r6
    329e:	47d0      	blx	sl
						uTXByte(Debug_COM, ' ');
    32a0:	2120      	movs	r1, #32
    32a2:	0030      	movs	r0, r6
    32a4:	47c0      	blx	r8
						uart_send_ascii_byte(Debug_COM, page_buffer[i+2]);
    32a6:	78b9      	ldrb	r1, [r7, #2]
    32a8:	0030      	movs	r0, r6
    32aa:	47d0      	blx	sl
						uart_send_ascii_byte(Debug_COM, page_buffer[i+3]);
    32ac:	78f9      	ldrb	r1, [r7, #3]
    32ae:	0030      	movs	r0, r6
    32b0:	47d0      	blx	sl
						uart_send_ascii_byte(Debug_COM, page_buffer[i+4]);
    32b2:	7939      	ldrb	r1, [r7, #4]
    32b4:	0030      	movs	r0, r6
    32b6:	47d0      	blx	sl
						uart_send_ascii_byte(Debug_COM, page_buffer[i+5]);
    32b8:	7979      	ldrb	r1, [r7, #5]
    32ba:	0030      	movs	r0, r6
    32bc:	47d0      	blx	sl
						uTXByte(Debug_COM, 0x0d);
    32be:	210d      	movs	r1, #13
    32c0:	0030      	movs	r0, r6
    32c2:	47c0      	blx	r8
    32c4:	3706      	adds	r7, #6
					for ( i = 0; i < NVMCTRL_PAGE_SIZE; i=i+6)
    32c6:	42bd      	cmp	r5, r7
    32c8:	d1e1      	bne.n	328e <main+0x2fe>
    32ca:	e77a      	b.n	31c2 <main+0x232>
    32cc:	00002e99 	.word	0x00002e99
    32d0:	00001c01 	.word	0x00001c01
    32d4:	00001d65 	.word	0x00001d65
    32d8:	00001b81 	.word	0x00001b81
    32dc:	00000ab9 	.word	0x00000ab9
    32e0:	00000ae9 	.word	0x00000ae9
    32e4:	00001ead 	.word	0x00001ead
    32e8:	000003a1 	.word	0x000003a1
    32ec:	000003cd 	.word	0x000003cd
    32f0:	00002f61 	.word	0x00002f61
    32f4:	200001c8 	.word	0x200001c8
    32f8:	00000a3d 	.word	0x00000a3d
    32fc:	20004278 	.word	0x20004278
    3300:	00003395 	.word	0x00003395
    3304:	000034a1 	.word	0x000034a1
    3308:	00000341 	.word	0x00000341
    330c:	0000022d 	.word	0x0000022d
    3310:	200042b8 	.word	0x200042b8
    3314:	2000414c 	.word	0x2000414c
    3318:	000017e1 	.word	0x000017e1
    331c:	2000414e 	.word	0x2000414e
    3320:	200040ac 	.word	0x200040ac
    3324:	20004275 	.word	0x20004275
    3328:	20000228 	.word	0x20000228
    332c:	00000b89 	.word	0x00000b89
    3330:	2000413c 	.word	0x2000413c
    3334:	200040f4 	.word	0x200040f4
    3338:	200040b0 	.word	0x200040b0
    333c:	200040b4 	.word	0x200040b4
    3340:	20004154 	.word	0x20004154
    3344:	200042e0 	.word	0x200042e0
    3348:	00000e2d 	.word	0x00000e2d
    334c:	20000000 	.word	0x20000000
    3350:	20004140 	.word	0x20004140
    3354:	41004400 	.word	0x41004400
    3358:	2000414d 	.word	0x2000414d
    335c:	00001251 	.word	0x00001251
    3360:	20004148 	.word	0x20004148
    3364:	2000411c 	.word	0x2000411c
    3368:	00001da5 	.word	0x00001da5
    336c:	000027a5 	.word	0x000027a5
    3370:	000019c5 	.word	0x000019c5
    3374:	00001975 	.word	0x00001975
    3378:	00001731 	.word	0x00001731
    337c:	00001701 	.word	0x00001701
    3380:	00001885 	.word	0x00001885
    3384:	000018f9 	.word	0x000018f9
    3388:	000002d5 	.word	0x000002d5
    338c:	200042ba 	.word	0x200042ba
    3390:	00001dc5 	.word	0x00001dc5

00003394 <__udivsi3>:
    3394:	2200      	movs	r2, #0
    3396:	0843      	lsrs	r3, r0, #1
    3398:	428b      	cmp	r3, r1
    339a:	d374      	bcc.n	3486 <__udivsi3+0xf2>
    339c:	0903      	lsrs	r3, r0, #4
    339e:	428b      	cmp	r3, r1
    33a0:	d35f      	bcc.n	3462 <__udivsi3+0xce>
    33a2:	0a03      	lsrs	r3, r0, #8
    33a4:	428b      	cmp	r3, r1
    33a6:	d344      	bcc.n	3432 <__udivsi3+0x9e>
    33a8:	0b03      	lsrs	r3, r0, #12
    33aa:	428b      	cmp	r3, r1
    33ac:	d328      	bcc.n	3400 <__udivsi3+0x6c>
    33ae:	0c03      	lsrs	r3, r0, #16
    33b0:	428b      	cmp	r3, r1
    33b2:	d30d      	bcc.n	33d0 <__udivsi3+0x3c>
    33b4:	22ff      	movs	r2, #255	; 0xff
    33b6:	0209      	lsls	r1, r1, #8
    33b8:	ba12      	rev	r2, r2
    33ba:	0c03      	lsrs	r3, r0, #16
    33bc:	428b      	cmp	r3, r1
    33be:	d302      	bcc.n	33c6 <__udivsi3+0x32>
    33c0:	1212      	asrs	r2, r2, #8
    33c2:	0209      	lsls	r1, r1, #8
    33c4:	d065      	beq.n	3492 <__udivsi3+0xfe>
    33c6:	0b03      	lsrs	r3, r0, #12
    33c8:	428b      	cmp	r3, r1
    33ca:	d319      	bcc.n	3400 <__udivsi3+0x6c>
    33cc:	e000      	b.n	33d0 <__udivsi3+0x3c>
    33ce:	0a09      	lsrs	r1, r1, #8
    33d0:	0bc3      	lsrs	r3, r0, #15
    33d2:	428b      	cmp	r3, r1
    33d4:	d301      	bcc.n	33da <__udivsi3+0x46>
    33d6:	03cb      	lsls	r3, r1, #15
    33d8:	1ac0      	subs	r0, r0, r3
    33da:	4152      	adcs	r2, r2
    33dc:	0b83      	lsrs	r3, r0, #14
    33de:	428b      	cmp	r3, r1
    33e0:	d301      	bcc.n	33e6 <__udivsi3+0x52>
    33e2:	038b      	lsls	r3, r1, #14
    33e4:	1ac0      	subs	r0, r0, r3
    33e6:	4152      	adcs	r2, r2
    33e8:	0b43      	lsrs	r3, r0, #13
    33ea:	428b      	cmp	r3, r1
    33ec:	d301      	bcc.n	33f2 <__udivsi3+0x5e>
    33ee:	034b      	lsls	r3, r1, #13
    33f0:	1ac0      	subs	r0, r0, r3
    33f2:	4152      	adcs	r2, r2
    33f4:	0b03      	lsrs	r3, r0, #12
    33f6:	428b      	cmp	r3, r1
    33f8:	d301      	bcc.n	33fe <__udivsi3+0x6a>
    33fa:	030b      	lsls	r3, r1, #12
    33fc:	1ac0      	subs	r0, r0, r3
    33fe:	4152      	adcs	r2, r2
    3400:	0ac3      	lsrs	r3, r0, #11
    3402:	428b      	cmp	r3, r1
    3404:	d301      	bcc.n	340a <__udivsi3+0x76>
    3406:	02cb      	lsls	r3, r1, #11
    3408:	1ac0      	subs	r0, r0, r3
    340a:	4152      	adcs	r2, r2
    340c:	0a83      	lsrs	r3, r0, #10
    340e:	428b      	cmp	r3, r1
    3410:	d301      	bcc.n	3416 <__udivsi3+0x82>
    3412:	028b      	lsls	r3, r1, #10
    3414:	1ac0      	subs	r0, r0, r3
    3416:	4152      	adcs	r2, r2
    3418:	0a43      	lsrs	r3, r0, #9
    341a:	428b      	cmp	r3, r1
    341c:	d301      	bcc.n	3422 <__udivsi3+0x8e>
    341e:	024b      	lsls	r3, r1, #9
    3420:	1ac0      	subs	r0, r0, r3
    3422:	4152      	adcs	r2, r2
    3424:	0a03      	lsrs	r3, r0, #8
    3426:	428b      	cmp	r3, r1
    3428:	d301      	bcc.n	342e <__udivsi3+0x9a>
    342a:	020b      	lsls	r3, r1, #8
    342c:	1ac0      	subs	r0, r0, r3
    342e:	4152      	adcs	r2, r2
    3430:	d2cd      	bcs.n	33ce <__udivsi3+0x3a>
    3432:	09c3      	lsrs	r3, r0, #7
    3434:	428b      	cmp	r3, r1
    3436:	d301      	bcc.n	343c <__udivsi3+0xa8>
    3438:	01cb      	lsls	r3, r1, #7
    343a:	1ac0      	subs	r0, r0, r3
    343c:	4152      	adcs	r2, r2
    343e:	0983      	lsrs	r3, r0, #6
    3440:	428b      	cmp	r3, r1
    3442:	d301      	bcc.n	3448 <__udivsi3+0xb4>
    3444:	018b      	lsls	r3, r1, #6
    3446:	1ac0      	subs	r0, r0, r3
    3448:	4152      	adcs	r2, r2
    344a:	0943      	lsrs	r3, r0, #5
    344c:	428b      	cmp	r3, r1
    344e:	d301      	bcc.n	3454 <__udivsi3+0xc0>
    3450:	014b      	lsls	r3, r1, #5
    3452:	1ac0      	subs	r0, r0, r3
    3454:	4152      	adcs	r2, r2
    3456:	0903      	lsrs	r3, r0, #4
    3458:	428b      	cmp	r3, r1
    345a:	d301      	bcc.n	3460 <__udivsi3+0xcc>
    345c:	010b      	lsls	r3, r1, #4
    345e:	1ac0      	subs	r0, r0, r3
    3460:	4152      	adcs	r2, r2
    3462:	08c3      	lsrs	r3, r0, #3
    3464:	428b      	cmp	r3, r1
    3466:	d301      	bcc.n	346c <__udivsi3+0xd8>
    3468:	00cb      	lsls	r3, r1, #3
    346a:	1ac0      	subs	r0, r0, r3
    346c:	4152      	adcs	r2, r2
    346e:	0883      	lsrs	r3, r0, #2
    3470:	428b      	cmp	r3, r1
    3472:	d301      	bcc.n	3478 <__udivsi3+0xe4>
    3474:	008b      	lsls	r3, r1, #2
    3476:	1ac0      	subs	r0, r0, r3
    3478:	4152      	adcs	r2, r2
    347a:	0843      	lsrs	r3, r0, #1
    347c:	428b      	cmp	r3, r1
    347e:	d301      	bcc.n	3484 <__udivsi3+0xf0>
    3480:	004b      	lsls	r3, r1, #1
    3482:	1ac0      	subs	r0, r0, r3
    3484:	4152      	adcs	r2, r2
    3486:	1a41      	subs	r1, r0, r1
    3488:	d200      	bcs.n	348c <__udivsi3+0xf8>
    348a:	4601      	mov	r1, r0
    348c:	4152      	adcs	r2, r2
    348e:	4610      	mov	r0, r2
    3490:	4770      	bx	lr
    3492:	e7ff      	b.n	3494 <__udivsi3+0x100>
    3494:	b501      	push	{r0, lr}
    3496:	2000      	movs	r0, #0
    3498:	f000 f806 	bl	34a8 <__aeabi_idiv0>
    349c:	bd02      	pop	{r1, pc}
    349e:	46c0      	nop			; (mov r8, r8)

000034a0 <__aeabi_uidivmod>:
    34a0:	2900      	cmp	r1, #0
    34a2:	d0f7      	beq.n	3494 <__udivsi3+0x100>
    34a4:	e776      	b.n	3394 <__udivsi3>
    34a6:	4770      	bx	lr

000034a8 <__aeabi_idiv0>:
    34a8:	4770      	bx	lr
    34aa:	46c0      	nop			; (mov r8, r8)

000034ac <__aeabi_lmul>:
    34ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    34ae:	46ce      	mov	lr, r9
    34b0:	4647      	mov	r7, r8
    34b2:	0415      	lsls	r5, r2, #16
    34b4:	0c2d      	lsrs	r5, r5, #16
    34b6:	002e      	movs	r6, r5
    34b8:	b580      	push	{r7, lr}
    34ba:	0407      	lsls	r7, r0, #16
    34bc:	0c14      	lsrs	r4, r2, #16
    34be:	0c3f      	lsrs	r7, r7, #16
    34c0:	4699      	mov	r9, r3
    34c2:	0c03      	lsrs	r3, r0, #16
    34c4:	437e      	muls	r6, r7
    34c6:	435d      	muls	r5, r3
    34c8:	4367      	muls	r7, r4
    34ca:	4363      	muls	r3, r4
    34cc:	197f      	adds	r7, r7, r5
    34ce:	0c34      	lsrs	r4, r6, #16
    34d0:	19e4      	adds	r4, r4, r7
    34d2:	469c      	mov	ip, r3
    34d4:	42a5      	cmp	r5, r4
    34d6:	d903      	bls.n	34e0 <__aeabi_lmul+0x34>
    34d8:	2380      	movs	r3, #128	; 0x80
    34da:	025b      	lsls	r3, r3, #9
    34dc:	4698      	mov	r8, r3
    34de:	44c4      	add	ip, r8
    34e0:	464b      	mov	r3, r9
    34e2:	4351      	muls	r1, r2
    34e4:	4343      	muls	r3, r0
    34e6:	0436      	lsls	r6, r6, #16
    34e8:	0c36      	lsrs	r6, r6, #16
    34ea:	0c25      	lsrs	r5, r4, #16
    34ec:	0424      	lsls	r4, r4, #16
    34ee:	4465      	add	r5, ip
    34f0:	19a4      	adds	r4, r4, r6
    34f2:	1859      	adds	r1, r3, r1
    34f4:	1949      	adds	r1, r1, r5
    34f6:	0020      	movs	r0, r4
    34f8:	bc0c      	pop	{r2, r3}
    34fa:	4690      	mov	r8, r2
    34fc:	4699      	mov	r9, r3
    34fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003500 <__libc_init_array>:
    3500:	b570      	push	{r4, r5, r6, lr}
    3502:	2600      	movs	r6, #0
    3504:	4d0c      	ldr	r5, [pc, #48]	; (3538 <__libc_init_array+0x38>)
    3506:	4c0d      	ldr	r4, [pc, #52]	; (353c <__libc_init_array+0x3c>)
    3508:	1b64      	subs	r4, r4, r5
    350a:	10a4      	asrs	r4, r4, #2
    350c:	42a6      	cmp	r6, r4
    350e:	d109      	bne.n	3524 <__libc_init_array+0x24>
    3510:	2600      	movs	r6, #0
    3512:	f000 f9d3 	bl	38bc <_init>
    3516:	4d0a      	ldr	r5, [pc, #40]	; (3540 <__libc_init_array+0x40>)
    3518:	4c0a      	ldr	r4, [pc, #40]	; (3544 <__libc_init_array+0x44>)
    351a:	1b64      	subs	r4, r4, r5
    351c:	10a4      	asrs	r4, r4, #2
    351e:	42a6      	cmp	r6, r4
    3520:	d105      	bne.n	352e <__libc_init_array+0x2e>
    3522:	bd70      	pop	{r4, r5, r6, pc}
    3524:	00b3      	lsls	r3, r6, #2
    3526:	58eb      	ldr	r3, [r5, r3]
    3528:	4798      	blx	r3
    352a:	3601      	adds	r6, #1
    352c:	e7ee      	b.n	350c <__libc_init_array+0xc>
    352e:	00b3      	lsls	r3, r6, #2
    3530:	58eb      	ldr	r3, [r5, r3]
    3532:	4798      	blx	r3
    3534:	3601      	adds	r6, #1
    3536:	e7f2      	b.n	351e <__libc_init_array+0x1e>
    3538:	000038c8 	.word	0x000038c8
    353c:	000038c8 	.word	0x000038c8
    3540:	000038c8 	.word	0x000038c8
    3544:	000038cc 	.word	0x000038cc

00003548 <memcpy>:
    3548:	2300      	movs	r3, #0
    354a:	b510      	push	{r4, lr}
    354c:	429a      	cmp	r2, r3
    354e:	d100      	bne.n	3552 <memcpy+0xa>
    3550:	bd10      	pop	{r4, pc}
    3552:	5ccc      	ldrb	r4, [r1, r3]
    3554:	54c4      	strb	r4, [r0, r3]
    3556:	3301      	adds	r3, #1
    3558:	e7f8      	b.n	354c <memcpy+0x4>
    355a:	0000      	movs	r0, r0
    355c:	00000214 	.word	0x00000214
    3560:	00000214 	.word	0x00000214
    3564:	000001f0 	.word	0x000001f0
    3568:	00000214 	.word	0x00000214
    356c:	000001f0 	.word	0x000001f0
    3570:	000001d6 	.word	0x000001d6
    3574:	000001d6 	.word	0x000001d6
    3578:	00000214 	.word	0x00000214
    357c:	00000214 	.word	0x00000214
    3580:	00000214 	.word	0x00000214
    3584:	00000214 	.word	0x00000214
    3588:	00000214 	.word	0x00000214
    358c:	00000214 	.word	0x00000214
    3590:	00000214 	.word	0x00000214
    3594:	00000214 	.word	0x00000214
    3598:	00000214 	.word	0x00000214
    359c:	00000214 	.word	0x00000214
    35a0:	00000214 	.word	0x00000214
    35a4:	00000214 	.word	0x00000214
    35a8:	00000214 	.word	0x00000214
    35ac:	00000214 	.word	0x00000214
    35b0:	00000214 	.word	0x00000214
    35b4:	00000214 	.word	0x00000214
    35b8:	00000214 	.word	0x00000214
    35bc:	00000214 	.word	0x00000214
    35c0:	00000214 	.word	0x00000214
    35c4:	00000214 	.word	0x00000214
    35c8:	00000214 	.word	0x00000214
    35cc:	00000214 	.word	0x00000214
    35d0:	00000214 	.word	0x00000214
    35d4:	00000214 	.word	0x00000214
    35d8:	00000214 	.word	0x00000214
    35dc:	00000214 	.word	0x00000214
    35e0:	00000214 	.word	0x00000214
    35e4:	00000214 	.word	0x00000214
    35e8:	00000214 	.word	0x00000214
    35ec:	00000214 	.word	0x00000214
    35f0:	00000214 	.word	0x00000214
    35f4:	00000214 	.word	0x00000214
    35f8:	00000214 	.word	0x00000214
    35fc:	00000214 	.word	0x00000214
    3600:	00000214 	.word	0x00000214
    3604:	00000214 	.word	0x00000214
    3608:	00000214 	.word	0x00000214
    360c:	00000214 	.word	0x00000214
    3610:	00000214 	.word	0x00000214
    3614:	00000214 	.word	0x00000214
    3618:	00000214 	.word	0x00000214
    361c:	00000214 	.word	0x00000214
    3620:	00000214 	.word	0x00000214
    3624:	00000214 	.word	0x00000214
    3628:	00000214 	.word	0x00000214
    362c:	00000214 	.word	0x00000214
    3630:	00000214 	.word	0x00000214
    3634:	00000214 	.word	0x00000214
    3638:	00000214 	.word	0x00000214
    363c:	00000214 	.word	0x00000214
    3640:	00000214 	.word	0x00000214
    3644:	00000214 	.word	0x00000214
    3648:	00000214 	.word	0x00000214
    364c:	00000214 	.word	0x00000214
    3650:	00000214 	.word	0x00000214
    3654:	00000214 	.word	0x00000214
    3658:	00000214 	.word	0x00000214
    365c:	000001f0 	.word	0x000001f0
    3660:	000001f0 	.word	0x000001f0
    3664:	000001f8 	.word	0x000001f8
    3668:	000001f8 	.word	0x000001f8
    366c:	000001f8 	.word	0x000001f8
    3670:	000001f8 	.word	0x000001f8
    3674:	42002000 	.word	0x42002000
    3678:	42002400 	.word	0x42002400
    367c:	42002800 	.word	0x42002800
    3680:	42002c00 	.word	0x42002c00
    3684:	42003000 	.word	0x42003000
    3688:	42003400 	.word	0x42003400
    368c:	42003800 	.word	0x42003800
    3690:	42003c00 	.word	0x42003c00
    3694:	02000100 	.word	0x02000100
    3698:	08000400 	.word	0x08000400
    369c:	20001000 	.word	0x20001000
    36a0:	80004000 	.word	0x80004000
    36a4:	00000fae 	.word	0x00000fae
    36a8:	00000ffe 	.word	0x00000ffe
    36ac:	0000101c 	.word	0x0000101c
    36b0:	0000105a 	.word	0x0000105a
    36b4:	0000103a 	.word	0x0000103a
    36b8:	0000110a 	.word	0x0000110a
    36bc:	000010d4 	.word	0x000010d4
    36c0:	00001092 	.word	0x00001092
    36c4:	00000f54 	.word	0x00000f54
    36c8:	00000f54 	.word	0x00000f54
    36cc:	00000f54 	.word	0x00000f54
    36d0:	00000f54 	.word	0x00000f54
    36d4:	00000f54 	.word	0x00000f54
    36d8:	00000f54 	.word	0x00000f54
    36dc:	00000f54 	.word	0x00000f54
    36e0:	00000f54 	.word	0x00000f54
    36e4:	00000f54 	.word	0x00000f54
    36e8:	00000f54 	.word	0x00000f54
    36ec:	00000f54 	.word	0x00000f54
    36f0:	00000f54 	.word	0x00000f54
    36f4:	00000f54 	.word	0x00000f54
    36f8:	00000f54 	.word	0x00000f54
    36fc:	00000f54 	.word	0x00000f54
    3700:	00000f54 	.word	0x00000f54
    3704:	00000f54 	.word	0x00000f54
    3708:	00000f54 	.word	0x00000f54
    370c:	00000f54 	.word	0x00000f54
    3710:	00000f54 	.word	0x00000f54
    3714:	00000f54 	.word	0x00000f54
    3718:	00000f54 	.word	0x00000f54
    371c:	00000f54 	.word	0x00000f54
    3720:	00000f54 	.word	0x00000f54
    3724:	00000f54 	.word	0x00000f54
    3728:	00000f54 	.word	0x00000f54
    372c:	00000f54 	.word	0x00000f54
    3730:	00000f54 	.word	0x00000f54
    3734:	00000f54 	.word	0x00000f54
    3738:	00000f54 	.word	0x00000f54
    373c:	00000f54 	.word	0x00000f54
    3740:	00000f54 	.word	0x00000f54
    3744:	00000f54 	.word	0x00000f54
    3748:	00000f54 	.word	0x00000f54
    374c:	00000f54 	.word	0x00000f54
    3750:	00000f54 	.word	0x00000f54
    3754:	00000f54 	.word	0x00000f54
    3758:	00000f54 	.word	0x00000f54
    375c:	00000f54 	.word	0x00000f54
    3760:	00000f54 	.word	0x00000f54
    3764:	00000f54 	.word	0x00000f54
    3768:	00000f54 	.word	0x00000f54
    376c:	00000f54 	.word	0x00000f54
    3770:	00000f54 	.word	0x00000f54
    3774:	00000f54 	.word	0x00000f54
    3778:	00000f54 	.word	0x00000f54
    377c:	00000f54 	.word	0x00000f54
    3780:	00000f54 	.word	0x00000f54
    3784:	00000f54 	.word	0x00000f54
    3788:	00000f54 	.word	0x00000f54
    378c:	00000f54 	.word	0x00000f54
    3790:	00000f54 	.word	0x00000f54
    3794:	00000f54 	.word	0x00000f54
    3798:	00000f54 	.word	0x00000f54
    379c:	00000f54 	.word	0x00000f54
    37a0:	00000f54 	.word	0x00000f54
    37a4:	00000f54 	.word	0x00000f54
    37a8:	00000f54 	.word	0x00000f54
    37ac:	00000f54 	.word	0x00000f54
    37b0:	00000f54 	.word	0x00000f54
    37b4:	00000f54 	.word	0x00000f54
    37b8:	00000f54 	.word	0x00000f54
    37bc:	00000f54 	.word	0x00000f54
    37c0:	00000f54 	.word	0x00000f54
    37c4:	00000f54 	.word	0x00000f54
    37c8:	00000f54 	.word	0x00000f54
    37cc:	00000f54 	.word	0x00000f54
    37d0:	00000f54 	.word	0x00000f54
    37d4:	00000f54 	.word	0x00000f54
    37d8:	00000f54 	.word	0x00000f54
    37dc:	00000f54 	.word	0x00000f54
    37e0:	00000f54 	.word	0x00000f54
    37e4:	00000f54 	.word	0x00000f54
    37e8:	00000f54 	.word	0x00000f54
    37ec:	00000f54 	.word	0x00000f54
    37f0:	00000f54 	.word	0x00000f54
    37f4:	00000f54 	.word	0x00000f54
    37f8:	00000f54 	.word	0x00000f54
    37fc:	00000f54 	.word	0x00000f54
    3800:	00000f54 	.word	0x00000f54
    3804:	00000f54 	.word	0x00000f54
    3808:	00000f54 	.word	0x00000f54
    380c:	00000f54 	.word	0x00000f54
    3810:	00000f54 	.word	0x00000f54
    3814:	00000f54 	.word	0x00000f54
    3818:	00000f54 	.word	0x00000f54
    381c:	00000f54 	.word	0x00000f54
    3820:	00000f54 	.word	0x00000f54
    3824:	00000f54 	.word	0x00000f54
    3828:	00000f54 	.word	0x00000f54
    382c:	00000f54 	.word	0x00000f54
    3830:	00000f54 	.word	0x00000f54
    3834:	000010f2 	.word	0x000010f2
    3838:	0000114e 	.word	0x0000114e
    383c:	00000f54 	.word	0x00000f54
    3840:	00000e70 	.word	0x00000e70
    3844:	00000eba 	.word	0x00000eba
    3848:	00000fce 	.word	0x00000fce
    384c:	00001244 	.word	0x00001244
    3850:	00000e42 	.word	0x00000e42
    3854:	0000112a 	.word	0x0000112a
    3858:	000010c8 	.word	0x000010c8

0000385c <tc_interrupt_vectors.10637>:
    385c:	100f0e0d 14131211 42000800 42000c00     ...........B...B
    386c:	42001000 42001400 42001800 42001c00     ...B...B...B...B
    387c:	000028fa 000028f6 000028f6 00002946     .(...(...(..F)..
    388c:	00002946 0000290e 00002900 00002914     F)...)...)...)..
    389c:	000029cc 000029ac 000029ac 00002a1c     .)...)...)...*..
    38ac:	000029be 000029da 000029b0 000029e8     .)...)...)...)..

000038bc <_init>:
    38bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    38be:	46c0      	nop			; (mov r8, r8)
    38c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    38c2:	bc08      	pop	{r3}
    38c4:	469e      	mov	lr, r3
    38c6:	4770      	bx	lr

000038c8 <__init_array_start>:
    38c8:	000000cd 	.word	0x000000cd

000038cc <_fini>:
    38cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    38ce:	46c0      	nop			; (mov r8, r8)
    38d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    38d2:	bc08      	pop	{r3}
    38d4:	469e      	mov	lr, r3
    38d6:	4770      	bx	lr

000038d8 <__fini_array_start>:
    38d8:	000000a5 	.word	0x000000a5
