
SAMBA_BOOTLOADER1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005088  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000114  20000000  00005088  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000bd8  20000114  0000519c  00020114  2**2
                  ALLOC
  3 .stack        00000404  20000cec  00005d74  00020114  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003866f  00000000  00000000  00020195  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000051d9  00000000  00000000  00058804  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000998  00000000  00000000  0005d9dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_macro  0001dd9c  00000000  00000000  0005e375  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00011c6c  00000000  00000000  0007c111  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00094e8b  00000000  00000000  0008dd7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000963e  00000000  00000000  00122c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b80  00000000  00000000  0012c246  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001958  00000000  00000000  0012cdc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f0 10 00 20 05 40 00 00 01 40 00 00 01 40 00 00     ... .@...@...@..
	...
      2c:	01 40 00 00 00 00 00 00 00 00 00 00 01 40 00 00     .@...........@..
      3c:	01 40 00 00 01 40 00 00 01 40 00 00 01 40 00 00     .@...@...@...@..
      4c:	01 40 00 00 3d 12 00 00 01 40 00 00 01 40 00 00     .@..=....@...@..
      5c:	11 37 00 00 01 40 00 00 1d 17 00 00 2d 17 00 00     .7...@......-...
      6c:	3d 17 00 00 4d 17 00 00 5d 17 00 00 6d 17 00 00     =...M...]...m...
      7c:	01 40 00 00 01 40 00 00 01 40 00 00 01 40 00 00     .@...@...@...@..
      8c:	01 40 00 00 01 40 00 00 01 40 00 00 01 40 00 00     .@...@...@...@..
      9c:	01 40 00 00 01 40 00 00 01 40 00 00 01 40 00 00     .@...@...@...@..
      ac:	01 40 00 00 00 00 00 00                             .@......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000114 	.word	0x20000114
      d4:	00000000 	.word	0x00000000
      d8:	00005088 	.word	0x00005088

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000118 	.word	0x20000118
     108:	00005088 	.word	0x00005088
     10c:	00005088 	.word	0x00005088
     110:	00000000 	.word	0x00000000

00000114 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
     114:	4a02      	ldr	r2, [pc, #8]	; (120 <udi_cdc_comm_disable+0xc>)
     116:	7813      	ldrb	r3, [r2, #0]
     118:	3b01      	subs	r3, #1
     11a:	b2db      	uxtb	r3, r3
     11c:	7013      	strb	r3, [r2, #0]
}
     11e:	4770      	bx	lr
     120:	2000013b 	.word	0x2000013b

00000124 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
     124:	2000      	movs	r0, #0
     126:	4770      	bx	lr

00000128 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
     128:	2000      	movs	r0, #0
     12a:	4770      	bx	lr

0000012c <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
     12c:	b510      	push	{r4, lr}
	uint8_t port = udi_cdc_setup_to_port();
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
     12e:	4902      	ldr	r1, [pc, #8]	; (138 <udi_cdc_line_coding_received+0xc>)
     130:	2000      	movs	r0, #0
     132:	4b02      	ldr	r3, [pc, #8]	; (13c <udi_cdc_line_coding_received+0x10>)
     134:	4798      	blx	r3
}
     136:	bd10      	pop	{r4, pc}
     138:	20000134 	.word	0x20000134
     13c:	000041a9 	.word	0x000041a9

00000140 <udi_cdc_comm_enable>:
{
     140:	b510      	push	{r4, lr}
	udi_cdc_nb_comm_enabled = 0;
     142:	2200      	movs	r2, #0
     144:	4b12      	ldr	r3, [pc, #72]	; (190 <udi_cdc_comm_enable+0x50>)
     146:	701a      	strb	r2, [r3, #0]
	udi_cdc_state[port] = CPU_TO_LE16(0);
     148:	2000      	movs	r0, #0
     14a:	4b12      	ldr	r3, [pc, #72]	; (194 <udi_cdc_comm_enable+0x54>)
     14c:	801a      	strh	r2, [r3, #0]
	uid_cdc_state_msg[port].header.bmRequestType =
     14e:	4b12      	ldr	r3, [pc, #72]	; (198 <udi_cdc_comm_enable+0x58>)
     150:	21a1      	movs	r1, #161	; 0xa1
     152:	7019      	strb	r1, [r3, #0]
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
     154:	3981      	subs	r1, #129	; 0x81
     156:	7059      	strb	r1, [r3, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
     158:	805a      	strh	r2, [r3, #2]
	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
     15a:	809a      	strh	r2, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
     15c:	391e      	subs	r1, #30
     15e:	80d9      	strh	r1, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
     160:	811a      	strh	r2, [r3, #8]
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
     162:	490e      	ldr	r1, [pc, #56]	; (19c <udi_cdc_comm_enable+0x5c>)
     164:	23e1      	movs	r3, #225	; 0xe1
     166:	025b      	lsls	r3, r3, #9
     168:	600b      	str	r3, [r1, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
     16a:	7108      	strb	r0, [r1, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
     16c:	7148      	strb	r0, [r1, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
     16e:	2308      	movs	r3, #8
     170:	718b      	strb	r3, [r1, #6]
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
     172:	2000      	movs	r0, #0
     174:	4b0a      	ldr	r3, [pc, #40]	; (1a0 <udi_cdc_comm_enable+0x60>)
     176:	4798      	blx	r3
	if (!UDI_CDC_ENABLE_EXT(port)) {
     178:	2000      	movs	r0, #0
     17a:	4b0a      	ldr	r3, [pc, #40]	; (1a4 <udi_cdc_comm_enable+0x64>)
     17c:	4798      	blx	r3
     17e:	2800      	cmp	r0, #0
     180:	d004      	beq.n	18c <udi_cdc_comm_enable+0x4c>
	udi_cdc_nb_comm_enabled++;
     182:	4a03      	ldr	r2, [pc, #12]	; (190 <udi_cdc_comm_enable+0x50>)
     184:	7813      	ldrb	r3, [r2, #0]
     186:	3301      	adds	r3, #1
     188:	b2db      	uxtb	r3, r3
     18a:	7013      	strb	r3, [r2, #0]
}
     18c:	bd10      	pop	{r4, pc}
     18e:	46c0      	nop			; (mov r8, r8)
     190:	2000013b 	.word	0x2000013b
     194:	200003d0 	.word	0x200003d0
     198:	20000668 	.word	0x20000668
     19c:	20000134 	.word	0x20000134
     1a0:	000041a9 	.word	0x000041a9
     1a4:	00004189 	.word	0x00004189

000001a8 <udi_cdc_tx_send>:
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
     1a8:	b570      	push	{r4, r5, r6, lr}
     1aa:	b084      	sub	sp, #16

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
     1ac:	4b48      	ldr	r3, [pc, #288]	; (2d0 <udi_cdc_tx_send+0x128>)
     1ae:	781b      	ldrb	r3, [r3, #0]
     1b0:	2b00      	cmp	r3, #0
     1b2:	d001      	beq.n	1b8 <udi_cdc_tx_send+0x10>
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
     1b4:	b004      	add	sp, #16
     1b6:	bd70      	pop	{r4, r5, r6, pc}
	if (udd_is_high_speed()) {
     1b8:	4b46      	ldr	r3, [pc, #280]	; (2d4 <udi_cdc_tx_send+0x12c>)
     1ba:	4798      	blx	r3
     1bc:	2800      	cmp	r0, #0
     1be:	d046      	beq.n	24e <udi_cdc_tx_send+0xa6>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
     1c0:	4b45      	ldr	r3, [pc, #276]	; (2d8 <udi_cdc_tx_send+0x130>)
     1c2:	881c      	ldrh	r4, [r3, #0]
     1c4:	4b45      	ldr	r3, [pc, #276]	; (2dc <udi_cdc_tx_send+0x134>)
     1c6:	4798      	blx	r3
     1c8:	4284      	cmp	r4, r0
     1ca:	d0f3      	beq.n	1b4 <udi_cdc_tx_send+0xc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     1cc:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
     1d0:	425a      	negs	r2, r3
     1d2:	4153      	adcs	r3, r2
     1d4:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
     1d6:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     1d8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     1dc:	2200      	movs	r2, #0
     1de:	4b40      	ldr	r3, [pc, #256]	; (2e0 <udi_cdc_tx_send+0x138>)
     1e0:	701a      	strb	r2, [r3, #0]
	return flags;
     1e2:	9d03      	ldr	r5, [sp, #12]
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
     1e4:	4b3f      	ldr	r3, [pc, #252]	; (2e4 <udi_cdc_tx_send+0x13c>)
     1e6:	781c      	ldrb	r4, [r3, #0]
     1e8:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
     1ea:	0062      	lsls	r2, r4, #1
     1ec:	4b3e      	ldr	r3, [pc, #248]	; (2e8 <udi_cdc_tx_send+0x140>)
     1ee:	5ad3      	ldrh	r3, [r2, r3]
     1f0:	2b00      	cmp	r3, #0
     1f2:	d033      	beq.n	25c <udi_cdc_tx_send+0xb4>
	sof_zlp_counter = 0;
     1f4:	2200      	movs	r2, #0
     1f6:	4b3d      	ldr	r3, [pc, #244]	; (2ec <udi_cdc_tx_send+0x144>)
     1f8:	801a      	strh	r2, [r3, #0]
	if (!udi_cdc_tx_both_buf_to_send[port]) {
     1fa:	4b3d      	ldr	r3, [pc, #244]	; (2f0 <udi_cdc_tx_send+0x148>)
     1fc:	781b      	ldrb	r3, [r3, #0]
     1fe:	2b00      	cmp	r3, #0
     200:	d14b      	bne.n	29a <udi_cdc_tx_send+0xf2>
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
     202:	4263      	negs	r3, r4
     204:	4163      	adcs	r3, r4
     206:	b2db      	uxtb	r3, r3
     208:	4a36      	ldr	r2, [pc, #216]	; (2e4 <udi_cdc_tx_send+0x13c>)
     20a:	7013      	strb	r3, [r2, #0]
	udi_cdc_tx_trans_ongoing[port] = true;
     20c:	2201      	movs	r2, #1
     20e:	4b30      	ldr	r3, [pc, #192]	; (2d0 <udi_cdc_tx_send+0x128>)
     210:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     212:	2d00      	cmp	r5, #0
     214:	d004      	beq.n	220 <udi_cdc_tx_send+0x78>
		cpu_irq_enable();
     216:	4b32      	ldr	r3, [pc, #200]	; (2e0 <udi_cdc_tx_send+0x138>)
     218:	701a      	strb	r2, [r3, #0]
     21a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     21e:	b662      	cpsie	i
	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
     220:	0026      	movs	r6, r4
     222:	0063      	lsls	r3, r4, #1
     224:	4a30      	ldr	r2, [pc, #192]	; (2e8 <udi_cdc_tx_send+0x140>)
     226:	5a9b      	ldrh	r3, [r3, r2]
     228:	001d      	movs	r5, r3
     22a:	3d41      	subs	r5, #65	; 0x41
     22c:	3dff      	subs	r5, #255	; 0xff
     22e:	1e6a      	subs	r2, r5, #1
     230:	4195      	sbcs	r5, r2
     232:	b2ed      	uxtb	r5, r5
	if (b_short_packet) {
     234:	22a0      	movs	r2, #160	; 0xa0
     236:	0052      	lsls	r2, r2, #1
     238:	4293      	cmp	r3, r2
     23a:	d037      	beq.n	2ac <udi_cdc_tx_send+0x104>
		if (udd_is_high_speed()) {
     23c:	4b25      	ldr	r3, [pc, #148]	; (2d4 <udi_cdc_tx_send+0x12c>)
     23e:	4798      	blx	r3
     240:	2800      	cmp	r0, #0
     242:	d02e      	beq.n	2a2 <udi_cdc_tx_send+0xfa>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
     244:	4b25      	ldr	r3, [pc, #148]	; (2dc <udi_cdc_tx_send+0x134>)
     246:	4798      	blx	r3
     248:	4b23      	ldr	r3, [pc, #140]	; (2d8 <udi_cdc_tx_send+0x130>)
     24a:	8018      	strh	r0, [r3, #0]
     24c:	e031      	b.n	2b2 <udi_cdc_tx_send+0x10a>
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
     24e:	4b22      	ldr	r3, [pc, #136]	; (2d8 <udi_cdc_tx_send+0x130>)
     250:	881c      	ldrh	r4, [r3, #0]
     252:	4b28      	ldr	r3, [pc, #160]	; (2f4 <udi_cdc_tx_send+0x14c>)
     254:	4798      	blx	r3
     256:	4284      	cmp	r4, r0
     258:	d1b8      	bne.n	1cc <udi_cdc_tx_send+0x24>
     25a:	e7ab      	b.n	1b4 <udi_cdc_tx_send+0xc>
		sof_zlp_counter++;
     25c:	4a23      	ldr	r2, [pc, #140]	; (2ec <udi_cdc_tx_send+0x144>)
     25e:	8813      	ldrh	r3, [r2, #0]
     260:	3301      	adds	r3, #1
     262:	8013      	strh	r3, [r2, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
     264:	4b1b      	ldr	r3, [pc, #108]	; (2d4 <udi_cdc_tx_send+0x12c>)
     266:	4798      	blx	r3
     268:	2800      	cmp	r0, #0
     26a:	d103      	bne.n	274 <udi_cdc_tx_send+0xcc>
     26c:	4b1f      	ldr	r3, [pc, #124]	; (2ec <udi_cdc_tx_send+0x144>)
     26e:	881b      	ldrh	r3, [r3, #0]
     270:	2b63      	cmp	r3, #99	; 0x63
     272:	d908      	bls.n	286 <udi_cdc_tx_send+0xde>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
     274:	4b17      	ldr	r3, [pc, #92]	; (2d4 <udi_cdc_tx_send+0x12c>)
     276:	4798      	blx	r3
     278:	2800      	cmp	r0, #0
     27a:	d0bb      	beq.n	1f4 <udi_cdc_tx_send+0x4c>
     27c:	4b1e      	ldr	r3, [pc, #120]	; (2f8 <udi_cdc_tx_send+0x150>)
     27e:	4a1b      	ldr	r2, [pc, #108]	; (2ec <udi_cdc_tx_send+0x144>)
     280:	8812      	ldrh	r2, [r2, #0]
     282:	429a      	cmp	r2, r3
     284:	d8b6      	bhi.n	1f4 <udi_cdc_tx_send+0x4c>
	if (cpu_irq_is_enabled_flags(flags))
     286:	2d00      	cmp	r5, #0
     288:	d100      	bne.n	28c <udi_cdc_tx_send+0xe4>
     28a:	e793      	b.n	1b4 <udi_cdc_tx_send+0xc>
		cpu_irq_enable();
     28c:	2201      	movs	r2, #1
     28e:	4b14      	ldr	r3, [pc, #80]	; (2e0 <udi_cdc_tx_send+0x138>)
     290:	701a      	strb	r2, [r3, #0]
     292:	f3bf 8f5f 	dmb	sy
     296:	b662      	cpsie	i
     298:	e78c      	b.n	1b4 <udi_cdc_tx_send+0xc>
		buf_sel_trans = (buf_sel_trans==0)?1:0;
     29a:	4262      	negs	r2, r4
     29c:	4154      	adcs	r4, r2
     29e:	b2e4      	uxtb	r4, r4
     2a0:	e7b4      	b.n	20c <udi_cdc_tx_send+0x64>
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
     2a2:	4b14      	ldr	r3, [pc, #80]	; (2f4 <udi_cdc_tx_send+0x14c>)
     2a4:	4798      	blx	r3
     2a6:	4b0c      	ldr	r3, [pc, #48]	; (2d8 <udi_cdc_tx_send+0x130>)
     2a8:	8018      	strh	r0, [r3, #0]
     2aa:	e002      	b.n	2b2 <udi_cdc_tx_send+0x10a>
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
     2ac:	2200      	movs	r2, #0
     2ae:	4b0a      	ldr	r3, [pc, #40]	; (2d8 <udi_cdc_tx_send+0x130>)
     2b0:	801a      	strh	r2, [r3, #0]
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
     2b2:	0076      	lsls	r6, r6, #1
	udd_ep_run( ep,
     2b4:	4b0c      	ldr	r3, [pc, #48]	; (2e8 <udi_cdc_tx_send+0x140>)
     2b6:	5af3      	ldrh	r3, [r6, r3]
			udi_cdc_tx_buf[port][buf_sel_trans],
     2b8:	00a2      	lsls	r2, r4, #2
     2ba:	1914      	adds	r4, r2, r4
     2bc:	01a4      	lsls	r4, r4, #6
     2be:	4a0f      	ldr	r2, [pc, #60]	; (2fc <udi_cdc_tx_send+0x154>)
     2c0:	1912      	adds	r2, r2, r4
	udd_ep_run( ep,
     2c2:	490f      	ldr	r1, [pc, #60]	; (300 <udi_cdc_tx_send+0x158>)
     2c4:	9100      	str	r1, [sp, #0]
     2c6:	0029      	movs	r1, r5
     2c8:	2081      	movs	r0, #129	; 0x81
     2ca:	4c0e      	ldr	r4, [pc, #56]	; (304 <udi_cdc_tx_send+0x15c>)
     2cc:	47a0      	blx	r4
     2ce:	e771      	b.n	1b4 <udi_cdc_tx_send+0xc>
     2d0:	20000664 	.word	0x20000664
     2d4:	00002a49 	.word	0x00002a49
     2d8:	20000660 	.word	0x20000660
     2dc:	00002a5d 	.word	0x00002a5d
     2e0:	20000112 	.word	0x20000112
     2e4:	2000065c 	.word	0x2000065c
     2e8:	20000658 	.word	0x20000658
     2ec:	20000130 	.word	0x20000130
     2f0:	200003d4 	.word	0x200003d4
     2f4:	00002a4d 	.word	0x00002a4d
     2f8:	0000031f 	.word	0x0000031f
     2fc:	200003d8 	.word	0x200003d8
     300:	00000309 	.word	0x00000309
     304:	00002d55 	.word	0x00002d55

00000308 <udi_cdc_data_sent>:
{
     308:	b510      	push	{r4, lr}
	if (UDD_EP_TRANSFER_OK != status) {
     30a:	2800      	cmp	r0, #0
     30c:	d000      	beq.n	310 <udi_cdc_data_sent+0x8>
}
     30e:	bd10      	pop	{r4, pc}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
     310:	4b07      	ldr	r3, [pc, #28]	; (330 <udi_cdc_data_sent+0x28>)
     312:	781b      	ldrb	r3, [r3, #0]
     314:	425a      	negs	r2, r3
     316:	4153      	adcs	r3, r2
     318:	005b      	lsls	r3, r3, #1
     31a:	2200      	movs	r2, #0
     31c:	4905      	ldr	r1, [pc, #20]	; (334 <udi_cdc_data_sent+0x2c>)
     31e:	5258      	strh	r0, [r3, r1]
	udi_cdc_tx_both_buf_to_send[port] = false;
     320:	4b05      	ldr	r3, [pc, #20]	; (338 <udi_cdc_data_sent+0x30>)
     322:	701a      	strb	r2, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
     324:	4b05      	ldr	r3, [pc, #20]	; (33c <udi_cdc_data_sent+0x34>)
     326:	701a      	strb	r2, [r3, #0]
	udi_cdc_tx_send(port);
     328:	4b05      	ldr	r3, [pc, #20]	; (340 <udi_cdc_data_sent+0x38>)
     32a:	4798      	blx	r3
     32c:	e7ef      	b.n	30e <udi_cdc_data_sent+0x6>
     32e:	46c0      	nop			; (mov r8, r8)
     330:	2000065c 	.word	0x2000065c
     334:	20000658 	.word	0x20000658
     338:	200003d4 	.word	0x200003d4
     33c:	20000664 	.word	0x20000664
     340:	000001a9 	.word	0x000001a9

00000344 <udi_cdc_data_sof_notify>:
{
     344:	b510      	push	{r4, lr}
	udi_cdc_tx_send(port_notify);
     346:	2000      	movs	r0, #0
     348:	4b01      	ldr	r3, [pc, #4]	; (350 <udi_cdc_data_sof_notify+0xc>)
     34a:	4798      	blx	r3
}
     34c:	bd10      	pop	{r4, pc}
     34e:	46c0      	nop			; (mov r8, r8)
     350:	000001a9 	.word	0x000001a9

00000354 <udi_cdc_data_disable>:
{
     354:	b510      	push	{r4, lr}
	udi_cdc_nb_data_enabled--;
     356:	4a06      	ldr	r2, [pc, #24]	; (370 <udi_cdc_data_disable+0x1c>)
     358:	7813      	ldrb	r3, [r2, #0]
     35a:	3b01      	subs	r3, #1
     35c:	b2db      	uxtb	r3, r3
     35e:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
     360:	7810      	ldrb	r0, [r2, #0]
     362:	b2c0      	uxtb	r0, r0
	UDI_CDC_DISABLE_EXT(port);
     364:	4b03      	ldr	r3, [pc, #12]	; (374 <udi_cdc_data_disable+0x20>)
     366:	4798      	blx	r3
	udi_cdc_data_running = false;
     368:	2200      	movs	r2, #0
     36a:	4b03      	ldr	r3, [pc, #12]	; (378 <udi_cdc_data_disable+0x24>)
     36c:	701a      	strb	r2, [r3, #0]
}
     36e:	bd10      	pop	{r4, pc}
     370:	2000013c 	.word	0x2000013c
     374:	00004199 	.word	0x00004199
     378:	20000132 	.word	0x20000132

0000037c <udi_cdc_comm_setup>:
{
     37c:	b510      	push	{r4, lr}
	if (Udd_setup_is_in()) {
     37e:	4b20      	ldr	r3, [pc, #128]	; (400 <STACK_SIZE>)
     380:	781a      	ldrb	r2, [r3, #0]
     382:	b253      	sxtb	r3, r2
     384:	2b00      	cmp	r3, #0
     386:	db05      	blt.n	394 <udi_cdc_comm_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     388:	2360      	movs	r3, #96	; 0x60
     38a:	4013      	ands	r3, r2
	return false;  // request Not supported
     38c:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     38e:	2b20      	cmp	r3, #32
     390:	d014      	beq.n	3bc <udi_cdc_comm_setup+0x40>
}
     392:	bd10      	pop	{r4, pc}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     394:	2360      	movs	r3, #96	; 0x60
     396:	4013      	ands	r3, r2
	return false;  // request Not supported
     398:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     39a:	2b20      	cmp	r3, #32
     39c:	d1f9      	bne.n	392 <udi_cdc_comm_setup+0x16>
			switch (udd_g_ctrlreq.req.bRequest) {
     39e:	4b18      	ldr	r3, [pc, #96]	; (400 <STACK_SIZE>)
     3a0:	785b      	ldrb	r3, [r3, #1]
     3a2:	2b21      	cmp	r3, #33	; 0x21
     3a4:	d129      	bne.n	3fa <udi_cdc_comm_setup+0x7e>
						udd_g_ctrlreq.req.wLength)
     3a6:	4b16      	ldr	r3, [pc, #88]	; (400 <STACK_SIZE>)
				if (sizeof(usb_cdc_line_coding_t) !=
     3a8:	88db      	ldrh	r3, [r3, #6]
     3aa:	2b07      	cmp	r3, #7
     3ac:	d1f1      	bne.n	392 <udi_cdc_comm_setup+0x16>
				udd_g_ctrlreq.payload =
     3ae:	4b14      	ldr	r3, [pc, #80]	; (400 <STACK_SIZE>)
     3b0:	4a14      	ldr	r2, [pc, #80]	; (404 <STACK_SIZE+0x4>)
     3b2:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
     3b4:	2207      	movs	r2, #7
     3b6:	819a      	strh	r2, [r3, #12]
				return true;
     3b8:	3001      	adds	r0, #1
     3ba:	e7ea      	b.n	392 <udi_cdc_comm_setup+0x16>
			switch (udd_g_ctrlreq.req.bRequest) {
     3bc:	4b10      	ldr	r3, [pc, #64]	; (400 <STACK_SIZE>)
     3be:	785b      	ldrb	r3, [r3, #1]
     3c0:	2b20      	cmp	r3, #32
     3c2:	d003      	beq.n	3cc <udi_cdc_comm_setup+0x50>
     3c4:	2b22      	cmp	r3, #34	; 0x22
     3c6:	d00f      	beq.n	3e8 <udi_cdc_comm_setup+0x6c>
	return false;  // request Not supported
     3c8:	2000      	movs	r0, #0
     3ca:	e7e2      	b.n	392 <udi_cdc_comm_setup+0x16>
						udd_g_ctrlreq.req.wLength)
     3cc:	4b0c      	ldr	r3, [pc, #48]	; (400 <STACK_SIZE>)
				if (sizeof(usb_cdc_line_coding_t) !=
     3ce:	88db      	ldrh	r3, [r3, #6]
					return false; // Error for USB host
     3d0:	2000      	movs	r0, #0
				if (sizeof(usb_cdc_line_coding_t) !=
     3d2:	2b07      	cmp	r3, #7
     3d4:	d1dd      	bne.n	392 <udi_cdc_comm_setup+0x16>
				udd_g_ctrlreq.callback =
     3d6:	4b0a      	ldr	r3, [pc, #40]	; (400 <STACK_SIZE>)
     3d8:	4a0b      	ldr	r2, [pc, #44]	; (408 <STACK_SIZE+0x8>)
     3da:	611a      	str	r2, [r3, #16]
				udd_g_ctrlreq.payload =
     3dc:	4a09      	ldr	r2, [pc, #36]	; (404 <STACK_SIZE+0x4>)
     3de:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
     3e0:	2207      	movs	r2, #7
     3e2:	819a      	strh	r2, [r3, #12]
				return true;
     3e4:	3001      	adds	r0, #1
     3e6:	e7d4      	b.n	392 <udi_cdc_comm_setup+0x16>
				UDI_CDC_SET_DTR_EXT(port, (0 !=
     3e8:	4b05      	ldr	r3, [pc, #20]	; (400 <STACK_SIZE>)
     3ea:	885b      	ldrh	r3, [r3, #2]
     3ec:	2101      	movs	r1, #1
     3ee:	4019      	ands	r1, r3
     3f0:	2000      	movs	r0, #0
     3f2:	4b06      	ldr	r3, [pc, #24]	; (40c <STACK_SIZE+0xc>)
     3f4:	4798      	blx	r3
				return true;
     3f6:	2001      	movs	r0, #1
     3f8:	e7cb      	b.n	392 <udi_cdc_comm_setup+0x16>
	return false;  // request Not supported
     3fa:	2000      	movs	r0, #0
     3fc:	e7c9      	b.n	392 <udi_cdc_comm_setup+0x16>
     3fe:	46c0      	nop			; (mov r8, r8)
     400:	200009ec 	.word	0x200009ec
     404:	20000134 	.word	0x20000134
     408:	0000012d 	.word	0x0000012d
     40c:	000041a5 	.word	0x000041a5

00000410 <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
     410:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     412:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     416:	425a      	negs	r2, r3
     418:	4153      	adcs	r3, r2
     41a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     41c:	b672      	cpsid	i
     41e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     422:	2200      	movs	r2, #0
     424:	4b0a      	ldr	r3, [pc, #40]	; (450 <udi_cdc_multi_get_nb_received_data+0x40>)
     426:	701a      	strb	r2, [r3, #0]
	return flags;
     428:	9a01      	ldr	r2, [sp, #4]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
     42a:	4b0a      	ldr	r3, [pc, #40]	; (454 <udi_cdc_multi_get_nb_received_data+0x44>)
     42c:	8819      	ldrh	r1, [r3, #0]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
     42e:	4b0a      	ldr	r3, [pc, #40]	; (458 <udi_cdc_multi_get_nb_received_data+0x48>)
     430:	781b      	ldrb	r3, [r3, #0]
     432:	005b      	lsls	r3, r3, #1
     434:	4809      	ldr	r0, [pc, #36]	; (45c <udi_cdc_multi_get_nb_received_data+0x4c>)
     436:	5a18      	ldrh	r0, [r3, r0]
     438:	1a40      	subs	r0, r0, r1
	if (cpu_irq_is_enabled_flags(flags))
     43a:	2a00      	cmp	r2, #0
     43c:	d005      	beq.n	44a <udi_cdc_multi_get_nb_received_data+0x3a>
		cpu_irq_enable();
     43e:	2201      	movs	r2, #1
     440:	4b03      	ldr	r3, [pc, #12]	; (450 <udi_cdc_multi_get_nb_received_data+0x40>)
     442:	701a      	strb	r2, [r3, #0]
     444:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     448:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
     44a:	b002      	add	sp, #8
     44c:	4770      	bx	lr
     44e:	46c0      	nop			; (mov r8, r8)
     450:	20000112 	.word	0x20000112
     454:	200003c8 	.word	0x200003c8
     458:	200003c4 	.word	0x200003c4
     45c:	200003c0 	.word	0x200003c0

00000460 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
     460:	b510      	push	{r4, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
     462:	4b03      	ldr	r3, [pc, #12]	; (470 <udi_cdc_multi_is_rx_ready+0x10>)
     464:	4798      	blx	r3
     466:	1e43      	subs	r3, r0, #1
     468:	4198      	sbcs	r0, r3
     46a:	b2c0      	uxtb	r0, r0
}
     46c:	bd10      	pop	{r4, pc}
     46e:	46c0      	nop			; (mov r8, r8)
     470:	00000411 	.word	0x00000411

00000474 <udi_cdc_rx_start>:
{
     474:	b510      	push	{r4, lr}
     476:	b084      	sub	sp, #16
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     478:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     47c:	425a      	negs	r2, r3
     47e:	4153      	adcs	r3, r2
     480:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
     482:	b672      	cpsid	i
     484:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     488:	2200      	movs	r2, #0
     48a:	4b23      	ldr	r3, [pc, #140]	; (518 <udi_cdc_rx_start+0xa4>)
     48c:	701a      	strb	r2, [r3, #0]
	return flags;
     48e:	9b03      	ldr	r3, [sp, #12]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
     490:	4a22      	ldr	r2, [pc, #136]	; (51c <udi_cdc_rx_start+0xa8>)
     492:	7814      	ldrb	r4, [r2, #0]
     494:	b2e4      	uxtb	r4, r4
	if (udi_cdc_rx_trans_ongoing[port] ||
     496:	4a22      	ldr	r2, [pc, #136]	; (520 <udi_cdc_rx_start+0xac>)
     498:	7812      	ldrb	r2, [r2, #0]
     49a:	2a00      	cmp	r2, #0
     49c:	d107      	bne.n	4ae <udi_cdc_rx_start+0x3a>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
     49e:	4a21      	ldr	r2, [pc, #132]	; (524 <udi_cdc_rx_start+0xb0>)
     4a0:	8812      	ldrh	r2, [r2, #0]
     4a2:	0061      	lsls	r1, r4, #1
     4a4:	4820      	ldr	r0, [pc, #128]	; (528 <udi_cdc_rx_start+0xb4>)
     4a6:	5a09      	ldrh	r1, [r1, r0]
     4a8:	b292      	uxth	r2, r2
	if (udi_cdc_rx_trans_ongoing[port] ||
     4aa:	428a      	cmp	r2, r1
     4ac:	d20a      	bcs.n	4c4 <udi_cdc_rx_start+0x50>
		return false;
     4ae:	2000      	movs	r0, #0
	if (cpu_irq_is_enabled_flags(flags))
     4b0:	2b00      	cmp	r3, #0
     4b2:	d005      	beq.n	4c0 <udi_cdc_rx_start+0x4c>
		cpu_irq_enable();
     4b4:	2201      	movs	r2, #1
     4b6:	4b18      	ldr	r3, [pc, #96]	; (518 <udi_cdc_rx_start+0xa4>)
     4b8:	701a      	strb	r2, [r3, #0]
     4ba:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     4be:	b662      	cpsie	i
}
     4c0:	b004      	add	sp, #16
     4c2:	bd10      	pop	{r4, pc}
	udi_cdc_rx_pos[port] = 0;
     4c4:	2100      	movs	r1, #0
     4c6:	4a17      	ldr	r2, [pc, #92]	; (524 <udi_cdc_rx_start+0xb0>)
     4c8:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
     4ca:	4262      	negs	r2, r4
     4cc:	4162      	adcs	r2, r4
     4ce:	b2d2      	uxtb	r2, r2
     4d0:	4912      	ldr	r1, [pc, #72]	; (51c <udi_cdc_rx_start+0xa8>)
     4d2:	700a      	strb	r2, [r1, #0]
	udi_cdc_rx_trans_ongoing[port] = true;
     4d4:	2101      	movs	r1, #1
     4d6:	4a12      	ldr	r2, [pc, #72]	; (520 <udi_cdc_rx_start+0xac>)
     4d8:	7011      	strb	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
     4da:	2b00      	cmp	r3, #0
     4dc:	d005      	beq.n	4ea <udi_cdc_rx_start+0x76>
		cpu_irq_enable();
     4de:	2201      	movs	r2, #1
     4e0:	4b0d      	ldr	r3, [pc, #52]	; (518 <udi_cdc_rx_start+0xa4>)
     4e2:	701a      	strb	r2, [r3, #0]
     4e4:	f3bf 8f5f 	dmb	sy
     4e8:	b662      	cpsie	i
	if (udi_cdc_multi_is_rx_ready(port)) {
     4ea:	2000      	movs	r0, #0
     4ec:	4b0f      	ldr	r3, [pc, #60]	; (52c <udi_cdc_rx_start+0xb8>)
     4ee:	4798      	blx	r3
     4f0:	2800      	cmp	r0, #0
     4f2:	d10d      	bne.n	510 <udi_cdc_rx_start+0x9c>
			udi_cdc_rx_buf[port][buf_sel_trans],
     4f4:	00a2      	lsls	r2, r4, #2
     4f6:	1914      	adds	r4, r2, r4
     4f8:	01a4      	lsls	r4, r4, #6
     4fa:	4a0d      	ldr	r2, [pc, #52]	; (530 <udi_cdc_rx_start+0xbc>)
     4fc:	1912      	adds	r2, r2, r4
	return udd_ep_run(ep,
     4fe:	4b0d      	ldr	r3, [pc, #52]	; (534 <udi_cdc_rx_start+0xc0>)
     500:	9300      	str	r3, [sp, #0]
     502:	23a0      	movs	r3, #160	; 0xa0
     504:	005b      	lsls	r3, r3, #1
     506:	2101      	movs	r1, #1
     508:	2002      	movs	r0, #2
     50a:	4c0b      	ldr	r4, [pc, #44]	; (538 <udi_cdc_rx_start+0xc4>)
     50c:	47a0      	blx	r4
     50e:	e7d7      	b.n	4c0 <udi_cdc_rx_start+0x4c>
		UDI_CDC_RX_NOTIFY(port);
     510:	2000      	movs	r0, #0
     512:	4b0a      	ldr	r3, [pc, #40]	; (53c <udi_cdc_rx_start+0xc8>)
     514:	4798      	blx	r3
     516:	e7ed      	b.n	4f4 <udi_cdc_rx_start+0x80>
     518:	20000112 	.word	0x20000112
     51c:	200003c4 	.word	0x200003c4
     520:	200003cc 	.word	0x200003cc
     524:	200003c8 	.word	0x200003c8
     528:	200003c0 	.word	0x200003c0
     52c:	00000461 	.word	0x00000461
     530:	20000140 	.word	0x20000140
     534:	000005d1 	.word	0x000005d1
     538:	00002d55 	.word	0x00002d55
     53c:	000041a7 	.word	0x000041a7

00000540 <udi_cdc_data_enable>:
{
     540:	b570      	push	{r4, r5, r6, lr}
	udi_cdc_nb_data_enabled = 0;
     542:	2400      	movs	r4, #0
     544:	4b15      	ldr	r3, [pc, #84]	; (59c <udi_cdc_data_enable+0x5c>)
     546:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
     548:	4b15      	ldr	r3, [pc, #84]	; (5a0 <udi_cdc_data_enable+0x60>)
     54a:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
     54c:	4b15      	ldr	r3, [pc, #84]	; (5a4 <udi_cdc_data_enable+0x64>)
     54e:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
     550:	4b15      	ldr	r3, [pc, #84]	; (5a8 <udi_cdc_data_enable+0x68>)
     552:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
     554:	4b15      	ldr	r3, [pc, #84]	; (5ac <udi_cdc_data_enable+0x6c>)
     556:	2500      	movs	r5, #0
     558:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
     55a:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
     55c:	4b14      	ldr	r3, [pc, #80]	; (5b0 <udi_cdc_data_enable+0x70>)
     55e:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
     560:	2000      	movs	r0, #0
     562:	4b14      	ldr	r3, [pc, #80]	; (5b4 <udi_cdc_data_enable+0x74>)
     564:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
     566:	4b14      	ldr	r3, [pc, #80]	; (5b8 <udi_cdc_data_enable+0x78>)
     568:	701d      	strb	r5, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
     56a:	4b14      	ldr	r3, [pc, #80]	; (5bc <udi_cdc_data_enable+0x7c>)
     56c:	701d      	strb	r5, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
     56e:	4b14      	ldr	r3, [pc, #80]	; (5c0 <udi_cdc_data_enable+0x80>)
     570:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
     572:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
     574:	4b13      	ldr	r3, [pc, #76]	; (5c4 <udi_cdc_data_enable+0x84>)
     576:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
     578:	2000      	movs	r0, #0
     57a:	4b13      	ldr	r3, [pc, #76]	; (5c8 <udi_cdc_data_enable+0x88>)
     57c:	4798      	blx	r3
     57e:	2800      	cmp	r0, #0
     580:	d007      	beq.n	592 <udi_cdc_data_enable+0x52>
	udi_cdc_nb_data_enabled++;
     582:	4a06      	ldr	r2, [pc, #24]	; (59c <udi_cdc_data_enable+0x5c>)
     584:	7813      	ldrb	r3, [r2, #0]
     586:	3301      	adds	r3, #1
     588:	b2db      	uxtb	r3, r3
     58a:	7013      	strb	r3, [r2, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
     58c:	7813      	ldrb	r3, [r2, #0]
     58e:	2b01      	cmp	r3, #1
     590:	d000      	beq.n	594 <udi_cdc_data_enable+0x54>
}
     592:	bd70      	pop	{r4, r5, r6, pc}
		udi_cdc_data_running = true;
     594:	2201      	movs	r2, #1
     596:	4b0d      	ldr	r3, [pc, #52]	; (5cc <udi_cdc_data_enable+0x8c>)
     598:	701a      	strb	r2, [r3, #0]
     59a:	e7fa      	b.n	592 <udi_cdc_data_enable+0x52>
     59c:	2000013c 	.word	0x2000013c
     5a0:	20000664 	.word	0x20000664
     5a4:	200003d4 	.word	0x200003d4
     5a8:	2000065c 	.word	0x2000065c
     5ac:	20000658 	.word	0x20000658
     5b0:	20000660 	.word	0x20000660
     5b4:	000001a9 	.word	0x000001a9
     5b8:	200003cc 	.word	0x200003cc
     5bc:	200003c4 	.word	0x200003c4
     5c0:	200003c0 	.word	0x200003c0
     5c4:	200003c8 	.word	0x200003c8
     5c8:	00000475 	.word	0x00000475
     5cc:	20000132 	.word	0x20000132

000005d0 <udi_cdc_data_received>:
{
     5d0:	b510      	push	{r4, lr}
     5d2:	b082      	sub	sp, #8
     5d4:	0014      	movs	r4, r2
	if (UDD_EP_TRANSFER_OK != status) {
     5d6:	2800      	cmp	r0, #0
     5d8:	d110      	bne.n	5fc <udi_cdc_data_received+0x2c>
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
     5da:	4b10      	ldr	r3, [pc, #64]	; (61c <udi_cdc_data_received+0x4c>)
     5dc:	781a      	ldrb	r2, [r3, #0]
     5de:	4253      	negs	r3, r2
     5e0:	415a      	adcs	r2, r3
     5e2:	b2d2      	uxtb	r2, r2
	if (!n) {
     5e4:	2900      	cmp	r1, #0
     5e6:	d00b      	beq.n	600 <udi_cdc_data_received+0x30>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
     5e8:	b289      	uxth	r1, r1
     5ea:	0052      	lsls	r2, r2, #1
     5ec:	4b0c      	ldr	r3, [pc, #48]	; (620 <udi_cdc_data_received+0x50>)
     5ee:	52d1      	strh	r1, [r2, r3]
	udi_cdc_rx_trans_ongoing[port] = false;
     5f0:	2200      	movs	r2, #0
     5f2:	4b0c      	ldr	r3, [pc, #48]	; (624 <udi_cdc_data_received+0x54>)
     5f4:	701a      	strb	r2, [r3, #0]
	udi_cdc_rx_start(port);
     5f6:	2000      	movs	r0, #0
     5f8:	4b0b      	ldr	r3, [pc, #44]	; (628 <udi_cdc_data_received+0x58>)
     5fa:	4798      	blx	r3
}
     5fc:	b002      	add	sp, #8
     5fe:	bd10      	pop	{r4, pc}
				udi_cdc_rx_buf[port][buf_sel_trans],
     600:	0093      	lsls	r3, r2, #2
     602:	189a      	adds	r2, r3, r2
     604:	0192      	lsls	r2, r2, #6
     606:	4b09      	ldr	r3, [pc, #36]	; (62c <udi_cdc_data_received+0x5c>)
     608:	189a      	adds	r2, r3, r2
		udd_ep_run( ep,
     60a:	4b09      	ldr	r3, [pc, #36]	; (630 <udi_cdc_data_received+0x60>)
     60c:	9300      	str	r3, [sp, #0]
     60e:	23a0      	movs	r3, #160	; 0xa0
     610:	005b      	lsls	r3, r3, #1
     612:	3101      	adds	r1, #1
     614:	0020      	movs	r0, r4
     616:	4c07      	ldr	r4, [pc, #28]	; (634 <udi_cdc_data_received+0x64>)
     618:	47a0      	blx	r4
		return;
     61a:	e7ef      	b.n	5fc <udi_cdc_data_received+0x2c>
     61c:	200003c4 	.word	0x200003c4
     620:	200003c0 	.word	0x200003c0
     624:	200003cc 	.word	0x200003cc
     628:	00000475 	.word	0x00000475
     62c:	20000140 	.word	0x20000140
     630:	000005d1 	.word	0x000005d1
     634:	00002d55 	.word	0x00002d55

00000638 <udi_cdc_is_rx_ready>:

bool udi_cdc_is_rx_ready(void)
{
     638:	b510      	push	{r4, lr}
	return udi_cdc_multi_is_rx_ready(0);
     63a:	2000      	movs	r0, #0
     63c:	4b01      	ldr	r3, [pc, #4]	; (644 <udi_cdc_is_rx_ready+0xc>)
     63e:	4798      	blx	r3
}
     640:	bd10      	pop	{r4, pc}
     642:	46c0      	nop			; (mov r8, r8)
     644:	00000461 	.word	0x00000461

00000648 <udi_cdc_multi_getc>:

int udi_cdc_multi_getc(uint8_t port)
{
     648:	b5f0      	push	{r4, r5, r6, r7, lr}
     64a:	46d6      	mov	lr, sl
     64c:	464f      	mov	r7, r9
     64e:	4646      	mov	r6, r8
     650:	b5c0      	push	{r6, r7, lr}
     652:	b082      	sub	sp, #8

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
     654:	4b28      	ldr	r3, [pc, #160]	; (6f8 <udi_cdc_multi_getc+0xb0>)
     656:	799b      	ldrb	r3, [r3, #6]
     658:	3b09      	subs	r3, #9
     65a:	425a      	negs	r2, r3
     65c:	4153      	adcs	r3, r2
     65e:	b2db      	uxtb	r3, r3
     660:	4699      	mov	r9, r3
	int rx_data = 0;
     662:	2300      	movs	r3, #0
     664:	469c      	mov	ip, r3
	cpu_irq_disable();
     666:	4b25      	ldr	r3, [pc, #148]	; (6fc <udi_cdc_multi_getc+0xb4>)
     668:	4698      	mov	r8, r3
     66a:	2700      	movs	r7, #0

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
     66c:	4e24      	ldr	r6, [pc, #144]	; (700 <udi_cdc_multi_getc+0xb8>)
	buf_sel = udi_cdc_rx_buf_sel[port];
     66e:	4c25      	ldr	r4, [pc, #148]	; (704 <udi_cdc_multi_getc+0xbc>)
     670:	e005      	b.n	67e <udi_cdc_multi_getc+0x36>
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
	cpu_irq_restore(flags);
	while (again) {
     672:	428b      	cmp	r3, r1
     674:	d329      	bcc.n	6ca <udi_cdc_multi_getc+0x82>
		if (!udi_cdc_data_running) {
     676:	4b24      	ldr	r3, [pc, #144]	; (708 <udi_cdc_multi_getc+0xc0>)
     678:	781b      	ldrb	r3, [r3, #0]
     67a:	2b00      	cmp	r3, #0
     67c:	d01d      	beq.n	6ba <udi_cdc_multi_getc+0x72>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     67e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     682:	425a      	negs	r2, r3
     684:	4153      	adcs	r3, r2
     686:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     688:	b672      	cpsid	i
     68a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     68e:	4643      	mov	r3, r8
     690:	701f      	strb	r7, [r3, #0]
	return flags;
     692:	9801      	ldr	r0, [sp, #4]
	pos = udi_cdc_rx_pos[port];
     694:	8833      	ldrh	r3, [r6, #0]
     696:	b29b      	uxth	r3, r3
	buf_sel = udi_cdc_rx_buf_sel[port];
     698:	7822      	ldrb	r2, [r4, #0]
     69a:	b2d2      	uxtb	r2, r2
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
     69c:	0055      	lsls	r5, r2, #1
     69e:	491b      	ldr	r1, [pc, #108]	; (70c <udi_cdc_multi_getc+0xc4>)
     6a0:	5a69      	ldrh	r1, [r5, r1]
     6a2:	b289      	uxth	r1, r1
	if (cpu_irq_is_enabled_flags(flags))
     6a4:	2800      	cmp	r0, #0
     6a6:	d0e4      	beq.n	672 <udi_cdc_multi_getc+0x2a>
		cpu_irq_enable();
     6a8:	2001      	movs	r0, #1
     6aa:	4682      	mov	sl, r0
     6ac:	4813      	ldr	r0, [pc, #76]	; (6fc <udi_cdc_multi_getc+0xb4>)
     6ae:	4655      	mov	r5, sl
     6b0:	7005      	strb	r5, [r0, #0]
     6b2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     6b6:	b662      	cpsie	i
     6b8:	e7db      	b.n	672 <udi_cdc_multi_getc+0x2a>
			return 0;
     6ba:	2500      	movs	r5, #0
		b_databit_9 = false;
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
	}
	return rx_data;
}
     6bc:	0028      	movs	r0, r5
     6be:	b002      	add	sp, #8
     6c0:	bc1c      	pop	{r2, r3, r4}
     6c2:	4690      	mov	r8, r2
     6c4:	4699      	mov	r9, r3
     6c6:	46a2      	mov	sl, r4
     6c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
     6ca:	0091      	lsls	r1, r2, #2
     6cc:	188a      	adds	r2, r1, r2
     6ce:	0192      	lsls	r2, r2, #6
     6d0:	490f      	ldr	r1, [pc, #60]	; (710 <udi_cdc_multi_getc+0xc8>)
     6d2:	188a      	adds	r2, r1, r2
     6d4:	5cd2      	ldrb	r2, [r2, r3]
     6d6:	4665      	mov	r5, ip
     6d8:	4315      	orrs	r5, r2
	udi_cdc_rx_pos[port] = pos+1;
     6da:	3301      	adds	r3, #1
     6dc:	b29b      	uxth	r3, r3
     6de:	4a08      	ldr	r2, [pc, #32]	; (700 <udi_cdc_multi_getc+0xb8>)
     6e0:	8013      	strh	r3, [r2, #0]
	udi_cdc_rx_start(port);
     6e2:	2000      	movs	r0, #0
     6e4:	4b0b      	ldr	r3, [pc, #44]	; (714 <udi_cdc_multi_getc+0xcc>)
     6e6:	4798      	blx	r3
	if (b_databit_9) {
     6e8:	464b      	mov	r3, r9
     6ea:	2b00      	cmp	r3, #0
     6ec:	d0e6      	beq.n	6bc <udi_cdc_multi_getc+0x74>
		rx_data = rx_data << 8;
     6ee:	022b      	lsls	r3, r5, #8
     6f0:	469c      	mov	ip, r3
		b_databit_9 = false;
     6f2:	2300      	movs	r3, #0
     6f4:	4699      	mov	r9, r3
		goto udi_cdc_getc_process_one_byte;
     6f6:	e7c2      	b.n	67e <udi_cdc_multi_getc+0x36>
     6f8:	20000134 	.word	0x20000134
     6fc:	20000112 	.word	0x20000112
     700:	200003c8 	.word	0x200003c8
     704:	200003c4 	.word	0x200003c4
     708:	20000132 	.word	0x20000132
     70c:	200003c0 	.word	0x200003c0
     710:	20000140 	.word	0x20000140
     714:	00000475 	.word	0x00000475

00000718 <udi_cdc_getc>:

int udi_cdc_getc(void)
{
     718:	b510      	push	{r4, lr}
	return udi_cdc_multi_getc(0);
     71a:	2000      	movs	r0, #0
     71c:	4b01      	ldr	r3, [pc, #4]	; (724 <udi_cdc_getc+0xc>)
     71e:	4798      	blx	r3
}
     720:	bd10      	pop	{r4, pc}
     722:	46c0      	nop			; (mov r8, r8)
     724:	00000649 	.word	0x00000649

00000728 <udi_cdc_multi_read_buf>:

iram_size_t udi_cdc_multi_read_buf(uint8_t port, void* buf, iram_size_t size)
{
     728:	b5f0      	push	{r4, r5, r6, r7, lr}
     72a:	46de      	mov	lr, fp
     72c:	4657      	mov	r7, sl
     72e:	464e      	mov	r6, r9
     730:	b5c0      	push	{r6, r7, lr}
     732:	b082      	sub	sp, #8
     734:	0015      	movs	r5, r2
	irqflags_t flags;
	uint8_t *ptr_buf = (uint8_t *)buf;
     736:	000e      	movs	r6, r1
	cpu_irq_disable();
     738:	4b27      	ldr	r3, [pc, #156]	; (7d8 <udi_cdc_multi_read_buf+0xb0>)
     73a:	469b      	mov	fp, r3
     73c:	2300      	movs	r3, #0
     73e:	469a      	mov	sl, r3
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
     740:	4b26      	ldr	r3, [pc, #152]	; (7dc <udi_cdc_multi_read_buf+0xb4>)
     742:	4699      	mov	r9, r3
	buf_sel = udi_cdc_rx_buf_sel[port];
     744:	4f26      	ldr	r7, [pc, #152]	; (7e0 <udi_cdc_multi_read_buf+0xb8>)
     746:	e01d      	b.n	784 <udi_cdc_multi_read_buf+0x5c>
		}
		goto udi_cdc_read_buf_loop_wait;
	}

	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
     748:	005a      	lsls	r2, r3, #1
     74a:	4826      	ldr	r0, [pc, #152]	; (7e4 <udi_cdc_multi_read_buf+0xbc>)
     74c:	5a12      	ldrh	r2, [r2, r0]
     74e:	1a52      	subs	r2, r2, r1
     750:	002c      	movs	r4, r5
     752:	4295      	cmp	r5, r2
     754:	d900      	bls.n	758 <udi_cdc_multi_read_buf+0x30>
     756:	0014      	movs	r4, r2
	if (copy_nb>size) {
		copy_nb = size;
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
     758:	009a      	lsls	r2, r3, #2
     75a:	18d3      	adds	r3, r2, r3
     75c:	019b      	lsls	r3, r3, #6
     75e:	1859      	adds	r1, r3, r1
     760:	4b21      	ldr	r3, [pc, #132]	; (7e8 <udi_cdc_multi_read_buf+0xc0>)
     762:	1859      	adds	r1, r3, r1
     764:	0022      	movs	r2, r4
     766:	0030      	movs	r0, r6
     768:	4b20      	ldr	r3, [pc, #128]	; (7ec <udi_cdc_multi_read_buf+0xc4>)
     76a:	4798      	blx	r3
	udi_cdc_rx_pos[port] += copy_nb;
     76c:	4a1b      	ldr	r2, [pc, #108]	; (7dc <udi_cdc_multi_read_buf+0xb4>)
     76e:	8813      	ldrh	r3, [r2, #0]
     770:	191b      	adds	r3, r3, r4
     772:	b29b      	uxth	r3, r3
     774:	8013      	strh	r3, [r2, #0]
	ptr_buf += copy_nb;
     776:	1936      	adds	r6, r6, r4
	size -= copy_nb;
     778:	1b2d      	subs	r5, r5, r4
	udi_cdc_rx_start(port);
     77a:	2000      	movs	r0, #0
     77c:	4b1c      	ldr	r3, [pc, #112]	; (7f0 <udi_cdc_multi_read_buf+0xc8>)
     77e:	4798      	blx	r3

	if (size) {
     780:	2d00      	cmp	r5, #0
     782:	d022      	beq.n	7ca <udi_cdc_multi_read_buf+0xa2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     784:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     788:	425a      	negs	r2, r3
     78a:	4153      	adcs	r3, r2
     78c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     78e:	b672      	cpsid	i
     790:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     794:	465b      	mov	r3, fp
     796:	4652      	mov	r2, sl
     798:	701a      	strb	r2, [r3, #0]
	return flags;
     79a:	9801      	ldr	r0, [sp, #4]
	pos = udi_cdc_rx_pos[port];
     79c:	464b      	mov	r3, r9
     79e:	8819      	ldrh	r1, [r3, #0]
     7a0:	b289      	uxth	r1, r1
	buf_sel = udi_cdc_rx_buf_sel[port];
     7a2:	783b      	ldrb	r3, [r7, #0]
     7a4:	b2db      	uxtb	r3, r3
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
     7a6:	005c      	lsls	r4, r3, #1
     7a8:	4a0e      	ldr	r2, [pc, #56]	; (7e4 <udi_cdc_multi_read_buf+0xbc>)
     7aa:	5aa2      	ldrh	r2, [r4, r2]
     7ac:	b292      	uxth	r2, r2
	if (cpu_irq_is_enabled_flags(flags))
     7ae:	2800      	cmp	r0, #0
     7b0:	d005      	beq.n	7be <udi_cdc_multi_read_buf+0x96>
		cpu_irq_enable();
     7b2:	2401      	movs	r4, #1
     7b4:	4808      	ldr	r0, [pc, #32]	; (7d8 <udi_cdc_multi_read_buf+0xb0>)
     7b6:	7004      	strb	r4, [r0, #0]
     7b8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     7bc:	b662      	cpsie	i
	while (again) {
     7be:	4291      	cmp	r1, r2
     7c0:	d3c2      	bcc.n	748 <udi_cdc_multi_read_buf+0x20>
		if (!udi_cdc_data_running) {
     7c2:	4b0c      	ldr	r3, [pc, #48]	; (7f4 <udi_cdc_multi_read_buf+0xcc>)
     7c4:	781b      	ldrb	r3, [r3, #0]
     7c6:	2b00      	cmp	r3, #0
     7c8:	d1dc      	bne.n	784 <udi_cdc_multi_read_buf+0x5c>
		goto udi_cdc_read_buf_loop_wait;
	}
	return 0;
}
     7ca:	0028      	movs	r0, r5
     7cc:	b002      	add	sp, #8
     7ce:	bc1c      	pop	{r2, r3, r4}
     7d0:	4691      	mov	r9, r2
     7d2:	469a      	mov	sl, r3
     7d4:	46a3      	mov	fp, r4
     7d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     7d8:	20000112 	.word	0x20000112
     7dc:	200003c8 	.word	0x200003c8
     7e0:	200003c4 	.word	0x200003c4
     7e4:	200003c0 	.word	0x200003c0
     7e8:	20000140 	.word	0x20000140
     7ec:	00004f55 	.word	0x00004f55
     7f0:	00000475 	.word	0x00000475
     7f4:	20000132 	.word	0x20000132

000007f8 <udi_cdc_read_no_polling>:
	}
	return(nb_avail_data);
}

iram_size_t udi_cdc_read_no_polling(void* buf, iram_size_t size)
{
     7f8:	b570      	push	{r4, r5, r6, lr}
     7fa:	b082      	sub	sp, #8
	if (!udi_cdc_data_running) {
     7fc:	4b28      	ldr	r3, [pc, #160]	; (8a0 <udi_cdc_read_no_polling+0xa8>)
     7fe:	781b      	ldrb	r3, [r3, #0]
		return 0;
     800:	2400      	movs	r4, #0
	if (!udi_cdc_data_running) {
     802:	2b00      	cmp	r3, #0
     804:	d023      	beq.n	84e <udi_cdc_read_no_polling+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     806:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     80a:	425a      	negs	r2, r3
     80c:	4153      	adcs	r3, r2
     80e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     810:	b672      	cpsid	i
     812:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     816:	2200      	movs	r2, #0
     818:	4b22      	ldr	r3, [pc, #136]	; (8a4 <udi_cdc_read_no_polling+0xac>)
     81a:	701a      	strb	r2, [r3, #0]
	return flags;
     81c:	9a01      	ldr	r2, [sp, #4]
	pos = udi_cdc_rx_pos[port];
     81e:	4b22      	ldr	r3, [pc, #136]	; (8a8 <udi_cdc_read_no_polling+0xb0>)
     820:	881d      	ldrh	r5, [r3, #0]
     822:	b2ad      	uxth	r5, r5
	buf_sel = udi_cdc_rx_buf_sel[port];
     824:	4b21      	ldr	r3, [pc, #132]	; (8ac <udi_cdc_read_no_polling+0xb4>)
     826:	781b      	ldrb	r3, [r3, #0]
     828:	b2db      	uxtb	r3, r3
	nb_avail_data = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
     82a:	005e      	lsls	r6, r3, #1
     82c:	4c20      	ldr	r4, [pc, #128]	; (8b0 <udi_cdc_read_no_polling+0xb8>)
     82e:	5b34      	ldrh	r4, [r6, r4]
     830:	1b64      	subs	r4, r4, r5
	if (cpu_irq_is_enabled_flags(flags))
     832:	2a00      	cmp	r2, #0
     834:	d005      	beq.n	842 <udi_cdc_read_no_polling+0x4a>
		cpu_irq_enable();
     836:	2601      	movs	r6, #1
     838:	4a1a      	ldr	r2, [pc, #104]	; (8a4 <udi_cdc_read_no_polling+0xac>)
     83a:	7016      	strb	r6, [r2, #0]
     83c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     840:	b662      	cpsie	i
     842:	000e      	movs	r6, r1
     844:	42a1      	cmp	r1, r4
     846:	d900      	bls.n	84a <udi_cdc_read_no_polling+0x52>
     848:	0026      	movs	r6, r4
	if(size>0) {
     84a:	2e00      	cmp	r6, #0
     84c:	d102      	bne.n	854 <udi_cdc_read_no_polling+0x5c>
	return udi_cdc_multi_read_no_polling(0, buf, size);
}
     84e:	0020      	movs	r0, r4
     850:	b002      	add	sp, #8
     852:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], size);
     854:	0099      	lsls	r1, r3, #2
     856:	18cb      	adds	r3, r1, r3
     858:	019b      	lsls	r3, r3, #6
     85a:	195d      	adds	r5, r3, r5
     85c:	4915      	ldr	r1, [pc, #84]	; (8b4 <udi_cdc_read_no_polling+0xbc>)
     85e:	1949      	adds	r1, r1, r5
     860:	0032      	movs	r2, r6
     862:	4b15      	ldr	r3, [pc, #84]	; (8b8 <udi_cdc_read_no_polling+0xc0>)
     864:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     866:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     86a:	425a      	negs	r2, r3
     86c:	4153      	adcs	r3, r2
     86e:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     870:	b672      	cpsid	i
     872:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     876:	2200      	movs	r2, #0
     878:	4b0a      	ldr	r3, [pc, #40]	; (8a4 <udi_cdc_read_no_polling+0xac>)
     87a:	701a      	strb	r2, [r3, #0]
	return flags;
     87c:	9a00      	ldr	r2, [sp, #0]
		udi_cdc_rx_pos[port] += size;
     87e:	4b0a      	ldr	r3, [pc, #40]	; (8a8 <udi_cdc_read_no_polling+0xb0>)
     880:	8819      	ldrh	r1, [r3, #0]
     882:	198e      	adds	r6, r1, r6
     884:	b2b6      	uxth	r6, r6
     886:	801e      	strh	r6, [r3, #0]
	if (cpu_irq_is_enabled_flags(flags))
     888:	2a00      	cmp	r2, #0
     88a:	d005      	beq.n	898 <udi_cdc_read_no_polling+0xa0>
		cpu_irq_enable();
     88c:	2201      	movs	r2, #1
     88e:	4b05      	ldr	r3, [pc, #20]	; (8a4 <udi_cdc_read_no_polling+0xac>)
     890:	701a      	strb	r2, [r3, #0]
     892:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     896:	b662      	cpsie	i
		udi_cdc_rx_start(port);
     898:	2000      	movs	r0, #0
     89a:	4b08      	ldr	r3, [pc, #32]	; (8bc <udi_cdc_read_no_polling+0xc4>)
     89c:	4798      	blx	r3
     89e:	e7d6      	b.n	84e <udi_cdc_read_no_polling+0x56>
     8a0:	20000132 	.word	0x20000132
     8a4:	20000112 	.word	0x20000112
     8a8:	200003c8 	.word	0x200003c8
     8ac:	200003c4 	.word	0x200003c4
     8b0:	200003c0 	.word	0x200003c0
     8b4:	20000140 	.word	0x20000140
     8b8:	00004f55 	.word	0x00004f55
     8bc:	00000475 	.word	0x00000475

000008c0 <udi_cdc_read_buf>:

iram_size_t udi_cdc_read_buf(void* buf, iram_size_t size)
{
     8c0:	b510      	push	{r4, lr}
     8c2:	000a      	movs	r2, r1
	return udi_cdc_multi_read_buf(0, buf, size);
     8c4:	0001      	movs	r1, r0
     8c6:	2000      	movs	r0, #0
     8c8:	4b01      	ldr	r3, [pc, #4]	; (8d0 <udi_cdc_read_buf+0x10>)
     8ca:	4798      	blx	r3
}
     8cc:	bd10      	pop	{r4, pc}
     8ce:	46c0      	nop			; (mov r8, r8)
     8d0:	00000729 	.word	0x00000729

000008d4 <udi_cdc_multi_get_free_tx_buffer>:

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
     8d4:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     8d6:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     8da:	425a      	negs	r2, r3
     8dc:	4153      	adcs	r3, r2
     8de:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     8e0:	b672      	cpsid	i
     8e2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     8e6:	2200      	movs	r2, #0
     8e8:	4b15      	ldr	r3, [pc, #84]	; (940 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
     8ea:	701a      	strb	r2, [r3, #0]
	return flags;
     8ec:	9901      	ldr	r1, [sp, #4]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     8ee:	4b15      	ldr	r3, [pc, #84]	; (944 <udi_cdc_multi_get_free_tx_buffer+0x70>)
     8f0:	781b      	ldrb	r3, [r3, #0]
     8f2:	b2db      	uxtb	r3, r3
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
     8f4:	0058      	lsls	r0, r3, #1
     8f6:	4a14      	ldr	r2, [pc, #80]	; (948 <udi_cdc_multi_get_free_tx_buffer+0x74>)
     8f8:	5a82      	ldrh	r2, [r0, r2]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
     8fa:	20a0      	movs	r0, #160	; 0xa0
     8fc:	0040      	lsls	r0, r0, #1
     8fe:	4282      	cmp	r2, r0
     900:	d00c      	beq.n	91c <udi_cdc_multi_get_free_tx_buffer+0x48>
			udi_cdc_tx_both_buf_to_send[port] = true;
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
			buf_sel_nb = 0;
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
     902:	20a0      	movs	r0, #160	; 0xa0
     904:	0040      	lsls	r0, r0, #1
     906:	1a80      	subs	r0, r0, r2
	if (cpu_irq_is_enabled_flags(flags))
     908:	2900      	cmp	r1, #0
     90a:	d005      	beq.n	918 <udi_cdc_multi_get_free_tx_buffer+0x44>
		cpu_irq_enable();
     90c:	2201      	movs	r2, #1
     90e:	4b0c      	ldr	r3, [pc, #48]	; (940 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
     910:	701a      	strb	r2, [r3, #0]
     912:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     916:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return retval;
}
     918:	b002      	add	sp, #8
     91a:	4770      	bx	lr
		if ((!udi_cdc_tx_trans_ongoing[port])
     91c:	480b      	ldr	r0, [pc, #44]	; (94c <udi_cdc_multi_get_free_tx_buffer+0x78>)
     91e:	7800      	ldrb	r0, [r0, #0]
     920:	2800      	cmp	r0, #0
     922:	d1ee      	bne.n	902 <udi_cdc_multi_get_free_tx_buffer+0x2e>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
     924:	480a      	ldr	r0, [pc, #40]	; (950 <udi_cdc_multi_get_free_tx_buffer+0x7c>)
     926:	7800      	ldrb	r0, [r0, #0]
     928:	2800      	cmp	r0, #0
     92a:	d1ea      	bne.n	902 <udi_cdc_multi_get_free_tx_buffer+0x2e>
			udi_cdc_tx_both_buf_to_send[port] = true;
     92c:	3001      	adds	r0, #1
     92e:	4a08      	ldr	r2, [pc, #32]	; (950 <udi_cdc_multi_get_free_tx_buffer+0x7c>)
     930:	7010      	strb	r0, [r2, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
     932:	425a      	negs	r2, r3
     934:	4153      	adcs	r3, r2
     936:	b2db      	uxtb	r3, r3
     938:	4a02      	ldr	r2, [pc, #8]	; (944 <udi_cdc_multi_get_free_tx_buffer+0x70>)
     93a:	7013      	strb	r3, [r2, #0]
			buf_sel_nb = 0;
     93c:	2200      	movs	r2, #0
     93e:	e7e0      	b.n	902 <udi_cdc_multi_get_free_tx_buffer+0x2e>
     940:	20000112 	.word	0x20000112
     944:	2000065c 	.word	0x2000065c
     948:	20000658 	.word	0x20000658
     94c:	20000664 	.word	0x20000664
     950:	200003d4 	.word	0x200003d4

00000954 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
     954:	b510      	push	{r4, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
     956:	4b03      	ldr	r3, [pc, #12]	; (964 <udi_cdc_multi_is_tx_ready+0x10>)
     958:	4798      	blx	r3
     95a:	1e43      	subs	r3, r0, #1
     95c:	4198      	sbcs	r0, r3
     95e:	b2c0      	uxtb	r0, r0
}
     960:	bd10      	pop	{r4, pc}
     962:	46c0      	nop			; (mov r8, r8)
     964:	000008d5 	.word	0x000008d5

00000968 <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
     968:	b5f0      	push	{r4, r5, r6, r7, lr}
     96a:	46de      	mov	lr, fp
     96c:	4657      	mov	r7, sl
     96e:	464e      	mov	r6, r9
     970:	4645      	mov	r5, r8
     972:	b5e0      	push	{r5, r6, r7, lr}
     974:	b083      	sub	sp, #12
     976:	000c      	movs	r4, r1

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
     978:	4b23      	ldr	r3, [pc, #140]	; (a08 <udi_cdc_multi_putc+0xa0>)
     97a:	799d      	ldrb	r5, [r3, #6]
     97c:	3d09      	subs	r5, #9
     97e:	426b      	negs	r3, r5
     980:	415d      	adcs	r5, r3
     982:	b2ed      	uxtb	r5, r5

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
     984:	4e21      	ldr	r6, [pc, #132]	; (a0c <udi_cdc_multi_putc+0xa4>)
	cpu_irq_disable();
     986:	4b22      	ldr	r3, [pc, #136]	; (a10 <udi_cdc_multi_putc+0xa8>)
     988:	4698      	mov	r8, r3
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     98a:	4b22      	ldr	r3, [pc, #136]	; (a14 <udi_cdc_multi_putc+0xac>)
     98c:	469a      	mov	sl, r3
     98e:	e029      	b.n	9e4 <udi_cdc_multi_putc+0x7c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     990:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     994:	425a      	negs	r2, r3
     996:	4153      	adcs	r3, r2
     998:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     99a:	b672      	cpsid	i
     99c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     9a0:	2300      	movs	r3, #0
     9a2:	4642      	mov	r2, r8
     9a4:	7013      	strb	r3, [r2, #0]
	return flags;
     9a6:	9b01      	ldr	r3, [sp, #4]
     9a8:	469b      	mov	fp, r3
     9aa:	4653      	mov	r3, sl
     9ac:	781a      	ldrb	r2, [r3, #0]
     9ae:	b2d2      	uxtb	r2, r2
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
     9b0:	4b19      	ldr	r3, [pc, #100]	; (a18 <udi_cdc_multi_putc+0xb0>)
     9b2:	469c      	mov	ip, r3
     9b4:	0057      	lsls	r7, r2, #1
     9b6:	5af8      	ldrh	r0, [r7, r3]
     9b8:	1c43      	adds	r3, r0, #1
     9ba:	4661      	mov	r1, ip
     9bc:	527b      	strh	r3, [r7, r1]
     9be:	0093      	lsls	r3, r2, #2
     9c0:	189b      	adds	r3, r3, r2
     9c2:	019b      	lsls	r3, r3, #6
     9c4:	4a15      	ldr	r2, [pc, #84]	; (a1c <udi_cdc_multi_putc+0xb4>)
     9c6:	18d3      	adds	r3, r2, r3
     9c8:	541c      	strb	r4, [r3, r0]
	if (cpu_irq_is_enabled_flags(flags))
     9ca:	465b      	mov	r3, fp
     9cc:	2b00      	cmp	r3, #0
     9ce:	d005      	beq.n	9dc <udi_cdc_multi_putc+0x74>
		cpu_irq_enable();
     9d0:	2201      	movs	r2, #1
     9d2:	4b0f      	ldr	r3, [pc, #60]	; (a10 <udi_cdc_multi_putc+0xa8>)
     9d4:	701a      	strb	r2, [r3, #0]
     9d6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     9da:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (b_databit_9) {
     9dc:	2d00      	cmp	r5, #0
     9de:	d010      	beq.n	a02 <udi_cdc_multi_putc+0x9a>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
     9e0:	1224      	asrs	r4, r4, #8
		b_databit_9 = false;
     9e2:	2500      	movs	r5, #0
	if (!udi_cdc_multi_is_tx_ready(port)) {
     9e4:	2000      	movs	r0, #0
     9e6:	47b0      	blx	r6
     9e8:	2800      	cmp	r0, #0
     9ea:	d1d1      	bne.n	990 <udi_cdc_multi_putc+0x28>
		if (!udi_cdc_data_running) {
     9ec:	4b0c      	ldr	r3, [pc, #48]	; (a20 <udi_cdc_multi_putc+0xb8>)
     9ee:	781b      	ldrb	r3, [r3, #0]
     9f0:	2b00      	cmp	r3, #0
     9f2:	d1f7      	bne.n	9e4 <udi_cdc_multi_putc+0x7c>
		goto udi_cdc_putc_process_one_byte;
	}
	return true;
}
     9f4:	b003      	add	sp, #12
     9f6:	bc3c      	pop	{r2, r3, r4, r5}
     9f8:	4690      	mov	r8, r2
     9fa:	4699      	mov	r9, r3
     9fc:	46a2      	mov	sl, r4
     9fe:	46ab      	mov	fp, r5
     a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
     a02:	2001      	movs	r0, #1
     a04:	e7f6      	b.n	9f4 <udi_cdc_multi_putc+0x8c>
     a06:	46c0      	nop			; (mov r8, r8)
     a08:	20000134 	.word	0x20000134
     a0c:	00000955 	.word	0x00000955
     a10:	20000112 	.word	0x20000112
     a14:	2000065c 	.word	0x2000065c
     a18:	20000658 	.word	0x20000658
     a1c:	200003d8 	.word	0x200003d8
     a20:	20000132 	.word	0x20000132

00000a24 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
     a24:	b510      	push	{r4, lr}
     a26:	0001      	movs	r1, r0
	return udi_cdc_multi_putc(0, value);
     a28:	2000      	movs	r0, #0
     a2a:	4b01      	ldr	r3, [pc, #4]	; (a30 <udi_cdc_putc+0xc>)
     a2c:	4798      	blx	r3
}
     a2e:	bd10      	pop	{r4, pc}
     a30:	00000969 	.word	0x00000969

00000a34 <udi_cdc_multi_write_buf>:

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
     a34:	b5f0      	push	{r4, r5, r6, r7, lr}
     a36:	46de      	mov	lr, fp
     a38:	4657      	mov	r7, sl
     a3a:	464e      	mov	r6, r9
     a3c:	4645      	mov	r5, r8
     a3e:	b5e0      	push	{r5, r6, r7, lr}
     a40:	b083      	sub	sp, #12
     a42:	0017      	movs	r7, r2

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (9 == udi_cdc_line_coding[port].bDataBits) {
     a44:	4b27      	ldr	r3, [pc, #156]	; (ae4 <udi_cdc_multi_write_buf+0xb0>)
     a46:	799b      	ldrb	r3, [r3, #6]
     a48:	2b09      	cmp	r3, #9
     a4a:	d005      	beq.n	a58 <udi_cdc_multi_write_buf+0x24>
{
     a4c:	4688      	mov	r8, r1
		size *=2;
	}

udi_cdc_write_buf_loop_wait:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
     a4e:	4b26      	ldr	r3, [pc, #152]	; (ae8 <udi_cdc_multi_write_buf+0xb4>)
     a50:	4699      	mov	r9, r3
	cpu_irq_disable();
     a52:	4b26      	ldr	r3, [pc, #152]	; (aec <udi_cdc_multi_write_buf+0xb8>)
     a54:	469b      	mov	fp, r3
     a56:	e035      	b.n	ac4 <udi_cdc_multi_write_buf+0x90>
		size *=2;
     a58:	0057      	lsls	r7, r2, #1
     a5a:	e7f7      	b.n	a4c <udi_cdc_multi_write_buf+0x18>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     a5c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     a60:	425a      	negs	r2, r3
     a62:	4153      	adcs	r3, r2
     a64:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     a66:	b672      	cpsid	i
     a68:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     a6c:	2300      	movs	r3, #0
     a6e:	465a      	mov	r2, fp
     a70:	7013      	strb	r3, [r2, #0]
	return flags;
     a72:	9b01      	ldr	r3, [sp, #4]
     a74:	469a      	mov	sl, r3
		goto udi_cdc_write_buf_loop_wait;
	}

	// Write values
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     a76:	4b1e      	ldr	r3, [pc, #120]	; (af0 <udi_cdc_multi_write_buf+0xbc>)
     a78:	781c      	ldrb	r4, [r3, #0]
     a7a:	b2e4      	uxtb	r4, r4
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
     a7c:	0062      	lsls	r2, r4, #1
     a7e:	4b1d      	ldr	r3, [pc, #116]	; (af4 <udi_cdc_multi_write_buf+0xc0>)
     a80:	5ad5      	ldrh	r5, [r2, r3]
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
     a82:	23a0      	movs	r3, #160	; 0xa0
     a84:	005b      	lsls	r3, r3, #1
     a86:	1b5b      	subs	r3, r3, r5
     a88:	003e      	movs	r6, r7
     a8a:	429f      	cmp	r7, r3
     a8c:	d900      	bls.n	a90 <udi_cdc_multi_write_buf+0x5c>
     a8e:	001e      	movs	r6, r3
	if (copy_nb > size) {
		copy_nb = size;
	}
	memcpy(&udi_cdc_tx_buf[port][buf_sel][buf_nb], ptr_buf, copy_nb);
     a90:	00a0      	lsls	r0, r4, #2
     a92:	1900      	adds	r0, r0, r4
     a94:	0180      	lsls	r0, r0, #6
     a96:	1940      	adds	r0, r0, r5
     a98:	4b17      	ldr	r3, [pc, #92]	; (af8 <udi_cdc_multi_write_buf+0xc4>)
     a9a:	1818      	adds	r0, r3, r0
     a9c:	0032      	movs	r2, r6
     a9e:	4641      	mov	r1, r8
     aa0:	4b16      	ldr	r3, [pc, #88]	; (afc <udi_cdc_multi_write_buf+0xc8>)
     aa2:	4798      	blx	r3
	udi_cdc_tx_buf_nb[port][buf_sel] = buf_nb + copy_nb;
     aa4:	0064      	lsls	r4, r4, #1
     aa6:	19ad      	adds	r5, r5, r6
     aa8:	4b12      	ldr	r3, [pc, #72]	; (af4 <udi_cdc_multi_write_buf+0xc0>)
     aaa:	52e5      	strh	r5, [r4, r3]
	if (cpu_irq_is_enabled_flags(flags))
     aac:	4653      	mov	r3, sl
     aae:	2b00      	cmp	r3, #0
     ab0:	d005      	beq.n	abe <udi_cdc_multi_write_buf+0x8a>
		cpu_irq_enable();
     ab2:	2201      	movs	r2, #1
     ab4:	4b0d      	ldr	r3, [pc, #52]	; (aec <udi_cdc_multi_write_buf+0xb8>)
     ab6:	701a      	strb	r2, [r3, #0]
     ab8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     abc:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// Update buffer pointer
	ptr_buf = ptr_buf + copy_nb;
     abe:	44b0      	add	r8, r6
	size -= copy_nb;
     ac0:	1bbf      	subs	r7, r7, r6

	if (size) {
     ac2:	d007      	beq.n	ad4 <udi_cdc_multi_write_buf+0xa0>
	if (!udi_cdc_multi_is_tx_ready(port)) {
     ac4:	2000      	movs	r0, #0
     ac6:	47c8      	blx	r9
     ac8:	2800      	cmp	r0, #0
     aca:	d1c7      	bne.n	a5c <udi_cdc_multi_write_buf+0x28>
		if (!udi_cdc_data_running) {
     acc:	4b0c      	ldr	r3, [pc, #48]	; (b00 <udi_cdc_multi_write_buf+0xcc>)
     ace:	781b      	ldrb	r3, [r3, #0]
     ad0:	2b00      	cmp	r3, #0
     ad2:	d1f7      	bne.n	ac4 <udi_cdc_multi_write_buf+0x90>
		goto udi_cdc_write_buf_loop_wait;
	}

	return 0;
}
     ad4:	0038      	movs	r0, r7
     ad6:	b003      	add	sp, #12
     ad8:	bc3c      	pop	{r2, r3, r4, r5}
     ada:	4690      	mov	r8, r2
     adc:	4699      	mov	r9, r3
     ade:	46a2      	mov	sl, r4
     ae0:	46ab      	mov	fp, r5
     ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ae4:	20000134 	.word	0x20000134
     ae8:	00000955 	.word	0x00000955
     aec:	20000112 	.word	0x20000112
     af0:	2000065c 	.word	0x2000065c
     af4:	20000658 	.word	0x20000658
     af8:	200003d8 	.word	0x200003d8
     afc:	00004f55 	.word	0x00004f55
     b00:	20000132 	.word	0x20000132

00000b04 <udi_cdc_write_buf>:

iram_size_t udi_cdc_write_buf(const void* buf, iram_size_t size)
{
     b04:	b510      	push	{r4, lr}
     b06:	000a      	movs	r2, r1
	return udi_cdc_multi_write_buf(0, buf, size);
     b08:	0001      	movs	r1, r0
     b0a:	2000      	movs	r0, #0
     b0c:	4b01      	ldr	r3, [pc, #4]	; (b14 <udi_cdc_write_buf+0x10>)
     b0e:	4798      	blx	r3
}
     b10:	bd10      	pop	{r4, pc}
     b12:	46c0      	nop			; (mov r8, r8)
     b14:	00000a35 	.word	0x00000a35

00000b18 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
     b18:	b510      	push	{r4, lr}
			udc_ptr_conf->desc +
     b1a:	4b11      	ldr	r3, [pc, #68]	; (b60 <udc_next_desc_in_iface+0x48>)
     b1c:	681b      	ldr	r3, [r3, #0]
     b1e:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     b20:	7894      	ldrb	r4, [r2, #2]
     b22:	78d3      	ldrb	r3, [r2, #3]
     b24:	021b      	lsls	r3, r3, #8
     b26:	4323      	orrs	r3, r4
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     b28:	18d2      	adds	r2, r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
     b2a:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     b2c:	18c0      	adds	r0, r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
     b2e:	4290      	cmp	r0, r2
     b30:	d210      	bcs.n	b54 <udc_next_desc_in_iface+0x3c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     b32:	7843      	ldrb	r3, [r0, #1]
     b34:	2b04      	cmp	r3, #4
     b36:	d00f      	beq.n	b58 <udc_next_desc_in_iface+0x40>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
     b38:	428b      	cmp	r3, r1
     b3a:	d00a      	beq.n	b52 <udc_next_desc_in_iface+0x3a>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
     b3c:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     b3e:	18c0      	adds	r0, r0, r3
	while (ptr_eof_desc > desc) {
     b40:	4290      	cmp	r0, r2
     b42:	d205      	bcs.n	b50 <udc_next_desc_in_iface+0x38>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     b44:	7843      	ldrb	r3, [r0, #1]
     b46:	2b04      	cmp	r3, #4
     b48:	d008      	beq.n	b5c <udc_next_desc_in_iface+0x44>
		if (desc_id == desc->bDescriptorType) {
     b4a:	428b      	cmp	r3, r1
     b4c:	d1f6      	bne.n	b3c <udc_next_desc_in_iface+0x24>
     b4e:	e000      	b.n	b52 <udc_next_desc_in_iface+0x3a>
	}
	return NULL; // No specific descriptor found
     b50:	2000      	movs	r0, #0
}
     b52:	bd10      	pop	{r4, pc}
	return NULL; // No specific descriptor found
     b54:	2000      	movs	r0, #0
     b56:	e7fc      	b.n	b52 <udc_next_desc_in_iface+0x3a>
     b58:	2000      	movs	r0, #0
     b5a:	e7fa      	b.n	b52 <udc_next_desc_in_iface+0x3a>
     b5c:	2000      	movs	r0, #0
     b5e:	e7f8      	b.n	b52 <udc_next_desc_in_iface+0x3a>
     b60:	20000680 	.word	0x20000680

00000b64 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
     b64:	b510      	push	{r4, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
     b66:	4b03      	ldr	r3, [pc, #12]	; (b74 <udc_valid_address+0x10>)
     b68:	885b      	ldrh	r3, [r3, #2]
     b6a:	207f      	movs	r0, #127	; 0x7f
     b6c:	4018      	ands	r0, r3
     b6e:	4b02      	ldr	r3, [pc, #8]	; (b78 <udc_valid_address+0x14>)
     b70:	4798      	blx	r3
}
     b72:	bd10      	pop	{r4, pc}
     b74:	200009ec 	.word	0x200009ec
     b78:	00002f2d 	.word	0x00002f2d

00000b7c <udc_update_iface_desc>:
{
     b7c:	b570      	push	{r4, r5, r6, lr}
	if (0 == udc_num_configuration) {
     b7e:	4b19      	ldr	r3, [pc, #100]	; (be4 <udc_update_iface_desc+0x68>)
     b80:	781b      	ldrb	r3, [r3, #0]
		return false;
     b82:	2200      	movs	r2, #0
	if (0 == udc_num_configuration) {
     b84:	2b00      	cmp	r3, #0
     b86:	d029      	beq.n	bdc <udc_update_iface_desc+0x60>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     b88:	4b17      	ldr	r3, [pc, #92]	; (be8 <udc_update_iface_desc+0x6c>)
     b8a:	681b      	ldr	r3, [r3, #0]
     b8c:	681b      	ldr	r3, [r3, #0]
     b8e:	791c      	ldrb	r4, [r3, #4]
     b90:	4284      	cmp	r4, r0
     b92:	d923      	bls.n	bdc <udc_update_iface_desc+0x60>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
     b94:	4a15      	ldr	r2, [pc, #84]	; (bec <udc_update_iface_desc+0x70>)
     b96:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     b98:	789a      	ldrb	r2, [r3, #2]
     b9a:	78dc      	ldrb	r4, [r3, #3]
     b9c:	0224      	lsls	r4, r4, #8
     b9e:	4314      	orrs	r4, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     ba0:	191c      	adds	r4, r3, r4
	while (ptr_end_desc >
     ba2:	42a3      	cmp	r3, r4
     ba4:	d21c      	bcs.n	be0 <udc_update_iface_desc+0x64>
     ba6:	2500      	movs	r5, #0
     ba8:	2601      	movs	r6, #1
     baa:	e007      	b.n	bbc <udc_update_iface_desc+0x40>
     bac:	4a0f      	ldr	r2, [pc, #60]	; (bec <udc_update_iface_desc+0x70>)
     bae:	6013      	str	r3, [r2, #0]
     bb0:	e00f      	b.n	bd2 <udc_update_iface_desc+0x56>
				udc_ptr_iface->bLength);
     bb2:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
     bb4:	189b      	adds	r3, r3, r2
     bb6:	0035      	movs	r5, r6
	while (ptr_end_desc >
     bb8:	42a3      	cmp	r3, r4
     bba:	d20c      	bcs.n	bd6 <udc_update_iface_desc+0x5a>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
     bbc:	785a      	ldrb	r2, [r3, #1]
     bbe:	2a04      	cmp	r2, #4
     bc0:	d1f7      	bne.n	bb2 <udc_update_iface_desc+0x36>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
     bc2:	789a      	ldrb	r2, [r3, #2]
     bc4:	4282      	cmp	r2, r0
     bc6:	d1f4      	bne.n	bb2 <udc_update_iface_desc+0x36>
     bc8:	78da      	ldrb	r2, [r3, #3]
     bca:	428a      	cmp	r2, r1
     bcc:	d1f1      	bne.n	bb2 <udc_update_iface_desc+0x36>
     bce:	2d00      	cmp	r5, #0
     bd0:	d1ec      	bne.n	bac <udc_update_iface_desc+0x30>
				return true; // Interface found
     bd2:	2201      	movs	r2, #1
     bd4:	e002      	b.n	bdc <udc_update_iface_desc+0x60>
     bd6:	4a05      	ldr	r2, [pc, #20]	; (bec <udc_update_iface_desc+0x70>)
     bd8:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
     bda:	2200      	movs	r2, #0
}
     bdc:	0010      	movs	r0, r2
     bde:	bd70      	pop	{r4, r5, r6, pc}
	return false; // Interface not found
     be0:	2200      	movs	r2, #0
     be2:	e7fb      	b.n	bdc <udc_update_iface_desc+0x60>
     be4:	2000067c 	.word	0x2000067c
     be8:	20000680 	.word	0x20000680
     bec:	20000684 	.word	0x20000684

00000bf0 <udc_iface_disable>:
{
     bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
     bf2:	46c6      	mov	lr, r8
     bf4:	b500      	push	{lr}
     bf6:	0004      	movs	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
     bf8:	2100      	movs	r1, #0
     bfa:	4b13      	ldr	r3, [pc, #76]	; (c48 <udc_iface_disable+0x58>)
     bfc:	4798      	blx	r3
     bfe:	1e05      	subs	r5, r0, #0
     c00:	d103      	bne.n	c0a <udc_iface_disable+0x1a>
}
     c02:	0028      	movs	r0, r5
     c04:	bc04      	pop	{r2}
     c06:	4690      	mov	r8, r2
     c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     c0a:	4b10      	ldr	r3, [pc, #64]	; (c4c <udc_iface_disable+0x5c>)
     c0c:	681b      	ldr	r3, [r3, #0]
     c0e:	685b      	ldr	r3, [r3, #4]
     c10:	00a2      	lsls	r2, r4, #2
     c12:	58d3      	ldr	r3, [r2, r3]
     c14:	4698      	mov	r8, r3
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     c16:	68db      	ldr	r3, [r3, #12]
     c18:	4798      	blx	r3
     c1a:	0001      	movs	r1, r0
     c1c:	0020      	movs	r0, r4
     c1e:	4b0a      	ldr	r3, [pc, #40]	; (c48 <udc_iface_disable+0x58>)
     c20:	4798      	blx	r3
     c22:	1e05      	subs	r5, r0, #0
     c24:	d0ed      	beq.n	c02 <udc_iface_disable+0x12>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     c26:	4b0a      	ldr	r3, [pc, #40]	; (c50 <udc_iface_disable+0x60>)
     c28:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     c2a:	4e0a      	ldr	r6, [pc, #40]	; (c54 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
     c2c:	4f0a      	ldr	r7, [pc, #40]	; (c58 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     c2e:	2105      	movs	r1, #5
     c30:	0020      	movs	r0, r4
     c32:	47b0      	blx	r6
     c34:	1e04      	subs	r4, r0, #0
			if (NULL == ep_desc) {
     c36:	d002      	beq.n	c3e <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
     c38:	7880      	ldrb	r0, [r0, #2]
     c3a:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     c3c:	e7f7      	b.n	c2e <udc_iface_disable+0x3e>
	udi_api->disable();
     c3e:	4643      	mov	r3, r8
     c40:	685b      	ldr	r3, [r3, #4]
     c42:	4798      	blx	r3
	return true;
     c44:	e7dd      	b.n	c02 <udc_iface_disable+0x12>
     c46:	46c0      	nop			; (mov r8, r8)
     c48:	00000b7d 	.word	0x00000b7d
     c4c:	20000680 	.word	0x20000680
     c50:	20000684 	.word	0x20000684
     c54:	00000b19 	.word	0x00000b19
     c58:	00002a6d 	.word	0x00002a6d

00000c5c <udc_iface_enable>:
{
     c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c5e:	0005      	movs	r5, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
     c60:	4b0f      	ldr	r3, [pc, #60]	; (ca0 <udc_iface_enable+0x44>)
     c62:	4798      	blx	r3
     c64:	2800      	cmp	r0, #0
     c66:	d019      	beq.n	c9c <udc_iface_enable+0x40>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     c68:	4b0e      	ldr	r3, [pc, #56]	; (ca4 <udc_iface_enable+0x48>)
     c6a:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     c6c:	4e0e      	ldr	r6, [pc, #56]	; (ca8 <udc_iface_enable+0x4c>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
     c6e:	4f0f      	ldr	r7, [pc, #60]	; (cac <udc_iface_enable+0x50>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     c70:	2105      	movs	r1, #5
     c72:	0020      	movs	r0, r4
     c74:	47b0      	blx	r6
     c76:	1e04      	subs	r4, r0, #0
		if (NULL == ep_desc)
     c78:	d009      	beq.n	c8e <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
     c7a:	7903      	ldrb	r3, [r0, #4]
     c7c:	7942      	ldrb	r2, [r0, #5]
     c7e:	0212      	lsls	r2, r2, #8
     c80:	431a      	orrs	r2, r3
     c82:	78c1      	ldrb	r1, [r0, #3]
     c84:	7880      	ldrb	r0, [r0, #2]
     c86:	47b8      	blx	r7
     c88:	2800      	cmp	r0, #0
     c8a:	d1f1      	bne.n	c70 <udc_iface_enable+0x14>
     c8c:	e006      	b.n	c9c <udc_iface_enable+0x40>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
     c8e:	4b08      	ldr	r3, [pc, #32]	; (cb0 <udc_iface_enable+0x54>)
     c90:	681b      	ldr	r3, [r3, #0]
     c92:	685b      	ldr	r3, [r3, #4]
     c94:	00ad      	lsls	r5, r5, #2
     c96:	58eb      	ldr	r3, [r5, r3]
     c98:	681b      	ldr	r3, [r3, #0]
     c9a:	4798      	blx	r3
}
     c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c9e:	46c0      	nop			; (mov r8, r8)
     ca0:	00000b7d 	.word	0x00000b7d
     ca4:	20000684 	.word	0x20000684
     ca8:	00000b19 	.word	0x00000b19
     cac:	00002ac5 	.word	0x00002ac5
     cb0:	20000680 	.word	0x20000680

00000cb4 <udc_start>:
{
     cb4:	b510      	push	{r4, lr}
	udd_enable();
     cb6:	4b01      	ldr	r3, [pc, #4]	; (cbc <udc_start+0x8>)
     cb8:	4798      	blx	r3
}
     cba:	bd10      	pop	{r4, pc}
     cbc:	00002fdd 	.word	0x00002fdd

00000cc0 <udc_reset>:
{
     cc0:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
     cc2:	4b0e      	ldr	r3, [pc, #56]	; (cfc <udc_reset+0x3c>)
     cc4:	781b      	ldrb	r3, [r3, #0]
     cc6:	2b00      	cmp	r3, #0
     cc8:	d011      	beq.n	cee <udc_reset+0x2e>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     cca:	4b0d      	ldr	r3, [pc, #52]	; (d00 <udc_reset+0x40>)
     ccc:	681b      	ldr	r3, [r3, #0]
     cce:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
     cd0:	791b      	ldrb	r3, [r3, #4]
     cd2:	2b00      	cmp	r3, #0
     cd4:	d00b      	beq.n	cee <udc_reset+0x2e>
     cd6:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
     cd8:	4e0a      	ldr	r6, [pc, #40]	; (d04 <udc_reset+0x44>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     cda:	4d09      	ldr	r5, [pc, #36]	; (d00 <udc_reset+0x40>)
			udc_iface_disable(iface_num);
     cdc:	0020      	movs	r0, r4
     cde:	47b0      	blx	r6
				iface_num++) {
     ce0:	3401      	adds	r4, #1
     ce2:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     ce4:	682b      	ldr	r3, [r5, #0]
     ce6:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
     ce8:	791b      	ldrb	r3, [r3, #4]
     cea:	42a3      	cmp	r3, r4
     cec:	d8f6      	bhi.n	cdc <udc_reset+0x1c>
	udc_num_configuration = 0;
     cee:	2200      	movs	r2, #0
     cf0:	4b02      	ldr	r3, [pc, #8]	; (cfc <udc_reset+0x3c>)
     cf2:	701a      	strb	r2, [r3, #0]
	udc_device_status =
     cf4:	3201      	adds	r2, #1
     cf6:	4b04      	ldr	r3, [pc, #16]	; (d08 <udc_reset+0x48>)
     cf8:	801a      	strh	r2, [r3, #0]
}
     cfa:	bd70      	pop	{r4, r5, r6, pc}
     cfc:	2000067c 	.word	0x2000067c
     d00:	20000680 	.word	0x20000680
     d04:	00000bf1 	.word	0x00000bf1
     d08:	20000672 	.word	0x20000672

00000d0c <udc_sof_notify>:
{
     d0c:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
     d0e:	4b0e      	ldr	r3, [pc, #56]	; (d48 <udc_sof_notify+0x3c>)
     d10:	781b      	ldrb	r3, [r3, #0]
     d12:	2b00      	cmp	r3, #0
     d14:	d017      	beq.n	d46 <udc_sof_notify+0x3a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     d16:	4b0d      	ldr	r3, [pc, #52]	; (d4c <udc_sof_notify+0x40>)
     d18:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
     d1a:	681a      	ldr	r2, [r3, #0]
     d1c:	7912      	ldrb	r2, [r2, #4]
     d1e:	2a00      	cmp	r2, #0
     d20:	d011      	beq.n	d46 <udc_sof_notify+0x3a>
     d22:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     d24:	4d09      	ldr	r5, [pc, #36]	; (d4c <udc_sof_notify+0x40>)
     d26:	e006      	b.n	d36 <udc_sof_notify+0x2a>
				iface_num++) {
     d28:	3401      	adds	r4, #1
     d2a:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     d2c:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
     d2e:	681a      	ldr	r2, [r3, #0]
     d30:	7912      	ldrb	r2, [r2, #4]
     d32:	42a2      	cmp	r2, r4
     d34:	d907      	bls.n	d46 <udc_sof_notify+0x3a>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     d36:	685b      	ldr	r3, [r3, #4]
     d38:	00a2      	lsls	r2, r4, #2
     d3a:	58d3      	ldr	r3, [r2, r3]
     d3c:	691b      	ldr	r3, [r3, #16]
     d3e:	2b00      	cmp	r3, #0
     d40:	d0f2      	beq.n	d28 <udc_sof_notify+0x1c>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     d42:	4798      	blx	r3
     d44:	e7f0      	b.n	d28 <udc_sof_notify+0x1c>
}
     d46:	bd70      	pop	{r4, r5, r6, pc}
     d48:	2000067c 	.word	0x2000067c
     d4c:	20000680 	.word	0x20000680

00000d50 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     d52:	4bab      	ldr	r3, [pc, #684]	; (1000 <udc_process_setup+0x2b0>)
     d54:	2200      	movs	r2, #0
     d56:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
     d58:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
     d5a:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
     d5c:	781b      	ldrb	r3, [r3, #0]
     d5e:	b25a      	sxtb	r2, r3
     d60:	2a00      	cmp	r2, #0
     d62:	db13      	blt.n	d8c <udc_process_setup+0x3c>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     d64:	2260      	movs	r2, #96	; 0x60
     d66:	421a      	tst	r2, r3
     d68:	d100      	bne.n	d6c <udc_process_setup+0x1c>
     d6a:	e0d7      	b.n	f1c <udc_process_setup+0x1cc>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
     d6c:	4ba4      	ldr	r3, [pc, #656]	; (1000 <udc_process_setup+0x2b0>)
     d6e:	781a      	ldrb	r2, [r3, #0]
     d70:	231f      	movs	r3, #31
     d72:	4013      	ands	r3, r2
     d74:	2b01      	cmp	r3, #1
     d76:	d100      	bne.n	d7a <udc_process_setup+0x2a>
     d78:	e174      	b.n	1064 <udc_process_setup+0x314>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     d7a:	4ba1      	ldr	r3, [pc, #644]	; (1000 <udc_process_setup+0x2b0>)
     d7c:	781a      	ldrb	r2, [r3, #0]
     d7e:	231f      	movs	r3, #31
     d80:	4013      	ands	r3, r2
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
     d82:	2000      	movs	r0, #0
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     d84:	2b02      	cmp	r3, #2
     d86:	d100      	bne.n	d8a <udc_process_setup+0x3a>
     d88:	e1ca      	b.n	1120 <udc_process_setup+0x3d0>
#endif
}
     d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
     d8c:	4a9c      	ldr	r2, [pc, #624]	; (1000 <udc_process_setup+0x2b0>)
     d8e:	88d2      	ldrh	r2, [r2, #6]
			return false; // Error from USB host
     d90:	2000      	movs	r0, #0
		if (udd_g_ctrlreq.req.wLength == 0) {
     d92:	2a00      	cmp	r2, #0
     d94:	d0f9      	beq.n	d8a <udc_process_setup+0x3a>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     d96:	2160      	movs	r1, #96	; 0x60
     d98:	4219      	tst	r1, r3
     d9a:	d1e7      	bne.n	d6c <udc_process_setup+0x1c>
     d9c:	211f      	movs	r1, #31
     d9e:	400b      	ands	r3, r1
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     da0:	d108      	bne.n	db4 <udc_process_setup+0x64>
			switch (udd_g_ctrlreq.req.bRequest) {
     da2:	4997      	ldr	r1, [pc, #604]	; (1000 <udc_process_setup+0x2b0>)
     da4:	7849      	ldrb	r1, [r1, #1]
     da6:	2906      	cmp	r1, #6
     da8:	d023      	beq.n	df2 <udc_process_setup+0xa2>
     daa:	2908      	cmp	r1, #8
     dac:	d100      	bne.n	db0 <udc_process_setup+0x60>
     dae:	e084      	b.n	eba <udc_process_setup+0x16a>
     db0:	2900      	cmp	r1, #0
     db2:	d017      	beq.n	de4 <udc_process_setup+0x94>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     db4:	2b01      	cmp	r3, #1
     db6:	d100      	bne.n	dba <udc_process_setup+0x6a>
     db8:	e087      	b.n	eca <udc_process_setup+0x17a>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     dba:	2b02      	cmp	r3, #2
     dbc:	d1d6      	bne.n	d6c <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
     dbe:	4b90      	ldr	r3, [pc, #576]	; (1000 <udc_process_setup+0x2b0>)
     dc0:	785b      	ldrb	r3, [r3, #1]
	return false;
     dc2:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
     dc4:	2b00      	cmp	r3, #0
     dc6:	d000      	beq.n	dca <udc_process_setup+0x7a>
     dc8:	e1a6      	b.n	1118 <udc_process_setup+0x3c8>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     dca:	2a02      	cmp	r2, #2
     dcc:	d1d5      	bne.n	d7a <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     dce:	4b8c      	ldr	r3, [pc, #560]	; (1000 <udc_process_setup+0x2b0>)
     dd0:	7918      	ldrb	r0, [r3, #4]
     dd2:	4b8c      	ldr	r3, [pc, #560]	; (1004 <udc_process_setup+0x2b4>)
     dd4:	4798      	blx	r3
     dd6:	4b8c      	ldr	r3, [pc, #560]	; (1008 <udc_process_setup+0x2b8>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
     dd8:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     dda:	2102      	movs	r1, #2
     ddc:	0018      	movs	r0, r3
     dde:	4b8b      	ldr	r3, [pc, #556]	; (100c <udc_process_setup+0x2bc>)
     de0:	4798      	blx	r3
     de2:	e0fc      	b.n	fde <udc_process_setup+0x28e>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     de4:	2a02      	cmp	r2, #2
     de6:	d1c8      	bne.n	d7a <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     de8:	3102      	adds	r1, #2
     dea:	4889      	ldr	r0, [pc, #548]	; (1010 <udc_process_setup+0x2c0>)
     dec:	4b87      	ldr	r3, [pc, #540]	; (100c <udc_process_setup+0x2bc>)
     dee:	4798      	blx	r3
     df0:	e0f5      	b.n	fde <udc_process_setup+0x28e>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     df2:	4b83      	ldr	r3, [pc, #524]	; (1000 <udc_process_setup+0x2b0>)
     df4:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     df6:	0a13      	lsrs	r3, r2, #8
     df8:	2b02      	cmp	r3, #2
     dfa:	d023      	beq.n	e44 <udc_process_setup+0xf4>
     dfc:	b2d9      	uxtb	r1, r3
     dfe:	2902      	cmp	r1, #2
     e00:	d90f      	bls.n	e22 <udc_process_setup+0xd2>
     e02:	2b03      	cmp	r3, #3
     e04:	d034      	beq.n	e70 <udc_process_setup+0x120>
     e06:	2b0f      	cmp	r3, #15
     e08:	d000      	beq.n	e0c <udc_process_setup+0xbc>
     e0a:	e182      	b.n	1112 <udc_process_setup+0x3c2>
		if (udc_config.conf_bos == NULL) {
     e0c:	4b81      	ldr	r3, [pc, #516]	; (1014 <udc_process_setup+0x2c4>)
     e0e:	6898      	ldr	r0, [r3, #8]
     e10:	2800      	cmp	r0, #0
     e12:	d0b2      	beq.n	d7a <udc_process_setup+0x2a>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
     e14:	7883      	ldrb	r3, [r0, #2]
     e16:	78c1      	ldrb	r1, [r0, #3]
     e18:	0209      	lsls	r1, r1, #8
     e1a:	4319      	orrs	r1, r3
     e1c:	4b7b      	ldr	r3, [pc, #492]	; (100c <udc_process_setup+0x2bc>)
     e1e:	4798      	blx	r3
     e20:	e007      	b.n	e32 <udc_process_setup+0xe2>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     e22:	2b01      	cmp	r3, #1
     e24:	d000      	beq.n	e28 <udc_process_setup+0xd8>
     e26:	e174      	b.n	1112 <udc_process_setup+0x3c2>
				(uint8_t *) udc_config.confdev_lsfs,
     e28:	4b7a      	ldr	r3, [pc, #488]	; (1014 <udc_process_setup+0x2c4>)
     e2a:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
     e2c:	7801      	ldrb	r1, [r0, #0]
     e2e:	4b77      	ldr	r3, [pc, #476]	; (100c <udc_process_setup+0x2bc>)
     e30:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     e32:	4b73      	ldr	r3, [pc, #460]	; (1000 <udc_process_setup+0x2b0>)
     e34:	88da      	ldrh	r2, [r3, #6]
     e36:	899b      	ldrh	r3, [r3, #12]
     e38:	4293      	cmp	r3, r2
     e3a:	d800      	bhi.n	e3e <udc_process_setup+0xee>
     e3c:	e0cf      	b.n	fde <udc_process_setup+0x28e>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     e3e:	4b70      	ldr	r3, [pc, #448]	; (1000 <udc_process_setup+0x2b0>)
     e40:	819a      	strh	r2, [r3, #12]
     e42:	e0cc      	b.n	fde <udc_process_setup+0x28e>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     e44:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
     e46:	4b73      	ldr	r3, [pc, #460]	; (1014 <udc_process_setup+0x2c4>)
     e48:	681b      	ldr	r3, [r3, #0]
     e4a:	7c5b      	ldrb	r3, [r3, #17]
     e4c:	4293      	cmp	r3, r2
     e4e:	d800      	bhi.n	e52 <udc_process_setup+0x102>
     e50:	e793      	b.n	d7a <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
     e52:	4b70      	ldr	r3, [pc, #448]	; (1014 <udc_process_setup+0x2c4>)
     e54:	685b      	ldr	r3, [r3, #4]
     e56:	00d2      	lsls	r2, r2, #3
     e58:	58d0      	ldr	r0, [r2, r3]
			udd_set_setup_payload(
     e5a:	7883      	ldrb	r3, [r0, #2]
     e5c:	78c1      	ldrb	r1, [r0, #3]
     e5e:	0209      	lsls	r1, r1, #8
     e60:	4319      	orrs	r1, r3
     e62:	4b6a      	ldr	r3, [pc, #424]	; (100c <udc_process_setup+0x2bc>)
     e64:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     e66:	4b66      	ldr	r3, [pc, #408]	; (1000 <udc_process_setup+0x2b0>)
     e68:	689b      	ldr	r3, [r3, #8]
     e6a:	2202      	movs	r2, #2
     e6c:	705a      	strb	r2, [r3, #1]
     e6e:	e7e0      	b.n	e32 <udc_process_setup+0xe2>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     e70:	23ff      	movs	r3, #255	; 0xff
     e72:	401a      	ands	r2, r3
     e74:	2a01      	cmp	r2, #1
     e76:	d01d      	beq.n	eb4 <udc_process_setup+0x164>
     e78:	2a00      	cmp	r2, #0
     e7a:	d016      	beq.n	eaa <udc_process_setup+0x15a>
     e7c:	2a02      	cmp	r2, #2
     e7e:	d000      	beq.n	e82 <udc_process_setup+0x132>
     e80:	e774      	b.n	d6c <udc_process_setup+0x1c>
		str = udc_string_product_name;
     e82:	4c65      	ldr	r4, [pc, #404]	; (1018 <udc_process_setup+0x2c8>)
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
     e84:	201d      	movs	r0, #29
     e86:	4a65      	ldr	r2, [pc, #404]	; (101c <udc_process_setup+0x2cc>)
     e88:	3202      	adds	r2, #2
     e8a:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
     e8c:	5ce1      	ldrb	r1, [r4, r3]
     e8e:	8011      	strh	r1, [r2, #0]
     e90:	3301      	adds	r3, #1
     e92:	3202      	adds	r2, #2
		for(i = 0; i < str_length; i++) {
     e94:	b2d9      	uxtb	r1, r3
     e96:	4281      	cmp	r1, r0
     e98:	d3f8      	bcc.n	e8c <udc_process_setup+0x13c>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
     e9a:	0041      	lsls	r1, r0, #1
     e9c:	3102      	adds	r1, #2
     e9e:	485f      	ldr	r0, [pc, #380]	; (101c <udc_process_setup+0x2cc>)
     ea0:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
     ea2:	b289      	uxth	r1, r1
     ea4:	4b59      	ldr	r3, [pc, #356]	; (100c <udc_process_setup+0x2bc>)
     ea6:	4798      	blx	r3
     ea8:	e7c3      	b.n	e32 <udc_process_setup+0xe2>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     eaa:	2104      	movs	r1, #4
     eac:	485c      	ldr	r0, [pc, #368]	; (1020 <udc_process_setup+0x2d0>)
     eae:	4b57      	ldr	r3, [pc, #348]	; (100c <udc_process_setup+0x2bc>)
     eb0:	4798      	blx	r3
     eb2:	e7be      	b.n	e32 <udc_process_setup+0xe2>
		str = udc_string_manufacturer_name;
     eb4:	4c5b      	ldr	r4, [pc, #364]	; (1024 <udc_process_setup+0x2d4>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
     eb6:	2009      	movs	r0, #9
     eb8:	e7e5      	b.n	e86 <udc_process_setup+0x136>
	if (udd_g_ctrlreq.req.wLength != 1) {
     eba:	2a01      	cmp	r2, #1
     ebc:	d000      	beq.n	ec0 <udc_process_setup+0x170>
     ebe:	e75c      	b.n	d7a <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
     ec0:	2101      	movs	r1, #1
     ec2:	4859      	ldr	r0, [pc, #356]	; (1028 <udc_process_setup+0x2d8>)
     ec4:	4b51      	ldr	r3, [pc, #324]	; (100c <udc_process_setup+0x2bc>)
     ec6:	4798      	blx	r3
     ec8:	e089      	b.n	fde <udc_process_setup+0x28e>
			switch (udd_g_ctrlreq.req.bRequest) {
     eca:	494d      	ldr	r1, [pc, #308]	; (1000 <udc_process_setup+0x2b0>)
     ecc:	7849      	ldrb	r1, [r1, #1]
     ece:	290a      	cmp	r1, #10
     ed0:	d000      	beq.n	ed4 <udc_process_setup+0x184>
     ed2:	e772      	b.n	dba <udc_process_setup+0x6a>
	if (udd_g_ctrlreq.req.wLength != 1) {
     ed4:	2a01      	cmp	r2, #1
     ed6:	d000      	beq.n	eda <udc_process_setup+0x18a>
     ed8:	e0c4      	b.n	1064 <udc_process_setup+0x314>
	if (!udc_num_configuration) {
     eda:	4b53      	ldr	r3, [pc, #332]	; (1028 <udc_process_setup+0x2d8>)
     edc:	781b      	ldrb	r3, [r3, #0]
     ede:	2b00      	cmp	r3, #0
     ee0:	d100      	bne.n	ee4 <udc_process_setup+0x194>
     ee2:	e0bf      	b.n	1064 <udc_process_setup+0x314>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     ee4:	4b46      	ldr	r3, [pc, #280]	; (1000 <udc_process_setup+0x2b0>)
     ee6:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     ee8:	4b50      	ldr	r3, [pc, #320]	; (102c <udc_process_setup+0x2dc>)
     eea:	681d      	ldr	r5, [r3, #0]
     eec:	682b      	ldr	r3, [r5, #0]
     eee:	791b      	ldrb	r3, [r3, #4]
     ef0:	42a3      	cmp	r3, r4
     ef2:	d800      	bhi.n	ef6 <udc_process_setup+0x1a6>
     ef4:	e0b6      	b.n	1064 <udc_process_setup+0x314>
	if (!udc_update_iface_desc(iface_num, 0)) {
     ef6:	2100      	movs	r1, #0
     ef8:	0020      	movs	r0, r4
     efa:	4b4d      	ldr	r3, [pc, #308]	; (1030 <udc_process_setup+0x2e0>)
     efc:	4798      	blx	r3
     efe:	2800      	cmp	r0, #0
     f00:	d100      	bne.n	f04 <udc_process_setup+0x1b4>
     f02:	e733      	b.n	d6c <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     f04:	686b      	ldr	r3, [r5, #4]
     f06:	00a4      	lsls	r4, r4, #2
	udc_iface_setting = udi_api->getsetting();
     f08:	58e3      	ldr	r3, [r4, r3]
     f0a:	68db      	ldr	r3, [r3, #12]
     f0c:	4798      	blx	r3
     f0e:	4b49      	ldr	r3, [pc, #292]	; (1034 <udc_process_setup+0x2e4>)
     f10:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
     f12:	2101      	movs	r1, #1
     f14:	0018      	movs	r0, r3
     f16:	4b3d      	ldr	r3, [pc, #244]	; (100c <udc_process_setup+0x2bc>)
     f18:	4798      	blx	r3
     f1a:	e060      	b.n	fde <udc_process_setup+0x28e>
     f1c:	221f      	movs	r2, #31
     f1e:	4013      	ands	r3, r2
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     f20:	d15f      	bne.n	fe2 <udc_process_setup+0x292>
			switch (udd_g_ctrlreq.req.bRequest) {
     f22:	4a37      	ldr	r2, [pc, #220]	; (1000 <udc_process_setup+0x2b0>)
     f24:	7852      	ldrb	r2, [r2, #1]
     f26:	2a03      	cmp	r2, #3
     f28:	d100      	bne.n	f2c <udc_process_setup+0x1dc>
     f2a:	e0f4      	b.n	1116 <udc_process_setup+0x3c6>
     f2c:	b2d1      	uxtb	r1, r2
     f2e:	2903      	cmp	r1, #3
     f30:	d93b      	bls.n	faa <udc_process_setup+0x25a>
     f32:	2a05      	cmp	r2, #5
     f34:	d04b      	beq.n	fce <udc_process_setup+0x27e>
     f36:	2a09      	cmp	r2, #9
     f38:	d153      	bne.n	fe2 <udc_process_setup+0x292>
	if (udd_g_ctrlreq.req.wLength) {
     f3a:	4b31      	ldr	r3, [pc, #196]	; (1000 <udc_process_setup+0x2b0>)
     f3c:	88db      	ldrh	r3, [r3, #6]
     f3e:	2b00      	cmp	r3, #0
     f40:	d000      	beq.n	f44 <udc_process_setup+0x1f4>
     f42:	e71a      	b.n	d7a <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
     f44:	4b3c      	ldr	r3, [pc, #240]	; (1038 <udc_process_setup+0x2e8>)
     f46:	4798      	blx	r3
     f48:	2800      	cmp	r0, #0
     f4a:	d100      	bne.n	f4e <udc_process_setup+0x1fe>
     f4c:	e70e      	b.n	d6c <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     f4e:	4b2c      	ldr	r3, [pc, #176]	; (1000 <udc_process_setup+0x2b0>)
     f50:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
     f52:	4b30      	ldr	r3, [pc, #192]	; (1014 <udc_process_setup+0x2c4>)
     f54:	681b      	ldr	r3, [r3, #0]
     f56:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     f58:	429a      	cmp	r2, r3
     f5a:	dd00      	ble.n	f5e <udc_process_setup+0x20e>
     f5c:	e706      	b.n	d6c <udc_process_setup+0x1c>
	udc_reset();
     f5e:	4b37      	ldr	r3, [pc, #220]	; (103c <udc_process_setup+0x2ec>)
     f60:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     f62:	4b27      	ldr	r3, [pc, #156]	; (1000 <udc_process_setup+0x2b0>)
     f64:	789b      	ldrb	r3, [r3, #2]
     f66:	4a30      	ldr	r2, [pc, #192]	; (1028 <udc_process_setup+0x2d8>)
     f68:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
     f6a:	2b00      	cmp	r3, #0
     f6c:	d037      	beq.n	fde <udc_process_setup+0x28e>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     f6e:	4a34      	ldr	r2, [pc, #208]	; (1040 <udc_process_setup+0x2f0>)
     f70:	4694      	mov	ip, r2
     f72:	4463      	add	r3, ip
     f74:	00db      	lsls	r3, r3, #3
     f76:	4a27      	ldr	r2, [pc, #156]	; (1014 <udc_process_setup+0x2c4>)
     f78:	6852      	ldr	r2, [r2, #4]
     f7a:	18d3      	adds	r3, r2, r3
     f7c:	4a2b      	ldr	r2, [pc, #172]	; (102c <udc_process_setup+0x2dc>)
     f7e:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     f80:	681b      	ldr	r3, [r3, #0]
     f82:	791b      	ldrb	r3, [r3, #4]
     f84:	2b00      	cmp	r3, #0
     f86:	d02a      	beq.n	fde <udc_process_setup+0x28e>
     f88:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
     f8a:	4d2e      	ldr	r5, [pc, #184]	; (1044 <udc_process_setup+0x2f4>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     f8c:	0016      	movs	r6, r2
		if (!udc_iface_enable(iface_num, 0)) {
     f8e:	2100      	movs	r1, #0
     f90:	0020      	movs	r0, r4
     f92:	47a8      	blx	r5
     f94:	2800      	cmp	r0, #0
     f96:	d100      	bne.n	f9a <udc_process_setup+0x24a>
     f98:	e6e8      	b.n	d6c <udc_process_setup+0x1c>
			iface_num++) {
     f9a:	3401      	adds	r4, #1
     f9c:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     f9e:	6833      	ldr	r3, [r6, #0]
     fa0:	681b      	ldr	r3, [r3, #0]
     fa2:	791b      	ldrb	r3, [r3, #4]
     fa4:	42a3      	cmp	r3, r4
     fa6:	d8f2      	bhi.n	f8e <udc_process_setup+0x23e>
     fa8:	e019      	b.n	fde <udc_process_setup+0x28e>
			switch (udd_g_ctrlreq.req.bRequest) {
     faa:	2a01      	cmp	r2, #1
     fac:	d119      	bne.n	fe2 <udc_process_setup+0x292>
	if (udd_g_ctrlreq.req.wLength) {
     fae:	4b14      	ldr	r3, [pc, #80]	; (1000 <udc_process_setup+0x2b0>)
     fb0:	88db      	ldrh	r3, [r3, #6]
     fb2:	2b00      	cmp	r3, #0
     fb4:	d000      	beq.n	fb8 <udc_process_setup+0x268>
     fb6:	e6e0      	b.n	d7a <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     fb8:	4b11      	ldr	r3, [pc, #68]	; (1000 <udc_process_setup+0x2b0>)
     fba:	885b      	ldrh	r3, [r3, #2]
     fbc:	2b01      	cmp	r3, #1
     fbe:	d000      	beq.n	fc2 <udc_process_setup+0x272>
     fc0:	e6db      	b.n	d7a <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     fc2:	4a13      	ldr	r2, [pc, #76]	; (1010 <udc_process_setup+0x2c0>)
     fc4:	8813      	ldrh	r3, [r2, #0]
     fc6:	2102      	movs	r1, #2
     fc8:	438b      	bics	r3, r1
     fca:	8013      	strh	r3, [r2, #0]
     fcc:	e007      	b.n	fde <udc_process_setup+0x28e>
	if (udd_g_ctrlreq.req.wLength) {
     fce:	4b0c      	ldr	r3, [pc, #48]	; (1000 <udc_process_setup+0x2b0>)
     fd0:	88db      	ldrh	r3, [r3, #6]
     fd2:	2b00      	cmp	r3, #0
     fd4:	d000      	beq.n	fd8 <udc_process_setup+0x288>
     fd6:	e6d0      	b.n	d7a <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
     fd8:	4a1b      	ldr	r2, [pc, #108]	; (1048 <udc_process_setup+0x2f8>)
     fda:	4b09      	ldr	r3, [pc, #36]	; (1000 <udc_process_setup+0x2b0>)
     fdc:	611a      	str	r2, [r3, #16]
			return true;
     fde:	2001      	movs	r0, #1
     fe0:	e6d3      	b.n	d8a <udc_process_setup+0x3a>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     fe2:	2b01      	cmp	r3, #1
     fe4:	d032      	beq.n	104c <udc_process_setup+0x2fc>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     fe6:	2b02      	cmp	r3, #2
     fe8:	d000      	beq.n	fec <udc_process_setup+0x29c>
     fea:	e6bf      	b.n	d6c <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
     fec:	4b04      	ldr	r3, [pc, #16]	; (1000 <udc_process_setup+0x2b0>)
     fee:	785b      	ldrb	r3, [r3, #1]
     ff0:	2b01      	cmp	r3, #1
     ff2:	d06d      	beq.n	10d0 <udc_process_setup+0x380>
     ff4:	2b03      	cmp	r3, #3
     ff6:	d100      	bne.n	ffa <udc_process_setup+0x2aa>
     ff8:	e079      	b.n	10ee <udc_process_setup+0x39e>
	return false;
     ffa:	2000      	movs	r0, #0
     ffc:	e08c      	b.n	1118 <udc_process_setup+0x3c8>
     ffe:	46c0      	nop			; (mov r8, r8)
    1000:	200009ec 	.word	0x200009ec
    1004:	00002bcd 	.word	0x00002bcd
    1008:	20000674 	.word	0x20000674
    100c:	00002f4d 	.word	0x00002f4d
    1010:	20000672 	.word	0x20000672
    1014:	20000028 	.word	0x20000028
    1018:	200000f4 	.word	0x200000f4
    101c:	200000a8 	.word	0x200000a8
    1020:	200000e4 	.word	0x200000e4
    1024:	200000e8 	.word	0x200000e8
    1028:	2000067c 	.word	0x2000067c
    102c:	20000680 	.word	0x20000680
    1030:	00000b7d 	.word	0x00000b7d
    1034:	20000678 	.word	0x20000678
    1038:	00002f3d 	.word	0x00002f3d
    103c:	00000cc1 	.word	0x00000cc1
    1040:	1fffffff 	.word	0x1fffffff
    1044:	00000c5d 	.word	0x00000c5d
    1048:	00000b65 	.word	0x00000b65
			switch (udd_g_ctrlreq.req.bRequest) {
    104c:	4a48      	ldr	r2, [pc, #288]	; (1170 <udc_process_setup+0x420>)
    104e:	7852      	ldrb	r2, [r2, #1]
    1050:	2a0b      	cmp	r2, #11
    1052:	d1c8      	bne.n	fe6 <udc_process_setup+0x296>
	if (udd_g_ctrlreq.req.wLength) {
    1054:	4b46      	ldr	r3, [pc, #280]	; (1170 <udc_process_setup+0x420>)
    1056:	88db      	ldrh	r3, [r3, #6]
    1058:	2b00      	cmp	r3, #0
    105a:	d103      	bne.n	1064 <udc_process_setup+0x314>
	if (!udc_num_configuration) {
    105c:	4b45      	ldr	r3, [pc, #276]	; (1174 <udc_process_setup+0x424>)
    105e:	781b      	ldrb	r3, [r3, #0]
    1060:	2b00      	cmp	r3, #0
    1062:	d127      	bne.n	10b4 <udc_process_setup+0x364>
	if (0 == udc_num_configuration) {
    1064:	4b43      	ldr	r3, [pc, #268]	; (1174 <udc_process_setup+0x424>)
    1066:	781b      	ldrb	r3, [r3, #0]
	return false;
    1068:	2000      	movs	r0, #0
	if (0 == udc_num_configuration) {
    106a:	2b00      	cmp	r3, #0
    106c:	d100      	bne.n	1070 <udc_process_setup+0x320>
    106e:	e68c      	b.n	d8a <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1070:	4b3f      	ldr	r3, [pc, #252]	; (1170 <udc_process_setup+0x420>)
    1072:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1074:	4b40      	ldr	r3, [pc, #256]	; (1178 <udc_process_setup+0x428>)
    1076:	681d      	ldr	r5, [r3, #0]
    1078:	682b      	ldr	r3, [r5, #0]
    107a:	791b      	ldrb	r3, [r3, #4]
    107c:	42a3      	cmp	r3, r4
    107e:	d800      	bhi.n	1082 <udc_process_setup+0x332>
    1080:	e683      	b.n	d8a <udc_process_setup+0x3a>
	if (!udc_update_iface_desc(iface_num, 0)) {
    1082:	2100      	movs	r1, #0
    1084:	0020      	movs	r0, r4
    1086:	4b3d      	ldr	r3, [pc, #244]	; (117c <udc_process_setup+0x42c>)
    1088:	4798      	blx	r3
    108a:	2800      	cmp	r0, #0
    108c:	d100      	bne.n	1090 <udc_process_setup+0x340>
    108e:	e674      	b.n	d7a <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1090:	686b      	ldr	r3, [r5, #4]
    1092:	00a2      	lsls	r2, r4, #2
    1094:	58d5      	ldr	r5, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1096:	68eb      	ldr	r3, [r5, #12]
    1098:	4798      	blx	r3
    109a:	0001      	movs	r1, r0
    109c:	0020      	movs	r0, r4
    109e:	4b37      	ldr	r3, [pc, #220]	; (117c <udc_process_setup+0x42c>)
    10a0:	4798      	blx	r3
    10a2:	2800      	cmp	r0, #0
    10a4:	d100      	bne.n	10a8 <udc_process_setup+0x358>
    10a6:	e668      	b.n	d7a <udc_process_setup+0x2a>
	return udi_api->setup();
    10a8:	68ab      	ldr	r3, [r5, #8]
    10aa:	4798      	blx	r3
		if (udc_req_iface()) {
    10ac:	2800      	cmp	r0, #0
    10ae:	d000      	beq.n	10b2 <udc_process_setup+0x362>
    10b0:	e66b      	b.n	d8a <udc_process_setup+0x3a>
    10b2:	e662      	b.n	d7a <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    10b4:	4b2e      	ldr	r3, [pc, #184]	; (1170 <udc_process_setup+0x420>)
    10b6:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    10b8:	885c      	ldrh	r4, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
    10ba:	0028      	movs	r0, r5
    10bc:	4b30      	ldr	r3, [pc, #192]	; (1180 <udc_process_setup+0x430>)
    10be:	4798      	blx	r3
    10c0:	2800      	cmp	r0, #0
    10c2:	d100      	bne.n	10c6 <udc_process_setup+0x376>
    10c4:	e652      	b.n	d6c <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
    10c6:	b2e1      	uxtb	r1, r4
    10c8:	0028      	movs	r0, r5
    10ca:	4b2e      	ldr	r3, [pc, #184]	; (1184 <udc_process_setup+0x434>)
    10cc:	4798      	blx	r3
    10ce:	e023      	b.n	1118 <udc_process_setup+0x3c8>
	if (udd_g_ctrlreq.req.wLength) {
    10d0:	4b27      	ldr	r3, [pc, #156]	; (1170 <udc_process_setup+0x420>)
    10d2:	88db      	ldrh	r3, [r3, #6]
    10d4:	2b00      	cmp	r3, #0
    10d6:	d000      	beq.n	10da <udc_process_setup+0x38a>
    10d8:	e64f      	b.n	d7a <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    10da:	4b25      	ldr	r3, [pc, #148]	; (1170 <udc_process_setup+0x420>)
    10dc:	885b      	ldrh	r3, [r3, #2]
    10de:	2b00      	cmp	r3, #0
    10e0:	d000      	beq.n	10e4 <udc_process_setup+0x394>
    10e2:	e64a      	b.n	d7a <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    10e4:	4b22      	ldr	r3, [pc, #136]	; (1170 <udc_process_setup+0x420>)
    10e6:	7918      	ldrb	r0, [r3, #4]
    10e8:	4b27      	ldr	r3, [pc, #156]	; (1188 <udc_process_setup+0x438>)
    10ea:	4798      	blx	r3
    10ec:	e014      	b.n	1118 <udc_process_setup+0x3c8>
	if (udd_g_ctrlreq.req.wLength) {
    10ee:	4b20      	ldr	r3, [pc, #128]	; (1170 <udc_process_setup+0x420>)
    10f0:	88db      	ldrh	r3, [r3, #6]
    10f2:	2b00      	cmp	r3, #0
    10f4:	d000      	beq.n	10f8 <udc_process_setup+0x3a8>
    10f6:	e640      	b.n	d7a <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    10f8:	4b1d      	ldr	r3, [pc, #116]	; (1170 <udc_process_setup+0x420>)
    10fa:	885b      	ldrh	r3, [r3, #2]
    10fc:	2b00      	cmp	r3, #0
    10fe:	d000      	beq.n	1102 <udc_process_setup+0x3b2>
    1100:	e63b      	b.n	d7a <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1102:	4c1b      	ldr	r4, [pc, #108]	; (1170 <udc_process_setup+0x420>)
    1104:	7920      	ldrb	r0, [r4, #4]
    1106:	4b21      	ldr	r3, [pc, #132]	; (118c <udc_process_setup+0x43c>)
    1108:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    110a:	7920      	ldrb	r0, [r4, #4]
    110c:	4b20      	ldr	r3, [pc, #128]	; (1190 <udc_process_setup+0x440>)
    110e:	4798      	blx	r3
    1110:	e002      	b.n	1118 <udc_process_setup+0x3c8>
		return false;
    1112:	2000      	movs	r0, #0
    1114:	e000      	b.n	1118 <udc_process_setup+0x3c8>
				return udc_req_std_dev_set_feature();
    1116:	2000      	movs	r0, #0
		if (udc_reqstd()) {
    1118:	2800      	cmp	r0, #0
    111a:	d000      	beq.n	111e <udc_process_setup+0x3ce>
    111c:	e635      	b.n	d8a <udc_process_setup+0x3a>
    111e:	e625      	b.n	d6c <udc_process_setup+0x1c>
	if (0 == udc_num_configuration) {
    1120:	4b14      	ldr	r3, [pc, #80]	; (1174 <udc_process_setup+0x424>)
    1122:	781b      	ldrb	r3, [r3, #0]
    1124:	2b00      	cmp	r3, #0
    1126:	d100      	bne.n	112a <udc_process_setup+0x3da>
    1128:	e62f      	b.n	d8a <udc_process_setup+0x3a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    112a:	4b13      	ldr	r3, [pc, #76]	; (1178 <udc_process_setup+0x428>)
    112c:	681b      	ldr	r3, [r3, #0]
    112e:	681a      	ldr	r2, [r3, #0]
    1130:	7912      	ldrb	r2, [r2, #4]
    1132:	2a00      	cmp	r2, #0
    1134:	d01a      	beq.n	116c <udc_process_setup+0x41c>
    1136:	2500      	movs	r5, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1138:	4e10      	ldr	r6, [pc, #64]	; (117c <udc_process_setup+0x42c>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    113a:	4f0f      	ldr	r7, [pc, #60]	; (1178 <udc_process_setup+0x428>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    113c:	685b      	ldr	r3, [r3, #4]
    113e:	00aa      	lsls	r2, r5, #2
    1140:	58d4      	ldr	r4, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1142:	68e3      	ldr	r3, [r4, #12]
    1144:	4798      	blx	r3
    1146:	0001      	movs	r1, r0
    1148:	0028      	movs	r0, r5
    114a:	47b0      	blx	r6
    114c:	2800      	cmp	r0, #0
    114e:	d100      	bne.n	1152 <udc_process_setup+0x402>
    1150:	e61b      	b.n	d8a <udc_process_setup+0x3a>
		if (udi_api->setup()) {
    1152:	68a3      	ldr	r3, [r4, #8]
    1154:	4798      	blx	r3
    1156:	2800      	cmp	r0, #0
    1158:	d000      	beq.n	115c <udc_process_setup+0x40c>
    115a:	e616      	b.n	d8a <udc_process_setup+0x3a>
			iface_num++) {
    115c:	3501      	adds	r5, #1
    115e:	b2ed      	uxtb	r5, r5
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1160:	683b      	ldr	r3, [r7, #0]
    1162:	681a      	ldr	r2, [r3, #0]
    1164:	7912      	ldrb	r2, [r2, #4]
    1166:	42aa      	cmp	r2, r5
    1168:	d8e8      	bhi.n	113c <udc_process_setup+0x3ec>
    116a:	e60e      	b.n	d8a <udc_process_setup+0x3a>
	return false;
    116c:	2000      	movs	r0, #0
    116e:	e60c      	b.n	d8a <udc_process_setup+0x3a>
    1170:	200009ec 	.word	0x200009ec
    1174:	2000067c 	.word	0x2000067c
    1178:	20000680 	.word	0x20000680
    117c:	00000b7d 	.word	0x00000b7d
    1180:	00000bf1 	.word	0x00000bf1
    1184:	00000c5d 	.word	0x00000c5d
    1188:	00002d11 	.word	0x00002d11
    118c:	00002a0d 	.word	0x00002a0d
    1190:	00002be1 	.word	0x00002be1

00001194 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1194:	4b0c      	ldr	r3, [pc, #48]	; (11c8 <cpu_irq_enter_critical+0x34>)
    1196:	681b      	ldr	r3, [r3, #0]
    1198:	2b00      	cmp	r3, #0
    119a:	d106      	bne.n	11aa <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    119c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    11a0:	2b00      	cmp	r3, #0
    11a2:	d007      	beq.n	11b4 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    11a4:	2200      	movs	r2, #0
    11a6:	4b09      	ldr	r3, [pc, #36]	; (11cc <cpu_irq_enter_critical+0x38>)
    11a8:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    11aa:	4a07      	ldr	r2, [pc, #28]	; (11c8 <cpu_irq_enter_critical+0x34>)
    11ac:	6813      	ldr	r3, [r2, #0]
    11ae:	3301      	adds	r3, #1
    11b0:	6013      	str	r3, [r2, #0]
}
    11b2:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    11b4:	b672      	cpsid	i
    11b6:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    11ba:	2200      	movs	r2, #0
    11bc:	4b04      	ldr	r3, [pc, #16]	; (11d0 <cpu_irq_enter_critical+0x3c>)
    11be:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    11c0:	3201      	adds	r2, #1
    11c2:	4b02      	ldr	r3, [pc, #8]	; (11cc <cpu_irq_enter_critical+0x38>)
    11c4:	701a      	strb	r2, [r3, #0]
    11c6:	e7f0      	b.n	11aa <cpu_irq_enter_critical+0x16>
    11c8:	20000688 	.word	0x20000688
    11cc:	2000068c 	.word	0x2000068c
    11d0:	20000112 	.word	0x20000112

000011d4 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    11d4:	4b08      	ldr	r3, [pc, #32]	; (11f8 <cpu_irq_leave_critical+0x24>)
    11d6:	681a      	ldr	r2, [r3, #0]
    11d8:	3a01      	subs	r2, #1
    11da:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    11dc:	681b      	ldr	r3, [r3, #0]
    11de:	2b00      	cmp	r3, #0
    11e0:	d109      	bne.n	11f6 <cpu_irq_leave_critical+0x22>
    11e2:	4b06      	ldr	r3, [pc, #24]	; (11fc <cpu_irq_leave_critical+0x28>)
    11e4:	781b      	ldrb	r3, [r3, #0]
    11e6:	2b00      	cmp	r3, #0
    11e8:	d005      	beq.n	11f6 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    11ea:	2201      	movs	r2, #1
    11ec:	4b04      	ldr	r3, [pc, #16]	; (1200 <cpu_irq_leave_critical+0x2c>)
    11ee:	701a      	strb	r2, [r3, #0]
    11f0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    11f4:	b662      	cpsie	i
	}
}
    11f6:	4770      	bx	lr
    11f8:	20000688 	.word	0x20000688
    11fc:	2000068c 	.word	0x2000068c
    1200:	20000112 	.word	0x20000112

00001204 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1204:	b5f0      	push	{r4, r5, r6, r7, lr}
    1206:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1208:	ac01      	add	r4, sp, #4
    120a:	2501      	movs	r5, #1
    120c:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    120e:	2700      	movs	r7, #0
    1210:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1212:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1214:	0021      	movs	r1, r4
    1216:	203e      	movs	r0, #62	; 0x3e
    1218:	4e06      	ldr	r6, [pc, #24]	; (1234 <system_board_init+0x30>)
    121a:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    121c:	2280      	movs	r2, #128	; 0x80
    121e:	05d2      	lsls	r2, r2, #23
    1220:	4b05      	ldr	r3, [pc, #20]	; (1238 <system_board_init+0x34>)
    1222:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    1224:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    1226:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1228:	0021      	movs	r1, r4
    122a:	200f      	movs	r0, #15
    122c:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    122e:	b003      	add	sp, #12
    1230:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1232:	46c0      	nop			; (mov r8, r8)
    1234:	00001315 	.word	0x00001315
    1238:	41004480 	.word	0x41004480

0000123c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    123c:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    123e:	2200      	movs	r2, #0
    1240:	4b10      	ldr	r3, [pc, #64]	; (1284 <EIC_Handler+0x48>)
    1242:	701a      	strb	r2, [r3, #0]
    1244:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    1246:	4910      	ldr	r1, [pc, #64]	; (1288 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    1248:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    124a:	4e10      	ldr	r6, [pc, #64]	; (128c <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    124c:	4c0d      	ldr	r4, [pc, #52]	; (1284 <EIC_Handler+0x48>)
    124e:	e00a      	b.n	1266 <EIC_Handler+0x2a>
		return eics[eic_index];
    1250:	490d      	ldr	r1, [pc, #52]	; (1288 <EIC_Handler+0x4c>)
    1252:	e008      	b.n	1266 <EIC_Handler+0x2a>
    1254:	7823      	ldrb	r3, [r4, #0]
    1256:	3301      	adds	r3, #1
    1258:	b2db      	uxtb	r3, r3
    125a:	7023      	strb	r3, [r4, #0]
    125c:	2b0f      	cmp	r3, #15
    125e:	d810      	bhi.n	1282 <EIC_Handler+0x46>
		return NULL;
    1260:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    1262:	2b1f      	cmp	r3, #31
    1264:	d9f4      	bls.n	1250 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    1266:	0028      	movs	r0, r5
    1268:	4018      	ands	r0, r3
    126a:	2201      	movs	r2, #1
    126c:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    126e:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    1270:	4210      	tst	r0, r2
    1272:	d0ef      	beq.n	1254 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    1274:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    1276:	009b      	lsls	r3, r3, #2
    1278:	599b      	ldr	r3, [r3, r6]
    127a:	2b00      	cmp	r3, #0
    127c:	d0ea      	beq.n	1254 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    127e:	4798      	blx	r3
    1280:	e7e8      	b.n	1254 <EIC_Handler+0x18>
			}
		}
	}
}
    1282:	bd70      	pop	{r4, r5, r6, pc}
    1284:	20000769 	.word	0x20000769
    1288:	40001800 	.word	0x40001800
    128c:	2000076c 	.word	0x2000076c

00001290 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    1290:	4a04      	ldr	r2, [pc, #16]	; (12a4 <_extint_enable+0x14>)
    1292:	7813      	ldrb	r3, [r2, #0]
    1294:	2102      	movs	r1, #2
    1296:	430b      	orrs	r3, r1
    1298:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    129a:	7853      	ldrb	r3, [r2, #1]
    129c:	b25b      	sxtb	r3, r3
    129e:	2b00      	cmp	r3, #0
    12a0:	dbfb      	blt.n	129a <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    12a2:	4770      	bx	lr
    12a4:	40001800 	.word	0x40001800

000012a8 <_system_extint_init>:
{
    12a8:	b500      	push	{lr}
    12aa:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    12ac:	4a12      	ldr	r2, [pc, #72]	; (12f8 <_system_extint_init+0x50>)
    12ae:	6993      	ldr	r3, [r2, #24]
    12b0:	2140      	movs	r1, #64	; 0x40
    12b2:	430b      	orrs	r3, r1
    12b4:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    12b6:	a901      	add	r1, sp, #4
    12b8:	2300      	movs	r3, #0
    12ba:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    12bc:	2005      	movs	r0, #5
    12be:	4b0f      	ldr	r3, [pc, #60]	; (12fc <_system_extint_init+0x54>)
    12c0:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    12c2:	2005      	movs	r0, #5
    12c4:	4b0e      	ldr	r3, [pc, #56]	; (1300 <_system_extint_init+0x58>)
    12c6:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    12c8:	4a0e      	ldr	r2, [pc, #56]	; (1304 <_system_extint_init+0x5c>)
    12ca:	7813      	ldrb	r3, [r2, #0]
    12cc:	2101      	movs	r1, #1
    12ce:	430b      	orrs	r3, r1
    12d0:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    12d2:	7853      	ldrb	r3, [r2, #1]
    12d4:	b25b      	sxtb	r3, r3
    12d6:	2b00      	cmp	r3, #0
    12d8:	dbfb      	blt.n	12d2 <_system_extint_init+0x2a>
    12da:	4b0b      	ldr	r3, [pc, #44]	; (1308 <_system_extint_init+0x60>)
    12dc:	0019      	movs	r1, r3
    12de:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    12e0:	2200      	movs	r2, #0
    12e2:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    12e4:	4299      	cmp	r1, r3
    12e6:	d1fc      	bne.n	12e2 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    12e8:	2210      	movs	r2, #16
    12ea:	4b08      	ldr	r3, [pc, #32]	; (130c <_system_extint_init+0x64>)
    12ec:	601a      	str	r2, [r3, #0]
	_extint_enable();
    12ee:	4b08      	ldr	r3, [pc, #32]	; (1310 <_system_extint_init+0x68>)
    12f0:	4798      	blx	r3
}
    12f2:	b003      	add	sp, #12
    12f4:	bd00      	pop	{pc}
    12f6:	46c0      	nop			; (mov r8, r8)
    12f8:	40000400 	.word	0x40000400
    12fc:	00002229 	.word	0x00002229
    1300:	0000219d 	.word	0x0000219d
    1304:	40001800 	.word	0x40001800
    1308:	2000076c 	.word	0x2000076c
    130c:	e000e100 	.word	0xe000e100
    1310:	00001291 	.word	0x00001291

00001314 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1314:	b500      	push	{lr}
    1316:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1318:	ab01      	add	r3, sp, #4
    131a:	2280      	movs	r2, #128	; 0x80
    131c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    131e:	780a      	ldrb	r2, [r1, #0]
    1320:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1322:	784a      	ldrb	r2, [r1, #1]
    1324:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1326:	788a      	ldrb	r2, [r1, #2]
    1328:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    132a:	0019      	movs	r1, r3
    132c:	4b01      	ldr	r3, [pc, #4]	; (1334 <port_pin_set_config+0x20>)
    132e:	4798      	blx	r3
}
    1330:	b003      	add	sp, #12
    1332:	bd00      	pop	{pc}
    1334:	00002321 	.word	0x00002321

00001338 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    1338:	b5f0      	push	{r4, r5, r6, r7, lr}
    133a:	46de      	mov	lr, fp
    133c:	4657      	mov	r7, sl
    133e:	464e      	mov	r6, r9
    1340:	4645      	mov	r5, r8
    1342:	b5e0      	push	{r5, r6, r7, lr}
    1344:	b087      	sub	sp, #28
    1346:	4680      	mov	r8, r0
    1348:	9104      	str	r1, [sp, #16]
    134a:	0016      	movs	r6, r2
    134c:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    134e:	2200      	movs	r2, #0
    1350:	2300      	movs	r3, #0
    1352:	2100      	movs	r1, #0
    1354:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    1356:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    1358:	2001      	movs	r0, #1
    135a:	0021      	movs	r1, r4
    135c:	9600      	str	r6, [sp, #0]
    135e:	9701      	str	r7, [sp, #4]
    1360:	465c      	mov	r4, fp
    1362:	9403      	str	r4, [sp, #12]
    1364:	4644      	mov	r4, r8
    1366:	9405      	str	r4, [sp, #20]
    1368:	e013      	b.n	1392 <long_division+0x5a>
    136a:	2420      	movs	r4, #32
    136c:	1a64      	subs	r4, r4, r1
    136e:	0005      	movs	r5, r0
    1370:	40e5      	lsrs	r5, r4
    1372:	46a8      	mov	r8, r5
    1374:	e014      	b.n	13a0 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    1376:	9c00      	ldr	r4, [sp, #0]
    1378:	9d01      	ldr	r5, [sp, #4]
    137a:	1b12      	subs	r2, r2, r4
    137c:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    137e:	465c      	mov	r4, fp
    1380:	464d      	mov	r5, r9
    1382:	432c      	orrs	r4, r5
    1384:	46a3      	mov	fp, r4
    1386:	9c03      	ldr	r4, [sp, #12]
    1388:	4645      	mov	r5, r8
    138a:	432c      	orrs	r4, r5
    138c:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    138e:	3901      	subs	r1, #1
    1390:	d325      	bcc.n	13de <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    1392:	2420      	movs	r4, #32
    1394:	4264      	negs	r4, r4
    1396:	190c      	adds	r4, r1, r4
    1398:	d4e7      	bmi.n	136a <long_division+0x32>
    139a:	0005      	movs	r5, r0
    139c:	40a5      	lsls	r5, r4
    139e:	46a8      	mov	r8, r5
    13a0:	0004      	movs	r4, r0
    13a2:	408c      	lsls	r4, r1
    13a4:	46a1      	mov	r9, r4
		r = r << 1;
    13a6:	1892      	adds	r2, r2, r2
    13a8:	415b      	adcs	r3, r3
    13aa:	0014      	movs	r4, r2
    13ac:	001d      	movs	r5, r3
		if (n & bit_shift) {
    13ae:	9e05      	ldr	r6, [sp, #20]
    13b0:	464f      	mov	r7, r9
    13b2:	403e      	ands	r6, r7
    13b4:	46b4      	mov	ip, r6
    13b6:	9e04      	ldr	r6, [sp, #16]
    13b8:	4647      	mov	r7, r8
    13ba:	403e      	ands	r6, r7
    13bc:	46b2      	mov	sl, r6
    13be:	4666      	mov	r6, ip
    13c0:	4657      	mov	r7, sl
    13c2:	433e      	orrs	r6, r7
    13c4:	d003      	beq.n	13ce <long_division+0x96>
			r |= 0x01;
    13c6:	0006      	movs	r6, r0
    13c8:	4326      	orrs	r6, r4
    13ca:	0032      	movs	r2, r6
    13cc:	002b      	movs	r3, r5
		if (r >= d) {
    13ce:	9c00      	ldr	r4, [sp, #0]
    13d0:	9d01      	ldr	r5, [sp, #4]
    13d2:	429d      	cmp	r5, r3
    13d4:	d8db      	bhi.n	138e <long_division+0x56>
    13d6:	d1ce      	bne.n	1376 <long_division+0x3e>
    13d8:	4294      	cmp	r4, r2
    13da:	d8d8      	bhi.n	138e <long_division+0x56>
    13dc:	e7cb      	b.n	1376 <long_division+0x3e>
    13de:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    13e0:	4658      	mov	r0, fp
    13e2:	0019      	movs	r1, r3
    13e4:	b007      	add	sp, #28
    13e6:	bc3c      	pop	{r2, r3, r4, r5}
    13e8:	4690      	mov	r8, r2
    13ea:	4699      	mov	r9, r3
    13ec:	46a2      	mov	sl, r4
    13ee:	46ab      	mov	fp, r5
    13f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000013f2 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    13f2:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    13f4:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    13f6:	2340      	movs	r3, #64	; 0x40
    13f8:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    13fa:	4281      	cmp	r1, r0
    13fc:	d202      	bcs.n	1404 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    13fe:	0018      	movs	r0, r3
    1400:	bd10      	pop	{r4, pc}
		baud_calculated++;
    1402:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    1404:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1406:	1c63      	adds	r3, r4, #1
    1408:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    140a:	4288      	cmp	r0, r1
    140c:	d9f9      	bls.n	1402 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    140e:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    1410:	2cff      	cmp	r4, #255	; 0xff
    1412:	d8f4      	bhi.n	13fe <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    1414:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    1416:	2300      	movs	r3, #0
    1418:	e7f1      	b.n	13fe <_sercom_get_sync_baud_val+0xc>
	...

0000141c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    141c:	b5f0      	push	{r4, r5, r6, r7, lr}
    141e:	b083      	sub	sp, #12
    1420:	000f      	movs	r7, r1
    1422:	0016      	movs	r6, r2
    1424:	aa08      	add	r2, sp, #32
    1426:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1428:	0004      	movs	r4, r0
    142a:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    142c:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    142e:	42bc      	cmp	r4, r7
    1430:	d902      	bls.n	1438 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    1432:	0010      	movs	r0, r2
    1434:	b003      	add	sp, #12
    1436:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1438:	2b00      	cmp	r3, #0
    143a:	d114      	bne.n	1466 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    143c:	0002      	movs	r2, r0
    143e:	0008      	movs	r0, r1
    1440:	2100      	movs	r1, #0
    1442:	4c19      	ldr	r4, [pc, #100]	; (14a8 <_sercom_get_async_baud_val+0x8c>)
    1444:	47a0      	blx	r4
    1446:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    1448:	003a      	movs	r2, r7
    144a:	2300      	movs	r3, #0
    144c:	2000      	movs	r0, #0
    144e:	4c17      	ldr	r4, [pc, #92]	; (14ac <_sercom_get_async_baud_val+0x90>)
    1450:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    1452:	2200      	movs	r2, #0
    1454:	2301      	movs	r3, #1
    1456:	1a12      	subs	r2, r2, r0
    1458:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    145a:	0c12      	lsrs	r2, r2, #16
    145c:	041b      	lsls	r3, r3, #16
    145e:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1460:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    1462:	2200      	movs	r2, #0
    1464:	e7e5      	b.n	1432 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    1466:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1468:	2b01      	cmp	r3, #1
    146a:	d1f9      	bne.n	1460 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    146c:	000a      	movs	r2, r1
    146e:	2300      	movs	r3, #0
    1470:	2100      	movs	r1, #0
    1472:	4c0d      	ldr	r4, [pc, #52]	; (14a8 <_sercom_get_async_baud_val+0x8c>)
    1474:	47a0      	blx	r4
    1476:	0002      	movs	r2, r0
    1478:	000b      	movs	r3, r1
    147a:	9200      	str	r2, [sp, #0]
    147c:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    147e:	0038      	movs	r0, r7
    1480:	2100      	movs	r1, #0
    1482:	4c0a      	ldr	r4, [pc, #40]	; (14ac <_sercom_get_async_baud_val+0x90>)
    1484:	47a0      	blx	r4
    1486:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    1488:	2380      	movs	r3, #128	; 0x80
    148a:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    148c:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    148e:	4298      	cmp	r0, r3
    1490:	d8cf      	bhi.n	1432 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    1492:	0f79      	lsrs	r1, r7, #29
    1494:	00f8      	lsls	r0, r7, #3
    1496:	9a00      	ldr	r2, [sp, #0]
    1498:	9b01      	ldr	r3, [sp, #4]
    149a:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    149c:	00ea      	lsls	r2, r5, #3
    149e:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    14a0:	b2d2      	uxtb	r2, r2
    14a2:	0352      	lsls	r2, r2, #13
    14a4:	432a      	orrs	r2, r5
    14a6:	e7db      	b.n	1460 <_sercom_get_async_baud_val+0x44>
    14a8:	00004eb9 	.word	0x00004eb9
    14ac:	00001339 	.word	0x00001339

000014b0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    14b0:	b510      	push	{r4, lr}
    14b2:	b082      	sub	sp, #8
    14b4:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    14b6:	4b0e      	ldr	r3, [pc, #56]	; (14f0 <sercom_set_gclk_generator+0x40>)
    14b8:	781b      	ldrb	r3, [r3, #0]
    14ba:	2b00      	cmp	r3, #0
    14bc:	d007      	beq.n	14ce <sercom_set_gclk_generator+0x1e>
    14be:	2900      	cmp	r1, #0
    14c0:	d105      	bne.n	14ce <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    14c2:	4b0b      	ldr	r3, [pc, #44]	; (14f0 <sercom_set_gclk_generator+0x40>)
    14c4:	785b      	ldrb	r3, [r3, #1]
    14c6:	4283      	cmp	r3, r0
    14c8:	d010      	beq.n	14ec <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    14ca:	201d      	movs	r0, #29
    14cc:	e00c      	b.n	14e8 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    14ce:	a901      	add	r1, sp, #4
    14d0:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    14d2:	2013      	movs	r0, #19
    14d4:	4b07      	ldr	r3, [pc, #28]	; (14f4 <sercom_set_gclk_generator+0x44>)
    14d6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    14d8:	2013      	movs	r0, #19
    14da:	4b07      	ldr	r3, [pc, #28]	; (14f8 <sercom_set_gclk_generator+0x48>)
    14dc:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    14de:	4b04      	ldr	r3, [pc, #16]	; (14f0 <sercom_set_gclk_generator+0x40>)
    14e0:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    14e2:	2201      	movs	r2, #1
    14e4:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    14e6:	2000      	movs	r0, #0
}
    14e8:	b002      	add	sp, #8
    14ea:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    14ec:	2000      	movs	r0, #0
    14ee:	e7fb      	b.n	14e8 <sercom_set_gclk_generator+0x38>
    14f0:	20000690 	.word	0x20000690
    14f4:	00002229 	.word	0x00002229
    14f8:	0000219d 	.word	0x0000219d

000014fc <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    14fc:	4b40      	ldr	r3, [pc, #256]	; (1600 <_sercom_get_default_pad+0x104>)
    14fe:	4298      	cmp	r0, r3
    1500:	d031      	beq.n	1566 <_sercom_get_default_pad+0x6a>
    1502:	d90a      	bls.n	151a <_sercom_get_default_pad+0x1e>
    1504:	4b3f      	ldr	r3, [pc, #252]	; (1604 <_sercom_get_default_pad+0x108>)
    1506:	4298      	cmp	r0, r3
    1508:	d04d      	beq.n	15a6 <_sercom_get_default_pad+0xaa>
    150a:	4b3f      	ldr	r3, [pc, #252]	; (1608 <_sercom_get_default_pad+0x10c>)
    150c:	4298      	cmp	r0, r3
    150e:	d05a      	beq.n	15c6 <_sercom_get_default_pad+0xca>
    1510:	4b3e      	ldr	r3, [pc, #248]	; (160c <_sercom_get_default_pad+0x110>)
    1512:	4298      	cmp	r0, r3
    1514:	d037      	beq.n	1586 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    1516:	2000      	movs	r0, #0
}
    1518:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    151a:	4b3d      	ldr	r3, [pc, #244]	; (1610 <_sercom_get_default_pad+0x114>)
    151c:	4298      	cmp	r0, r3
    151e:	d00c      	beq.n	153a <_sercom_get_default_pad+0x3e>
    1520:	4b3c      	ldr	r3, [pc, #240]	; (1614 <_sercom_get_default_pad+0x118>)
    1522:	4298      	cmp	r0, r3
    1524:	d1f7      	bne.n	1516 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1526:	2901      	cmp	r1, #1
    1528:	d017      	beq.n	155a <_sercom_get_default_pad+0x5e>
    152a:	2900      	cmp	r1, #0
    152c:	d05d      	beq.n	15ea <_sercom_get_default_pad+0xee>
    152e:	2902      	cmp	r1, #2
    1530:	d015      	beq.n	155e <_sercom_get_default_pad+0x62>
    1532:	2903      	cmp	r1, #3
    1534:	d015      	beq.n	1562 <_sercom_get_default_pad+0x66>
	return 0;
    1536:	2000      	movs	r0, #0
    1538:	e7ee      	b.n	1518 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    153a:	2901      	cmp	r1, #1
    153c:	d007      	beq.n	154e <_sercom_get_default_pad+0x52>
    153e:	2900      	cmp	r1, #0
    1540:	d051      	beq.n	15e6 <_sercom_get_default_pad+0xea>
    1542:	2902      	cmp	r1, #2
    1544:	d005      	beq.n	1552 <_sercom_get_default_pad+0x56>
    1546:	2903      	cmp	r1, #3
    1548:	d005      	beq.n	1556 <_sercom_get_default_pad+0x5a>
	return 0;
    154a:	2000      	movs	r0, #0
    154c:	e7e4      	b.n	1518 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    154e:	4832      	ldr	r0, [pc, #200]	; (1618 <_sercom_get_default_pad+0x11c>)
    1550:	e7e2      	b.n	1518 <_sercom_get_default_pad+0x1c>
    1552:	4832      	ldr	r0, [pc, #200]	; (161c <_sercom_get_default_pad+0x120>)
    1554:	e7e0      	b.n	1518 <_sercom_get_default_pad+0x1c>
    1556:	4832      	ldr	r0, [pc, #200]	; (1620 <_sercom_get_default_pad+0x124>)
    1558:	e7de      	b.n	1518 <_sercom_get_default_pad+0x1c>
    155a:	4832      	ldr	r0, [pc, #200]	; (1624 <_sercom_get_default_pad+0x128>)
    155c:	e7dc      	b.n	1518 <_sercom_get_default_pad+0x1c>
    155e:	4832      	ldr	r0, [pc, #200]	; (1628 <_sercom_get_default_pad+0x12c>)
    1560:	e7da      	b.n	1518 <_sercom_get_default_pad+0x1c>
    1562:	4832      	ldr	r0, [pc, #200]	; (162c <_sercom_get_default_pad+0x130>)
    1564:	e7d8      	b.n	1518 <_sercom_get_default_pad+0x1c>
    1566:	2901      	cmp	r1, #1
    1568:	d007      	beq.n	157a <_sercom_get_default_pad+0x7e>
    156a:	2900      	cmp	r1, #0
    156c:	d03f      	beq.n	15ee <_sercom_get_default_pad+0xf2>
    156e:	2902      	cmp	r1, #2
    1570:	d005      	beq.n	157e <_sercom_get_default_pad+0x82>
    1572:	2903      	cmp	r1, #3
    1574:	d005      	beq.n	1582 <_sercom_get_default_pad+0x86>
	return 0;
    1576:	2000      	movs	r0, #0
    1578:	e7ce      	b.n	1518 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    157a:	482d      	ldr	r0, [pc, #180]	; (1630 <_sercom_get_default_pad+0x134>)
    157c:	e7cc      	b.n	1518 <_sercom_get_default_pad+0x1c>
    157e:	482d      	ldr	r0, [pc, #180]	; (1634 <_sercom_get_default_pad+0x138>)
    1580:	e7ca      	b.n	1518 <_sercom_get_default_pad+0x1c>
    1582:	482d      	ldr	r0, [pc, #180]	; (1638 <_sercom_get_default_pad+0x13c>)
    1584:	e7c8      	b.n	1518 <_sercom_get_default_pad+0x1c>
    1586:	2901      	cmp	r1, #1
    1588:	d007      	beq.n	159a <_sercom_get_default_pad+0x9e>
    158a:	2900      	cmp	r1, #0
    158c:	d031      	beq.n	15f2 <_sercom_get_default_pad+0xf6>
    158e:	2902      	cmp	r1, #2
    1590:	d005      	beq.n	159e <_sercom_get_default_pad+0xa2>
    1592:	2903      	cmp	r1, #3
    1594:	d005      	beq.n	15a2 <_sercom_get_default_pad+0xa6>
	return 0;
    1596:	2000      	movs	r0, #0
    1598:	e7be      	b.n	1518 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    159a:	4828      	ldr	r0, [pc, #160]	; (163c <_sercom_get_default_pad+0x140>)
    159c:	e7bc      	b.n	1518 <_sercom_get_default_pad+0x1c>
    159e:	4828      	ldr	r0, [pc, #160]	; (1640 <_sercom_get_default_pad+0x144>)
    15a0:	e7ba      	b.n	1518 <_sercom_get_default_pad+0x1c>
    15a2:	4828      	ldr	r0, [pc, #160]	; (1644 <_sercom_get_default_pad+0x148>)
    15a4:	e7b8      	b.n	1518 <_sercom_get_default_pad+0x1c>
    15a6:	2901      	cmp	r1, #1
    15a8:	d007      	beq.n	15ba <_sercom_get_default_pad+0xbe>
    15aa:	2900      	cmp	r1, #0
    15ac:	d023      	beq.n	15f6 <_sercom_get_default_pad+0xfa>
    15ae:	2902      	cmp	r1, #2
    15b0:	d005      	beq.n	15be <_sercom_get_default_pad+0xc2>
    15b2:	2903      	cmp	r1, #3
    15b4:	d005      	beq.n	15c2 <_sercom_get_default_pad+0xc6>
	return 0;
    15b6:	2000      	movs	r0, #0
    15b8:	e7ae      	b.n	1518 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    15ba:	4823      	ldr	r0, [pc, #140]	; (1648 <_sercom_get_default_pad+0x14c>)
    15bc:	e7ac      	b.n	1518 <_sercom_get_default_pad+0x1c>
    15be:	4823      	ldr	r0, [pc, #140]	; (164c <_sercom_get_default_pad+0x150>)
    15c0:	e7aa      	b.n	1518 <_sercom_get_default_pad+0x1c>
    15c2:	4823      	ldr	r0, [pc, #140]	; (1650 <_sercom_get_default_pad+0x154>)
    15c4:	e7a8      	b.n	1518 <_sercom_get_default_pad+0x1c>
    15c6:	2901      	cmp	r1, #1
    15c8:	d007      	beq.n	15da <_sercom_get_default_pad+0xde>
    15ca:	2900      	cmp	r1, #0
    15cc:	d015      	beq.n	15fa <_sercom_get_default_pad+0xfe>
    15ce:	2902      	cmp	r1, #2
    15d0:	d005      	beq.n	15de <_sercom_get_default_pad+0xe2>
    15d2:	2903      	cmp	r1, #3
    15d4:	d005      	beq.n	15e2 <_sercom_get_default_pad+0xe6>
	return 0;
    15d6:	2000      	movs	r0, #0
    15d8:	e79e      	b.n	1518 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    15da:	481e      	ldr	r0, [pc, #120]	; (1654 <_sercom_get_default_pad+0x158>)
    15dc:	e79c      	b.n	1518 <_sercom_get_default_pad+0x1c>
    15de:	481e      	ldr	r0, [pc, #120]	; (1658 <_sercom_get_default_pad+0x15c>)
    15e0:	e79a      	b.n	1518 <_sercom_get_default_pad+0x1c>
    15e2:	481e      	ldr	r0, [pc, #120]	; (165c <_sercom_get_default_pad+0x160>)
    15e4:	e798      	b.n	1518 <_sercom_get_default_pad+0x1c>
    15e6:	481e      	ldr	r0, [pc, #120]	; (1660 <_sercom_get_default_pad+0x164>)
    15e8:	e796      	b.n	1518 <_sercom_get_default_pad+0x1c>
    15ea:	2003      	movs	r0, #3
    15ec:	e794      	b.n	1518 <_sercom_get_default_pad+0x1c>
    15ee:	481d      	ldr	r0, [pc, #116]	; (1664 <_sercom_get_default_pad+0x168>)
    15f0:	e792      	b.n	1518 <_sercom_get_default_pad+0x1c>
    15f2:	481d      	ldr	r0, [pc, #116]	; (1668 <_sercom_get_default_pad+0x16c>)
    15f4:	e790      	b.n	1518 <_sercom_get_default_pad+0x1c>
    15f6:	481d      	ldr	r0, [pc, #116]	; (166c <_sercom_get_default_pad+0x170>)
    15f8:	e78e      	b.n	1518 <_sercom_get_default_pad+0x1c>
    15fa:	481d      	ldr	r0, [pc, #116]	; (1670 <_sercom_get_default_pad+0x174>)
    15fc:	e78c      	b.n	1518 <_sercom_get_default_pad+0x1c>
    15fe:	46c0      	nop			; (mov r8, r8)
    1600:	42001000 	.word	0x42001000
    1604:	42001800 	.word	0x42001800
    1608:	42001c00 	.word	0x42001c00
    160c:	42001400 	.word	0x42001400
    1610:	42000800 	.word	0x42000800
    1614:	42000c00 	.word	0x42000c00
    1618:	00050003 	.word	0x00050003
    161c:	00060003 	.word	0x00060003
    1620:	00070003 	.word	0x00070003
    1624:	00010003 	.word	0x00010003
    1628:	001e0003 	.word	0x001e0003
    162c:	001f0003 	.word	0x001f0003
    1630:	00090003 	.word	0x00090003
    1634:	000a0003 	.word	0x000a0003
    1638:	000b0003 	.word	0x000b0003
    163c:	00110003 	.word	0x00110003
    1640:	00120003 	.word	0x00120003
    1644:	00130003 	.word	0x00130003
    1648:	000d0003 	.word	0x000d0003
    164c:	000e0003 	.word	0x000e0003
    1650:	000f0003 	.word	0x000f0003
    1654:	00170003 	.word	0x00170003
    1658:	00180003 	.word	0x00180003
    165c:	00190003 	.word	0x00190003
    1660:	00040003 	.word	0x00040003
    1664:	00080003 	.word	0x00080003
    1668:	00100003 	.word	0x00100003
    166c:	000c0003 	.word	0x000c0003
    1670:	00160003 	.word	0x00160003

00001674 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1674:	b530      	push	{r4, r5, lr}
    1676:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1678:	4b0b      	ldr	r3, [pc, #44]	; (16a8 <_sercom_get_sercom_inst_index+0x34>)
    167a:	466a      	mov	r2, sp
    167c:	cb32      	ldmia	r3!, {r1, r4, r5}
    167e:	c232      	stmia	r2!, {r1, r4, r5}
    1680:	cb32      	ldmia	r3!, {r1, r4, r5}
    1682:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1684:	9b00      	ldr	r3, [sp, #0]
    1686:	4283      	cmp	r3, r0
    1688:	d00b      	beq.n	16a2 <_sercom_get_sercom_inst_index+0x2e>
    168a:	2301      	movs	r3, #1
    168c:	009a      	lsls	r2, r3, #2
    168e:	4669      	mov	r1, sp
    1690:	5852      	ldr	r2, [r2, r1]
    1692:	4282      	cmp	r2, r0
    1694:	d006      	beq.n	16a4 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1696:	3301      	adds	r3, #1
    1698:	2b06      	cmp	r3, #6
    169a:	d1f7      	bne.n	168c <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    169c:	2000      	movs	r0, #0
}
    169e:	b007      	add	sp, #28
    16a0:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    16a2:	2300      	movs	r3, #0
			return i;
    16a4:	b2d8      	uxtb	r0, r3
    16a6:	e7fa      	b.n	169e <_sercom_get_sercom_inst_index+0x2a>
    16a8:	00004f78 	.word	0x00004f78

000016ac <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    16ac:	4770      	bx	lr
	...

000016b0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    16b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    16b2:	4b0a      	ldr	r3, [pc, #40]	; (16dc <_sercom_set_handler+0x2c>)
    16b4:	781b      	ldrb	r3, [r3, #0]
    16b6:	2b00      	cmp	r3, #0
    16b8:	d10c      	bne.n	16d4 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    16ba:	4f09      	ldr	r7, [pc, #36]	; (16e0 <_sercom_set_handler+0x30>)
    16bc:	4e09      	ldr	r6, [pc, #36]	; (16e4 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    16be:	4d0a      	ldr	r5, [pc, #40]	; (16e8 <_sercom_set_handler+0x38>)
    16c0:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    16c2:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    16c4:	195a      	adds	r2, r3, r5
    16c6:	6014      	str	r4, [r2, #0]
    16c8:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    16ca:	2b18      	cmp	r3, #24
    16cc:	d1f9      	bne.n	16c2 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    16ce:	2201      	movs	r2, #1
    16d0:	4b02      	ldr	r3, [pc, #8]	; (16dc <_sercom_set_handler+0x2c>)
    16d2:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    16d4:	0080      	lsls	r0, r0, #2
    16d6:	4b02      	ldr	r3, [pc, #8]	; (16e0 <_sercom_set_handler+0x30>)
    16d8:	50c1      	str	r1, [r0, r3]
}
    16da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    16dc:	20000692 	.word	0x20000692
    16e0:	20000694 	.word	0x20000694
    16e4:	000016ad 	.word	0x000016ad
    16e8:	200007ac 	.word	0x200007ac

000016ec <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    16ec:	b500      	push	{lr}
    16ee:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    16f0:	2309      	movs	r3, #9
    16f2:	466a      	mov	r2, sp
    16f4:	7013      	strb	r3, [r2, #0]
    16f6:	3301      	adds	r3, #1
    16f8:	7053      	strb	r3, [r2, #1]
    16fa:	3301      	adds	r3, #1
    16fc:	7093      	strb	r3, [r2, #2]
    16fe:	3301      	adds	r3, #1
    1700:	70d3      	strb	r3, [r2, #3]
    1702:	3301      	adds	r3, #1
    1704:	7113      	strb	r3, [r2, #4]
    1706:	3301      	adds	r3, #1
    1708:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    170a:	4b03      	ldr	r3, [pc, #12]	; (1718 <_sercom_get_interrupt_vector+0x2c>)
    170c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    170e:	466b      	mov	r3, sp
    1710:	5618      	ldrsb	r0, [r3, r0]
}
    1712:	b003      	add	sp, #12
    1714:	bd00      	pop	{pc}
    1716:	46c0      	nop			; (mov r8, r8)
    1718:	00001675 	.word	0x00001675

0000171c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    171c:	b510      	push	{r4, lr}
    171e:	4b02      	ldr	r3, [pc, #8]	; (1728 <SERCOM0_Handler+0xc>)
    1720:	681b      	ldr	r3, [r3, #0]
    1722:	2000      	movs	r0, #0
    1724:	4798      	blx	r3
    1726:	bd10      	pop	{r4, pc}
    1728:	20000694 	.word	0x20000694

0000172c <SERCOM1_Handler>:
    172c:	b510      	push	{r4, lr}
    172e:	4b02      	ldr	r3, [pc, #8]	; (1738 <SERCOM1_Handler+0xc>)
    1730:	685b      	ldr	r3, [r3, #4]
    1732:	2001      	movs	r0, #1
    1734:	4798      	blx	r3
    1736:	bd10      	pop	{r4, pc}
    1738:	20000694 	.word	0x20000694

0000173c <SERCOM2_Handler>:
    173c:	b510      	push	{r4, lr}
    173e:	4b02      	ldr	r3, [pc, #8]	; (1748 <SERCOM2_Handler+0xc>)
    1740:	689b      	ldr	r3, [r3, #8]
    1742:	2002      	movs	r0, #2
    1744:	4798      	blx	r3
    1746:	bd10      	pop	{r4, pc}
    1748:	20000694 	.word	0x20000694

0000174c <SERCOM3_Handler>:
    174c:	b510      	push	{r4, lr}
    174e:	4b02      	ldr	r3, [pc, #8]	; (1758 <SERCOM3_Handler+0xc>)
    1750:	68db      	ldr	r3, [r3, #12]
    1752:	2003      	movs	r0, #3
    1754:	4798      	blx	r3
    1756:	bd10      	pop	{r4, pc}
    1758:	20000694 	.word	0x20000694

0000175c <SERCOM4_Handler>:
    175c:	b510      	push	{r4, lr}
    175e:	4b02      	ldr	r3, [pc, #8]	; (1768 <SERCOM4_Handler+0xc>)
    1760:	691b      	ldr	r3, [r3, #16]
    1762:	2004      	movs	r0, #4
    1764:	4798      	blx	r3
    1766:	bd10      	pop	{r4, pc}
    1768:	20000694 	.word	0x20000694

0000176c <SERCOM5_Handler>:
    176c:	b510      	push	{r4, lr}
    176e:	4b02      	ldr	r3, [pc, #8]	; (1778 <SERCOM5_Handler+0xc>)
    1770:	695b      	ldr	r3, [r3, #20]
    1772:	2005      	movs	r0, #5
    1774:	4798      	blx	r3
    1776:	bd10      	pop	{r4, pc}
    1778:	20000694 	.word	0x20000694

0000177c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    177c:	b5f0      	push	{r4, r5, r6, r7, lr}
    177e:	46de      	mov	lr, fp
    1780:	4657      	mov	r7, sl
    1782:	464e      	mov	r6, r9
    1784:	4645      	mov	r5, r8
    1786:	b5e0      	push	{r5, r6, r7, lr}
    1788:	b091      	sub	sp, #68	; 0x44
    178a:	0005      	movs	r5, r0
    178c:	000c      	movs	r4, r1
    178e:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1790:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1792:	0008      	movs	r0, r1
    1794:	4bbc      	ldr	r3, [pc, #752]	; (1a88 <usart_init+0x30c>)
    1796:	4798      	blx	r3
    1798:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    179a:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    179c:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    179e:	07db      	lsls	r3, r3, #31
    17a0:	d506      	bpl.n	17b0 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    17a2:	b011      	add	sp, #68	; 0x44
    17a4:	bc3c      	pop	{r2, r3, r4, r5}
    17a6:	4690      	mov	r8, r2
    17a8:	4699      	mov	r9, r3
    17aa:	46a2      	mov	sl, r4
    17ac:	46ab      	mov	fp, r5
    17ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    17b0:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    17b2:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    17b4:	079b      	lsls	r3, r3, #30
    17b6:	d4f4      	bmi.n	17a2 <usart_init+0x26>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    17b8:	49b4      	ldr	r1, [pc, #720]	; (1a8c <usart_init+0x310>)
    17ba:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    17bc:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    17be:	2301      	movs	r3, #1
    17c0:	40bb      	lsls	r3, r7
    17c2:	4303      	orrs	r3, r0
    17c4:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    17c6:	a90f      	add	r1, sp, #60	; 0x3c
    17c8:	272d      	movs	r7, #45	; 0x2d
    17ca:	5df3      	ldrb	r3, [r6, r7]
    17cc:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    17ce:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    17d0:	b2d3      	uxtb	r3, r2
    17d2:	9302      	str	r3, [sp, #8]
    17d4:	0018      	movs	r0, r3
    17d6:	4bae      	ldr	r3, [pc, #696]	; (1a90 <usart_init+0x314>)
    17d8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    17da:	9802      	ldr	r0, [sp, #8]
    17dc:	4bad      	ldr	r3, [pc, #692]	; (1a94 <usart_init+0x318>)
    17de:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    17e0:	5df0      	ldrb	r0, [r6, r7]
    17e2:	2100      	movs	r1, #0
    17e4:	4bac      	ldr	r3, [pc, #688]	; (1a98 <usart_init+0x31c>)
    17e6:	4798      	blx	r3
	module->character_size = config->character_size;
    17e8:	7af3      	ldrb	r3, [r6, #11]
    17ea:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    17ec:	2324      	movs	r3, #36	; 0x24
    17ee:	5cf3      	ldrb	r3, [r6, r3]
    17f0:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    17f2:	2325      	movs	r3, #37	; 0x25
    17f4:	5cf3      	ldrb	r3, [r6, r3]
    17f6:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    17f8:	7ef3      	ldrb	r3, [r6, #27]
    17fa:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    17fc:	7f33      	ldrb	r3, [r6, #28]
    17fe:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1800:	682b      	ldr	r3, [r5, #0]
    1802:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1804:	0018      	movs	r0, r3
    1806:	4ba0      	ldr	r3, [pc, #640]	; (1a88 <usart_init+0x30c>)
    1808:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    180a:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    180c:	2200      	movs	r2, #0
    180e:	230e      	movs	r3, #14
    1810:	a906      	add	r1, sp, #24
    1812:	468c      	mov	ip, r1
    1814:	4463      	add	r3, ip
    1816:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    1818:	8a32      	ldrh	r2, [r6, #16]
    181a:	9202      	str	r2, [sp, #8]
    181c:	2380      	movs	r3, #128	; 0x80
    181e:	01db      	lsls	r3, r3, #7
    1820:	429a      	cmp	r2, r3
    1822:	d100      	bne.n	1826 <usart_init+0xaa>
    1824:	e09e      	b.n	1964 <usart_init+0x1e8>
    1826:	d90f      	bls.n	1848 <usart_init+0xcc>
    1828:	23c0      	movs	r3, #192	; 0xc0
    182a:	01db      	lsls	r3, r3, #7
    182c:	9a02      	ldr	r2, [sp, #8]
    182e:	429a      	cmp	r2, r3
    1830:	d100      	bne.n	1834 <usart_init+0xb8>
    1832:	e092      	b.n	195a <usart_init+0x1de>
    1834:	2380      	movs	r3, #128	; 0x80
    1836:	021b      	lsls	r3, r3, #8
    1838:	429a      	cmp	r2, r3
    183a:	d000      	beq.n	183e <usart_init+0xc2>
    183c:	e11f      	b.n	1a7e <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    183e:	2303      	movs	r3, #3
    1840:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1842:	2300      	movs	r3, #0
    1844:	9307      	str	r3, [sp, #28]
    1846:	e008      	b.n	185a <usart_init+0xde>
	switch (config->sample_rate) {
    1848:	2380      	movs	r3, #128	; 0x80
    184a:	019b      	lsls	r3, r3, #6
    184c:	429a      	cmp	r2, r3
    184e:	d000      	beq.n	1852 <usart_init+0xd6>
    1850:	e115      	b.n	1a7e <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1852:	2310      	movs	r3, #16
    1854:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1856:	3b0f      	subs	r3, #15
    1858:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    185a:	6833      	ldr	r3, [r6, #0]
    185c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    185e:	68f3      	ldr	r3, [r6, #12]
    1860:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    1862:	6973      	ldr	r3, [r6, #20]
    1864:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1866:	7e33      	ldrb	r3, [r6, #24]
    1868:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    186a:	2326      	movs	r3, #38	; 0x26
    186c:	5cf3      	ldrb	r3, [r6, r3]
    186e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1870:	6873      	ldr	r3, [r6, #4]
    1872:	4699      	mov	r9, r3
	switch (transfer_mode)
    1874:	2b00      	cmp	r3, #0
    1876:	d100      	bne.n	187a <usart_init+0xfe>
    1878:	e0a0      	b.n	19bc <usart_init+0x240>
    187a:	2380      	movs	r3, #128	; 0x80
    187c:	055b      	lsls	r3, r3, #21
    187e:	4599      	cmp	r9, r3
    1880:	d100      	bne.n	1884 <usart_init+0x108>
    1882:	e084      	b.n	198e <usart_init+0x212>
	if(config->encoding_format_enable) {
    1884:	7e73      	ldrb	r3, [r6, #25]
    1886:	2b00      	cmp	r3, #0
    1888:	d002      	beq.n	1890 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    188a:	7eb3      	ldrb	r3, [r6, #26]
    188c:	4642      	mov	r2, r8
    188e:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1890:	682a      	ldr	r2, [r5, #0]
    1892:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1894:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1896:	2b00      	cmp	r3, #0
    1898:	d1fc      	bne.n	1894 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    189a:	330e      	adds	r3, #14
    189c:	aa06      	add	r2, sp, #24
    189e:	4694      	mov	ip, r2
    18a0:	4463      	add	r3, ip
    18a2:	881b      	ldrh	r3, [r3, #0]
    18a4:	4642      	mov	r2, r8
    18a6:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    18a8:	9b05      	ldr	r3, [sp, #20]
    18aa:	9a03      	ldr	r2, [sp, #12]
    18ac:	4313      	orrs	r3, r2
    18ae:	9a04      	ldr	r2, [sp, #16]
    18b0:	4313      	orrs	r3, r2
    18b2:	464a      	mov	r2, r9
    18b4:	4313      	orrs	r3, r2
    18b6:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    18b8:	465b      	mov	r3, fp
    18ba:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    18bc:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    18be:	4653      	mov	r3, sl
    18c0:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    18c2:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    18c4:	2327      	movs	r3, #39	; 0x27
    18c6:	5cf3      	ldrb	r3, [r6, r3]
    18c8:	2b00      	cmp	r3, #0
    18ca:	d101      	bne.n	18d0 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    18cc:	3304      	adds	r3, #4
    18ce:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    18d0:	7e73      	ldrb	r3, [r6, #25]
    18d2:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    18d4:	7f32      	ldrb	r2, [r6, #28]
    18d6:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    18d8:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    18da:	7f72      	ldrb	r2, [r6, #29]
    18dc:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    18de:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    18e0:	2224      	movs	r2, #36	; 0x24
    18e2:	5cb2      	ldrb	r2, [r6, r2]
    18e4:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    18e6:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    18e8:	2225      	movs	r2, #37	; 0x25
    18ea:	5cb2      	ldrb	r2, [r6, r2]
    18ec:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    18ee:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    18f0:	7ab1      	ldrb	r1, [r6, #10]
    18f2:	7af2      	ldrb	r2, [r6, #11]
    18f4:	4311      	orrs	r1, r2
    18f6:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    18f8:	8933      	ldrh	r3, [r6, #8]
    18fa:	2bff      	cmp	r3, #255	; 0xff
    18fc:	d100      	bne.n	1900 <usart_init+0x184>
    18fe:	e081      	b.n	1a04 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1900:	2280      	movs	r2, #128	; 0x80
    1902:	0452      	lsls	r2, r2, #17
    1904:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    1906:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1908:	232c      	movs	r3, #44	; 0x2c
    190a:	5cf3      	ldrb	r3, [r6, r3]
    190c:	2b00      	cmp	r3, #0
    190e:	d103      	bne.n	1918 <usart_init+0x19c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1910:	4b62      	ldr	r3, [pc, #392]	; (1a9c <usart_init+0x320>)
    1912:	789b      	ldrb	r3, [r3, #2]
    1914:	079b      	lsls	r3, r3, #30
    1916:	d501      	bpl.n	191c <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1918:	2380      	movs	r3, #128	; 0x80
    191a:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    191c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    191e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1920:	2b00      	cmp	r3, #0
    1922:	d1fc      	bne.n	191e <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    1924:	4643      	mov	r3, r8
    1926:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1928:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    192a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    192c:	2b00      	cmp	r3, #0
    192e:	d1fc      	bne.n	192a <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    1930:	4643      	mov	r3, r8
    1932:	601f      	str	r7, [r3, #0]
    1934:	ab0e      	add	r3, sp, #56	; 0x38
    1936:	2280      	movs	r2, #128	; 0x80
    1938:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    193a:	2200      	movs	r2, #0
    193c:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    193e:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1940:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1942:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1944:	930a      	str	r3, [sp, #40]	; 0x28
    1946:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1948:	930b      	str	r3, [sp, #44]	; 0x2c
    194a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    194c:	930c      	str	r3, [sp, #48]	; 0x30
    194e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    1950:	9302      	str	r3, [sp, #8]
    1952:	930d      	str	r3, [sp, #52]	; 0x34
    1954:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1956:	ae0a      	add	r6, sp, #40	; 0x28
    1958:	e063      	b.n	1a22 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    195a:	2308      	movs	r3, #8
    195c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    195e:	3b07      	subs	r3, #7
    1960:	9307      	str	r3, [sp, #28]
    1962:	e77a      	b.n	185a <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    1964:	6833      	ldr	r3, [r6, #0]
    1966:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1968:	68f3      	ldr	r3, [r6, #12]
    196a:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    196c:	6973      	ldr	r3, [r6, #20]
    196e:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1970:	7e33      	ldrb	r3, [r6, #24]
    1972:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1974:	2326      	movs	r3, #38	; 0x26
    1976:	5cf3      	ldrb	r3, [r6, r3]
    1978:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    197a:	6873      	ldr	r3, [r6, #4]
    197c:	4699      	mov	r9, r3
	switch (transfer_mode)
    197e:	2b00      	cmp	r3, #0
    1980:	d018      	beq.n	19b4 <usart_init+0x238>
    1982:	2380      	movs	r3, #128	; 0x80
    1984:	055b      	lsls	r3, r3, #21
    1986:	4599      	cmp	r9, r3
    1988:	d001      	beq.n	198e <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    198a:	2000      	movs	r0, #0
    198c:	e025      	b.n	19da <usart_init+0x25e>
			if (!config->use_external_clock) {
    198e:	2327      	movs	r3, #39	; 0x27
    1990:	5cf3      	ldrb	r3, [r6, r3]
    1992:	2b00      	cmp	r3, #0
    1994:	d000      	beq.n	1998 <usart_init+0x21c>
    1996:	e775      	b.n	1884 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1998:	6a33      	ldr	r3, [r6, #32]
    199a:	001f      	movs	r7, r3
    199c:	b2c0      	uxtb	r0, r0
    199e:	4b40      	ldr	r3, [pc, #256]	; (1aa0 <usart_init+0x324>)
    19a0:	4798      	blx	r3
    19a2:	0001      	movs	r1, r0
    19a4:	220e      	movs	r2, #14
    19a6:	ab06      	add	r3, sp, #24
    19a8:	469c      	mov	ip, r3
    19aa:	4462      	add	r2, ip
    19ac:	0038      	movs	r0, r7
    19ae:	4b3d      	ldr	r3, [pc, #244]	; (1aa4 <usart_init+0x328>)
    19b0:	4798      	blx	r3
    19b2:	e012      	b.n	19da <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    19b4:	2308      	movs	r3, #8
    19b6:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    19b8:	2300      	movs	r3, #0
    19ba:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    19bc:	2327      	movs	r3, #39	; 0x27
    19be:	5cf3      	ldrb	r3, [r6, r3]
    19c0:	2b00      	cmp	r3, #0
    19c2:	d00e      	beq.n	19e2 <usart_init+0x266>
				status_code =
    19c4:	9b06      	ldr	r3, [sp, #24]
    19c6:	9300      	str	r3, [sp, #0]
    19c8:	9b07      	ldr	r3, [sp, #28]
    19ca:	220e      	movs	r2, #14
    19cc:	a906      	add	r1, sp, #24
    19ce:	468c      	mov	ip, r1
    19d0:	4462      	add	r2, ip
    19d2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    19d4:	6a30      	ldr	r0, [r6, #32]
    19d6:	4f34      	ldr	r7, [pc, #208]	; (1aa8 <usart_init+0x32c>)
    19d8:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    19da:	2800      	cmp	r0, #0
    19dc:	d000      	beq.n	19e0 <usart_init+0x264>
    19de:	e6e0      	b.n	17a2 <usart_init+0x26>
    19e0:	e750      	b.n	1884 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    19e2:	6a33      	ldr	r3, [r6, #32]
    19e4:	001f      	movs	r7, r3
    19e6:	b2c0      	uxtb	r0, r0
    19e8:	4b2d      	ldr	r3, [pc, #180]	; (1aa0 <usart_init+0x324>)
    19ea:	4798      	blx	r3
    19ec:	0001      	movs	r1, r0
				status_code =
    19ee:	9b06      	ldr	r3, [sp, #24]
    19f0:	9300      	str	r3, [sp, #0]
    19f2:	9b07      	ldr	r3, [sp, #28]
    19f4:	220e      	movs	r2, #14
    19f6:	a806      	add	r0, sp, #24
    19f8:	4684      	mov	ip, r0
    19fa:	4462      	add	r2, ip
    19fc:	0038      	movs	r0, r7
    19fe:	4f2a      	ldr	r7, [pc, #168]	; (1aa8 <usart_init+0x32c>)
    1a00:	47b8      	blx	r7
    1a02:	e7ea      	b.n	19da <usart_init+0x25e>
		if(config->lin_slave_enable) {
    1a04:	7ef3      	ldrb	r3, [r6, #27]
    1a06:	2b00      	cmp	r3, #0
    1a08:	d100      	bne.n	1a0c <usart_init+0x290>
    1a0a:	e77d      	b.n	1908 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1a0c:	2380      	movs	r3, #128	; 0x80
    1a0e:	04db      	lsls	r3, r3, #19
    1a10:	431f      	orrs	r7, r3
    1a12:	e779      	b.n	1908 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1a14:	0020      	movs	r0, r4
    1a16:	4b25      	ldr	r3, [pc, #148]	; (1aac <usart_init+0x330>)
    1a18:	4798      	blx	r3
    1a1a:	e007      	b.n	1a2c <usart_init+0x2b0>
    1a1c:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1a1e:	2f04      	cmp	r7, #4
    1a20:	d00d      	beq.n	1a3e <usart_init+0x2c2>
    1a22:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1a24:	00bb      	lsls	r3, r7, #2
    1a26:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    1a28:	2800      	cmp	r0, #0
    1a2a:	d0f3      	beq.n	1a14 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    1a2c:	1c43      	adds	r3, r0, #1
    1a2e:	d0f5      	beq.n	1a1c <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1a30:	a90e      	add	r1, sp, #56	; 0x38
    1a32:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1a34:	0c00      	lsrs	r0, r0, #16
    1a36:	b2c0      	uxtb	r0, r0
    1a38:	4b1d      	ldr	r3, [pc, #116]	; (1ab0 <usart_init+0x334>)
    1a3a:	4798      	blx	r3
    1a3c:	e7ee      	b.n	1a1c <usart_init+0x2a0>
		module->callback[i]            = NULL;
    1a3e:	2300      	movs	r3, #0
    1a40:	60eb      	str	r3, [r5, #12]
    1a42:	612b      	str	r3, [r5, #16]
    1a44:	616b      	str	r3, [r5, #20]
    1a46:	61ab      	str	r3, [r5, #24]
    1a48:	61eb      	str	r3, [r5, #28]
    1a4a:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    1a4c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1a4e:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1a50:	2200      	movs	r2, #0
    1a52:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1a54:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1a56:	3330      	adds	r3, #48	; 0x30
    1a58:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1a5a:	3301      	adds	r3, #1
    1a5c:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    1a5e:	3301      	adds	r3, #1
    1a60:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    1a62:	3301      	adds	r3, #1
    1a64:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1a66:	6828      	ldr	r0, [r5, #0]
    1a68:	4b07      	ldr	r3, [pc, #28]	; (1a88 <usart_init+0x30c>)
    1a6a:	4798      	blx	r3
    1a6c:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1a6e:	4911      	ldr	r1, [pc, #68]	; (1ab4 <usart_init+0x338>)
    1a70:	4b11      	ldr	r3, [pc, #68]	; (1ab8 <usart_init+0x33c>)
    1a72:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1a74:	00a4      	lsls	r4, r4, #2
    1a76:	4b11      	ldr	r3, [pc, #68]	; (1abc <usart_init+0x340>)
    1a78:	50e5      	str	r5, [r4, r3]
	return status_code;
    1a7a:	2000      	movs	r0, #0
    1a7c:	e691      	b.n	17a2 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1a7e:	2310      	movs	r3, #16
    1a80:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1a82:	2300      	movs	r3, #0
    1a84:	9307      	str	r3, [sp, #28]
    1a86:	e6e8      	b.n	185a <usart_init+0xde>
    1a88:	00001675 	.word	0x00001675
    1a8c:	40000400 	.word	0x40000400
    1a90:	00002229 	.word	0x00002229
    1a94:	0000219d 	.word	0x0000219d
    1a98:	000014b1 	.word	0x000014b1
    1a9c:	41002000 	.word	0x41002000
    1aa0:	00002245 	.word	0x00002245
    1aa4:	000013f3 	.word	0x000013f3
    1aa8:	0000141d 	.word	0x0000141d
    1aac:	000014fd 	.word	0x000014fd
    1ab0:	00002321 	.word	0x00002321
    1ab4:	00001b5d 	.word	0x00001b5d
    1ab8:	000016b1 	.word	0x000016b1
    1abc:	200007ac 	.word	0x200007ac

00001ac0 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1ac0:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    1ac2:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    1ac4:	2a00      	cmp	r2, #0
    1ac6:	d101      	bne.n	1acc <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    1ac8:	0018      	movs	r0, r3
    1aca:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    1acc:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    1ace:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1ad0:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    1ad2:	2a00      	cmp	r2, #0
    1ad4:	d1f8      	bne.n	1ac8 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1ad6:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    1ad8:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    1ada:	2a00      	cmp	r2, #0
    1adc:	d1fc      	bne.n	1ad8 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    1ade:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1ae0:	2102      	movs	r1, #2
    1ae2:	7e1a      	ldrb	r2, [r3, #24]
    1ae4:	420a      	tst	r2, r1
    1ae6:	d0fc      	beq.n	1ae2 <usart_write_wait+0x22>
	return STATUS_OK;
    1ae8:	2300      	movs	r3, #0
    1aea:	e7ed      	b.n	1ac8 <usart_write_wait+0x8>

00001aec <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1aec:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1aee:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    1af0:	2a00      	cmp	r2, #0
    1af2:	d101      	bne.n	1af8 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    1af4:	0018      	movs	r0, r3
    1af6:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    1af8:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    1afa:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1afc:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    1afe:	2a00      	cmp	r2, #0
    1b00:	d1f8      	bne.n	1af4 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1b02:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1b04:	7e10      	ldrb	r0, [r2, #24]
    1b06:	0740      	lsls	r0, r0, #29
    1b08:	d5f4      	bpl.n	1af4 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    1b0a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1b0c:	2b00      	cmp	r3, #0
    1b0e:	d1fc      	bne.n	1b0a <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1b10:	8b53      	ldrh	r3, [r2, #26]
    1b12:	b2db      	uxtb	r3, r3
	if (error_code) {
    1b14:	0698      	lsls	r0, r3, #26
    1b16:	d01d      	beq.n	1b54 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1b18:	0798      	lsls	r0, r3, #30
    1b1a:	d503      	bpl.n	1b24 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1b1c:	2302      	movs	r3, #2
    1b1e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    1b20:	3318      	adds	r3, #24
    1b22:	e7e7      	b.n	1af4 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1b24:	0758      	lsls	r0, r3, #29
    1b26:	d503      	bpl.n	1b30 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1b28:	2304      	movs	r3, #4
    1b2a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    1b2c:	331a      	adds	r3, #26
    1b2e:	e7e1      	b.n	1af4 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1b30:	07d8      	lsls	r0, r3, #31
    1b32:	d503      	bpl.n	1b3c <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1b34:	2301      	movs	r3, #1
    1b36:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    1b38:	3312      	adds	r3, #18
    1b3a:	e7db      	b.n	1af4 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1b3c:	06d8      	lsls	r0, r3, #27
    1b3e:	d503      	bpl.n	1b48 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1b40:	2310      	movs	r3, #16
    1b42:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    1b44:	3332      	adds	r3, #50	; 0x32
    1b46:	e7d5      	b.n	1af4 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1b48:	069b      	lsls	r3, r3, #26
    1b4a:	d503      	bpl.n	1b54 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1b4c:	2320      	movs	r3, #32
    1b4e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    1b50:	3321      	adds	r3, #33	; 0x21
    1b52:	e7cf      	b.n	1af4 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    1b54:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    1b56:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    1b58:	2300      	movs	r3, #0
    1b5a:	e7cb      	b.n	1af4 <usart_read_wait+0x8>

00001b5c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1b5e:	0080      	lsls	r0, r0, #2
    1b60:	4b62      	ldr	r3, [pc, #392]	; (1cec <_usart_interrupt_handler+0x190>)
    1b62:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1b64:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1b66:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    1b68:	2b00      	cmp	r3, #0
    1b6a:	d1fc      	bne.n	1b66 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1b6c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1b6e:	7da6      	ldrb	r6, [r4, #22]
    1b70:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    1b72:	2330      	movs	r3, #48	; 0x30
    1b74:	5ceb      	ldrb	r3, [r5, r3]
    1b76:	2231      	movs	r2, #49	; 0x31
    1b78:	5caf      	ldrb	r7, [r5, r2]
    1b7a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1b7c:	07f3      	lsls	r3, r6, #31
    1b7e:	d522      	bpl.n	1bc6 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1b80:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1b82:	b29b      	uxth	r3, r3
    1b84:	2b00      	cmp	r3, #0
    1b86:	d01c      	beq.n	1bc2 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1b88:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1b8a:	7813      	ldrb	r3, [r2, #0]
    1b8c:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1b8e:	1c51      	adds	r1, r2, #1
    1b90:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1b92:	7969      	ldrb	r1, [r5, #5]
    1b94:	2901      	cmp	r1, #1
    1b96:	d00e      	beq.n	1bb6 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1b98:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1b9a:	05db      	lsls	r3, r3, #23
    1b9c:	0ddb      	lsrs	r3, r3, #23
    1b9e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1ba0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1ba2:	3b01      	subs	r3, #1
    1ba4:	b29b      	uxth	r3, r3
    1ba6:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1ba8:	2b00      	cmp	r3, #0
    1baa:	d10c      	bne.n	1bc6 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1bac:	3301      	adds	r3, #1
    1bae:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1bb0:	3301      	adds	r3, #1
    1bb2:	75a3      	strb	r3, [r4, #22]
    1bb4:	e007      	b.n	1bc6 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1bb6:	7851      	ldrb	r1, [r2, #1]
    1bb8:	0209      	lsls	r1, r1, #8
    1bba:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    1bbc:	3202      	adds	r2, #2
    1bbe:	62aa      	str	r2, [r5, #40]	; 0x28
    1bc0:	e7eb      	b.n	1b9a <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1bc2:	2301      	movs	r3, #1
    1bc4:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1bc6:	07b3      	lsls	r3, r6, #30
    1bc8:	d506      	bpl.n	1bd8 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1bca:	2302      	movs	r3, #2
    1bcc:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    1bce:	2200      	movs	r2, #0
    1bd0:	3331      	adds	r3, #49	; 0x31
    1bd2:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1bd4:	07fb      	lsls	r3, r7, #31
    1bd6:	d41a      	bmi.n	1c0e <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1bd8:	0773      	lsls	r3, r6, #29
    1bda:	d565      	bpl.n	1ca8 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    1bdc:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1bde:	b29b      	uxth	r3, r3
    1be0:	2b00      	cmp	r3, #0
    1be2:	d05f      	beq.n	1ca4 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1be4:	8b63      	ldrh	r3, [r4, #26]
    1be6:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1be8:	071a      	lsls	r2, r3, #28
    1bea:	d414      	bmi.n	1c16 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1bec:	223f      	movs	r2, #63	; 0x3f
    1bee:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1bf0:	2b00      	cmp	r3, #0
    1bf2:	d034      	beq.n	1c5e <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1bf4:	079a      	lsls	r2, r3, #30
    1bf6:	d511      	bpl.n	1c1c <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1bf8:	221a      	movs	r2, #26
    1bfa:	2332      	movs	r3, #50	; 0x32
    1bfc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1bfe:	3b30      	subs	r3, #48	; 0x30
    1c00:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1c02:	077b      	lsls	r3, r7, #29
    1c04:	d550      	bpl.n	1ca8 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1c06:	0028      	movs	r0, r5
    1c08:	696b      	ldr	r3, [r5, #20]
    1c0a:	4798      	blx	r3
    1c0c:	e04c      	b.n	1ca8 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1c0e:	0028      	movs	r0, r5
    1c10:	68eb      	ldr	r3, [r5, #12]
    1c12:	4798      	blx	r3
    1c14:	e7e0      	b.n	1bd8 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1c16:	2237      	movs	r2, #55	; 0x37
    1c18:	4013      	ands	r3, r2
    1c1a:	e7e9      	b.n	1bf0 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1c1c:	075a      	lsls	r2, r3, #29
    1c1e:	d505      	bpl.n	1c2c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    1c20:	221e      	movs	r2, #30
    1c22:	2332      	movs	r3, #50	; 0x32
    1c24:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1c26:	3b2e      	subs	r3, #46	; 0x2e
    1c28:	8363      	strh	r3, [r4, #26]
    1c2a:	e7ea      	b.n	1c02 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1c2c:	07da      	lsls	r2, r3, #31
    1c2e:	d505      	bpl.n	1c3c <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    1c30:	2213      	movs	r2, #19
    1c32:	2332      	movs	r3, #50	; 0x32
    1c34:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1c36:	3b31      	subs	r3, #49	; 0x31
    1c38:	8363      	strh	r3, [r4, #26]
    1c3a:	e7e2      	b.n	1c02 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1c3c:	06da      	lsls	r2, r3, #27
    1c3e:	d505      	bpl.n	1c4c <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    1c40:	2242      	movs	r2, #66	; 0x42
    1c42:	2332      	movs	r3, #50	; 0x32
    1c44:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1c46:	3b22      	subs	r3, #34	; 0x22
    1c48:	8363      	strh	r3, [r4, #26]
    1c4a:	e7da      	b.n	1c02 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1c4c:	2220      	movs	r2, #32
    1c4e:	421a      	tst	r2, r3
    1c50:	d0d7      	beq.n	1c02 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1c52:	3221      	adds	r2, #33	; 0x21
    1c54:	2332      	movs	r3, #50	; 0x32
    1c56:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1c58:	3b12      	subs	r3, #18
    1c5a:	8363      	strh	r3, [r4, #26]
    1c5c:	e7d1      	b.n	1c02 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1c5e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1c60:	05db      	lsls	r3, r3, #23
    1c62:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1c64:	b2da      	uxtb	r2, r3
    1c66:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1c68:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1c6a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1c6c:	1c51      	adds	r1, r2, #1
    1c6e:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1c70:	7969      	ldrb	r1, [r5, #5]
    1c72:	2901      	cmp	r1, #1
    1c74:	d010      	beq.n	1c98 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1c76:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1c78:	3b01      	subs	r3, #1
    1c7a:	b29b      	uxth	r3, r3
    1c7c:	85ab      	strh	r3, [r5, #44]	; 0x2c
    1c7e:	2b00      	cmp	r3, #0
    1c80:	d112      	bne.n	1ca8 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1c82:	3304      	adds	r3, #4
    1c84:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1c86:	2200      	movs	r2, #0
    1c88:	332e      	adds	r3, #46	; 0x2e
    1c8a:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1c8c:	07bb      	lsls	r3, r7, #30
    1c8e:	d50b      	bpl.n	1ca8 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1c90:	0028      	movs	r0, r5
    1c92:	692b      	ldr	r3, [r5, #16]
    1c94:	4798      	blx	r3
    1c96:	e007      	b.n	1ca8 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1c98:	0a1b      	lsrs	r3, r3, #8
    1c9a:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    1c9c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1c9e:	3301      	adds	r3, #1
    1ca0:	626b      	str	r3, [r5, #36]	; 0x24
    1ca2:	e7e8      	b.n	1c76 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1ca4:	2304      	movs	r3, #4
    1ca6:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1ca8:	06f3      	lsls	r3, r6, #27
    1caa:	d504      	bpl.n	1cb6 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1cac:	2310      	movs	r3, #16
    1cae:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1cb0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1cb2:	06fb      	lsls	r3, r7, #27
    1cb4:	d40e      	bmi.n	1cd4 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1cb6:	06b3      	lsls	r3, r6, #26
    1cb8:	d504      	bpl.n	1cc4 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1cba:	2320      	movs	r3, #32
    1cbc:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1cbe:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1cc0:	073b      	lsls	r3, r7, #28
    1cc2:	d40b      	bmi.n	1cdc <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1cc4:	0733      	lsls	r3, r6, #28
    1cc6:	d504      	bpl.n	1cd2 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1cc8:	2308      	movs	r3, #8
    1cca:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1ccc:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1cce:	06bb      	lsls	r3, r7, #26
    1cd0:	d408      	bmi.n	1ce4 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    1cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1cd4:	0028      	movs	r0, r5
    1cd6:	69eb      	ldr	r3, [r5, #28]
    1cd8:	4798      	blx	r3
    1cda:	e7ec      	b.n	1cb6 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1cdc:	0028      	movs	r0, r5
    1cde:	69ab      	ldr	r3, [r5, #24]
    1ce0:	4798      	blx	r3
    1ce2:	e7ef      	b.n	1cc4 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1ce4:	6a2b      	ldr	r3, [r5, #32]
    1ce6:	0028      	movs	r0, r5
    1ce8:	4798      	blx	r3
}
    1cea:	e7f2      	b.n	1cd2 <_usart_interrupt_handler+0x176>
    1cec:	200007ac 	.word	0x200007ac

00001cf0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1cf0:	b510      	push	{r4, lr}
	switch (clock_source) {
    1cf2:	2808      	cmp	r0, #8
    1cf4:	d803      	bhi.n	1cfe <system_clock_source_get_hz+0xe>
    1cf6:	0080      	lsls	r0, r0, #2
    1cf8:	4b1c      	ldr	r3, [pc, #112]	; (1d6c <system_clock_source_get_hz+0x7c>)
    1cfa:	581b      	ldr	r3, [r3, r0]
    1cfc:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1cfe:	2000      	movs	r0, #0
    1d00:	e032      	b.n	1d68 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    1d02:	4b1b      	ldr	r3, [pc, #108]	; (1d70 <system_clock_source_get_hz+0x80>)
    1d04:	6918      	ldr	r0, [r3, #16]
    1d06:	e02f      	b.n	1d68 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1d08:	4b1a      	ldr	r3, [pc, #104]	; (1d74 <system_clock_source_get_hz+0x84>)
    1d0a:	6a1b      	ldr	r3, [r3, #32]
    1d0c:	059b      	lsls	r3, r3, #22
    1d0e:	0f9b      	lsrs	r3, r3, #30
    1d10:	4819      	ldr	r0, [pc, #100]	; (1d78 <system_clock_source_get_hz+0x88>)
    1d12:	40d8      	lsrs	r0, r3
    1d14:	e028      	b.n	1d68 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    1d16:	4b16      	ldr	r3, [pc, #88]	; (1d70 <system_clock_source_get_hz+0x80>)
    1d18:	6958      	ldr	r0, [r3, #20]
    1d1a:	e025      	b.n	1d68 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1d1c:	4b14      	ldr	r3, [pc, #80]	; (1d70 <system_clock_source_get_hz+0x80>)
    1d1e:	681b      	ldr	r3, [r3, #0]
			return 0;
    1d20:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1d22:	079b      	lsls	r3, r3, #30
    1d24:	d520      	bpl.n	1d68 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1d26:	4913      	ldr	r1, [pc, #76]	; (1d74 <system_clock_source_get_hz+0x84>)
    1d28:	2210      	movs	r2, #16
    1d2a:	68cb      	ldr	r3, [r1, #12]
    1d2c:	421a      	tst	r2, r3
    1d2e:	d0fc      	beq.n	1d2a <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    1d30:	4b0f      	ldr	r3, [pc, #60]	; (1d70 <system_clock_source_get_hz+0x80>)
    1d32:	681a      	ldr	r2, [r3, #0]
    1d34:	2324      	movs	r3, #36	; 0x24
    1d36:	4013      	ands	r3, r2
    1d38:	2b04      	cmp	r3, #4
    1d3a:	d001      	beq.n	1d40 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    1d3c:	480f      	ldr	r0, [pc, #60]	; (1d7c <system_clock_source_get_hz+0x8c>)
    1d3e:	e013      	b.n	1d68 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1d40:	2000      	movs	r0, #0
    1d42:	4b0f      	ldr	r3, [pc, #60]	; (1d80 <system_clock_source_get_hz+0x90>)
    1d44:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1d46:	4b0a      	ldr	r3, [pc, #40]	; (1d70 <system_clock_source_get_hz+0x80>)
    1d48:	689b      	ldr	r3, [r3, #8]
    1d4a:	041b      	lsls	r3, r3, #16
    1d4c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1d4e:	4358      	muls	r0, r3
    1d50:	e00a      	b.n	1d68 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1d52:	2350      	movs	r3, #80	; 0x50
    1d54:	4a07      	ldr	r2, [pc, #28]	; (1d74 <system_clock_source_get_hz+0x84>)
    1d56:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1d58:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1d5a:	075b      	lsls	r3, r3, #29
    1d5c:	d504      	bpl.n	1d68 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    1d5e:	4b04      	ldr	r3, [pc, #16]	; (1d70 <system_clock_source_get_hz+0x80>)
    1d60:	68d8      	ldr	r0, [r3, #12]
    1d62:	e001      	b.n	1d68 <system_clock_source_get_hz+0x78>
		return 32768UL;
    1d64:	2080      	movs	r0, #128	; 0x80
    1d66:	0200      	lsls	r0, r0, #8
	}
}
    1d68:	bd10      	pop	{r4, pc}
    1d6a:	46c0      	nop			; (mov r8, r8)
    1d6c:	00004f90 	.word	0x00004f90
    1d70:	200006ac 	.word	0x200006ac
    1d74:	40000800 	.word	0x40000800
    1d78:	007a1200 	.word	0x007a1200
    1d7c:	02dc6c00 	.word	0x02dc6c00
    1d80:	00002245 	.word	0x00002245

00001d84 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1d84:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1d86:	490c      	ldr	r1, [pc, #48]	; (1db8 <system_clock_source_osc8m_set_config+0x34>)
    1d88:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1d8a:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1d8c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1d8e:	7840      	ldrb	r0, [r0, #1]
    1d90:	2201      	movs	r2, #1
    1d92:	4010      	ands	r0, r2
    1d94:	0180      	lsls	r0, r0, #6
    1d96:	2640      	movs	r6, #64	; 0x40
    1d98:	43b3      	bics	r3, r6
    1d9a:	4303      	orrs	r3, r0
    1d9c:	402a      	ands	r2, r5
    1d9e:	01d2      	lsls	r2, r2, #7
    1da0:	2080      	movs	r0, #128	; 0x80
    1da2:	4383      	bics	r3, r0
    1da4:	4313      	orrs	r3, r2
    1da6:	2203      	movs	r2, #3
    1da8:	4022      	ands	r2, r4
    1daa:	0212      	lsls	r2, r2, #8
    1dac:	4803      	ldr	r0, [pc, #12]	; (1dbc <system_clock_source_osc8m_set_config+0x38>)
    1dae:	4003      	ands	r3, r0
    1db0:	4313      	orrs	r3, r2
    1db2:	620b      	str	r3, [r1, #32]
}
    1db4:	bd70      	pop	{r4, r5, r6, pc}
    1db6:	46c0      	nop			; (mov r8, r8)
    1db8:	40000800 	.word	0x40000800
    1dbc:	fffffcff 	.word	0xfffffcff

00001dc0 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1dc0:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1dc2:	7a03      	ldrb	r3, [r0, #8]
    1dc4:	069b      	lsls	r3, r3, #26
    1dc6:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    1dc8:	8942      	ldrh	r2, [r0, #10]
    1dca:	0592      	lsls	r2, r2, #22
    1dcc:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1dce:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    1dd0:	4918      	ldr	r1, [pc, #96]	; (1e34 <system_clock_source_dfll_set_config+0x74>)
    1dd2:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    1dd4:	7983      	ldrb	r3, [r0, #6]
    1dd6:	79c2      	ldrb	r2, [r0, #7]
    1dd8:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    1dda:	8842      	ldrh	r2, [r0, #2]
    1ddc:	8884      	ldrh	r4, [r0, #4]
    1dde:	4322      	orrs	r2, r4
    1de0:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    1de2:	7842      	ldrb	r2, [r0, #1]
    1de4:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    1de6:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    1de8:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1dea:	7803      	ldrb	r3, [r0, #0]
    1dec:	2b04      	cmp	r3, #4
    1dee:	d011      	beq.n	1e14 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1df0:	2b20      	cmp	r3, #32
    1df2:	d10e      	bne.n	1e12 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1df4:	7b03      	ldrb	r3, [r0, #12]
    1df6:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1df8:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1dfa:	4313      	orrs	r3, r2
    1dfc:	89c2      	ldrh	r2, [r0, #14]
    1dfe:	0412      	lsls	r2, r2, #16
    1e00:	490d      	ldr	r1, [pc, #52]	; (1e38 <system_clock_source_dfll_set_config+0x78>)
    1e02:	400a      	ands	r2, r1
    1e04:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1e06:	4a0b      	ldr	r2, [pc, #44]	; (1e34 <system_clock_source_dfll_set_config+0x74>)
    1e08:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    1e0a:	6811      	ldr	r1, [r2, #0]
    1e0c:	4b0b      	ldr	r3, [pc, #44]	; (1e3c <system_clock_source_dfll_set_config+0x7c>)
    1e0e:	430b      	orrs	r3, r1
    1e10:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    1e12:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1e14:	7b03      	ldrb	r3, [r0, #12]
    1e16:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1e18:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1e1a:	4313      	orrs	r3, r2
    1e1c:	89c2      	ldrh	r2, [r0, #14]
    1e1e:	0412      	lsls	r2, r2, #16
    1e20:	4905      	ldr	r1, [pc, #20]	; (1e38 <system_clock_source_dfll_set_config+0x78>)
    1e22:	400a      	ands	r2, r1
    1e24:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1e26:	4a03      	ldr	r2, [pc, #12]	; (1e34 <system_clock_source_dfll_set_config+0x74>)
    1e28:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    1e2a:	6813      	ldr	r3, [r2, #0]
    1e2c:	2104      	movs	r1, #4
    1e2e:	430b      	orrs	r3, r1
    1e30:	6013      	str	r3, [r2, #0]
    1e32:	e7ee      	b.n	1e12 <system_clock_source_dfll_set_config+0x52>
    1e34:	200006ac 	.word	0x200006ac
    1e38:	03ff0000 	.word	0x03ff0000
    1e3c:	00000424 	.word	0x00000424

00001e40 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1e40:	2808      	cmp	r0, #8
    1e42:	d803      	bhi.n	1e4c <system_clock_source_enable+0xc>
    1e44:	0080      	lsls	r0, r0, #2
    1e46:	4b25      	ldr	r3, [pc, #148]	; (1edc <system_clock_source_enable+0x9c>)
    1e48:	581b      	ldr	r3, [r3, r0]
    1e4a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1e4c:	2017      	movs	r0, #23
    1e4e:	e044      	b.n	1eda <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1e50:	4a23      	ldr	r2, [pc, #140]	; (1ee0 <system_clock_source_enable+0xa0>)
    1e52:	6a13      	ldr	r3, [r2, #32]
    1e54:	2102      	movs	r1, #2
    1e56:	430b      	orrs	r3, r1
    1e58:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1e5a:	2000      	movs	r0, #0
    1e5c:	e03d      	b.n	1eda <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1e5e:	4a20      	ldr	r2, [pc, #128]	; (1ee0 <system_clock_source_enable+0xa0>)
    1e60:	6993      	ldr	r3, [r2, #24]
    1e62:	2102      	movs	r1, #2
    1e64:	430b      	orrs	r3, r1
    1e66:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1e68:	2000      	movs	r0, #0
		break;
    1e6a:	e036      	b.n	1eda <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1e6c:	4a1c      	ldr	r2, [pc, #112]	; (1ee0 <system_clock_source_enable+0xa0>)
    1e6e:	8a13      	ldrh	r3, [r2, #16]
    1e70:	2102      	movs	r1, #2
    1e72:	430b      	orrs	r3, r1
    1e74:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1e76:	2000      	movs	r0, #0
		break;
    1e78:	e02f      	b.n	1eda <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1e7a:	4a19      	ldr	r2, [pc, #100]	; (1ee0 <system_clock_source_enable+0xa0>)
    1e7c:	8a93      	ldrh	r3, [r2, #20]
    1e7e:	2102      	movs	r1, #2
    1e80:	430b      	orrs	r3, r1
    1e82:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1e84:	2000      	movs	r0, #0
		break;
    1e86:	e028      	b.n	1eda <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1e88:	4916      	ldr	r1, [pc, #88]	; (1ee4 <system_clock_source_enable+0xa4>)
    1e8a:	680b      	ldr	r3, [r1, #0]
    1e8c:	2202      	movs	r2, #2
    1e8e:	4313      	orrs	r3, r2
    1e90:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1e92:	4b13      	ldr	r3, [pc, #76]	; (1ee0 <system_clock_source_enable+0xa0>)
    1e94:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1e96:	0019      	movs	r1, r3
    1e98:	320e      	adds	r2, #14
    1e9a:	68cb      	ldr	r3, [r1, #12]
    1e9c:	421a      	tst	r2, r3
    1e9e:	d0fc      	beq.n	1e9a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1ea0:	4a10      	ldr	r2, [pc, #64]	; (1ee4 <system_clock_source_enable+0xa4>)
    1ea2:	6891      	ldr	r1, [r2, #8]
    1ea4:	4b0e      	ldr	r3, [pc, #56]	; (1ee0 <system_clock_source_enable+0xa0>)
    1ea6:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1ea8:	6852      	ldr	r2, [r2, #4]
    1eaa:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1eac:	2200      	movs	r2, #0
    1eae:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1eb0:	0019      	movs	r1, r3
    1eb2:	3210      	adds	r2, #16
    1eb4:	68cb      	ldr	r3, [r1, #12]
    1eb6:	421a      	tst	r2, r3
    1eb8:	d0fc      	beq.n	1eb4 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1eba:	4b0a      	ldr	r3, [pc, #40]	; (1ee4 <system_clock_source_enable+0xa4>)
    1ebc:	681b      	ldr	r3, [r3, #0]
    1ebe:	b29b      	uxth	r3, r3
    1ec0:	4a07      	ldr	r2, [pc, #28]	; (1ee0 <system_clock_source_enable+0xa0>)
    1ec2:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1ec4:	2000      	movs	r0, #0
    1ec6:	e008      	b.n	1eda <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1ec8:	4905      	ldr	r1, [pc, #20]	; (1ee0 <system_clock_source_enable+0xa0>)
    1eca:	2244      	movs	r2, #68	; 0x44
    1ecc:	5c8b      	ldrb	r3, [r1, r2]
    1ece:	2002      	movs	r0, #2
    1ed0:	4303      	orrs	r3, r0
    1ed2:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1ed4:	2000      	movs	r0, #0
		break;
    1ed6:	e000      	b.n	1eda <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1ed8:	2000      	movs	r0, #0
}
    1eda:	4770      	bx	lr
    1edc:	00004fb4 	.word	0x00004fb4
    1ee0:	40000800 	.word	0x40000800
    1ee4:	200006ac 	.word	0x200006ac

00001ee8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1eea:	b08b      	sub	sp, #44	; 0x2c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1eec:	22c2      	movs	r2, #194	; 0xc2
    1eee:	00d2      	lsls	r2, r2, #3
    1ef0:	4b32      	ldr	r3, [pc, #200]	; (1fbc <system_clock_init+0xd4>)
    1ef2:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1ef4:	4a32      	ldr	r2, [pc, #200]	; (1fc0 <system_clock_init+0xd8>)
    1ef6:	6853      	ldr	r3, [r2, #4]
    1ef8:	211e      	movs	r1, #30
    1efa:	438b      	bics	r3, r1
    1efc:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1efe:	2201      	movs	r2, #1
    1f00:	ab01      	add	r3, sp, #4
    1f02:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1f04:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1f06:	4d2f      	ldr	r5, [pc, #188]	; (1fc4 <system_clock_init+0xdc>)
    1f08:	b2e0      	uxtb	r0, r4
    1f0a:	a901      	add	r1, sp, #4
    1f0c:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1f0e:	3401      	adds	r4, #1
    1f10:	2c25      	cmp	r4, #37	; 0x25
    1f12:	d1f9      	bne.n	1f08 <system_clock_init+0x20>
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1f14:	ab05      	add	r3, sp, #20
    1f16:	2200      	movs	r2, #0
    1f18:	2100      	movs	r1, #0
    1f1a:	8059      	strh	r1, [r3, #2]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1f1c:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1f1e:	71da      	strb	r2, [r3, #7]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1f20:	3120      	adds	r1, #32
    1f22:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1f24:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1f26:	4b28      	ldr	r3, [pc, #160]	; (1fc8 <system_clock_init+0xe0>)
    1f28:	681b      	ldr	r3, [r3, #0]
    1f2a:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1f2c:	2b3f      	cmp	r3, #63	; 0x3f
    1f2e:	d043      	beq.n	1fb8 <system_clock_init+0xd0>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    1f30:	a805      	add	r0, sp, #20
    1f32:	7203      	strb	r3, [r0, #8]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1f34:	2607      	movs	r6, #7
    1f36:	7306      	strb	r6, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_max_step   = 10;
    1f38:	230a      	movs	r3, #10
    1f3a:	81c3      	strh	r3, [r0, #14]
		dfll_conf.fine_value   = 0x1ff;
    1f3c:	4b23      	ldr	r3, [pc, #140]	; (1fcc <system_clock_init+0xe4>)
    1f3e:	8143      	strh	r3, [r0, #10]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    1f40:	3bff      	subs	r3, #255	; 0xff
    1f42:	8083      	strh	r3, [r0, #4]

		dfll_conf.multiply_factor = 48000;
    1f44:	4b22      	ldr	r3, [pc, #136]	; (1fd0 <system_clock_init+0xe8>)
    1f46:	8203      	strh	r3, [r0, #16]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1f48:	4b22      	ldr	r3, [pc, #136]	; (1fd4 <system_clock_init+0xec>)
    1f4a:	4798      	blx	r3
	config->run_in_standby  = false;
    1f4c:	a804      	add	r0, sp, #16
    1f4e:	2400      	movs	r4, #0
    1f50:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    1f52:	2701      	movs	r7, #1
    1f54:	7087      	strb	r7, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1f56:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1f58:	4b1f      	ldr	r3, [pc, #124]	; (1fd8 <system_clock_init+0xf0>)
    1f5a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1f5c:	2006      	movs	r0, #6
    1f5e:	4d1f      	ldr	r5, [pc, #124]	; (1fdc <system_clock_init+0xf4>)
    1f60:	47a8      	blx	r5


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1f62:	4b1f      	ldr	r3, [pc, #124]	; (1fe0 <system_clock_init+0xf8>)
    1f64:	4798      	blx	r3
	config->division_factor    = 1;
    1f66:	a901      	add	r1, sp, #4
    1f68:	604f      	str	r7, [r1, #4]
	config->high_when_disabled = false;
    1f6a:	704c      	strb	r4, [r1, #1]
	config->run_in_standby     = false;
    1f6c:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    1f6e:	724c      	strb	r4, [r1, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1f70:	700e      	strb	r6, [r1, #0]
    1f72:	2003      	movs	r0, #3
    1f74:	4b1b      	ldr	r3, [pc, #108]	; (1fe4 <system_clock_init+0xfc>)
    1f76:	4798      	blx	r3
    1f78:	2003      	movs	r0, #3
    1f7a:	4b1b      	ldr	r3, [pc, #108]	; (1fe8 <system_clock_init+0x100>)
    1f7c:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1f7e:	2007      	movs	r0, #7
    1f80:	47a8      	blx	r5
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1f82:	490e      	ldr	r1, [pc, #56]	; (1fbc <system_clock_init+0xd4>)
    1f84:	2210      	movs	r2, #16
    1f86:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1f88:	421a      	tst	r2, r3
    1f8a:	d0fc      	beq.n	1f86 <system_clock_init+0x9e>
	PM->CPUSEL.reg = (uint32_t)divider;
    1f8c:	4a17      	ldr	r2, [pc, #92]	; (1fec <system_clock_init+0x104>)
    1f8e:	2300      	movs	r3, #0
    1f90:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1f92:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1f94:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1f96:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    1f98:	a901      	add	r1, sp, #4
    1f9a:	2201      	movs	r2, #1
    1f9c:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    1f9e:	704b      	strb	r3, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1fa0:	3205      	adds	r2, #5
    1fa2:	700a      	strb	r2, [r1, #0]
	config->run_in_standby     = false;
    1fa4:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1fa6:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1fa8:	2000      	movs	r0, #0
    1faa:	4b0e      	ldr	r3, [pc, #56]	; (1fe4 <system_clock_init+0xfc>)
    1fac:	4798      	blx	r3
    1fae:	2000      	movs	r0, #0
    1fb0:	4b0d      	ldr	r3, [pc, #52]	; (1fe8 <system_clock_init+0x100>)
    1fb2:	4798      	blx	r3
#endif
}
    1fb4:	b00b      	add	sp, #44	; 0x2c
    1fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    1fb8:	3b20      	subs	r3, #32
    1fba:	e7b9      	b.n	1f30 <system_clock_init+0x48>
    1fbc:	40000800 	.word	0x40000800
    1fc0:	41004000 	.word	0x41004000
    1fc4:	00002229 	.word	0x00002229
    1fc8:	00806024 	.word	0x00806024
    1fcc:	000001ff 	.word	0x000001ff
    1fd0:	ffffbb80 	.word	0xffffbb80
    1fd4:	00001dc1 	.word	0x00001dc1
    1fd8:	00001d85 	.word	0x00001d85
    1fdc:	00001e41 	.word	0x00001e41
    1fe0:	00001ff1 	.word	0x00001ff1
    1fe4:	00002015 	.word	0x00002015
    1fe8:	000020cd 	.word	0x000020cd
    1fec:	40000400 	.word	0x40000400

00001ff0 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1ff0:	4a06      	ldr	r2, [pc, #24]	; (200c <system_gclk_init+0x1c>)
    1ff2:	6993      	ldr	r3, [r2, #24]
    1ff4:	2108      	movs	r1, #8
    1ff6:	430b      	orrs	r3, r1
    1ff8:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1ffa:	2201      	movs	r2, #1
    1ffc:	4b04      	ldr	r3, [pc, #16]	; (2010 <system_gclk_init+0x20>)
    1ffe:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2000:	0019      	movs	r1, r3
    2002:	780b      	ldrb	r3, [r1, #0]
    2004:	4213      	tst	r3, r2
    2006:	d1fc      	bne.n	2002 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2008:	4770      	bx	lr
    200a:	46c0      	nop			; (mov r8, r8)
    200c:	40000400 	.word	0x40000400
    2010:	40000c00 	.word	0x40000c00

00002014 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2014:	b570      	push	{r4, r5, r6, lr}
    2016:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2018:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    201a:	780d      	ldrb	r5, [r1, #0]
    201c:	022d      	lsls	r5, r5, #8
    201e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2020:	784b      	ldrb	r3, [r1, #1]
    2022:	2b00      	cmp	r3, #0
    2024:	d002      	beq.n	202c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2026:	2380      	movs	r3, #128	; 0x80
    2028:	02db      	lsls	r3, r3, #11
    202a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    202c:	7a4b      	ldrb	r3, [r1, #9]
    202e:	2b00      	cmp	r3, #0
    2030:	d002      	beq.n	2038 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2032:	2380      	movs	r3, #128	; 0x80
    2034:	031b      	lsls	r3, r3, #12
    2036:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2038:	6848      	ldr	r0, [r1, #4]
    203a:	2801      	cmp	r0, #1
    203c:	d910      	bls.n	2060 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    203e:	1e43      	subs	r3, r0, #1
    2040:	4218      	tst	r0, r3
    2042:	d134      	bne.n	20ae <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2044:	2802      	cmp	r0, #2
    2046:	d930      	bls.n	20aa <system_gclk_gen_set_config+0x96>
    2048:	2302      	movs	r3, #2
    204a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    204c:	3201      	adds	r2, #1
						mask <<= 1) {
    204e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    2050:	4298      	cmp	r0, r3
    2052:	d8fb      	bhi.n	204c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2054:	0212      	lsls	r2, r2, #8
    2056:	4332      	orrs	r2, r6
    2058:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    205a:	2380      	movs	r3, #128	; 0x80
    205c:	035b      	lsls	r3, r3, #13
    205e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2060:	7a0b      	ldrb	r3, [r1, #8]
    2062:	2b00      	cmp	r3, #0
    2064:	d002      	beq.n	206c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2066:	2380      	movs	r3, #128	; 0x80
    2068:	039b      	lsls	r3, r3, #14
    206a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    206c:	4a13      	ldr	r2, [pc, #76]	; (20bc <system_gclk_gen_set_config+0xa8>)
    206e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    2070:	b25b      	sxtb	r3, r3
    2072:	2b00      	cmp	r3, #0
    2074:	dbfb      	blt.n	206e <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    2076:	4b12      	ldr	r3, [pc, #72]	; (20c0 <system_gclk_gen_set_config+0xac>)
    2078:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    207a:	4b12      	ldr	r3, [pc, #72]	; (20c4 <system_gclk_gen_set_config+0xb0>)
    207c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    207e:	4a0f      	ldr	r2, [pc, #60]	; (20bc <system_gclk_gen_set_config+0xa8>)
    2080:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    2082:	b25b      	sxtb	r3, r3
    2084:	2b00      	cmp	r3, #0
    2086:	dbfb      	blt.n	2080 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2088:	4b0c      	ldr	r3, [pc, #48]	; (20bc <system_gclk_gen_set_config+0xa8>)
    208a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    208c:	001a      	movs	r2, r3
    208e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    2090:	b25b      	sxtb	r3, r3
    2092:	2b00      	cmp	r3, #0
    2094:	dbfb      	blt.n	208e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2096:	4a09      	ldr	r2, [pc, #36]	; (20bc <system_gclk_gen_set_config+0xa8>)
    2098:	6853      	ldr	r3, [r2, #4]
    209a:	2180      	movs	r1, #128	; 0x80
    209c:	0249      	lsls	r1, r1, #9
    209e:	400b      	ands	r3, r1
    20a0:	431d      	orrs	r5, r3
    20a2:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    20a4:	4b08      	ldr	r3, [pc, #32]	; (20c8 <system_gclk_gen_set_config+0xb4>)
    20a6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    20a8:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    20aa:	2200      	movs	r2, #0
    20ac:	e7d2      	b.n	2054 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    20ae:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    20b0:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    20b2:	2380      	movs	r3, #128	; 0x80
    20b4:	029b      	lsls	r3, r3, #10
    20b6:	431d      	orrs	r5, r3
    20b8:	e7d2      	b.n	2060 <system_gclk_gen_set_config+0x4c>
    20ba:	46c0      	nop			; (mov r8, r8)
    20bc:	40000c00 	.word	0x40000c00
    20c0:	00001195 	.word	0x00001195
    20c4:	40000c08 	.word	0x40000c08
    20c8:	000011d5 	.word	0x000011d5

000020cc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    20cc:	b510      	push	{r4, lr}
    20ce:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    20d0:	4a0b      	ldr	r2, [pc, #44]	; (2100 <system_gclk_gen_enable+0x34>)
    20d2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    20d4:	b25b      	sxtb	r3, r3
    20d6:	2b00      	cmp	r3, #0
    20d8:	dbfb      	blt.n	20d2 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    20da:	4b0a      	ldr	r3, [pc, #40]	; (2104 <system_gclk_gen_enable+0x38>)
    20dc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    20de:	4b0a      	ldr	r3, [pc, #40]	; (2108 <system_gclk_gen_enable+0x3c>)
    20e0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    20e2:	4a07      	ldr	r2, [pc, #28]	; (2100 <system_gclk_gen_enable+0x34>)
    20e4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    20e6:	b25b      	sxtb	r3, r3
    20e8:	2b00      	cmp	r3, #0
    20ea:	dbfb      	blt.n	20e4 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    20ec:	4a04      	ldr	r2, [pc, #16]	; (2100 <system_gclk_gen_enable+0x34>)
    20ee:	6851      	ldr	r1, [r2, #4]
    20f0:	2380      	movs	r3, #128	; 0x80
    20f2:	025b      	lsls	r3, r3, #9
    20f4:	430b      	orrs	r3, r1
    20f6:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    20f8:	4b04      	ldr	r3, [pc, #16]	; (210c <system_gclk_gen_enable+0x40>)
    20fa:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    20fc:	bd10      	pop	{r4, pc}
    20fe:	46c0      	nop			; (mov r8, r8)
    2100:	40000c00 	.word	0x40000c00
    2104:	00001195 	.word	0x00001195
    2108:	40000c04 	.word	0x40000c04
    210c:	000011d5 	.word	0x000011d5

00002110 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2110:	b570      	push	{r4, r5, r6, lr}
    2112:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2114:	4a1a      	ldr	r2, [pc, #104]	; (2180 <system_gclk_gen_get_hz+0x70>)
    2116:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2118:	b25b      	sxtb	r3, r3
    211a:	2b00      	cmp	r3, #0
    211c:	dbfb      	blt.n	2116 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    211e:	4b19      	ldr	r3, [pc, #100]	; (2184 <system_gclk_gen_get_hz+0x74>)
    2120:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2122:	4b19      	ldr	r3, [pc, #100]	; (2188 <system_gclk_gen_get_hz+0x78>)
    2124:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2126:	4a16      	ldr	r2, [pc, #88]	; (2180 <system_gclk_gen_get_hz+0x70>)
    2128:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    212a:	b25b      	sxtb	r3, r3
    212c:	2b00      	cmp	r3, #0
    212e:	dbfb      	blt.n	2128 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2130:	4e13      	ldr	r6, [pc, #76]	; (2180 <system_gclk_gen_get_hz+0x70>)
    2132:	6870      	ldr	r0, [r6, #4]
    2134:	04c0      	lsls	r0, r0, #19
    2136:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2138:	4b14      	ldr	r3, [pc, #80]	; (218c <system_gclk_gen_get_hz+0x7c>)
    213a:	4798      	blx	r3
    213c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    213e:	4b12      	ldr	r3, [pc, #72]	; (2188 <system_gclk_gen_get_hz+0x78>)
    2140:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    2142:	6876      	ldr	r6, [r6, #4]
    2144:	02f6      	lsls	r6, r6, #11
    2146:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2148:	4b11      	ldr	r3, [pc, #68]	; (2190 <system_gclk_gen_get_hz+0x80>)
    214a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    214c:	4a0c      	ldr	r2, [pc, #48]	; (2180 <system_gclk_gen_get_hz+0x70>)
    214e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2150:	b25b      	sxtb	r3, r3
    2152:	2b00      	cmp	r3, #0
    2154:	dbfb      	blt.n	214e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    2156:	4b0a      	ldr	r3, [pc, #40]	; (2180 <system_gclk_gen_get_hz+0x70>)
    2158:	689c      	ldr	r4, [r3, #8]
    215a:	0224      	lsls	r4, r4, #8
    215c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    215e:	4b0d      	ldr	r3, [pc, #52]	; (2194 <system_gclk_gen_get_hz+0x84>)
    2160:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2162:	2e00      	cmp	r6, #0
    2164:	d107      	bne.n	2176 <system_gclk_gen_get_hz+0x66>
    2166:	2c01      	cmp	r4, #1
    2168:	d907      	bls.n	217a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    216a:	0021      	movs	r1, r4
    216c:	0028      	movs	r0, r5
    216e:	4b0a      	ldr	r3, [pc, #40]	; (2198 <system_gclk_gen_get_hz+0x88>)
    2170:	4798      	blx	r3
    2172:	0005      	movs	r5, r0
    2174:	e001      	b.n	217a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    2176:	3401      	adds	r4, #1
    2178:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    217a:	0028      	movs	r0, r5
    217c:	bd70      	pop	{r4, r5, r6, pc}
    217e:	46c0      	nop			; (mov r8, r8)
    2180:	40000c00 	.word	0x40000c00
    2184:	00001195 	.word	0x00001195
    2188:	40000c04 	.word	0x40000c04
    218c:	00001cf1 	.word	0x00001cf1
    2190:	40000c08 	.word	0x40000c08
    2194:	000011d5 	.word	0x000011d5
    2198:	00004b8d 	.word	0x00004b8d

0000219c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    219c:	b510      	push	{r4, lr}
    219e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    21a0:	4b06      	ldr	r3, [pc, #24]	; (21bc <system_gclk_chan_enable+0x20>)
    21a2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    21a4:	4b06      	ldr	r3, [pc, #24]	; (21c0 <system_gclk_chan_enable+0x24>)
    21a6:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    21a8:	4a06      	ldr	r2, [pc, #24]	; (21c4 <system_gclk_chan_enable+0x28>)
    21aa:	8853      	ldrh	r3, [r2, #2]
    21ac:	2180      	movs	r1, #128	; 0x80
    21ae:	01c9      	lsls	r1, r1, #7
    21b0:	430b      	orrs	r3, r1
    21b2:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    21b4:	4b04      	ldr	r3, [pc, #16]	; (21c8 <system_gclk_chan_enable+0x2c>)
    21b6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    21b8:	bd10      	pop	{r4, pc}
    21ba:	46c0      	nop			; (mov r8, r8)
    21bc:	00001195 	.word	0x00001195
    21c0:	40000c02 	.word	0x40000c02
    21c4:	40000c00 	.word	0x40000c00
    21c8:	000011d5 	.word	0x000011d5

000021cc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    21cc:	b510      	push	{r4, lr}
    21ce:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    21d0:	4b0f      	ldr	r3, [pc, #60]	; (2210 <system_gclk_chan_disable+0x44>)
    21d2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    21d4:	4b0f      	ldr	r3, [pc, #60]	; (2214 <system_gclk_chan_disable+0x48>)
    21d6:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    21d8:	4a0f      	ldr	r2, [pc, #60]	; (2218 <system_gclk_chan_disable+0x4c>)
    21da:	8853      	ldrh	r3, [r2, #2]
    21dc:	051b      	lsls	r3, r3, #20
    21de:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    21e0:	8853      	ldrh	r3, [r2, #2]
    21e2:	490e      	ldr	r1, [pc, #56]	; (221c <system_gclk_chan_disable+0x50>)
    21e4:	400b      	ands	r3, r1
    21e6:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    21e8:	8853      	ldrh	r3, [r2, #2]
    21ea:	490d      	ldr	r1, [pc, #52]	; (2220 <system_gclk_chan_disable+0x54>)
    21ec:	400b      	ands	r3, r1
    21ee:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    21f0:	0011      	movs	r1, r2
    21f2:	2280      	movs	r2, #128	; 0x80
    21f4:	01d2      	lsls	r2, r2, #7
    21f6:	884b      	ldrh	r3, [r1, #2]
    21f8:	4213      	tst	r3, r2
    21fa:	d1fc      	bne.n	21f6 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    21fc:	4906      	ldr	r1, [pc, #24]	; (2218 <system_gclk_chan_disable+0x4c>)
    21fe:	884a      	ldrh	r2, [r1, #2]
    2200:	0203      	lsls	r3, r0, #8
    2202:	4806      	ldr	r0, [pc, #24]	; (221c <system_gclk_chan_disable+0x50>)
    2204:	4002      	ands	r2, r0
    2206:	4313      	orrs	r3, r2
    2208:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    220a:	4b06      	ldr	r3, [pc, #24]	; (2224 <system_gclk_chan_disable+0x58>)
    220c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    220e:	bd10      	pop	{r4, pc}
    2210:	00001195 	.word	0x00001195
    2214:	40000c02 	.word	0x40000c02
    2218:	40000c00 	.word	0x40000c00
    221c:	fffff0ff 	.word	0xfffff0ff
    2220:	ffffbfff 	.word	0xffffbfff
    2224:	000011d5 	.word	0x000011d5

00002228 <system_gclk_chan_set_config>:
{
    2228:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    222a:	780c      	ldrb	r4, [r1, #0]
    222c:	0224      	lsls	r4, r4, #8
    222e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    2230:	4b02      	ldr	r3, [pc, #8]	; (223c <system_gclk_chan_set_config+0x14>)
    2232:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2234:	b2a4      	uxth	r4, r4
    2236:	4b02      	ldr	r3, [pc, #8]	; (2240 <system_gclk_chan_set_config+0x18>)
    2238:	805c      	strh	r4, [r3, #2]
}
    223a:	bd10      	pop	{r4, pc}
    223c:	000021cd 	.word	0x000021cd
    2240:	40000c00 	.word	0x40000c00

00002244 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2244:	b510      	push	{r4, lr}
    2246:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2248:	4b06      	ldr	r3, [pc, #24]	; (2264 <system_gclk_chan_get_hz+0x20>)
    224a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    224c:	4b06      	ldr	r3, [pc, #24]	; (2268 <system_gclk_chan_get_hz+0x24>)
    224e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2250:	4b06      	ldr	r3, [pc, #24]	; (226c <system_gclk_chan_get_hz+0x28>)
    2252:	885c      	ldrh	r4, [r3, #2]
    2254:	0524      	lsls	r4, r4, #20
    2256:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    2258:	4b05      	ldr	r3, [pc, #20]	; (2270 <system_gclk_chan_get_hz+0x2c>)
    225a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    225c:	0020      	movs	r0, r4
    225e:	4b05      	ldr	r3, [pc, #20]	; (2274 <system_gclk_chan_get_hz+0x30>)
    2260:	4798      	blx	r3
}
    2262:	bd10      	pop	{r4, pc}
    2264:	00001195 	.word	0x00001195
    2268:	40000c02 	.word	0x40000c02
    226c:	40000c00 	.word	0x40000c00
    2270:	000011d5 	.word	0x000011d5
    2274:	00002111 	.word	0x00002111

00002278 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2278:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    227a:	78d3      	ldrb	r3, [r2, #3]
    227c:	2b00      	cmp	r3, #0
    227e:	d135      	bne.n	22ec <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2280:	7813      	ldrb	r3, [r2, #0]
    2282:	2b80      	cmp	r3, #128	; 0x80
    2284:	d029      	beq.n	22da <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2286:	061b      	lsls	r3, r3, #24
    2288:	2480      	movs	r4, #128	; 0x80
    228a:	0264      	lsls	r4, r4, #9
    228c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    228e:	7854      	ldrb	r4, [r2, #1]
    2290:	2502      	movs	r5, #2
    2292:	43ac      	bics	r4, r5
    2294:	d106      	bne.n	22a4 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2296:	7894      	ldrb	r4, [r2, #2]
    2298:	2c00      	cmp	r4, #0
    229a:	d120      	bne.n	22de <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    229c:	2480      	movs	r4, #128	; 0x80
    229e:	02a4      	lsls	r4, r4, #10
    22a0:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    22a2:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    22a4:	7854      	ldrb	r4, [r2, #1]
    22a6:	3c01      	subs	r4, #1
    22a8:	2c01      	cmp	r4, #1
    22aa:	d91c      	bls.n	22e6 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    22ac:	040d      	lsls	r5, r1, #16
    22ae:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    22b0:	24a0      	movs	r4, #160	; 0xa0
    22b2:	05e4      	lsls	r4, r4, #23
    22b4:	432c      	orrs	r4, r5
    22b6:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    22b8:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    22ba:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    22bc:	24d0      	movs	r4, #208	; 0xd0
    22be:	0624      	lsls	r4, r4, #24
    22c0:	432c      	orrs	r4, r5
    22c2:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    22c4:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    22c6:	78d4      	ldrb	r4, [r2, #3]
    22c8:	2c00      	cmp	r4, #0
    22ca:	d122      	bne.n	2312 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    22cc:	035b      	lsls	r3, r3, #13
    22ce:	d51c      	bpl.n	230a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    22d0:	7893      	ldrb	r3, [r2, #2]
    22d2:	2b01      	cmp	r3, #1
    22d4:	d01e      	beq.n	2314 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    22d6:	6141      	str	r1, [r0, #20]
    22d8:	e017      	b.n	230a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    22da:	2300      	movs	r3, #0
    22dc:	e7d7      	b.n	228e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    22de:	24c0      	movs	r4, #192	; 0xc0
    22e0:	02e4      	lsls	r4, r4, #11
    22e2:	4323      	orrs	r3, r4
    22e4:	e7dd      	b.n	22a2 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    22e6:	4c0d      	ldr	r4, [pc, #52]	; (231c <_system_pinmux_config+0xa4>)
    22e8:	4023      	ands	r3, r4
    22ea:	e7df      	b.n	22ac <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    22ec:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    22ee:	040c      	lsls	r4, r1, #16
    22f0:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    22f2:	23a0      	movs	r3, #160	; 0xa0
    22f4:	05db      	lsls	r3, r3, #23
    22f6:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    22f8:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    22fa:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    22fc:	23d0      	movs	r3, #208	; 0xd0
    22fe:	061b      	lsls	r3, r3, #24
    2300:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2302:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2304:	78d3      	ldrb	r3, [r2, #3]
    2306:	2b00      	cmp	r3, #0
    2308:	d103      	bne.n	2312 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    230a:	7853      	ldrb	r3, [r2, #1]
    230c:	3b01      	subs	r3, #1
    230e:	2b01      	cmp	r3, #1
    2310:	d902      	bls.n	2318 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    2312:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    2314:	6181      	str	r1, [r0, #24]
    2316:	e7f8      	b.n	230a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    2318:	6081      	str	r1, [r0, #8]
}
    231a:	e7fa      	b.n	2312 <_system_pinmux_config+0x9a>
    231c:	fffbffff 	.word	0xfffbffff

00002320 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2320:	b510      	push	{r4, lr}
    2322:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2324:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2326:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2328:	2900      	cmp	r1, #0
    232a:	d104      	bne.n	2336 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    232c:	0943      	lsrs	r3, r0, #5
    232e:	01db      	lsls	r3, r3, #7
    2330:	4905      	ldr	r1, [pc, #20]	; (2348 <system_pinmux_pin_set_config+0x28>)
    2332:	468c      	mov	ip, r1
    2334:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2336:	241f      	movs	r4, #31
    2338:	4020      	ands	r0, r4
    233a:	2101      	movs	r1, #1
    233c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    233e:	0018      	movs	r0, r3
    2340:	4b02      	ldr	r3, [pc, #8]	; (234c <system_pinmux_pin_set_config+0x2c>)
    2342:	4798      	blx	r3
}
    2344:	bd10      	pop	{r4, pc}
    2346:	46c0      	nop			; (mov r8, r8)
    2348:	41004400 	.word	0x41004400
    234c:	00002279 	.word	0x00002279

00002350 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2350:	4770      	bx	lr
	...

00002354 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2354:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2356:	4b05      	ldr	r3, [pc, #20]	; (236c <system_init+0x18>)
    2358:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    235a:	4b05      	ldr	r3, [pc, #20]	; (2370 <system_init+0x1c>)
    235c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    235e:	4b05      	ldr	r3, [pc, #20]	; (2374 <system_init+0x20>)
    2360:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2362:	4b05      	ldr	r3, [pc, #20]	; (2378 <system_init+0x24>)
    2364:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2366:	4b05      	ldr	r3, [pc, #20]	; (237c <system_init+0x28>)
    2368:	4798      	blx	r3
}
    236a:	bd10      	pop	{r4, pc}
    236c:	00001ee9 	.word	0x00001ee9
    2370:	00001205 	.word	0x00001205
    2374:	00002351 	.word	0x00002351
    2378:	000012a9 	.word	0x000012a9
    237c:	00002351 	.word	0x00002351

00002380 <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    2380:	b510      	push	{r4, lr}
    2382:	b084      	sub	sp, #16
	enum sleepmgr_mode sleep_mode[] = {
    2384:	ab03      	add	r3, sp, #12
    2386:	2200      	movs	r2, #0
    2388:	701a      	strb	r2, [r3, #0]
    238a:	3203      	adds	r2, #3
    238c:	705a      	strb	r2, [r3, #1]
    238e:	3a01      	subs	r2, #1
    2390:	709a      	strb	r2, [r3, #2]
    2392:	3a01      	subs	r2, #1
    2394:	70da      	strb	r2, [r3, #3]
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    2396:	4b27      	ldr	r3, [pc, #156]	; (2434 <udd_sleep_mode+0xb4>)
    2398:	781b      	ldrb	r3, [r3, #0]
    239a:	4283      	cmp	r3, r0
    239c:	d007      	beq.n	23ae <udd_sleep_mode+0x2e>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    239e:	2800      	cmp	r0, #0
    23a0:	d107      	bne.n	23b2 <udd_sleep_mode+0x32>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
	}
	if (udd_state != UDD_STATE_OFF) {
    23a2:	4b24      	ldr	r3, [pc, #144]	; (2434 <udd_sleep_mode+0xb4>)
    23a4:	781b      	ldrb	r3, [r3, #0]
    23a6:	2b00      	cmp	r3, #0
    23a8:	d123      	bne.n	23f2 <udd_sleep_mode+0x72>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
	}
	udd_state = new_state;
    23aa:	4b22      	ldr	r3, [pc, #136]	; (2434 <udd_sleep_mode+0xb4>)
    23ac:	7018      	strb	r0, [r3, #0]
}
    23ae:	b004      	add	sp, #16
    23b0:	bd10      	pop	{r4, pc}
		sleepmgr_lock_mode(sleep_mode[new_state]);
    23b2:	ab03      	add	r3, sp, #12
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    23b4:	5c1b      	ldrb	r3, [r3, r0]
    23b6:	4a20      	ldr	r2, [pc, #128]	; (2438 <udd_sleep_mode+0xb8>)
    23b8:	5cd2      	ldrb	r2, [r2, r3]
    23ba:	2aff      	cmp	r2, #255	; 0xff
    23bc:	d100      	bne.n	23c0 <udd_sleep_mode+0x40>
    23be:	e7fe      	b.n	23be <udd_sleep_mode+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    23c0:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    23c4:	4251      	negs	r1, r2
    23c6:	414a      	adcs	r2, r1
    23c8:	9201      	str	r2, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    23ca:	b672      	cpsid	i
    23cc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    23d0:	2100      	movs	r1, #0
    23d2:	4a1a      	ldr	r2, [pc, #104]	; (243c <udd_sleep_mode+0xbc>)
    23d4:	7011      	strb	r1, [r2, #0]
	return flags;
    23d6:	9c01      	ldr	r4, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    23d8:	4917      	ldr	r1, [pc, #92]	; (2438 <udd_sleep_mode+0xb8>)
    23da:	5cca      	ldrb	r2, [r1, r3]
    23dc:	3201      	adds	r2, #1
    23de:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    23e0:	2c00      	cmp	r4, #0
    23e2:	d0de      	beq.n	23a2 <udd_sleep_mode+0x22>
		cpu_irq_enable();
    23e4:	2201      	movs	r2, #1
    23e6:	4b15      	ldr	r3, [pc, #84]	; (243c <udd_sleep_mode+0xbc>)
    23e8:	701a      	strb	r2, [r3, #0]
    23ea:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    23ee:	b662      	cpsie	i
    23f0:	e7d7      	b.n	23a2 <udd_sleep_mode+0x22>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    23f2:	aa03      	add	r2, sp, #12
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    23f4:	5cd3      	ldrb	r3, [r2, r3]
    23f6:	4a10      	ldr	r2, [pc, #64]	; (2438 <udd_sleep_mode+0xb8>)
    23f8:	5cd2      	ldrb	r2, [r2, r3]
    23fa:	2a00      	cmp	r2, #0
    23fc:	d100      	bne.n	2400 <udd_sleep_mode+0x80>
    23fe:	e7fe      	b.n	23fe <udd_sleep_mode+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2400:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2404:	4251      	negs	r1, r2
    2406:	414a      	adcs	r2, r1
    2408:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    240a:	b672      	cpsid	i
    240c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2410:	2100      	movs	r1, #0
    2412:	4a0a      	ldr	r2, [pc, #40]	; (243c <udd_sleep_mode+0xbc>)
    2414:	7011      	strb	r1, [r2, #0]
	return flags;
    2416:	9c02      	ldr	r4, [sp, #8]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    2418:	4907      	ldr	r1, [pc, #28]	; (2438 <udd_sleep_mode+0xb8>)
    241a:	5cca      	ldrb	r2, [r1, r3]
    241c:	3a01      	subs	r2, #1
    241e:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    2420:	2c00      	cmp	r4, #0
    2422:	d0c2      	beq.n	23aa <udd_sleep_mode+0x2a>
		cpu_irq_enable();
    2424:	2201      	movs	r2, #1
    2426:	4b05      	ldr	r3, [pc, #20]	; (243c <udd_sleep_mode+0xbc>)
    2428:	701a      	strb	r2, [r3, #0]
    242a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    242e:	b662      	cpsie	i
    2430:	e7bb      	b.n	23aa <udd_sleep_mode+0x2a>
    2432:	46c0      	nop			; (mov r8, r8)
    2434:	20000744 	.word	0x20000744
    2438:	20000764 	.word	0x20000764
    243c:	20000112 	.word	0x20000112

00002440 <udd_ep_get_job>:
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
	if ((ep == 0) || (ep == 0x80)) {
    2440:	0643      	lsls	r3, r0, #25
    2442:	d00b      	beq.n	245c <udd_ep_get_job+0x1c>
		return NULL;
	} else {
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    2444:	230f      	movs	r3, #15
    2446:	4003      	ands	r3, r0
    2448:	005b      	lsls	r3, r3, #1
    244a:	09c0      	lsrs	r0, r0, #7
    244c:	1818      	adds	r0, r3, r0
    244e:	3802      	subs	r0, #2
    2450:	0083      	lsls	r3, r0, #2
    2452:	1818      	adds	r0, r3, r0
    2454:	0080      	lsls	r0, r0, #2
    2456:	4b02      	ldr	r3, [pc, #8]	; (2460 <udd_ep_get_job+0x20>)
    2458:	1818      	adds	r0, r3, r0
	}
}
    245a:	4770      	bx	lr
		return NULL;
    245c:	2000      	movs	r0, #0
    245e:	e7fc      	b.n	245a <udd_ep_get_job+0x1a>
    2460:	200006cc 	.word	0x200006cc

00002464 <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    2464:	b5f0      	push	{r4, r5, r6, r7, lr}
    2466:	46d6      	mov	lr, sl
    2468:	464f      	mov	r7, r9
    246a:	4646      	mov	r6, r8
    246c:	b5c0      	push	{r6, r7, lr}
    246e:	4689      	mov	r9, r1
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    2470:	798d      	ldrb	r5, [r1, #6]

	if (ep & USB_EP_DIR_IN) {
    2472:	b26b      	sxtb	r3, r5
    2474:	2b00      	cmp	r3, #0
    2476:	db26      	blt.n	24c6 <udd_ep_transfer_process+0x62>
	ptr_job = udd_ep_get_job(ep);
    2478:	0028      	movs	r0, r5
    247a:	4b5e      	ldr	r3, [pc, #376]	; (25f4 <udd_ep_transfer_process+0x190>)
    247c:	4798      	blx	r3
    247e:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    2480:	270f      	movs	r7, #15
    2482:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    2484:	8a03      	ldrh	r3, [r0, #16]
    2486:	4698      	mov	r8, r3
	nb_trans = ep_callback_para->received_bytes;
    2488:	464b      	mov	r3, r9
    248a:	881b      	ldrh	r3, [r3, #0]
    248c:	469a      	mov	sl, r3
	if (ptr_job->b_use_out_cache_buffer) {
    248e:	7c83      	ldrb	r3, [r0, #18]
    2490:	075b      	lsls	r3, r3, #29
    2492:	d46a      	bmi.n	256a <udd_ep_transfer_process+0x106>
	ptr_job->nb_trans += nb_trans;
    2494:	68e3      	ldr	r3, [r4, #12]
    2496:	4453      	add	r3, sl
    2498:	001e      	movs	r6, r3
    249a:	60e3      	str	r3, [r4, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    249c:	68a3      	ldr	r3, [r4, #8]
    249e:	429e      	cmp	r6, r3
    24a0:	d800      	bhi.n	24a4 <udd_ep_transfer_process+0x40>
    24a2:	e074      	b.n	258e <udd_ep_transfer_process+0x12a>
		ptr_job->nb_trans = ptr_job->buf_size;
    24a4:	60e3      	str	r3, [r4, #12]
	ptr_job->busy = false;
    24a6:	7ca3      	ldrb	r3, [r4, #18]
    24a8:	2201      	movs	r2, #1
    24aa:	4393      	bics	r3, r2
    24ac:	74a3      	strb	r3, [r4, #18]
	if (NULL != ptr_job->call_trans) {
    24ae:	6823      	ldr	r3, [r4, #0]
    24b0:	2b00      	cmp	r3, #0
    24b2:	d003      	beq.n	24bc <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    24b4:	68e1      	ldr	r1, [r4, #12]
    24b6:	002a      	movs	r2, r5
    24b8:	2000      	movs	r0, #0
    24ba:	4798      	blx	r3
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    24bc:	bc1c      	pop	{r2, r3, r4}
    24be:	4690      	mov	r8, r2
    24c0:	4699      	mov	r9, r3
    24c2:	46a2      	mov	sl, r4
    24c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ptr_job = udd_ep_get_job(ep);
    24c6:	0028      	movs	r0, r5
    24c8:	4b4a      	ldr	r3, [pc, #296]	; (25f4 <udd_ep_transfer_process+0x190>)
    24ca:	4798      	blx	r3
    24cc:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    24ce:	270f      	movs	r7, #15
    24d0:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    24d2:	8a03      	ldrh	r3, [r0, #16]
    24d4:	4698      	mov	r8, r3
	ptr_job->nb_trans += nb_trans;
    24d6:	464b      	mov	r3, r9
    24d8:	885e      	ldrh	r6, [r3, #2]
    24da:	68c3      	ldr	r3, [r0, #12]
    24dc:	469c      	mov	ip, r3
    24de:	4466      	add	r6, ip
    24e0:	60c6      	str	r6, [r0, #12]
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    24e2:	6881      	ldr	r1, [r0, #8]
    24e4:	428e      	cmp	r6, r1
    24e6:	d025      	beq.n	2534 <udd_ep_transfer_process+0xd0>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    24e8:	1b8d      	subs	r5, r1, r6
    24ea:	b2ad      	uxth	r5, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    24ec:	4b42      	ldr	r3, [pc, #264]	; (25f8 <udd_ep_transfer_process+0x194>)
    24ee:	429d      	cmp	r5, r3
    24f0:	d906      	bls.n	2500 <udd_ep_transfer_process+0x9c>
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    24f2:	001d      	movs	r5, r3
    24f4:	4641      	mov	r1, r8
    24f6:	0018      	movs	r0, r3
    24f8:	4b40      	ldr	r3, [pc, #256]	; (25fc <udd_ep_transfer_process+0x198>)
    24fa:	4798      	blx	r3
    24fc:	1a6d      	subs	r5, r5, r1
    24fe:	b2ad      	uxth	r5, r5
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    2500:	7ca2      	ldrb	r2, [r4, #18]
    2502:	2300      	movs	r3, #0
    2504:	0792      	lsls	r2, r2, #30
    2506:	d507      	bpl.n	2518 <udd_ep_transfer_process+0xb4>
    2508:	4641      	mov	r1, r8
    250a:	0028      	movs	r0, r5
    250c:	4b3c      	ldr	r3, [pc, #240]	; (2600 <udd_ep_transfer_process+0x19c>)
    250e:	4798      	blx	r3
    2510:	b289      	uxth	r1, r1
    2512:	424b      	negs	r3, r1
    2514:	414b      	adcs	r3, r1
    2516:	b2db      	uxtb	r3, r3
    2518:	005b      	lsls	r3, r3, #1
    251a:	7ca2      	ldrb	r2, [r4, #18]
    251c:	2102      	movs	r1, #2
    251e:	438a      	bics	r2, r1
    2520:	4313      	orrs	r3, r2
    2522:	74a3      	strb	r3, [r4, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    2524:	6862      	ldr	r2, [r4, #4]
    2526:	1992      	adds	r2, r2, r6
    2528:	002b      	movs	r3, r5
    252a:	0039      	movs	r1, r7
    252c:	4835      	ldr	r0, [pc, #212]	; (2604 <udd_ep_transfer_process+0x1a0>)
    252e:	4c36      	ldr	r4, [pc, #216]	; (2608 <udd_ep_transfer_process+0x1a4>)
    2530:	47a0      	blx	r4
    2532:	e7c3      	b.n	24bc <udd_ep_transfer_process+0x58>
	if (ptr_job->b_shortpacket) {
    2534:	7c83      	ldrb	r3, [r0, #18]
    2536:	079b      	lsls	r3, r3, #30
    2538:	d40b      	bmi.n	2552 <udd_ep_transfer_process+0xee>
	ptr_job->busy = false;
    253a:	7c83      	ldrb	r3, [r0, #18]
    253c:	2201      	movs	r2, #1
    253e:	4393      	bics	r3, r2
    2540:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    2542:	6803      	ldr	r3, [r0, #0]
    2544:	2b00      	cmp	r3, #0
    2546:	d0b9      	beq.n	24bc <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    2548:	002a      	movs	r2, r5
    254a:	0031      	movs	r1, r6
    254c:	2000      	movs	r0, #0
    254e:	4798      	blx	r3
    2550:	e7b4      	b.n	24bc <udd_ep_transfer_process+0x58>
		ptr_job->b_shortpacket = false;
    2552:	7c83      	ldrb	r3, [r0, #18]
    2554:	2202      	movs	r2, #2
    2556:	4393      	bics	r3, r2
    2558:	7483      	strb	r3, [r0, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    255a:	6842      	ldr	r2, [r0, #4]
    255c:	1992      	adds	r2, r2, r6
    255e:	2300      	movs	r3, #0
    2560:	0039      	movs	r1, r7
    2562:	4828      	ldr	r0, [pc, #160]	; (2604 <udd_ep_transfer_process+0x1a0>)
    2564:	4c28      	ldr	r4, [pc, #160]	; (2608 <udd_ep_transfer_process+0x1a4>)
    2566:	47a0      	blx	r4
    2568:	e7a8      	b.n	24bc <udd_ep_transfer_process+0x58>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    256a:	6843      	ldr	r3, [r0, #4]
    256c:	68c2      	ldr	r2, [r0, #12]
    256e:	4694      	mov	ip, r2
    2570:	4463      	add	r3, ip
    2572:	001e      	movs	r6, r3
    2574:	4641      	mov	r1, r8
    2576:	6880      	ldr	r0, [r0, #8]
    2578:	4b21      	ldr	r3, [pc, #132]	; (2600 <udd_ep_transfer_process+0x19c>)
    257a:	4798      	blx	r3
    257c:	000a      	movs	r2, r1
    257e:	1e7b      	subs	r3, r7, #1
    2580:	019b      	lsls	r3, r3, #6
    2582:	4922      	ldr	r1, [pc, #136]	; (260c <udd_ep_transfer_process+0x1a8>)
    2584:	1859      	adds	r1, r3, r1
    2586:	0030      	movs	r0, r6
    2588:	4b21      	ldr	r3, [pc, #132]	; (2610 <udd_ep_transfer_process+0x1ac>)
    258a:	4798      	blx	r3
    258c:	e782      	b.n	2494 <udd_ep_transfer_process+0x30>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    258e:	464a      	mov	r2, r9
    2590:	8892      	ldrh	r2, [r2, #4]
    2592:	4552      	cmp	r2, sl
    2594:	d000      	beq.n	2598 <udd_ep_transfer_process+0x134>
    2596:	e786      	b.n	24a6 <udd_ep_transfer_process+0x42>
    2598:	429e      	cmp	r6, r3
    259a:	d100      	bne.n	259e <udd_ep_transfer_process+0x13a>
    259c:	e783      	b.n	24a6 <udd_ep_transfer_process+0x42>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    259e:	1b9b      	subs	r3, r3, r6
    25a0:	b29d      	uxth	r5, r3
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    25a2:	4b15      	ldr	r3, [pc, #84]	; (25f8 <udd_ep_transfer_process+0x194>)
    25a4:	429d      	cmp	r5, r3
    25a6:	d916      	bls.n	25d6 <udd_ep_transfer_process+0x172>
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    25a8:	001d      	movs	r5, r3
    25aa:	4641      	mov	r1, r8
    25ac:	0018      	movs	r0, r3
    25ae:	4b13      	ldr	r3, [pc, #76]	; (25fc <udd_ep_transfer_process+0x198>)
    25b0:	4798      	blx	r3
    25b2:	1a6b      	subs	r3, r5, r1
    25b4:	b29b      	uxth	r3, r3
		if (next_trans < ep_size) {
    25b6:	4598      	cmp	r8, r3
    25b8:	d914      	bls.n	25e4 <udd_ep_transfer_process+0x180>
			ptr_job->b_use_out_cache_buffer = true;
    25ba:	7ca3      	ldrb	r3, [r4, #18]
    25bc:	2204      	movs	r2, #4
    25be:	4313      	orrs	r3, r2
    25c0:	74a3      	strb	r3, [r4, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    25c2:	1e7a      	subs	r2, r7, #1
    25c4:	0192      	lsls	r2, r2, #6
    25c6:	4b11      	ldr	r3, [pc, #68]	; (260c <udd_ep_transfer_process+0x1a8>)
    25c8:	18d2      	adds	r2, r2, r3
    25ca:	4643      	mov	r3, r8
    25cc:	0039      	movs	r1, r7
    25ce:	480d      	ldr	r0, [pc, #52]	; (2604 <udd_ep_transfer_process+0x1a0>)
    25d0:	4c10      	ldr	r4, [pc, #64]	; (2614 <udd_ep_transfer_process+0x1b0>)
    25d2:	47a0      	blx	r4
    25d4:	e772      	b.n	24bc <udd_ep_transfer_process+0x58>
			next_trans -= next_trans % ep_size;
    25d6:	4641      	mov	r1, r8
    25d8:	0028      	movs	r0, r5
    25da:	4b09      	ldr	r3, [pc, #36]	; (2600 <udd_ep_transfer_process+0x19c>)
    25dc:	4798      	blx	r3
    25de:	1a6b      	subs	r3, r5, r1
    25e0:	b29b      	uxth	r3, r3
    25e2:	e7e8      	b.n	25b6 <udd_ep_transfer_process+0x152>
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    25e4:	6862      	ldr	r2, [r4, #4]
    25e6:	1992      	adds	r2, r2, r6
    25e8:	0039      	movs	r1, r7
    25ea:	4806      	ldr	r0, [pc, #24]	; (2604 <udd_ep_transfer_process+0x1a0>)
    25ec:	4c09      	ldr	r4, [pc, #36]	; (2614 <udd_ep_transfer_process+0x1b0>)
    25ee:	47a0      	blx	r4
    25f0:	e764      	b.n	24bc <udd_ep_transfer_process+0x58>
    25f2:	46c0      	nop			; (mov r8, r8)
    25f4:	00002441 	.word	0x00002441
    25f8:	00001fff 	.word	0x00001fff
    25fc:	00004e6d 	.word	0x00004e6d
    2600:	00004c99 	.word	0x00004c99
    2604:	20000884 	.word	0x20000884
    2608:	00003629 	.word	0x00003629
    260c:	200007c4 	.word	0x200007c4
    2610:	00004f55 	.word	0x00004f55
    2614:	0000367d 	.word	0x0000367d

00002618 <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    2618:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    261a:	2205      	movs	r2, #5
    261c:	4b05      	ldr	r3, [pc, #20]	; (2634 <udd_ctrl_stall_data+0x1c>)
    261e:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    2620:	4c05      	ldr	r4, [pc, #20]	; (2638 <udd_ctrl_stall_data+0x20>)
    2622:	2180      	movs	r1, #128	; 0x80
    2624:	0020      	movs	r0, r4
    2626:	4b05      	ldr	r3, [pc, #20]	; (263c <udd_ctrl_stall_data+0x24>)
    2628:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    262a:	2100      	movs	r1, #0
    262c:	0020      	movs	r0, r4
    262e:	4b04      	ldr	r3, [pc, #16]	; (2640 <udd_ctrl_stall_data+0x28>)
    2630:	4798      	blx	r3
}
    2632:	bd10      	pop	{r4, pc}
    2634:	200006ca 	.word	0x200006ca
    2638:	20000884 	.word	0x20000884
    263c:	0000357d 	.word	0x0000357d
    2640:	000035a3 	.word	0x000035a3

00002644 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    2644:	b570      	push	{r4, r5, r6, lr}
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    2646:	4b12      	ldr	r3, [pc, #72]	; (2690 <_usb_on_wakeup+0x4c>)
    2648:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    264a:	069b      	lsls	r3, r3, #26
    264c:	d41a      	bmi.n	2684 <_usb_on_wakeup+0x40>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    264e:	4910      	ldr	r1, [pc, #64]	; (2690 <_usb_on_wakeup+0x4c>)
    2650:	22d0      	movs	r2, #208	; 0xd0
    2652:	68cb      	ldr	r3, [r1, #12]
    2654:	4013      	ands	r3, r2
    2656:	2bd0      	cmp	r3, #208	; 0xd0
    2658:	d1fb      	bne.n	2652 <_usb_on_wakeup+0xe>
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    265a:	4c0e      	ldr	r4, [pc, #56]	; (2694 <_usb_on_wakeup+0x50>)
    265c:	2102      	movs	r1, #2
    265e:	0020      	movs	r0, r4
    2660:	4b0d      	ldr	r3, [pc, #52]	; (2698 <_usb_on_wakeup+0x54>)
    2662:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    2664:	2104      	movs	r1, #4
    2666:	0020      	movs	r0, r4
    2668:	4d0c      	ldr	r5, [pc, #48]	; (269c <_usb_on_wakeup+0x58>)
    266a:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    266c:	4a0c      	ldr	r2, [pc, #48]	; (26a0 <_usb_on_wakeup+0x5c>)
    266e:	2106      	movs	r1, #6
    2670:	0020      	movs	r0, r4
    2672:	4b0c      	ldr	r3, [pc, #48]	; (26a4 <_usb_on_wakeup+0x60>)
    2674:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    2676:	2106      	movs	r1, #6
    2678:	0020      	movs	r0, r4
    267a:	47a8      	blx	r5
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    267c:	2003      	movs	r0, #3
    267e:	4b0a      	ldr	r3, [pc, #40]	; (26a8 <_usb_on_wakeup+0x64>)
    2680:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
#endif
}
    2682:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    2684:	4902      	ldr	r1, [pc, #8]	; (2690 <_usb_on_wakeup+0x4c>)
    2686:	2210      	movs	r2, #16
    2688:	68cb      	ldr	r3, [r1, #12]
    268a:	421a      	tst	r2, r3
    268c:	d0fc      	beq.n	2688 <_usb_on_wakeup+0x44>
    268e:	e7e4      	b.n	265a <_usb_on_wakeup+0x16>
    2690:	40000800 	.word	0x40000800
    2694:	20000884 	.word	0x20000884
    2698:	000030bd 	.word	0x000030bd
    269c:	0000309d 	.word	0x0000309d
    26a0:	000026d9 	.word	0x000026d9
    26a4:	00003079 	.word	0x00003079
    26a8:	00002381 	.word	0x00002381

000026ac <_usb_on_suspend>:
{
    26ac:	b510      	push	{r4, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    26ae:	4c06      	ldr	r4, [pc, #24]	; (26c8 <_usb_on_suspend+0x1c>)
    26b0:	2104      	movs	r1, #4
    26b2:	0020      	movs	r0, r4
    26b4:	4b05      	ldr	r3, [pc, #20]	; (26cc <_usb_on_suspend+0x20>)
    26b6:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    26b8:	2102      	movs	r1, #2
    26ba:	0020      	movs	r0, r4
    26bc:	4b04      	ldr	r3, [pc, #16]	; (26d0 <_usb_on_suspend+0x24>)
    26be:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    26c0:	2001      	movs	r0, #1
    26c2:	4b04      	ldr	r3, [pc, #16]	; (26d4 <_usb_on_suspend+0x28>)
    26c4:	4798      	blx	r3
}
    26c6:	bd10      	pop	{r4, pc}
    26c8:	20000884 	.word	0x20000884
    26cc:	000030bd 	.word	0x000030bd
    26d0:	0000309d 	.word	0x0000309d
    26d4:	00002381 	.word	0x00002381

000026d8 <_usb_device_lpm_suspend>:
{
    26d8:	b570      	push	{r4, r5, r6, lr}
    26da:	000e      	movs	r6, r1
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    26dc:	4c0e      	ldr	r4, [pc, #56]	; (2718 <_usb_device_lpm_suspend+0x40>)
    26de:	2106      	movs	r1, #6
    26e0:	0020      	movs	r0, r4
    26e2:	4d0e      	ldr	r5, [pc, #56]	; (271c <_usb_device_lpm_suspend+0x44>)
    26e4:	47a8      	blx	r5
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    26e6:	2104      	movs	r1, #4
    26e8:	0020      	movs	r0, r4
    26ea:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    26ec:	2102      	movs	r1, #2
    26ee:	0020      	movs	r0, r4
    26f0:	4b0b      	ldr	r3, [pc, #44]	; (2720 <_usb_device_lpm_suspend+0x48>)
    26f2:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    26f4:	2002      	movs	r0, #2
    26f6:	4b0b      	ldr	r3, [pc, #44]	; (2724 <_usb_device_lpm_suspend+0x4c>)
    26f8:	4798      	blx	r3
	if ((*lpm_wakeup_enable)) {
    26fa:	6833      	ldr	r3, [r6, #0]
    26fc:	2b00      	cmp	r3, #0
    26fe:	d104      	bne.n	270a <_usb_device_lpm_suspend+0x32>
		UDC_REMOTEWAKEUP_LPM_DISABLE();
    2700:	4b09      	ldr	r3, [pc, #36]	; (2728 <_usb_device_lpm_suspend+0x50>)
    2702:	4798      	blx	r3
	UDC_SUSPEND_LPM_EVENT();
    2704:	4b09      	ldr	r3, [pc, #36]	; (272c <_usb_device_lpm_suspend+0x54>)
    2706:	4798      	blx	r3
}
    2708:	bd70      	pop	{r4, r5, r6, pc}
		UDC_REMOTEWAKEUP_LPM_ENABLE();
    270a:	4b09      	ldr	r3, [pc, #36]	; (2730 <_usb_device_lpm_suspend+0x58>)
    270c:	4798      	blx	r3
	if (!(*lpm_wakeup_enable)) {
    270e:	6833      	ldr	r3, [r6, #0]
    2710:	2b00      	cmp	r3, #0
    2712:	d1f7      	bne.n	2704 <_usb_device_lpm_suspend+0x2c>
    2714:	e7f4      	b.n	2700 <_usb_device_lpm_suspend+0x28>
    2716:	46c0      	nop			; (mov r8, r8)
    2718:	20000884 	.word	0x20000884
    271c:	000030bd 	.word	0x000030bd
    2720:	0000309d 	.word	0x0000309d
    2724:	00002381 	.word	0x00002381
    2728:	00004183 	.word	0x00004183
    272c:	00004181 	.word	0x00004181
    2730:	00004185 	.word	0x00004185

00002734 <_usb_on_bus_reset>:
{
    2734:	b530      	push	{r4, r5, lr}
    2736:	b083      	sub	sp, #12
    2738:	0004      	movs	r4, r0
	udc_reset();
    273a:	4b1e      	ldr	r3, [pc, #120]	; (27b4 <_usb_on_bus_reset+0x80>)
    273c:	4798      	blx	r3
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    273e:	2380      	movs	r3, #128	; 0x80
    2740:	6822      	ldr	r2, [r4, #0]
    2742:	7293      	strb	r3, [r2, #10]
	 usb_device_endpoint_get_config_defaults(&config_ep0);
    2744:	ad01      	add	r5, sp, #4
    2746:	0028      	movs	r0, r5
    2748:	4b1b      	ldr	r3, [pc, #108]	; (27b8 <_usb_on_bus_reset+0x84>)
    274a:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    274c:	2303      	movs	r3, #3
    274e:	706b      	strb	r3, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    2750:	0029      	movs	r1, r5
    2752:	0020      	movs	r0, r4
    2754:	4b19      	ldr	r3, [pc, #100]	; (27bc <_usb_on_bus_reset+0x88>)
    2756:	4798      	blx	r3
	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    2758:	4919      	ldr	r1, [pc, #100]	; (27c0 <_usb_on_bus_reset+0x8c>)
    275a:	0020      	movs	r0, r4
    275c:	4b19      	ldr	r3, [pc, #100]	; (27c4 <_usb_on_bus_reset+0x90>)
    275e:	4798      	blx	r3
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    2760:	4b19      	ldr	r3, [pc, #100]	; (27c8 <_usb_on_bus_reset+0x94>)
    2762:	2202      	movs	r2, #2
    2764:	2100      	movs	r1, #0
    2766:	0020      	movs	r0, r4
    2768:	4d18      	ldr	r5, [pc, #96]	; (27cc <_usb_on_bus_reset+0x98>)
    276a:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    276c:	4b18      	ldr	r3, [pc, #96]	; (27d0 <_usb_on_bus_reset+0x9c>)
    276e:	2200      	movs	r2, #0
    2770:	2100      	movs	r1, #0
    2772:	0020      	movs	r0, r4
    2774:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    2776:	4b17      	ldr	r3, [pc, #92]	; (27d4 <_usb_on_bus_reset+0xa0>)
    2778:	2201      	movs	r2, #1
    277a:	2100      	movs	r1, #0
    277c:	0020      	movs	r0, r4
    277e:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    2780:	2202      	movs	r2, #2
    2782:	2100      	movs	r1, #0
    2784:	0020      	movs	r0, r4
    2786:	4d14      	ldr	r5, [pc, #80]	; (27d8 <_usb_on_bus_reset+0xa4>)
    2788:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    278a:	2200      	movs	r2, #0
    278c:	2100      	movs	r1, #0
    278e:	0020      	movs	r0, r4
    2790:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    2792:	2201      	movs	r2, #1
    2794:	2100      	movs	r1, #0
    2796:	0020      	movs	r0, r4
    2798:	47a8      	blx	r5
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    279a:	6821      	ldr	r1, [r4, #0]
    279c:	890b      	ldrh	r3, [r1, #8]
    279e:	4a0f      	ldr	r2, [pc, #60]	; (27dc <_usb_on_bus_reset+0xa8>)
    27a0:	401a      	ands	r2, r3
    27a2:	2380      	movs	r3, #128	; 0x80
    27a4:	00db      	lsls	r3, r3, #3
    27a6:	4313      	orrs	r3, r2
    27a8:	810b      	strh	r3, [r1, #8]
	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    27aa:	2200      	movs	r2, #0
    27ac:	4b0c      	ldr	r3, [pc, #48]	; (27e0 <_usb_on_bus_reset+0xac>)
    27ae:	701a      	strb	r2, [r3, #0]
}
    27b0:	b003      	add	sp, #12
    27b2:	bd30      	pop	{r4, r5, pc}
    27b4:	00000cc1 	.word	0x00000cc1
    27b8:	000032c9 	.word	0x000032c9
    27bc:	000032d9 	.word	0x000032d9
    27c0:	20000a04 	.word	0x20000a04
    27c4:	000036cd 	.word	0x000036cd
    27c8:	0000291d 	.word	0x0000291d
    27cc:	000030d9 	.word	0x000030d9
    27d0:	00002c11 	.word	0x00002c11
    27d4:	00002821 	.word	0x00002821
    27d8:	00003129 	.word	0x00003129
    27dc:	fffff3ff 	.word	0xfffff3ff
    27e0:	200006ca 	.word	0x200006ca

000027e4 <udd_ctrl_send_zlp_in>:
{
    27e4:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    27e6:	2203      	movs	r2, #3
    27e8:	4b07      	ldr	r3, [pc, #28]	; (2808 <udd_ctrl_send_zlp_in+0x24>)
    27ea:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    27ec:	4c07      	ldr	r4, [pc, #28]	; (280c <udd_ctrl_send_zlp_in+0x28>)
    27ee:	4908      	ldr	r1, [pc, #32]	; (2810 <udd_ctrl_send_zlp_in+0x2c>)
    27f0:	0020      	movs	r0, r4
    27f2:	4b08      	ldr	r3, [pc, #32]	; (2814 <udd_ctrl_send_zlp_in+0x30>)
    27f4:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    27f6:	4b08      	ldr	r3, [pc, #32]	; (2818 <udd_ctrl_send_zlp_in+0x34>)
    27f8:	689a      	ldr	r2, [r3, #8]
    27fa:	2300      	movs	r3, #0
    27fc:	2100      	movs	r1, #0
    27fe:	0020      	movs	r0, r4
    2800:	4c06      	ldr	r4, [pc, #24]	; (281c <udd_ctrl_send_zlp_in+0x38>)
    2802:	47a0      	blx	r4
}
    2804:	bd10      	pop	{r4, pc}
    2806:	46c0      	nop			; (mov r8, r8)
    2808:	200006ca 	.word	0x200006ca
    280c:	20000884 	.word	0x20000884
    2810:	20000a04 	.word	0x20000a04
    2814:	000036cd 	.word	0x000036cd
    2818:	200009ec 	.word	0x200009ec
    281c:	00003629 	.word	0x00003629

00002820 <_usb_ep0_on_tansfer_fail>:
{
    2820:	b510      	push	{r4, lr}
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    2822:	7989      	ldrb	r1, [r1, #6]
    2824:	b24b      	sxtb	r3, r1
    2826:	2b00      	cmp	r3, #0
    2828:	db06      	blt.n	2838 <_usb_ep0_on_tansfer_fail+0x18>
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    282a:	4b0e      	ldr	r3, [pc, #56]	; (2864 <_usb_ep0_on_tansfer_fail+0x44>)
    282c:	781b      	ldrb	r3, [r3, #0]
    282e:	2b02      	cmp	r3, #2
    2830:	d00f      	beq.n	2852 <_usb_ep0_on_tansfer_fail+0x32>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2832:	2b03      	cmp	r3, #3
    2834:	d011      	beq.n	285a <_usb_ep0_on_tansfer_fail+0x3a>
}
    2836:	bd10      	pop	{r4, pc}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2838:	4b0a      	ldr	r3, [pc, #40]	; (2864 <_usb_ep0_on_tansfer_fail+0x44>)
    283a:	781b      	ldrb	r3, [r3, #0]
    283c:	2b01      	cmp	r3, #1
    283e:	d005      	beq.n	284c <_usb_ep0_on_tansfer_fail+0x2c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2840:	2b04      	cmp	r3, #4
    2842:	d1f8      	bne.n	2836 <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    2844:	4808      	ldr	r0, [pc, #32]	; (2868 <_usb_ep0_on_tansfer_fail+0x48>)
    2846:	4b09      	ldr	r3, [pc, #36]	; (286c <_usb_ep0_on_tansfer_fail+0x4c>)
    2848:	4798      	blx	r3
    284a:	e7f4      	b.n	2836 <_usb_ep0_on_tansfer_fail+0x16>
		udd_ctrl_send_zlp_in();
    284c:	4b08      	ldr	r3, [pc, #32]	; (2870 <_usb_ep0_on_tansfer_fail+0x50>)
    284e:	4798      	blx	r3
    2850:	e7f1      	b.n	2836 <_usb_ep0_on_tansfer_fail+0x16>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2852:	2204      	movs	r2, #4
    2854:	4b03      	ldr	r3, [pc, #12]	; (2864 <_usb_ep0_on_tansfer_fail+0x44>)
    2856:	701a      	strb	r2, [r3, #0]
    2858:	e7ed      	b.n	2836 <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    285a:	4803      	ldr	r0, [pc, #12]	; (2868 <_usb_ep0_on_tansfer_fail+0x48>)
    285c:	4b03      	ldr	r3, [pc, #12]	; (286c <_usb_ep0_on_tansfer_fail+0x4c>)
    285e:	4798      	blx	r3
}
    2860:	e7e9      	b.n	2836 <_usb_ep0_on_tansfer_fail+0x16>
    2862:	46c0      	nop			; (mov r8, r8)
    2864:	200006ca 	.word	0x200006ca
    2868:	20000884 	.word	0x20000884
    286c:	0000357d 	.word	0x0000357d
    2870:	000027e5 	.word	0x000027e5

00002874 <udd_ctrl_in_sent>:
{
    2874:	b570      	push	{r4, r5, r6, lr}
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2876:	4b20      	ldr	r3, [pc, #128]	; (28f8 <udd_ctrl_in_sent+0x84>)
    2878:	881b      	ldrh	r3, [r3, #0]
    287a:	4a20      	ldr	r2, [pc, #128]	; (28fc <udd_ctrl_in_sent+0x88>)
    287c:	8994      	ldrh	r4, [r2, #12]
    287e:	1ae4      	subs	r4, r4, r3
    2880:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
    2882:	2c00      	cmp	r4, #0
    2884:	d118      	bne.n	28b8 <udd_ctrl_in_sent+0x44>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2886:	4a1e      	ldr	r2, [pc, #120]	; (2900 <udd_ctrl_in_sent+0x8c>)
    2888:	8811      	ldrh	r1, [r2, #0]
    288a:	185b      	adds	r3, r3, r1
    288c:	b29b      	uxth	r3, r3
    288e:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    2890:	4a1a      	ldr	r2, [pc, #104]	; (28fc <udd_ctrl_in_sent+0x88>)
    2892:	88d2      	ldrh	r2, [r2, #6]
    2894:	429a      	cmp	r2, r3
    2896:	d023      	beq.n	28e0 <udd_ctrl_in_sent+0x6c>
    2898:	4b1a      	ldr	r3, [pc, #104]	; (2904 <udd_ctrl_in_sent+0x90>)
    289a:	781b      	ldrb	r3, [r3, #0]
    289c:	2b00      	cmp	r3, #0
    289e:	d11f      	bne.n	28e0 <udd_ctrl_in_sent+0x6c>
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    28a0:	4b16      	ldr	r3, [pc, #88]	; (28fc <udd_ctrl_in_sent+0x88>)
    28a2:	695b      	ldr	r3, [r3, #20]
    28a4:	2b00      	cmp	r3, #0
    28a6:	d023      	beq.n	28f0 <udd_ctrl_in_sent+0x7c>
    28a8:	4798      	blx	r3
    28aa:	2800      	cmp	r0, #0
    28ac:	d020      	beq.n	28f0 <udd_ctrl_in_sent+0x7c>
			udd_ctrl_payload_nb_trans = 0;
    28ae:	2200      	movs	r2, #0
    28b0:	4b11      	ldr	r3, [pc, #68]	; (28f8 <udd_ctrl_in_sent+0x84>)
    28b2:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    28b4:	4b11      	ldr	r3, [pc, #68]	; (28fc <udd_ctrl_in_sent+0x88>)
    28b6:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    28b8:	2c3f      	cmp	r4, #63	; 0x3f
    28ba:	d919      	bls.n	28f0 <udd_ctrl_in_sent+0x7c>
		b_shortpacket = false;
    28bc:	2200      	movs	r2, #0
    28be:	4b11      	ldr	r3, [pc, #68]	; (2904 <udd_ctrl_in_sent+0x90>)
    28c0:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    28c2:	2440      	movs	r4, #64	; 0x40
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    28c4:	4d0c      	ldr	r5, [pc, #48]	; (28f8 <udd_ctrl_in_sent+0x84>)
    28c6:	882b      	ldrh	r3, [r5, #0]
    28c8:	4a0c      	ldr	r2, [pc, #48]	; (28fc <udd_ctrl_in_sent+0x88>)
    28ca:	6892      	ldr	r2, [r2, #8]
    28cc:	18d2      	adds	r2, r2, r3
    28ce:	0023      	movs	r3, r4
    28d0:	2100      	movs	r1, #0
    28d2:	480d      	ldr	r0, [pc, #52]	; (2908 <udd_ctrl_in_sent+0x94>)
    28d4:	4e0d      	ldr	r6, [pc, #52]	; (290c <udd_ctrl_in_sent+0x98>)
    28d6:	47b0      	blx	r6
	udd_ctrl_payload_nb_trans += nb_remain;
    28d8:	882b      	ldrh	r3, [r5, #0]
    28da:	18e4      	adds	r4, r4, r3
    28dc:	802c      	strh	r4, [r5, #0]
}
    28de:	bd70      	pop	{r4, r5, r6, pc}
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    28e0:	2204      	movs	r2, #4
    28e2:	4b0b      	ldr	r3, [pc, #44]	; (2910 <udd_ctrl_in_sent+0x9c>)
    28e4:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    28e6:	490b      	ldr	r1, [pc, #44]	; (2914 <udd_ctrl_in_sent+0xa0>)
    28e8:	4807      	ldr	r0, [pc, #28]	; (2908 <udd_ctrl_in_sent+0x94>)
    28ea:	4b0b      	ldr	r3, [pc, #44]	; (2918 <udd_ctrl_in_sent+0xa4>)
    28ec:	4798      	blx	r3
			return;
    28ee:	e7f6      	b.n	28de <udd_ctrl_in_sent+0x6a>
		b_shortpacket = true;
    28f0:	2201      	movs	r2, #1
    28f2:	4b04      	ldr	r3, [pc, #16]	; (2904 <udd_ctrl_in_sent+0x90>)
    28f4:	701a      	strb	r2, [r3, #0]
    28f6:	e7e5      	b.n	28c4 <udd_ctrl_in_sent+0x50>
    28f8:	200006c6 	.word	0x200006c6
    28fc:	200009ec 	.word	0x200009ec
    2900:	200006c8 	.word	0x200006c8
    2904:	200006c4 	.word	0x200006c4
    2908:	20000884 	.word	0x20000884
    290c:	00003629 	.word	0x00003629
    2910:	200006ca 	.word	0x200006ca
    2914:	20000a04 	.word	0x20000a04
    2918:	000036cd 	.word	0x000036cd

0000291c <_usb_ep0_on_setup>:
{
    291c:	b510      	push	{r4, lr}
    291e:	000c      	movs	r4, r1
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    2920:	4b2c      	ldr	r3, [pc, #176]	; (29d4 <_usb_ep0_on_setup+0xb8>)
    2922:	781b      	ldrb	r3, [r3, #0]
    2924:	2b00      	cmp	r3, #0
    2926:	d007      	beq.n	2938 <_usb_ep0_on_setup+0x1c>
		if (NULL != udd_g_ctrlreq.callback) {
    2928:	4b2b      	ldr	r3, [pc, #172]	; (29d8 <_usb_ep0_on_setup+0xbc>)
    292a:	691b      	ldr	r3, [r3, #16]
    292c:	2b00      	cmp	r3, #0
    292e:	d000      	beq.n	2932 <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
    2930:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    2932:	2200      	movs	r2, #0
    2934:	4b27      	ldr	r3, [pc, #156]	; (29d4 <_usb_ep0_on_setup+0xb8>)
    2936:	701a      	strb	r2, [r3, #0]
	if ( 8 != ep_callback_para->received_bytes) {
    2938:	8823      	ldrh	r3, [r4, #0]
    293a:	2b08      	cmp	r3, #8
    293c:	d002      	beq.n	2944 <_usb_ep0_on_setup+0x28>
		udd_ctrl_stall_data();
    293e:	4b27      	ldr	r3, [pc, #156]	; (29dc <_usb_ep0_on_setup+0xc0>)
    2940:	4798      	blx	r3
}
    2942:	bd10      	pop	{r4, pc}
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    2944:	4a24      	ldr	r2, [pc, #144]	; (29d8 <_usb_ep0_on_setup+0xbc>)
    2946:	4b26      	ldr	r3, [pc, #152]	; (29e0 <_usb_ep0_on_setup+0xc4>)
    2948:	7819      	ldrb	r1, [r3, #0]
    294a:	7011      	strb	r1, [r2, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    294c:	7859      	ldrb	r1, [r3, #1]
    294e:	7051      	strb	r1, [r2, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    2950:	78d8      	ldrb	r0, [r3, #3]
    2952:	0200      	lsls	r0, r0, #8
    2954:	7899      	ldrb	r1, [r3, #2]
    2956:	1809      	adds	r1, r1, r0
    2958:	8051      	strh	r1, [r2, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    295a:	7958      	ldrb	r0, [r3, #5]
    295c:	0200      	lsls	r0, r0, #8
    295e:	7919      	ldrb	r1, [r3, #4]
    2960:	1809      	adds	r1, r1, r0
    2962:	8091      	strh	r1, [r2, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    2964:	79d9      	ldrb	r1, [r3, #7]
    2966:	0209      	lsls	r1, r1, #8
    2968:	799b      	ldrb	r3, [r3, #6]
    296a:	185b      	adds	r3, r3, r1
    296c:	80d3      	strh	r3, [r2, #6]
		if (false == udc_process_setup()) {
    296e:	4b1d      	ldr	r3, [pc, #116]	; (29e4 <_usb_ep0_on_setup+0xc8>)
    2970:	4798      	blx	r3
    2972:	2800      	cmp	r0, #0
    2974:	d016      	beq.n	29a4 <_usb_ep0_on_setup+0x88>
		} else if (Udd_setup_is_in()) {
    2976:	4b18      	ldr	r3, [pc, #96]	; (29d8 <_usb_ep0_on_setup+0xbc>)
    2978:	781b      	ldrb	r3, [r3, #0]
    297a:	2b7f      	cmp	r3, #127	; 0x7f
    297c:	d815      	bhi.n	29aa <_usb_ep0_on_setup+0x8e>
			if(0 == udd_g_ctrlreq.req.wLength) {
    297e:	4b16      	ldr	r3, [pc, #88]	; (29d8 <_usb_ep0_on_setup+0xbc>)
    2980:	88db      	ldrh	r3, [r3, #6]
    2982:	2b00      	cmp	r3, #0
    2984:	d022      	beq.n	29cc <_usb_ep0_on_setup+0xb0>
				udd_ctrl_prev_payload_nb_trans = 0;
    2986:	2300      	movs	r3, #0
    2988:	4a17      	ldr	r2, [pc, #92]	; (29e8 <_usb_ep0_on_setup+0xcc>)
    298a:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
    298c:	4a17      	ldr	r2, [pc, #92]	; (29ec <_usb_ep0_on_setup+0xd0>)
    298e:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    2990:	2201      	movs	r2, #1
    2992:	4b10      	ldr	r3, [pc, #64]	; (29d4 <_usb_ep0_on_setup+0xb8>)
    2994:	701a      	strb	r2, [r3, #0]
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    2996:	2340      	movs	r3, #64	; 0x40
    2998:	4a11      	ldr	r2, [pc, #68]	; (29e0 <_usb_ep0_on_setup+0xc4>)
    299a:	2100      	movs	r1, #0
    299c:	4814      	ldr	r0, [pc, #80]	; (29f0 <_usb_ep0_on_setup+0xd4>)
    299e:	4c15      	ldr	r4, [pc, #84]	; (29f4 <_usb_ep0_on_setup+0xd8>)
    29a0:	47a0      	blx	r4
    29a2:	e7ce      	b.n	2942 <_usb_ep0_on_setup+0x26>
			udd_ctrl_stall_data();
    29a4:	4b0d      	ldr	r3, [pc, #52]	; (29dc <_usb_ep0_on_setup+0xc0>)
    29a6:	4798      	blx	r3
			return;
    29a8:	e7cb      	b.n	2942 <_usb_ep0_on_setup+0x26>
			udd_ctrl_prev_payload_nb_trans = 0;
    29aa:	2300      	movs	r3, #0
    29ac:	4a0e      	ldr	r2, [pc, #56]	; (29e8 <_usb_ep0_on_setup+0xcc>)
    29ae:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
    29b0:	4a0e      	ldr	r2, [pc, #56]	; (29ec <_usb_ep0_on_setup+0xd0>)
    29b2:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    29b4:	2202      	movs	r2, #2
    29b6:	4b07      	ldr	r3, [pc, #28]	; (29d4 <_usb_ep0_on_setup+0xb8>)
    29b8:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    29ba:	2340      	movs	r3, #64	; 0x40
    29bc:	4a08      	ldr	r2, [pc, #32]	; (29e0 <_usb_ep0_on_setup+0xc4>)
    29be:	2100      	movs	r1, #0
    29c0:	480b      	ldr	r0, [pc, #44]	; (29f0 <_usb_ep0_on_setup+0xd4>)
    29c2:	4c0c      	ldr	r4, [pc, #48]	; (29f4 <_usb_ep0_on_setup+0xd8>)
    29c4:	47a0      	blx	r4
			udd_ctrl_in_sent();
    29c6:	4b0c      	ldr	r3, [pc, #48]	; (29f8 <_usb_ep0_on_setup+0xdc>)
    29c8:	4798      	blx	r3
    29ca:	e7ba      	b.n	2942 <_usb_ep0_on_setup+0x26>
				udd_ctrl_send_zlp_in();
    29cc:	4b0b      	ldr	r3, [pc, #44]	; (29fc <_usb_ep0_on_setup+0xe0>)
    29ce:	4798      	blx	r3
				return;
    29d0:	e7b7      	b.n	2942 <_usb_ep0_on_setup+0x26>
    29d2:	46c0      	nop			; (mov r8, r8)
    29d4:	200006ca 	.word	0x200006ca
    29d8:	200009ec 	.word	0x200009ec
    29dc:	00002619 	.word	0x00002619
    29e0:	20000a04 	.word	0x20000a04
    29e4:	00000d51 	.word	0x00000d51
    29e8:	200006c8 	.word	0x200006c8
    29ec:	200006c6 	.word	0x200006c6
    29f0:	20000884 	.word	0x20000884
    29f4:	0000367d 	.word	0x0000367d
    29f8:	00002875 	.word	0x00002875
    29fc:	000027e5 	.word	0x000027e5

00002a00 <_usb_on_sof_notify>:
{
    2a00:	b510      	push	{r4, lr}
	udc_sof_notify();
    2a02:	4b01      	ldr	r3, [pc, #4]	; (2a08 <_usb_on_sof_notify+0x8>)
    2a04:	4798      	blx	r3
}
    2a06:	bd10      	pop	{r4, pc}
    2a08:	00000d0d 	.word	0x00000d0d

00002a0c <udd_ep_abort>:
{
    2a0c:	b510      	push	{r4, lr}
    2a0e:	0004      	movs	r4, r0
	usb_device_endpoint_abort_job(&usb_device, ep);
    2a10:	0001      	movs	r1, r0
    2a12:	480a      	ldr	r0, [pc, #40]	; (2a3c <udd_ep_abort+0x30>)
    2a14:	4b0a      	ldr	r3, [pc, #40]	; (2a40 <udd_ep_abort+0x34>)
    2a16:	4798      	blx	r3
	ptr_job = udd_ep_get_job(ep);
    2a18:	0020      	movs	r0, r4
    2a1a:	4b0a      	ldr	r3, [pc, #40]	; (2a44 <udd_ep_abort+0x38>)
    2a1c:	4798      	blx	r3
	if (!ptr_job->busy) {
    2a1e:	7c83      	ldrb	r3, [r0, #18]
    2a20:	07db      	lsls	r3, r3, #31
    2a22:	d50a      	bpl.n	2a3a <udd_ep_abort+0x2e>
	ptr_job->busy = false;
    2a24:	7c83      	ldrb	r3, [r0, #18]
    2a26:	2201      	movs	r2, #1
    2a28:	4393      	bics	r3, r2
    2a2a:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    2a2c:	6803      	ldr	r3, [r0, #0]
    2a2e:	2b00      	cmp	r3, #0
    2a30:	d003      	beq.n	2a3a <udd_ep_abort+0x2e>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    2a32:	68c1      	ldr	r1, [r0, #12]
    2a34:	0022      	movs	r2, r4
    2a36:	2001      	movs	r0, #1
    2a38:	4798      	blx	r3
}
    2a3a:	bd10      	pop	{r4, pc}
    2a3c:	20000884 	.word	0x20000884
    2a40:	0000351d 	.word	0x0000351d
    2a44:	00002441 	.word	0x00002441

00002a48 <udd_is_high_speed>:
}
    2a48:	2000      	movs	r0, #0
    2a4a:	4770      	bx	lr

00002a4c <udd_get_frame_number>:
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    2a4c:	4b02      	ldr	r3, [pc, #8]	; (2a58 <udd_get_frame_number+0xc>)
    2a4e:	681b      	ldr	r3, [r3, #0]
    2a50:	8a18      	ldrh	r0, [r3, #16]
    2a52:	0480      	lsls	r0, r0, #18
    2a54:	0d40      	lsrs	r0, r0, #21
}
    2a56:	4770      	bx	lr
    2a58:	20000884 	.word	0x20000884

00002a5c <udd_get_micro_frame_number>:
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.reg));
    2a5c:	4b02      	ldr	r3, [pc, #8]	; (2a68 <udd_get_micro_frame_number+0xc>)
    2a5e:	681b      	ldr	r3, [r3, #0]
    2a60:	8a18      	ldrh	r0, [r3, #16]
    2a62:	b280      	uxth	r0, r0
}
    2a64:	4770      	bx	lr
    2a66:	46c0      	nop			; (mov r8, r8)
    2a68:	20000884 	.word	0x20000884

00002a6c <udd_ep_free>:
{
    2a6c:	b570      	push	{r4, r5, r6, lr}
    2a6e:	b082      	sub	sp, #8
    2a70:	0004      	movs	r4, r0
	usb_device_endpoint_get_config_defaults(&config_ep);
    2a72:	ad01      	add	r5, sp, #4
    2a74:	0028      	movs	r0, r5
    2a76:	4b0d      	ldr	r3, [pc, #52]	; (2aac <udd_ep_free+0x40>)
    2a78:	4798      	blx	r3
	udd_ep_abort(ep);
    2a7a:	0020      	movs	r0, r4
    2a7c:	4b0c      	ldr	r3, [pc, #48]	; (2ab0 <udd_ep_free+0x44>)
    2a7e:	4798      	blx	r3
	config_ep.ep_address = ep;
    2a80:	702c      	strb	r4, [r5, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    2a82:	2300      	movs	r3, #0
    2a84:	70eb      	strb	r3, [r5, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    2a86:	4e0b      	ldr	r6, [pc, #44]	; (2ab4 <udd_ep_free+0x48>)
    2a88:	0029      	movs	r1, r5
    2a8a:	0030      	movs	r0, r6
    2a8c:	4b0a      	ldr	r3, [pc, #40]	; (2ab8 <udd_ep_free+0x4c>)
    2a8e:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    2a90:	210f      	movs	r1, #15
    2a92:	4021      	ands	r1, r4
    2a94:	2200      	movs	r2, #0
    2a96:	0030      	movs	r0, r6
    2a98:	4b08      	ldr	r3, [pc, #32]	; (2abc <udd_ep_free+0x50>)
    2a9a:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    2a9c:	2200      	movs	r2, #0
    2a9e:	0021      	movs	r1, r4
    2aa0:	0030      	movs	r0, r6
    2aa2:	4b07      	ldr	r3, [pc, #28]	; (2ac0 <udd_ep_free+0x54>)
    2aa4:	4798      	blx	r3
}
    2aa6:	b002      	add	sp, #8
    2aa8:	bd70      	pop	{r4, r5, r6, pc}
    2aaa:	46c0      	nop			; (mov r8, r8)
    2aac:	000032c9 	.word	0x000032c9
    2ab0:	00002a0d 	.word	0x00002a0d
    2ab4:	20000884 	.word	0x20000884
    2ab8:	000032d9 	.word	0x000032d9
    2abc:	00003101 	.word	0x00003101
    2ac0:	000031f9 	.word	0x000031f9

00002ac4 <udd_ep_alloc>:
{
    2ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ac6:	b083      	sub	sp, #12
    2ac8:	0005      	movs	r5, r0
    2aca:	000f      	movs	r7, r1
    2acc:	0014      	movs	r4, r2
	usb_device_endpoint_get_config_defaults(&config_ep);
    2ace:	ae01      	add	r6, sp, #4
    2ad0:	0030      	movs	r0, r6
    2ad2:	4b36      	ldr	r3, [pc, #216]	; (2bac <udd_ep_alloc+0xe8>)
    2ad4:	4798      	blx	r3
	config_ep.ep_address = ep;
    2ad6:	7035      	strb	r5, [r6, #0]
	if(MaxEndpointSize <= 8) {
    2ad8:	2c08      	cmp	r4, #8
    2ada:	d813      	bhi.n	2b04 <udd_ep_alloc+0x40>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    2adc:	2200      	movs	r2, #0
    2ade:	ab01      	add	r3, sp, #4
    2ae0:	705a      	strb	r2, [r3, #1]
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    2ae2:	0028      	movs	r0, r5
    2ae4:	4b32      	ldr	r3, [pc, #200]	; (2bb0 <udd_ep_alloc+0xec>)
    2ae6:	4798      	blx	r3
	ptr_job->ep_size = MaxEndpointSize;
    2ae8:	8204      	strh	r4, [r0, #16]
	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    2aea:	2103      	movs	r1, #3
    2aec:	4039      	ands	r1, r7
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    2aee:	2901      	cmp	r1, #1
    2af0:	d038      	beq.n	2b64 <udd_ep_alloc+0xa0>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    2af2:	2902      	cmp	r1, #2
    2af4:	d043      	beq.n	2b7e <udd_ep_alloc+0xba>
		return false;
    2af6:	2300      	movs	r3, #0
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    2af8:	2903      	cmp	r1, #3
    2afa:	d13d      	bne.n	2b78 <udd_ep_alloc+0xb4>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    2afc:	2204      	movs	r2, #4
    2afe:	ab01      	add	r3, sp, #4
    2b00:	70da      	strb	r2, [r3, #3]
    2b02:	e032      	b.n	2b6a <udd_ep_alloc+0xa6>
	} else if(MaxEndpointSize <= 16) {
    2b04:	2c10      	cmp	r4, #16
    2b06:	d803      	bhi.n	2b10 <udd_ep_alloc+0x4c>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    2b08:	2201      	movs	r2, #1
    2b0a:	ab01      	add	r3, sp, #4
    2b0c:	705a      	strb	r2, [r3, #1]
    2b0e:	e7e8      	b.n	2ae2 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 32) {
    2b10:	2c20      	cmp	r4, #32
    2b12:	d803      	bhi.n	2b1c <udd_ep_alloc+0x58>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    2b14:	2202      	movs	r2, #2
    2b16:	ab01      	add	r3, sp, #4
    2b18:	705a      	strb	r2, [r3, #1]
    2b1a:	e7e2      	b.n	2ae2 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 64) {
    2b1c:	2c40      	cmp	r4, #64	; 0x40
    2b1e:	d803      	bhi.n	2b28 <udd_ep_alloc+0x64>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    2b20:	2203      	movs	r2, #3
    2b22:	ab01      	add	r3, sp, #4
    2b24:	705a      	strb	r2, [r3, #1]
    2b26:	e7dc      	b.n	2ae2 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 128) {
    2b28:	2c80      	cmp	r4, #128	; 0x80
    2b2a:	d803      	bhi.n	2b34 <udd_ep_alloc+0x70>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    2b2c:	2204      	movs	r2, #4
    2b2e:	ab01      	add	r3, sp, #4
    2b30:	705a      	strb	r2, [r3, #1]
    2b32:	e7d6      	b.n	2ae2 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 256) {
    2b34:	2380      	movs	r3, #128	; 0x80
    2b36:	005b      	lsls	r3, r3, #1
    2b38:	429c      	cmp	r4, r3
    2b3a:	d803      	bhi.n	2b44 <udd_ep_alloc+0x80>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    2b3c:	2205      	movs	r2, #5
    2b3e:	ab01      	add	r3, sp, #4
    2b40:	705a      	strb	r2, [r3, #1]
    2b42:	e7ce      	b.n	2ae2 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 512) {
    2b44:	2380      	movs	r3, #128	; 0x80
    2b46:	009b      	lsls	r3, r3, #2
    2b48:	429c      	cmp	r4, r3
    2b4a:	d803      	bhi.n	2b54 <udd_ep_alloc+0x90>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    2b4c:	2206      	movs	r2, #6
    2b4e:	ab01      	add	r3, sp, #4
    2b50:	705a      	strb	r2, [r3, #1]
    2b52:	e7c6      	b.n	2ae2 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 1023) {
    2b54:	4a17      	ldr	r2, [pc, #92]	; (2bb4 <udd_ep_alloc+0xf0>)
		return false;
    2b56:	2300      	movs	r3, #0
	} else if(MaxEndpointSize <= 1023) {
    2b58:	4294      	cmp	r4, r2
    2b5a:	d80d      	bhi.n	2b78 <udd_ep_alloc+0xb4>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    2b5c:	2207      	movs	r2, #7
    2b5e:	ab01      	add	r3, sp, #4
    2b60:	705a      	strb	r2, [r3, #1]
    2b62:	e7be      	b.n	2ae2 <udd_ep_alloc+0x1e>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    2b64:	2202      	movs	r2, #2
    2b66:	ab01      	add	r3, sp, #4
    2b68:	70da      	strb	r2, [r3, #3]
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    2b6a:	a901      	add	r1, sp, #4
    2b6c:	4812      	ldr	r0, [pc, #72]	; (2bb8 <udd_ep_alloc+0xf4>)
    2b6e:	4b13      	ldr	r3, [pc, #76]	; (2bbc <udd_ep_alloc+0xf8>)
    2b70:	4798      	blx	r3
		return false;
    2b72:	2300      	movs	r3, #0
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    2b74:	2800      	cmp	r0, #0
    2b76:	d006      	beq.n	2b86 <udd_ep_alloc+0xc2>
}
    2b78:	0018      	movs	r0, r3
    2b7a:	b003      	add	sp, #12
    2b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    2b7e:	2203      	movs	r2, #3
    2b80:	ab01      	add	r3, sp, #4
    2b82:	70da      	strb	r2, [r3, #3]
    2b84:	e7f1      	b.n	2b6a <udd_ep_alloc+0xa6>
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    2b86:	210f      	movs	r1, #15
    2b88:	4029      	ands	r1, r5
    2b8a:	4c0b      	ldr	r4, [pc, #44]	; (2bb8 <udd_ep_alloc+0xf4>)
    2b8c:	4b0c      	ldr	r3, [pc, #48]	; (2bc0 <udd_ep_alloc+0xfc>)
    2b8e:	2200      	movs	r2, #0
    2b90:	0020      	movs	r0, r4
    2b92:	4e0c      	ldr	r6, [pc, #48]	; (2bc4 <udd_ep_alloc+0x100>)
    2b94:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    2b96:	2200      	movs	r2, #0
    2b98:	0029      	movs	r1, r5
    2b9a:	0020      	movs	r0, r4
    2b9c:	4e0a      	ldr	r6, [pc, #40]	; (2bc8 <udd_ep_alloc+0x104>)
    2b9e:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    2ba0:	2201      	movs	r2, #1
    2ba2:	0029      	movs	r1, r5
    2ba4:	0020      	movs	r0, r4
    2ba6:	47b0      	blx	r6
	return true;
    2ba8:	2301      	movs	r3, #1
    2baa:	e7e5      	b.n	2b78 <udd_ep_alloc+0xb4>
    2bac:	000032c9 	.word	0x000032c9
    2bb0:	00002441 	.word	0x00002441
    2bb4:	000003ff 	.word	0x000003ff
    2bb8:	20000884 	.word	0x20000884
    2bbc:	000032d9 	.word	0x000032d9
    2bc0:	00002465 	.word	0x00002465
    2bc4:	000030d9 	.word	0x000030d9
    2bc8:	00003129 	.word	0x00003129

00002bcc <udd_ep_is_halted>:
{
    2bcc:	b510      	push	{r4, lr}
    2bce:	0001      	movs	r1, r0
	return usb_device_endpoint_is_halted(&usb_device, ep);
    2bd0:	4801      	ldr	r0, [pc, #4]	; (2bd8 <udd_ep_is_halted+0xc>)
    2bd2:	4b02      	ldr	r3, [pc, #8]	; (2bdc <udd_ep_is_halted+0x10>)
    2bd4:	4798      	blx	r3
}
    2bd6:	bd10      	pop	{r4, pc}
    2bd8:	20000884 	.word	0x20000884
    2bdc:	00003553 	.word	0x00003553

00002be0 <udd_ep_set_halt>:
{
    2be0:	b510      	push	{r4, lr}
    2be2:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    2be4:	230f      	movs	r3, #15
    2be6:	4003      	ands	r3, r0
		return false;
    2be8:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    2bea:	2b03      	cmp	r3, #3
    2bec:	d900      	bls.n	2bf0 <udd_ep_set_halt+0x10>
}
    2bee:	bd10      	pop	{r4, pc}
	usb_device_endpoint_set_halt(&usb_device, ep);
    2bf0:	0021      	movs	r1, r4
    2bf2:	4804      	ldr	r0, [pc, #16]	; (2c04 <udd_ep_set_halt+0x24>)
    2bf4:	4b04      	ldr	r3, [pc, #16]	; (2c08 <udd_ep_set_halt+0x28>)
    2bf6:	4798      	blx	r3
	udd_ep_abort(ep);
    2bf8:	0020      	movs	r0, r4
    2bfa:	4b04      	ldr	r3, [pc, #16]	; (2c0c <udd_ep_set_halt+0x2c>)
    2bfc:	4798      	blx	r3
	return true;
    2bfe:	2001      	movs	r0, #1
    2c00:	e7f5      	b.n	2bee <udd_ep_set_halt+0xe>
    2c02:	46c0      	nop			; (mov r8, r8)
    2c04:	20000884 	.word	0x20000884
    2c08:	0000357d 	.word	0x0000357d
    2c0c:	00002a0d 	.word	0x00002a0d

00002c10 <_usb_ep0_on_tansfer_ok>:
{
    2c10:	b570      	push	{r4, r5, r6, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    2c12:	4b34      	ldr	r3, [pc, #208]	; (2ce4 <_usb_ep0_on_tansfer_ok+0xd4>)
    2c14:	781b      	ldrb	r3, [r3, #0]
    2c16:	2b01      	cmp	r3, #1
    2c18:	d00a      	beq.n	2c30 <_usb_ep0_on_tansfer_ok+0x20>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    2c1a:	2b02      	cmp	r3, #2
    2c1c:	d05f      	beq.n	2cde <_usb_ep0_on_tansfer_ok+0xce>
			if (NULL != udd_g_ctrlreq.callback) {
    2c1e:	4b32      	ldr	r3, [pc, #200]	; (2ce8 <_usb_ep0_on_tansfer_ok+0xd8>)
    2c20:	691b      	ldr	r3, [r3, #16]
    2c22:	2b00      	cmp	r3, #0
    2c24:	d000      	beq.n	2c28 <_usb_ep0_on_tansfer_ok+0x18>
				udd_g_ctrlreq.callback();
    2c26:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    2c28:	2200      	movs	r2, #0
    2c2a:	4b2e      	ldr	r3, [pc, #184]	; (2ce4 <_usb_ep0_on_tansfer_ok+0xd4>)
    2c2c:	701a      	strb	r2, [r3, #0]
}
    2c2e:	bd70      	pop	{r4, r5, r6, pc}
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    2c30:	880d      	ldrh	r5, [r1, #0]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2c32:	4b2d      	ldr	r3, [pc, #180]	; (2ce8 <_usb_ep0_on_tansfer_ok+0xd8>)
    2c34:	899b      	ldrh	r3, [r3, #12]
    2c36:	4a2d      	ldr	r2, [pc, #180]	; (2cec <_usb_ep0_on_tansfer_ok+0xdc>)
    2c38:	8814      	ldrh	r4, [r2, #0]
    2c3a:	1962      	adds	r2, r4, r5
    2c3c:	4293      	cmp	r3, r2
    2c3e:	da01      	bge.n	2c44 <_usb_ep0_on_tansfer_ok+0x34>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2c40:	1b1d      	subs	r5, r3, r4
    2c42:	b2ad      	uxth	r5, r5
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    2c44:	4b28      	ldr	r3, [pc, #160]	; (2ce8 <_usb_ep0_on_tansfer_ok+0xd8>)
    2c46:	6898      	ldr	r0, [r3, #8]
    2c48:	1900      	adds	r0, r0, r4
    2c4a:	002a      	movs	r2, r5
    2c4c:	4928      	ldr	r1, [pc, #160]	; (2cf0 <_usb_ep0_on_tansfer_ok+0xe0>)
    2c4e:	4b29      	ldr	r3, [pc, #164]	; (2cf4 <_usb_ep0_on_tansfer_ok+0xe4>)
    2c50:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    2c52:	1964      	adds	r4, r4, r5
    2c54:	b2a4      	uxth	r4, r4
    2c56:	4b25      	ldr	r3, [pc, #148]	; (2cec <_usb_ep0_on_tansfer_ok+0xdc>)
    2c58:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    2c5a:	2d40      	cmp	r5, #64	; 0x40
    2c5c:	d00a      	beq.n	2c74 <_usb_ep0_on_tansfer_ok+0x64>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2c5e:	4b22      	ldr	r3, [pc, #136]	; (2ce8 <_usb_ep0_on_tansfer_ok+0xd8>)
    2c60:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2c62:	695b      	ldr	r3, [r3, #20]
    2c64:	2b00      	cmp	r3, #0
    2c66:	d002      	beq.n	2c6e <_usb_ep0_on_tansfer_ok+0x5e>
			if (!udd_g_ctrlreq.over_under_run()) {
    2c68:	4798      	blx	r3
    2c6a:	2800      	cmp	r0, #0
    2c6c:	d014      	beq.n	2c98 <_usb_ep0_on_tansfer_ok+0x88>
		udd_ctrl_send_zlp_in();
    2c6e:	4b22      	ldr	r3, [pc, #136]	; (2cf8 <_usb_ep0_on_tansfer_ok+0xe8>)
    2c70:	4798      	blx	r3
    2c72:	e7dc      	b.n	2c2e <_usb_ep0_on_tansfer_ok+0x1e>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    2c74:	4b1c      	ldr	r3, [pc, #112]	; (2ce8 <_usb_ep0_on_tansfer_ok+0xd8>)
    2c76:	88da      	ldrh	r2, [r3, #6]
    2c78:	4b20      	ldr	r3, [pc, #128]	; (2cfc <_usb_ep0_on_tansfer_ok+0xec>)
    2c7a:	881b      	ldrh	r3, [r3, #0]
    2c7c:	191b      	adds	r3, r3, r4
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    2c7e:	429a      	cmp	r2, r3
    2c80:	dded      	ble.n	2c5e <_usb_ep0_on_tansfer_ok+0x4e>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2c82:	4b19      	ldr	r3, [pc, #100]	; (2ce8 <_usb_ep0_on_tansfer_ok+0xd8>)
    2c84:	899b      	ldrh	r3, [r3, #12]
    2c86:	42a3      	cmp	r3, r4
    2c88:	d00c      	beq.n	2ca4 <_usb_ep0_on_tansfer_ok+0x94>
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    2c8a:	2340      	movs	r3, #64	; 0x40
    2c8c:	4a18      	ldr	r2, [pc, #96]	; (2cf0 <_usb_ep0_on_tansfer_ok+0xe0>)
    2c8e:	2100      	movs	r1, #0
    2c90:	481b      	ldr	r0, [pc, #108]	; (2d00 <_usb_ep0_on_tansfer_ok+0xf0>)
    2c92:	4c1c      	ldr	r4, [pc, #112]	; (2d04 <_usb_ep0_on_tansfer_ok+0xf4>)
    2c94:	47a0      	blx	r4
    2c96:	e7ca      	b.n	2c2e <_usb_ep0_on_tansfer_ok+0x1e>
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2c98:	2205      	movs	r2, #5
    2c9a:	4b12      	ldr	r3, [pc, #72]	; (2ce4 <_usb_ep0_on_tansfer_ok+0xd4>)
    2c9c:	701a      	strb	r2, [r3, #0]
				udd_ep_set_halt(0);
    2c9e:	4b1a      	ldr	r3, [pc, #104]	; (2d08 <_usb_ep0_on_tansfer_ok+0xf8>)
    2ca0:	4798      	blx	r3
    2ca2:	e7c4      	b.n	2c2e <_usb_ep0_on_tansfer_ok+0x1e>
		if (!udd_g_ctrlreq.over_under_run) {
    2ca4:	4b10      	ldr	r3, [pc, #64]	; (2ce8 <_usb_ep0_on_tansfer_ok+0xd8>)
    2ca6:	695b      	ldr	r3, [r3, #20]
    2ca8:	2b00      	cmp	r3, #0
    2caa:	d00b      	beq.n	2cc4 <_usb_ep0_on_tansfer_ok+0xb4>
		if (!udd_g_ctrlreq.over_under_run()) {
    2cac:	4798      	blx	r3
    2cae:	2800      	cmp	r0, #0
    2cb0:	d00f      	beq.n	2cd2 <_usb_ep0_on_tansfer_ok+0xc2>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2cb2:	4912      	ldr	r1, [pc, #72]	; (2cfc <_usb_ep0_on_tansfer_ok+0xec>)
    2cb4:	4a0d      	ldr	r2, [pc, #52]	; (2cec <_usb_ep0_on_tansfer_ok+0xdc>)
    2cb6:	880b      	ldrh	r3, [r1, #0]
    2cb8:	8810      	ldrh	r0, [r2, #0]
    2cba:	181b      	adds	r3, r3, r0
    2cbc:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
    2cbe:	2300      	movs	r3, #0
    2cc0:	8013      	strh	r3, [r2, #0]
    2cc2:	e7e2      	b.n	2c8a <_usb_ep0_on_tansfer_ok+0x7a>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2cc4:	2205      	movs	r2, #5
    2cc6:	4b07      	ldr	r3, [pc, #28]	; (2ce4 <_usb_ep0_on_tansfer_ok+0xd4>)
    2cc8:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    2cca:	2000      	movs	r0, #0
    2ccc:	4b0e      	ldr	r3, [pc, #56]	; (2d08 <_usb_ep0_on_tansfer_ok+0xf8>)
    2cce:	4798      	blx	r3
    2cd0:	e7ad      	b.n	2c2e <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2cd2:	2205      	movs	r2, #5
    2cd4:	4b03      	ldr	r3, [pc, #12]	; (2ce4 <_usb_ep0_on_tansfer_ok+0xd4>)
    2cd6:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    2cd8:	4b0b      	ldr	r3, [pc, #44]	; (2d08 <_usb_ep0_on_tansfer_ok+0xf8>)
    2cda:	4798      	blx	r3
    2cdc:	e7a7      	b.n	2c2e <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ctrl_in_sent();
    2cde:	4b0b      	ldr	r3, [pc, #44]	; (2d0c <_usb_ep0_on_tansfer_ok+0xfc>)
    2ce0:	4798      	blx	r3
    2ce2:	e7a4      	b.n	2c2e <_usb_ep0_on_tansfer_ok+0x1e>
    2ce4:	200006ca 	.word	0x200006ca
    2ce8:	200009ec 	.word	0x200009ec
    2cec:	200006c6 	.word	0x200006c6
    2cf0:	20000a04 	.word	0x20000a04
    2cf4:	00004f55 	.word	0x00004f55
    2cf8:	000027e5 	.word	0x000027e5
    2cfc:	200006c8 	.word	0x200006c8
    2d00:	20000884 	.word	0x20000884
    2d04:	0000367d 	.word	0x0000367d
    2d08:	00002be1 	.word	0x00002be1
    2d0c:	00002875 	.word	0x00002875

00002d10 <udd_ep_clear_halt>:
{
    2d10:	b570      	push	{r4, r5, r6, lr}
    2d12:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    2d14:	230f      	movs	r3, #15
    2d16:	4003      	ands	r3, r0
		return false;
    2d18:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    2d1a:	2b03      	cmp	r3, #3
    2d1c:	d900      	bls.n	2d20 <udd_ep_clear_halt+0x10>
}
    2d1e:	bd70      	pop	{r4, r5, r6, pc}
	ptr_job = udd_ep_get_job(ep);
    2d20:	0020      	movs	r0, r4
    2d22:	4b09      	ldr	r3, [pc, #36]	; (2d48 <udd_ep_clear_halt+0x38>)
    2d24:	4798      	blx	r3
    2d26:	0005      	movs	r5, r0
	usb_device_endpoint_clear_halt(&usb_device, ep);
    2d28:	0021      	movs	r1, r4
    2d2a:	4808      	ldr	r0, [pc, #32]	; (2d4c <udd_ep_clear_halt+0x3c>)
    2d2c:	4b08      	ldr	r3, [pc, #32]	; (2d50 <udd_ep_clear_halt+0x40>)
    2d2e:	4798      	blx	r3
	if (ptr_job->busy == true) {
    2d30:	7cab      	ldrb	r3, [r5, #18]
	return true;
    2d32:	2001      	movs	r0, #1
	if (ptr_job->busy == true) {
    2d34:	07db      	lsls	r3, r3, #31
    2d36:	d5f2      	bpl.n	2d1e <udd_ep_clear_halt+0xe>
		ptr_job->busy = false;
    2d38:	7cab      	ldrb	r3, [r5, #18]
    2d3a:	2201      	movs	r2, #1
    2d3c:	4393      	bics	r3, r2
    2d3e:	74ab      	strb	r3, [r5, #18]
		ptr_job->call_nohalt();
    2d40:	682b      	ldr	r3, [r5, #0]
    2d42:	4798      	blx	r3
	return true;
    2d44:	2001      	movs	r0, #1
    2d46:	e7ea      	b.n	2d1e <udd_ep_clear_halt+0xe>
    2d48:	00002441 	.word	0x00002441
    2d4c:	20000884 	.word	0x20000884
    2d50:	000035a3 	.word	0x000035a3

00002d54 <udd_ep_run>:
{
    2d54:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d56:	b087      	sub	sp, #28
    2d58:	0005      	movs	r5, r0
    2d5a:	9103      	str	r1, [sp, #12]
    2d5c:	9202      	str	r2, [sp, #8]
    2d5e:	9301      	str	r3, [sp, #4]
	ep_num = ep & USB_EP_ADDR_MASK;
    2d60:	260f      	movs	r6, #15
    2d62:	4006      	ands	r6, r0
		return false;
    2d64:	2400      	movs	r4, #0
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    2d66:	2e03      	cmp	r6, #3
    2d68:	d902      	bls.n	2d70 <udd_ep_run+0x1c>
}
    2d6a:	0020      	movs	r0, r4
    2d6c:	b007      	add	sp, #28
    2d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    2d70:	4b64      	ldr	r3, [pc, #400]	; (2f04 <udd_ep_run+0x1b0>)
    2d72:	4798      	blx	r3
    2d74:	1e04      	subs	r4, r0, #0
    2d76:	d000      	beq.n	2d7a <udd_ep_run+0x26>
    2d78:	e0bd      	b.n	2ef6 <udd_ep_run+0x1a2>
	ptr_job = udd_ep_get_job(ep);
    2d7a:	0028      	movs	r0, r5
    2d7c:	4b62      	ldr	r3, [pc, #392]	; (2f08 <udd_ep_run+0x1b4>)
    2d7e:	4798      	blx	r3
    2d80:	0007      	movs	r7, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2d82:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2d86:	425a      	negs	r2, r3
    2d88:	4153      	adcs	r3, r2
    2d8a:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    2d8c:	b672      	cpsid	i
    2d8e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2d92:	2200      	movs	r2, #0
    2d94:	4b5d      	ldr	r3, [pc, #372]	; (2f0c <udd_ep_run+0x1b8>)
    2d96:	701a      	strb	r2, [r3, #0]
	return flags;
    2d98:	9a05      	ldr	r2, [sp, #20]
	if (ptr_job->busy == true) {
    2d9a:	7c83      	ldrb	r3, [r0, #18]
    2d9c:	07db      	lsls	r3, r3, #31
    2d9e:	d508      	bpl.n	2db2 <udd_ep_run+0x5e>
	if (cpu_irq_is_enabled_flags(flags))
    2da0:	2a00      	cmp	r2, #0
    2da2:	d0e2      	beq.n	2d6a <udd_ep_run+0x16>
		cpu_irq_enable();
    2da4:	2201      	movs	r2, #1
    2da6:	4b59      	ldr	r3, [pc, #356]	; (2f0c <udd_ep_run+0x1b8>)
    2da8:	701a      	strb	r2, [r3, #0]
    2daa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2dae:	b662      	cpsie	i
    2db0:	e7db      	b.n	2d6a <udd_ep_run+0x16>
	ptr_job->busy = true;
    2db2:	7c83      	ldrb	r3, [r0, #18]
    2db4:	2101      	movs	r1, #1
    2db6:	430b      	orrs	r3, r1
    2db8:	7483      	strb	r3, [r0, #18]
	if (cpu_irq_is_enabled_flags(flags))
    2dba:	2a00      	cmp	r2, #0
    2dbc:	d005      	beq.n	2dca <udd_ep_run+0x76>
		cpu_irq_enable();
    2dbe:	2201      	movs	r2, #1
    2dc0:	4b52      	ldr	r3, [pc, #328]	; (2f0c <udd_ep_run+0x1b8>)
    2dc2:	701a      	strb	r2, [r3, #0]
    2dc4:	f3bf 8f5f 	dmb	sy
    2dc8:	b662      	cpsie	i
	ptr_job->buf = buf;
    2dca:	9b02      	ldr	r3, [sp, #8]
    2dcc:	607b      	str	r3, [r7, #4]
	ptr_job->buf_size = buf_size;
    2dce:	9b01      	ldr	r3, [sp, #4]
    2dd0:	60bb      	str	r3, [r7, #8]
	ptr_job->nb_trans = 0;
    2dd2:	2300      	movs	r3, #0
    2dd4:	60fb      	str	r3, [r7, #12]
	ptr_job->call_trans = callback;
    2dd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2dd8:	603b      	str	r3, [r7, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    2dda:	2301      	movs	r3, #1
    2ddc:	9a03      	ldr	r2, [sp, #12]
    2dde:	4013      	ands	r3, r2
    2de0:	005a      	lsls	r2, r3, #1
    2de2:	7cbb      	ldrb	r3, [r7, #18]
    2de4:	2102      	movs	r1, #2
    2de6:	438b      	bics	r3, r1
	ptr_job->b_use_out_cache_buffer = false;
    2de8:	4313      	orrs	r3, r2
    2dea:	2204      	movs	r2, #4
    2dec:	4393      	bics	r3, r2
    2dee:	74bb      	strb	r3, [r7, #18]
	if (ep & USB_EP_DIR_IN) {
    2df0:	b26b      	sxtb	r3, r5
    2df2:	2b00      	cmp	r3, #0
    2df4:	db20      	blt.n	2e38 <udd_ep_run+0xe4>
		if (0 != ptr_job->buf_size) {
    2df6:	9b01      	ldr	r3, [sp, #4]
    2df8:	2b00      	cmp	r3, #0
    2dfa:	d06f      	beq.n	2edc <udd_ep_run+0x188>
			next_trans = ptr_job->buf_size;
    2dfc:	b29c      	uxth	r4, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    2dfe:	4b44      	ldr	r3, [pc, #272]	; (2f10 <udd_ep_run+0x1bc>)
    2e00:	429c      	cmp	r4, r3
    2e02:	d95a      	bls.n	2eba <udd_ep_run+0x166>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    2e04:	8a39      	ldrh	r1, [r7, #16]
    2e06:	001c      	movs	r4, r3
    2e08:	0018      	movs	r0, r3
    2e0a:	4b42      	ldr	r3, [pc, #264]	; (2f14 <udd_ep_run+0x1c0>)
    2e0c:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    2e0e:	1a63      	subs	r3, r4, r1
    2e10:	b29a      	uxth	r2, r3
			if (next_trans < ptr_job->ep_size) {
    2e12:	8a3b      	ldrh	r3, [r7, #16]
    2e14:	429a      	cmp	r2, r3
    2e16:	d257      	bcs.n	2ec8 <udd_ep_run+0x174>
				ptr_job->b_use_out_cache_buffer = true;
    2e18:	7cba      	ldrb	r2, [r7, #18]
    2e1a:	2104      	movs	r1, #4
    2e1c:	430a      	orrs	r2, r1
    2e1e:	74ba      	strb	r2, [r7, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
    2e20:	1e72      	subs	r2, r6, #1
    2e22:	0192      	lsls	r2, r2, #6
    2e24:	493c      	ldr	r1, [pc, #240]	; (2f18 <udd_ep_run+0x1c4>)
    2e26:	1852      	adds	r2, r2, r1
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    2e28:	0031      	movs	r1, r6
    2e2a:	483c      	ldr	r0, [pc, #240]	; (2f1c <udd_ep_run+0x1c8>)
    2e2c:	4c3c      	ldr	r4, [pc, #240]	; (2f20 <udd_ep_run+0x1cc>)
    2e2e:	47a0      	blx	r4
				return (STATUS_OK ==
    2e30:	4244      	negs	r4, r0
    2e32:	4144      	adcs	r4, r0
    2e34:	b2e4      	uxtb	r4, r4
    2e36:	e798      	b.n	2d6a <udd_ep_run+0x16>
		if (0 != ptr_job->buf_size) {
    2e38:	9b01      	ldr	r3, [sp, #4]
    2e3a:	2b00      	cmp	r3, #0
    2e3c:	d027      	beq.n	2e8e <udd_ep_run+0x13a>
			next_trans = ptr_job->buf_size;
    2e3e:	b29d      	uxth	r5, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    2e40:	4b33      	ldr	r3, [pc, #204]	; (2f10 <udd_ep_run+0x1bc>)
    2e42:	429d      	cmp	r5, r3
    2e44:	d906      	bls.n	2e54 <udd_ep_run+0x100>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    2e46:	8a39      	ldrh	r1, [r7, #16]
    2e48:	001d      	movs	r5, r3
    2e4a:	0018      	movs	r0, r3
    2e4c:	4b31      	ldr	r3, [pc, #196]	; (2f14 <udd_ep_run+0x1c0>)
    2e4e:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    2e50:	1a6b      	subs	r3, r5, r1
    2e52:	b29d      	uxth	r5, r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    2e54:	7cbb      	ldrb	r3, [r7, #18]
    2e56:	079b      	lsls	r3, r3, #30
    2e58:	d507      	bpl.n	2e6a <udd_ep_run+0x116>
					(0 == (next_trans % ptr_job->ep_size));
    2e5a:	8a39      	ldrh	r1, [r7, #16]
    2e5c:	0028      	movs	r0, r5
    2e5e:	4b31      	ldr	r3, [pc, #196]	; (2f24 <udd_ep_run+0x1d0>)
    2e60:	4798      	blx	r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    2e62:	b289      	uxth	r1, r1
    2e64:	424c      	negs	r4, r1
    2e66:	414c      	adcs	r4, r1
    2e68:	b2e4      	uxtb	r4, r4
    2e6a:	2001      	movs	r0, #1
    2e6c:	4020      	ands	r0, r4
    2e6e:	0040      	lsls	r0, r0, #1
    2e70:	7cbc      	ldrb	r4, [r7, #18]
    2e72:	2302      	movs	r3, #2
    2e74:	439c      	bics	r4, r3
    2e76:	4304      	orrs	r4, r0
    2e78:	74bc      	strb	r4, [r7, #18]
				usb_device_endpoint_write_buffer_job(&usb_device,
    2e7a:	002b      	movs	r3, r5
    2e7c:	9a02      	ldr	r2, [sp, #8]
    2e7e:	0031      	movs	r1, r6
    2e80:	4826      	ldr	r0, [pc, #152]	; (2f1c <udd_ep_run+0x1c8>)
    2e82:	4c29      	ldr	r4, [pc, #164]	; (2f28 <udd_ep_run+0x1d4>)
    2e84:	47a0      	blx	r4
		return (STATUS_OK ==
    2e86:	4244      	negs	r4, r0
    2e88:	4144      	adcs	r4, r0
    2e8a:	b2e4      	uxtb	r4, r4
    2e8c:	e76d      	b.n	2d6a <udd_ep_run+0x16>
		} else if (true == ptr_job->b_shortpacket) {
    2e8e:	7cbb      	ldrb	r3, [r7, #18]
    2e90:	079b      	lsls	r3, r3, #30
    2e92:	d505      	bpl.n	2ea0 <udd_ep_run+0x14c>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    2e94:	7cbb      	ldrb	r3, [r7, #18]
    2e96:	2202      	movs	r2, #2
    2e98:	4393      	bics	r3, r2
    2e9a:	74bb      	strb	r3, [r7, #18]
			next_trans = 0;
    2e9c:	2500      	movs	r5, #0
    2e9e:	e7ec      	b.n	2e7a <udd_ep_run+0x126>
			ptr_job->busy = false;
    2ea0:	7cbb      	ldrb	r3, [r7, #18]
    2ea2:	2201      	movs	r2, #1
    2ea4:	4393      	bics	r3, r2
    2ea6:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    2ea8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2eaa:	2b00      	cmp	r3, #0
    2eac:	d025      	beq.n	2efa <udd_ep_run+0x1a6>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    2eae:	002a      	movs	r2, r5
    2eb0:	2100      	movs	r1, #0
    2eb2:	2000      	movs	r0, #0
    2eb4:	4798      	blx	r3
			return true;
    2eb6:	2401      	movs	r4, #1
    2eb8:	e757      	b.n	2d6a <udd_ep_run+0x16>
				next_trans -= next_trans % ptr_job->ep_size;
    2eba:	8a39      	ldrh	r1, [r7, #16]
    2ebc:	0020      	movs	r0, r4
    2ebe:	4b19      	ldr	r3, [pc, #100]	; (2f24 <udd_ep_run+0x1d0>)
    2ec0:	4798      	blx	r3
    2ec2:	1a63      	subs	r3, r4, r1
    2ec4:	b29a      	uxth	r2, r3
    2ec6:	e7a4      	b.n	2e12 <udd_ep_run+0xbe>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    2ec8:	0013      	movs	r3, r2
    2eca:	9a02      	ldr	r2, [sp, #8]
    2ecc:	0031      	movs	r1, r6
    2ece:	4813      	ldr	r0, [pc, #76]	; (2f1c <udd_ep_run+0x1c8>)
    2ed0:	4c13      	ldr	r4, [pc, #76]	; (2f20 <udd_ep_run+0x1cc>)
    2ed2:	47a0      	blx	r4
				return (STATUS_OK ==
    2ed4:	4244      	negs	r4, r0
    2ed6:	4144      	adcs	r4, r0
    2ed8:	b2e4      	uxtb	r4, r4
    2eda:	e746      	b.n	2d6a <udd_ep_run+0x16>
			ptr_job->busy = false;
    2edc:	7cbb      	ldrb	r3, [r7, #18]
    2ede:	2201      	movs	r2, #1
    2ee0:	4393      	bics	r3, r2
    2ee2:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    2ee4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2ee6:	2b00      	cmp	r3, #0
    2ee8:	d009      	beq.n	2efe <udd_ep_run+0x1aa>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    2eea:	002a      	movs	r2, r5
    2eec:	2100      	movs	r1, #0
    2eee:	2000      	movs	r0, #0
    2ef0:	4798      	blx	r3
			return true;
    2ef2:	2401      	movs	r4, #1
    2ef4:	e739      	b.n	2d6a <udd_ep_run+0x16>
		return false;
    2ef6:	2400      	movs	r4, #0
    2ef8:	e737      	b.n	2d6a <udd_ep_run+0x16>
			return true;
    2efa:	2401      	movs	r4, #1
    2efc:	e735      	b.n	2d6a <udd_ep_run+0x16>
			return true;
    2efe:	2401      	movs	r4, #1
    2f00:	e733      	b.n	2d6a <udd_ep_run+0x16>
    2f02:	46c0      	nop			; (mov r8, r8)
    2f04:	00002bcd 	.word	0x00002bcd
    2f08:	00002441 	.word	0x00002441
    2f0c:	20000112 	.word	0x20000112
    2f10:	00001fff 	.word	0x00001fff
    2f14:	00004e6d 	.word	0x00004e6d
    2f18:	200007c4 	.word	0x200007c4
    2f1c:	20000884 	.word	0x20000884
    2f20:	0000367d 	.word	0x0000367d
    2f24:	00004c99 	.word	0x00004c99
    2f28:	00003629 	.word	0x00003629

00002f2c <udd_set_address>:
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    2f2c:	4b02      	ldr	r3, [pc, #8]	; (2f38 <udd_set_address+0xc>)
    2f2e:	681b      	ldr	r3, [r3, #0]
    2f30:	2280      	movs	r2, #128	; 0x80
    2f32:	4310      	orrs	r0, r2
    2f34:	7298      	strb	r0, [r3, #10]
}
    2f36:	4770      	bx	lr
    2f38:	20000884 	.word	0x20000884

00002f3c <udd_getaddress>:
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    2f3c:	4b02      	ldr	r3, [pc, #8]	; (2f48 <udd_getaddress+0xc>)
    2f3e:	681b      	ldr	r3, [r3, #0]
    2f40:	7a98      	ldrb	r0, [r3, #10]
    2f42:	0640      	lsls	r0, r0, #25
    2f44:	0e40      	lsrs	r0, r0, #25
}
    2f46:	4770      	bx	lr
    2f48:	20000884 	.word	0x20000884

00002f4c <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
    2f4c:	4b01      	ldr	r3, [pc, #4]	; (2f54 <udd_set_setup_payload+0x8>)
    2f4e:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    2f50:	8199      	strh	r1, [r3, #12]
}
    2f52:	4770      	bx	lr
    2f54:	200009ec 	.word	0x200009ec

00002f58 <udd_attach>:
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
}

void udd_attach(void)
{
    2f58:	b570      	push	{r4, r5, r6, lr}
	udd_sleep_mode(UDD_STATE_IDLE);
    2f5a:	2003      	movs	r0, #3
    2f5c:	4b16      	ldr	r3, [pc, #88]	; (2fb8 <udd_attach+0x60>)
    2f5e:	4798      	blx	r3
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    2f60:	4c16      	ldr	r4, [pc, #88]	; (2fbc <udd_attach+0x64>)
    2f62:	6822      	ldr	r2, [r4, #0]
    2f64:	8913      	ldrh	r3, [r2, #8]
    2f66:	2101      	movs	r1, #1
    2f68:	438b      	bics	r3, r1
    2f6a:	8113      	strh	r3, [r2, #8]
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    2f6c:	4a14      	ldr	r2, [pc, #80]	; (2fc0 <udd_attach+0x68>)
    2f6e:	3103      	adds	r1, #3
    2f70:	0020      	movs	r0, r4
    2f72:	4e14      	ldr	r6, [pc, #80]	; (2fc4 <udd_attach+0x6c>)
    2f74:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    2f76:	4a14      	ldr	r2, [pc, #80]	; (2fc8 <udd_attach+0x70>)
    2f78:	2100      	movs	r1, #0
    2f7a:	0020      	movs	r0, r4
    2f7c:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    2f7e:	4a13      	ldr	r2, [pc, #76]	; (2fcc <udd_attach+0x74>)
    2f80:	2101      	movs	r1, #1
    2f82:	0020      	movs	r0, r4
    2f84:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    2f86:	4a12      	ldr	r2, [pc, #72]	; (2fd0 <udd_attach+0x78>)
    2f88:	2102      	movs	r1, #2
    2f8a:	0020      	movs	r0, r4
    2f8c:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    2f8e:	2104      	movs	r1, #4
    2f90:	0020      	movs	r0, r4
    2f92:	4d10      	ldr	r5, [pc, #64]	; (2fd4 <udd_attach+0x7c>)
    2f94:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    2f96:	2100      	movs	r1, #0
    2f98:	0020      	movs	r0, r4
    2f9a:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    2f9c:	2101      	movs	r1, #1
    2f9e:	0020      	movs	r0, r4
    2fa0:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    2fa2:	2102      	movs	r1, #2
    2fa4:	0020      	movs	r0, r4
    2fa6:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    2fa8:	4a0b      	ldr	r2, [pc, #44]	; (2fd8 <udd_attach+0x80>)
    2faa:	2106      	movs	r1, #6
    2fac:	0020      	movs	r0, r4
    2fae:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    2fb0:	2106      	movs	r1, #6
    2fb2:	0020      	movs	r0, r4
    2fb4:	47a8      	blx	r5
#endif
}
    2fb6:	bd70      	pop	{r4, r5, r6, pc}
    2fb8:	00002381 	.word	0x00002381
    2fbc:	20000884 	.word	0x20000884
    2fc0:	000026ad 	.word	0x000026ad
    2fc4:	00003079 	.word	0x00003079
    2fc8:	00002a01 	.word	0x00002a01
    2fcc:	00002735 	.word	0x00002735
    2fd0:	00002645 	.word	0x00002645
    2fd4:	0000309d 	.word	0x0000309d
    2fd8:	000026d9 	.word	0x000026d9

00002fdc <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    2fdc:	b570      	push	{r4, r5, r6, lr}
    2fde:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2fe0:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2fe4:	425a      	negs	r2, r3
    2fe6:	4153      	adcs	r3, r2
    2fe8:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    2fea:	b672      	cpsid	i
    2fec:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2ff0:	2200      	movs	r2, #0
    2ff2:	4b18      	ldr	r3, [pc, #96]	; (3054 <udd_enable+0x78>)
    2ff4:	701a      	strb	r2, [r3, #0]
	return flags;
    2ff6:	9c00      	ldr	r4, [sp, #0]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    2ff8:	ad01      	add	r5, sp, #4
    2ffa:	0028      	movs	r0, r5
    2ffc:	4b16      	ldr	r3, [pc, #88]	; (3058 <udd_enable+0x7c>)
    2ffe:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    3000:	2303      	movs	r3, #3
    3002:	70ab      	strb	r3, [r5, #2]
	usb_init(&usb_device, USB, &config_usb);
    3004:	4e15      	ldr	r6, [pc, #84]	; (305c <udd_enable+0x80>)
    3006:	002a      	movs	r2, r5
    3008:	4915      	ldr	r1, [pc, #84]	; (3060 <udd_enable+0x84>)
    300a:	0030      	movs	r0, r6
    300c:	4b15      	ldr	r3, [pc, #84]	; (3064 <udd_enable+0x88>)
    300e:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    3010:	0030      	movs	r0, r6
    3012:	4b15      	ldr	r3, [pc, #84]	; (3068 <udd_enable+0x8c>)
    3014:	4798      	blx	r3
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    3016:	4b15      	ldr	r3, [pc, #84]	; (306c <udd_enable+0x90>)
    3018:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    301a:	069b      	lsls	r3, r3, #26
    301c:	d414      	bmi.n	3048 <udd_enable+0x6c>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    301e:	4913      	ldr	r1, [pc, #76]	; (306c <udd_enable+0x90>)
    3020:	22d0      	movs	r2, #208	; 0xd0
    3022:	68cb      	ldr	r3, [r1, #12]
    3024:	4013      	ands	r3, r2
    3026:	2bd0      	cmp	r3, #208	; 0xd0
    3028:	d1fb      	bne.n	3022 <udd_enable+0x46>

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();

	udd_sleep_mode(UDD_STATE_SUSPEND);
    302a:	2001      	movs	r0, #1
    302c:	4b10      	ldr	r3, [pc, #64]	; (3070 <udd_enable+0x94>)
    302e:	4798      	blx	r3
		_uhd_vbus_handler();
	}
#else
	// No VBus detect, assume always high
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
    3030:	4b10      	ldr	r3, [pc, #64]	; (3074 <udd_enable+0x98>)
    3032:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    3034:	2c00      	cmp	r4, #0
    3036:	d005      	beq.n	3044 <udd_enable+0x68>
		cpu_irq_enable();
    3038:	2201      	movs	r2, #1
    303a:	4b06      	ldr	r3, [pc, #24]	; (3054 <udd_enable+0x78>)
    303c:	701a      	strb	r2, [r3, #0]
    303e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3042:	b662      	cpsie	i
# endif
#endif

	cpu_irq_restore(flags);
}
    3044:	b002      	add	sp, #8
    3046:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    3048:	4908      	ldr	r1, [pc, #32]	; (306c <udd_enable+0x90>)
    304a:	2210      	movs	r2, #16
    304c:	68cb      	ldr	r3, [r1, #12]
    304e:	421a      	tst	r2, r3
    3050:	d0fc      	beq.n	304c <udd_enable+0x70>
    3052:	e7ea      	b.n	302a <udd_enable+0x4e>
    3054:	20000112 	.word	0x20000112
    3058:	00003df1 	.word	0x00003df1
    305c:	20000884 	.word	0x20000884
    3060:	41005000 	.word	0x41005000
    3064:	00003e01 	.word	0x00003e01
    3068:	000036fd 	.word	0x000036fd
    306c:	40000800 	.word	0x40000800
    3070:	00002381 	.word	0x00002381
    3074:	00002f59 	.word	0x00002f59

00003078 <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    3078:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    307a:	000b      	movs	r3, r1
    307c:	332e      	adds	r3, #46	; 0x2e
    307e:	009b      	lsls	r3, r3, #2
    3080:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    3082:	22aa      	movs	r2, #170	; 0xaa
    3084:	0052      	lsls	r2, r2, #1
    3086:	0049      	lsls	r1, r1, #1
    3088:	5a83      	ldrh	r3, [r0, r2]
    308a:	4c03      	ldr	r4, [pc, #12]	; (3098 <usb_device_register_callback+0x20>)
    308c:	5b09      	ldrh	r1, [r1, r4]
    308e:	430b      	orrs	r3, r1
    3090:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
    3092:	2000      	movs	r0, #0
    3094:	bd10      	pop	{r4, pc}
    3096:	46c0      	nop			; (mov r8, r8)
    3098:	00004fec 	.word	0x00004fec

0000309c <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    309c:	0049      	lsls	r1, r1, #1
    309e:	4b06      	ldr	r3, [pc, #24]	; (30b8 <usb_device_enable_callback+0x1c>)
    30a0:	5acb      	ldrh	r3, [r1, r3]
    30a2:	6802      	ldr	r2, [r0, #0]
    30a4:	8393      	strh	r3, [r2, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    30a6:	21ab      	movs	r1, #171	; 0xab
    30a8:	0049      	lsls	r1, r1, #1
    30aa:	5a42      	ldrh	r2, [r0, r1]
    30ac:	431a      	orrs	r2, r3
    30ae:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    30b0:	6802      	ldr	r2, [r0, #0]
    30b2:	8313      	strh	r3, [r2, #24]

	return STATUS_OK;
}
    30b4:	2000      	movs	r0, #0
    30b6:	4770      	bx	lr
    30b8:	00004fec 	.word	0x00004fec

000030bc <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    30bc:	0049      	lsls	r1, r1, #1
    30be:	4b05      	ldr	r3, [pc, #20]	; (30d4 <usb_device_disable_callback+0x18>)
    30c0:	5aca      	ldrh	r2, [r1, r3]
    30c2:	21ab      	movs	r1, #171	; 0xab
    30c4:	0049      	lsls	r1, r1, #1
    30c6:	5a43      	ldrh	r3, [r0, r1]
    30c8:	4393      	bics	r3, r2
    30ca:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    30cc:	6803      	ldr	r3, [r0, #0]
    30ce:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
}
    30d0:	2000      	movs	r0, #0
    30d2:	4770      	bx	lr
    30d4:	00004fec 	.word	0x00004fec

000030d8 <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    30d8:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    30da:	008c      	lsls	r4, r1, #2
    30dc:	18a4      	adds	r4, r4, r2
    30de:	3434      	adds	r4, #52	; 0x34
    30e0:	00a4      	lsls	r4, r4, #2
    30e2:	1904      	adds	r4, r0, r4
    30e4:	6063      	str	r3, [r4, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    30e6:	1840      	adds	r0, r0, r1
    30e8:	3059      	adds	r0, #89	; 0x59
    30ea:	30ff      	adds	r0, #255	; 0xff
    30ec:	7803      	ldrb	r3, [r0, #0]
    30ee:	4903      	ldr	r1, [pc, #12]	; (30fc <usb_device_endpoint_register_callback+0x24>)
    30f0:	5c8a      	ldrb	r2, [r1, r2]
    30f2:	4313      	orrs	r3, r2
    30f4:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    30f6:	2000      	movs	r0, #0
    30f8:	bd10      	pop	{r4, pc}
    30fa:	46c0      	nop			; (mov r8, r8)
    30fc:	00004ffc 	.word	0x00004ffc

00003100 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    3100:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    3102:	008b      	lsls	r3, r1, #2
    3104:	189b      	adds	r3, r3, r2
    3106:	3334      	adds	r3, #52	; 0x34
    3108:	009b      	lsls	r3, r3, #2
    310a:	18c3      	adds	r3, r0, r3
    310c:	2400      	movs	r4, #0
    310e:	605c      	str	r4, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    3110:	1840      	adds	r0, r0, r1
    3112:	3059      	adds	r0, #89	; 0x59
    3114:	30ff      	adds	r0, #255	; 0xff
    3116:	4b03      	ldr	r3, [pc, #12]	; (3124 <usb_device_endpoint_unregister_callback+0x24>)
    3118:	5c9a      	ldrb	r2, [r3, r2]
    311a:	7803      	ldrb	r3, [r0, #0]
    311c:	4393      	bics	r3, r2
    311e:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    3120:	2000      	movs	r0, #0
    3122:	bd10      	pop	{r4, pc}
    3124:	00004ffc 	.word	0x00004ffc

00003128 <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    3128:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    312a:	230f      	movs	r3, #15
    312c:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    312e:	18c4      	adds	r4, r0, r3
    3130:	3461      	adds	r4, #97	; 0x61
    3132:	34ff      	adds	r4, #255	; 0xff
    3134:	7825      	ldrb	r5, [r4, #0]
    3136:	4e2f      	ldr	r6, [pc, #188]	; (31f4 <usb_device_endpoint_enable_callback+0xcc>)
    3138:	5cb6      	ldrb	r6, [r6, r2]
    313a:	4335      	orrs	r5, r6
    313c:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    313e:	2a00      	cmp	r2, #0
    3140:	d129      	bne.n	3196 <usb_device_endpoint_enable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    3142:	2b00      	cmp	r3, #0
    3144:	d112      	bne.n	316c <usb_device_endpoint_enable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    3146:	2503      	movs	r5, #3
    3148:	240a      	movs	r4, #10
    314a:	34ff      	adds	r4, #255	; 0xff
    314c:	6806      	ldr	r6, [r0, #0]
    314e:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    3150:	2a03      	cmp	r2, #3
    3152:	d109      	bne.n	3168 <usb_device_endpoint_enable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    3154:	b249      	sxtb	r1, r1
    3156:	2900      	cmp	r1, #0
    3158:	db44      	blt.n	31e4 <usb_device_endpoint_enable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    315a:	6802      	ldr	r2, [r0, #0]
    315c:	015b      	lsls	r3, r3, #5
    315e:	18d3      	adds	r3, r2, r3
    3160:	330a      	adds	r3, #10
    3162:	33ff      	adds	r3, #255	; 0xff
    3164:	2220      	movs	r2, #32
    3166:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    3168:	2000      	movs	r0, #0
    316a:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    316c:	b24c      	sxtb	r4, r1
    316e:	2c00      	cmp	r4, #0
    3170:	db08      	blt.n	3184 <usb_device_endpoint_enable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    3172:	015c      	lsls	r4, r3, #5
    3174:	6805      	ldr	r5, [r0, #0]
    3176:	46ac      	mov	ip, r5
    3178:	4464      	add	r4, ip
    317a:	340a      	adds	r4, #10
    317c:	34ff      	adds	r4, #255	; 0xff
    317e:	2501      	movs	r5, #1
    3180:	7025      	strb	r5, [r4, #0]
    3182:	e7e5      	b.n	3150 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    3184:	015c      	lsls	r4, r3, #5
    3186:	6805      	ldr	r5, [r0, #0]
    3188:	46ac      	mov	ip, r5
    318a:	4464      	add	r4, ip
    318c:	340a      	adds	r4, #10
    318e:	34ff      	adds	r4, #255	; 0xff
    3190:	2502      	movs	r5, #2
    3192:	7025      	strb	r5, [r4, #0]
    3194:	e7dc      	b.n	3150 <usb_device_endpoint_enable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    3196:	2a01      	cmp	r2, #1
    3198:	d11a      	bne.n	31d0 <usb_device_endpoint_enable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    319a:	2b00      	cmp	r3, #0
    319c:	d105      	bne.n	31aa <usb_device_endpoint_enable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    319e:	6802      	ldr	r2, [r0, #0]
    31a0:	210c      	movs	r1, #12
    31a2:	230a      	movs	r3, #10
    31a4:	33ff      	adds	r3, #255	; 0xff
    31a6:	54d1      	strb	r1, [r2, r3]
    31a8:	e7de      	b.n	3168 <usb_device_endpoint_enable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    31aa:	b249      	sxtb	r1, r1
    31ac:	2900      	cmp	r1, #0
    31ae:	db07      	blt.n	31c0 <usb_device_endpoint_enable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    31b0:	6802      	ldr	r2, [r0, #0]
    31b2:	015b      	lsls	r3, r3, #5
    31b4:	18d3      	adds	r3, r2, r3
    31b6:	330a      	adds	r3, #10
    31b8:	33ff      	adds	r3, #255	; 0xff
    31ba:	2204      	movs	r2, #4
    31bc:	701a      	strb	r2, [r3, #0]
    31be:	e7d3      	b.n	3168 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    31c0:	6802      	ldr	r2, [r0, #0]
    31c2:	015b      	lsls	r3, r3, #5
    31c4:	18d3      	adds	r3, r2, r3
    31c6:	330a      	adds	r3, #10
    31c8:	33ff      	adds	r3, #255	; 0xff
    31ca:	2208      	movs	r2, #8
    31cc:	701a      	strb	r2, [r3, #0]
    31ce:	e7cb      	b.n	3168 <usb_device_endpoint_enable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    31d0:	2a02      	cmp	r2, #2
    31d2:	d1bd      	bne.n	3150 <usb_device_endpoint_enable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    31d4:	6802      	ldr	r2, [r0, #0]
    31d6:	015b      	lsls	r3, r3, #5
    31d8:	18d3      	adds	r3, r2, r3
    31da:	330a      	adds	r3, #10
    31dc:	33ff      	adds	r3, #255	; 0xff
    31de:	2210      	movs	r2, #16
    31e0:	701a      	strb	r2, [r3, #0]
    31e2:	e7c1      	b.n	3168 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    31e4:	6802      	ldr	r2, [r0, #0]
    31e6:	015b      	lsls	r3, r3, #5
    31e8:	18d3      	adds	r3, r2, r3
    31ea:	330a      	adds	r3, #10
    31ec:	33ff      	adds	r3, #255	; 0xff
    31ee:	2240      	movs	r2, #64	; 0x40
    31f0:	701a      	strb	r2, [r3, #0]
    31f2:	e7b9      	b.n	3168 <usb_device_endpoint_enable_callback+0x40>
    31f4:	00004ffc 	.word	0x00004ffc

000031f8 <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    31f8:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    31fa:	230f      	movs	r3, #15
    31fc:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    31fe:	18c4      	adds	r4, r0, r3
    3200:	3461      	adds	r4, #97	; 0x61
    3202:	34ff      	adds	r4, #255	; 0xff
    3204:	4d2f      	ldr	r5, [pc, #188]	; (32c4 <usb_device_endpoint_disable_callback+0xcc>)
    3206:	5cae      	ldrb	r6, [r5, r2]
    3208:	7825      	ldrb	r5, [r4, #0]
    320a:	43b5      	bics	r5, r6
    320c:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    320e:	2a00      	cmp	r2, #0
    3210:	d129      	bne.n	3266 <usb_device_endpoint_disable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    3212:	2b00      	cmp	r3, #0
    3214:	d112      	bne.n	323c <usb_device_endpoint_disable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    3216:	2503      	movs	r5, #3
    3218:	2484      	movs	r4, #132	; 0x84
    321a:	0064      	lsls	r4, r4, #1
    321c:	6806      	ldr	r6, [r0, #0]
    321e:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    3220:	2a03      	cmp	r2, #3
    3222:	d109      	bne.n	3238 <usb_device_endpoint_disable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    3224:	b249      	sxtb	r1, r1
    3226:	2900      	cmp	r1, #0
    3228:	db44      	blt.n	32b4 <usb_device_endpoint_disable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    322a:	6802      	ldr	r2, [r0, #0]
    322c:	015b      	lsls	r3, r3, #5
    322e:	18d3      	adds	r3, r2, r3
    3230:	3309      	adds	r3, #9
    3232:	33ff      	adds	r3, #255	; 0xff
    3234:	2220      	movs	r2, #32
    3236:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    3238:	2000      	movs	r0, #0
    323a:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    323c:	b24c      	sxtb	r4, r1
    323e:	2c00      	cmp	r4, #0
    3240:	db08      	blt.n	3254 <usb_device_endpoint_disable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    3242:	015c      	lsls	r4, r3, #5
    3244:	6805      	ldr	r5, [r0, #0]
    3246:	46ac      	mov	ip, r5
    3248:	4464      	add	r4, ip
    324a:	3409      	adds	r4, #9
    324c:	34ff      	adds	r4, #255	; 0xff
    324e:	2501      	movs	r5, #1
    3250:	7025      	strb	r5, [r4, #0]
    3252:	e7e5      	b.n	3220 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    3254:	015c      	lsls	r4, r3, #5
    3256:	6805      	ldr	r5, [r0, #0]
    3258:	46ac      	mov	ip, r5
    325a:	4464      	add	r4, ip
    325c:	3409      	adds	r4, #9
    325e:	34ff      	adds	r4, #255	; 0xff
    3260:	2502      	movs	r5, #2
    3262:	7025      	strb	r5, [r4, #0]
    3264:	e7dc      	b.n	3220 <usb_device_endpoint_disable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    3266:	2a01      	cmp	r2, #1
    3268:	d11a      	bne.n	32a0 <usb_device_endpoint_disable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    326a:	2b00      	cmp	r3, #0
    326c:	d105      	bne.n	327a <usb_device_endpoint_disable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    326e:	6802      	ldr	r2, [r0, #0]
    3270:	210c      	movs	r1, #12
    3272:	3309      	adds	r3, #9
    3274:	33ff      	adds	r3, #255	; 0xff
    3276:	54d1      	strb	r1, [r2, r3]
    3278:	e7de      	b.n	3238 <usb_device_endpoint_disable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    327a:	b249      	sxtb	r1, r1
    327c:	2900      	cmp	r1, #0
    327e:	db07      	blt.n	3290 <usb_device_endpoint_disable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    3280:	6802      	ldr	r2, [r0, #0]
    3282:	015b      	lsls	r3, r3, #5
    3284:	18d3      	adds	r3, r2, r3
    3286:	3309      	adds	r3, #9
    3288:	33ff      	adds	r3, #255	; 0xff
    328a:	2204      	movs	r2, #4
    328c:	701a      	strb	r2, [r3, #0]
    328e:	e7d3      	b.n	3238 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    3290:	6802      	ldr	r2, [r0, #0]
    3292:	015b      	lsls	r3, r3, #5
    3294:	18d3      	adds	r3, r2, r3
    3296:	3309      	adds	r3, #9
    3298:	33ff      	adds	r3, #255	; 0xff
    329a:	2208      	movs	r2, #8
    329c:	701a      	strb	r2, [r3, #0]
    329e:	e7cb      	b.n	3238 <usb_device_endpoint_disable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    32a0:	2a02      	cmp	r2, #2
    32a2:	d1bd      	bne.n	3220 <usb_device_endpoint_disable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    32a4:	6802      	ldr	r2, [r0, #0]
    32a6:	015b      	lsls	r3, r3, #5
    32a8:	18d3      	adds	r3, r2, r3
    32aa:	3309      	adds	r3, #9
    32ac:	33ff      	adds	r3, #255	; 0xff
    32ae:	2210      	movs	r2, #16
    32b0:	701a      	strb	r2, [r3, #0]
    32b2:	e7c1      	b.n	3238 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    32b4:	6802      	ldr	r2, [r0, #0]
    32b6:	015b      	lsls	r3, r3, #5
    32b8:	18d3      	adds	r3, r2, r3
    32ba:	3309      	adds	r3, #9
    32bc:	33ff      	adds	r3, #255	; 0xff
    32be:	2240      	movs	r2, #64	; 0x40
    32c0:	701a      	strb	r2, [r3, #0]
    32c2:	e7b9      	b.n	3238 <usb_device_endpoint_disable_callback+0x40>
    32c4:	00004ffc 	.word	0x00004ffc

000032c8 <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    32c8:	2300      	movs	r3, #0
    32ca:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    32cc:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    32ce:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    32d0:	3301      	adds	r3, #1
    32d2:	70c3      	strb	r3, [r0, #3]
}
    32d4:	4770      	bx	lr
	...

000032d8 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    32d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    32da:	780c      	ldrb	r4, [r1, #0]
    32dc:	230f      	movs	r3, #15
    32de:	4023      	ands	r3, r4
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    32e0:	b264      	sxtb	r4, r4

	switch (ep_config->ep_type) {
    32e2:	78ca      	ldrb	r2, [r1, #3]
    32e4:	2a04      	cmp	r2, #4
    32e6:	d870      	bhi.n	33ca <usb_device_endpoint_set_config+0xf2>
    32e8:	0092      	lsls	r2, r2, #2
    32ea:	4d89      	ldr	r5, [pc, #548]	; (3510 <usb_device_endpoint_set_config+0x238>)
    32ec:	58aa      	ldr	r2, [r5, r2]
    32ee:	4697      	mov	pc, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    32f0:	6802      	ldr	r2, [r0, #0]
    32f2:	3308      	adds	r3, #8
    32f4:	015b      	lsls	r3, r3, #5
    32f6:	2100      	movs	r1, #0
    32f8:	5499      	strb	r1, [r3, r2]
			return STATUS_OK;
    32fa:	2200      	movs	r2, #0
    32fc:	e082      	b.n	3404 <usb_device_endpoint_set_config+0x12c>
    32fe:	015c      	lsls	r4, r3, #5
    3300:	6802      	ldr	r2, [r0, #0]
    3302:	4694      	mov	ip, r2
    3304:	4464      	add	r4, ip

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    3306:	2280      	movs	r2, #128	; 0x80
    3308:	0052      	lsls	r2, r2, #1
    330a:	5ca5      	ldrb	r5, [r4, r2]
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    330c:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    330e:	076d      	lsls	r5, r5, #29
    3310:	d178      	bne.n	3404 <usb_device_endpoint_set_config+0x12c>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    3312:	32e4      	adds	r2, #228	; 0xe4
    3314:	5ca6      	ldrb	r6, [r4, r2]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    3316:	2570      	movs	r5, #112	; 0x70
				return STATUS_ERR_DENIED;
    3318:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    331a:	422e      	tst	r6, r5
    331c:	d172      	bne.n	3404 <usb_device_endpoint_set_config+0x12c>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    331e:	3d5f      	subs	r5, #95	; 0x5f
    3320:	32e4      	adds	r2, #228	; 0xe4
    3322:	54a5      	strb	r5, [r4, r2]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    3324:	001a      	movs	r2, r3
    3326:	3208      	adds	r2, #8
    3328:	0152      	lsls	r2, r2, #5
    332a:	6804      	ldr	r4, [r0, #0]
    332c:	18a4      	adds	r4, r4, r2
    332e:	352f      	adds	r5, #47	; 0x2f
    3330:	7165      	strb	r5, [r4, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    3332:	6800      	ldr	r0, [r0, #0]
    3334:	1882      	adds	r2, r0, r2
    3336:	2080      	movs	r0, #128	; 0x80
    3338:	7110      	strb	r0, [r2, #4]
			}
			if (true == ep_config->auto_zlp) {
    333a:	788a      	ldrb	r2, [r1, #2]
    333c:	2a00      	cmp	r2, #0
    333e:	d01f      	beq.n	3380 <usb_device_endpoint_set_config+0xa8>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3340:	0158      	lsls	r0, r3, #5
    3342:	4a74      	ldr	r2, [pc, #464]	; (3514 <usb_device_endpoint_set_config+0x23c>)
    3344:	1812      	adds	r2, r2, r0
    3346:	6854      	ldr	r4, [r2, #4]
    3348:	2080      	movs	r0, #128	; 0x80
    334a:	0600      	lsls	r0, r0, #24
    334c:	4304      	orrs	r4, r0
    334e:	6054      	str	r4, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3350:	6954      	ldr	r4, [r2, #20]
    3352:	4320      	orrs	r0, r4
    3354:	6150      	str	r0, [r2, #20]
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    3356:	2507      	movs	r5, #7
    3358:	784c      	ldrb	r4, [r1, #1]
    335a:	015a      	lsls	r2, r3, #5
    335c:	4b6d      	ldr	r3, [pc, #436]	; (3514 <usb_device_endpoint_set_config+0x23c>)
    335e:	189b      	adds	r3, r3, r2
    3360:	6858      	ldr	r0, [r3, #4]
    3362:	402c      	ands	r4, r5
    3364:	0724      	lsls	r4, r4, #28
    3366:	4e6c      	ldr	r6, [pc, #432]	; (3518 <usb_device_endpoint_set_config+0x240>)
    3368:	4030      	ands	r0, r6
    336a:	4320      	orrs	r0, r4
    336c:	6058      	str	r0, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    336e:	7849      	ldrb	r1, [r1, #1]
    3370:	695a      	ldr	r2, [r3, #20]
    3372:	4029      	ands	r1, r5
    3374:	0709      	lsls	r1, r1, #28
    3376:	4032      	ands	r2, r6
    3378:	430a      	orrs	r2, r1
    337a:	615a      	str	r2, [r3, #20]
			return STATUS_OK;
    337c:	2200      	movs	r2, #0
    337e:	e041      	b.n	3404 <usb_device_endpoint_set_config+0x12c>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3380:	0158      	lsls	r0, r3, #5
    3382:	4a64      	ldr	r2, [pc, #400]	; (3514 <usb_device_endpoint_set_config+0x23c>)
    3384:	1812      	adds	r2, r2, r0
    3386:	6850      	ldr	r0, [r2, #4]
    3388:	0040      	lsls	r0, r0, #1
    338a:	0840      	lsrs	r0, r0, #1
    338c:	6050      	str	r0, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    338e:	6950      	ldr	r0, [r2, #20]
    3390:	0040      	lsls	r0, r0, #1
    3392:	0840      	lsrs	r0, r0, #1
    3394:	6150      	str	r0, [r2, #20]
    3396:	e7de      	b.n	3356 <usb_device_endpoint_set_config+0x7e>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    3398:	2c00      	cmp	r4, #0
    339a:	db35      	blt.n	3408 <usb_device_endpoint_set_config+0x130>
    339c:	015d      	lsls	r5, r3, #5
    339e:	6802      	ldr	r2, [r0, #0]
    33a0:	4694      	mov	ip, r2
    33a2:	4465      	add	r5, ip
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    33a4:	2280      	movs	r2, #128	; 0x80
    33a6:	0052      	lsls	r2, r2, #1
    33a8:	5cae      	ldrb	r6, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    33aa:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    33ac:	0776      	lsls	r6, r6, #29
    33ae:	d129      	bne.n	3404 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    33b0:	2680      	movs	r6, #128	; 0x80
    33b2:	0076      	lsls	r6, r6, #1
    33b4:	5daa      	ldrb	r2, [r5, r6]
    33b6:	2702      	movs	r7, #2
    33b8:	433a      	orrs	r2, r7
    33ba:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    33bc:	6802      	ldr	r2, [r0, #0]
    33be:	0018      	movs	r0, r3
    33c0:	3008      	adds	r0, #8
    33c2:	0140      	lsls	r0, r0, #5
    33c4:	1812      	adds	r2, r2, r0
    33c6:	2040      	movs	r0, #64	; 0x40
    33c8:	7150      	strb	r0, [r2, #5]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    33ca:	0fe2      	lsrs	r2, r4, #31

		default:
			break;
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    33cc:	784f      	ldrb	r7, [r1, #1]
    33ce:	005d      	lsls	r5, r3, #1
    33d0:	18ad      	adds	r5, r5, r2
    33d2:	012d      	lsls	r5, r5, #4
    33d4:	4e4f      	ldr	r6, [pc, #316]	; (3514 <usb_device_endpoint_set_config+0x23c>)
    33d6:	1975      	adds	r5, r6, r5
    33d8:	6868      	ldr	r0, [r5, #4]
    33da:	2407      	movs	r4, #7
    33dc:	403c      	ands	r4, r7
    33de:	0724      	lsls	r4, r4, #28
    33e0:	4e4d      	ldr	r6, [pc, #308]	; (3518 <usb_device_endpoint_set_config+0x240>)
    33e2:	4030      	ands	r0, r6
    33e4:	4320      	orrs	r0, r4
    33e6:	6068      	str	r0, [r5, #4]

	if (true == ep_config->auto_zlp) {
    33e8:	7889      	ldrb	r1, [r1, #2]
    33ea:	2900      	cmp	r1, #0
    33ec:	d000      	beq.n	33f0 <usb_device_endpoint_set_config+0x118>
    33ee:	e088      	b.n	3502 <usb_device_endpoint_set_config+0x22a>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    33f0:	005b      	lsls	r3, r3, #1
    33f2:	189b      	adds	r3, r3, r2
    33f4:	011b      	lsls	r3, r3, #4
    33f6:	4a47      	ldr	r2, [pc, #284]	; (3514 <usb_device_endpoint_set_config+0x23c>)
    33f8:	18d3      	adds	r3, r2, r3
    33fa:	685a      	ldr	r2, [r3, #4]
    33fc:	0052      	lsls	r2, r2, #1
    33fe:	0852      	lsrs	r2, r2, #1
    3400:	605a      	str	r2, [r3, #4]
	}

	return STATUS_OK;
    3402:	2200      	movs	r2, #0
}
    3404:	0010      	movs	r0, r2
    3406:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3408:	015d      	lsls	r5, r3, #5
    340a:	6802      	ldr	r2, [r0, #0]
    340c:	4694      	mov	ip, r2
    340e:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3410:	2280      	movs	r2, #128	; 0x80
    3412:	0052      	lsls	r2, r2, #1
    3414:	5caf      	ldrb	r7, [r5, r2]
    3416:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    3418:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    341a:	4237      	tst	r7, r6
    341c:	d1f2      	bne.n	3404 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    341e:	3690      	adds	r6, #144	; 0x90
    3420:	5daa      	ldrb	r2, [r5, r6]
    3422:	2720      	movs	r7, #32
    3424:	433a      	orrs	r2, r7
    3426:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    3428:	6802      	ldr	r2, [r0, #0]
    342a:	0018      	movs	r0, r3
    342c:	3008      	adds	r0, #8
    342e:	0140      	lsls	r0, r0, #5
    3430:	1812      	adds	r2, r2, r0
    3432:	2080      	movs	r0, #128	; 0x80
    3434:	7110      	strb	r0, [r2, #4]
    3436:	e7c8      	b.n	33ca <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    3438:	2c00      	cmp	r4, #0
    343a:	db17      	blt.n	346c <usb_device_endpoint_set_config+0x194>
    343c:	015d      	lsls	r5, r3, #5
    343e:	6802      	ldr	r2, [r0, #0]
    3440:	4694      	mov	ip, r2
    3442:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3444:	2280      	movs	r2, #128	; 0x80
    3446:	0052      	lsls	r2, r2, #1
    3448:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    344a:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    344c:	0776      	lsls	r6, r6, #29
    344e:	d1d9      	bne.n	3404 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    3450:	2680      	movs	r6, #128	; 0x80
    3452:	0076      	lsls	r6, r6, #1
    3454:	5daa      	ldrb	r2, [r5, r6]
    3456:	2703      	movs	r7, #3
    3458:	433a      	orrs	r2, r7
    345a:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    345c:	6802      	ldr	r2, [r0, #0]
    345e:	0018      	movs	r0, r3
    3460:	3008      	adds	r0, #8
    3462:	0140      	lsls	r0, r0, #5
    3464:	1812      	adds	r2, r2, r0
    3466:	2040      	movs	r0, #64	; 0x40
    3468:	7150      	strb	r0, [r2, #5]
    346a:	e7ae      	b.n	33ca <usb_device_endpoint_set_config+0xf2>
    346c:	015d      	lsls	r5, r3, #5
    346e:	6802      	ldr	r2, [r0, #0]
    3470:	4694      	mov	ip, r2
    3472:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3474:	2280      	movs	r2, #128	; 0x80
    3476:	0052      	lsls	r2, r2, #1
    3478:	5caf      	ldrb	r7, [r5, r2]
    347a:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    347c:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    347e:	4237      	tst	r7, r6
    3480:	d1c0      	bne.n	3404 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    3482:	3690      	adds	r6, #144	; 0x90
    3484:	5daa      	ldrb	r2, [r5, r6]
    3486:	2730      	movs	r7, #48	; 0x30
    3488:	433a      	orrs	r2, r7
    348a:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    348c:	6802      	ldr	r2, [r0, #0]
    348e:	0018      	movs	r0, r3
    3490:	3008      	adds	r0, #8
    3492:	0140      	lsls	r0, r0, #5
    3494:	1812      	adds	r2, r2, r0
    3496:	2080      	movs	r0, #128	; 0x80
    3498:	7110      	strb	r0, [r2, #4]
    349a:	e796      	b.n	33ca <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    349c:	2c00      	cmp	r4, #0
    349e:	db17      	blt.n	34d0 <usb_device_endpoint_set_config+0x1f8>
    34a0:	015d      	lsls	r5, r3, #5
    34a2:	6802      	ldr	r2, [r0, #0]
    34a4:	4694      	mov	ip, r2
    34a6:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    34a8:	2280      	movs	r2, #128	; 0x80
    34aa:	0052      	lsls	r2, r2, #1
    34ac:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    34ae:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    34b0:	0776      	lsls	r6, r6, #29
    34b2:	d1a7      	bne.n	3404 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    34b4:	2680      	movs	r6, #128	; 0x80
    34b6:	0076      	lsls	r6, r6, #1
    34b8:	5daa      	ldrb	r2, [r5, r6]
    34ba:	2704      	movs	r7, #4
    34bc:	433a      	orrs	r2, r7
    34be:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    34c0:	6802      	ldr	r2, [r0, #0]
    34c2:	0018      	movs	r0, r3
    34c4:	3008      	adds	r0, #8
    34c6:	0140      	lsls	r0, r0, #5
    34c8:	1812      	adds	r2, r2, r0
    34ca:	2040      	movs	r0, #64	; 0x40
    34cc:	7150      	strb	r0, [r2, #5]
    34ce:	e77c      	b.n	33ca <usb_device_endpoint_set_config+0xf2>
    34d0:	015d      	lsls	r5, r3, #5
    34d2:	6802      	ldr	r2, [r0, #0]
    34d4:	4694      	mov	ip, r2
    34d6:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    34d8:	2280      	movs	r2, #128	; 0x80
    34da:	0052      	lsls	r2, r2, #1
    34dc:	5caf      	ldrb	r7, [r5, r2]
    34de:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    34e0:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    34e2:	4237      	tst	r7, r6
    34e4:	d000      	beq.n	34e8 <usb_device_endpoint_set_config+0x210>
    34e6:	e78d      	b.n	3404 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    34e8:	3690      	adds	r6, #144	; 0x90
    34ea:	5daa      	ldrb	r2, [r5, r6]
    34ec:	2740      	movs	r7, #64	; 0x40
    34ee:	433a      	orrs	r2, r7
    34f0:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    34f2:	6802      	ldr	r2, [r0, #0]
    34f4:	0018      	movs	r0, r3
    34f6:	3008      	adds	r0, #8
    34f8:	0140      	lsls	r0, r0, #5
    34fa:	1812      	adds	r2, r2, r0
    34fc:	2080      	movs	r0, #128	; 0x80
    34fe:	7110      	strb	r0, [r2, #4]
    3500:	e763      	b.n	33ca <usb_device_endpoint_set_config+0xf2>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3502:	6869      	ldr	r1, [r5, #4]
    3504:	2380      	movs	r3, #128	; 0x80
    3506:	061b      	lsls	r3, r3, #24
    3508:	430b      	orrs	r3, r1
    350a:	606b      	str	r3, [r5, #4]
	return STATUS_OK;
    350c:	2200      	movs	r2, #0
    350e:	e779      	b.n	3404 <usb_device_endpoint_set_config+0x12c>
    3510:	00004fd8 	.word	0x00004fd8
    3514:	20000a44 	.word	0x20000a44
    3518:	8fffffff 	.word	0x8fffffff

0000351c <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    351c:	230f      	movs	r3, #15
    351e:	400b      	ands	r3, r1

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    3520:	b249      	sxtb	r1, r1
    3522:	2900      	cmp	r1, #0
    3524:	db0a      	blt.n	353c <usb_device_endpoint_abort_job+0x20>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    3526:	3308      	adds	r3, #8
    3528:	015b      	lsls	r3, r3, #5
    352a:	6802      	ldr	r2, [r0, #0]
    352c:	18d2      	adds	r2, r2, r3
    352e:	2140      	movs	r1, #64	; 0x40
    3530:	7151      	strb	r1, [r2, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    3532:	6802      	ldr	r2, [r0, #0]
    3534:	18d3      	adds	r3, r2, r3
    3536:	2201      	movs	r2, #1
    3538:	71da      	strb	r2, [r3, #7]
	}
}
    353a:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    353c:	3308      	adds	r3, #8
    353e:	015b      	lsls	r3, r3, #5
    3540:	6802      	ldr	r2, [r0, #0]
    3542:	18d2      	adds	r2, r2, r3
    3544:	2180      	movs	r1, #128	; 0x80
    3546:	7111      	strb	r1, [r2, #4]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    3548:	6802      	ldr	r2, [r0, #0]
    354a:	18d3      	adds	r3, r2, r3
    354c:	2202      	movs	r2, #2
    354e:	71da      	strb	r2, [r3, #7]
    3550:	e7f3      	b.n	353a <usb_device_endpoint_abort_job+0x1e>

00003552 <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    3552:	230f      	movs	r3, #15
    3554:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    3556:	b249      	sxtb	r1, r1
    3558:	2900      	cmp	r1, #0
    355a:	db07      	blt.n	356c <usb_device_endpoint_is_halted+0x1a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    355c:	6802      	ldr	r2, [r0, #0]
    355e:	3308      	adds	r3, #8
    3560:	015b      	lsls	r3, r3, #5
    3562:	18d3      	adds	r3, r2, r3
    3564:	7998      	ldrb	r0, [r3, #6]
    3566:	06c0      	lsls	r0, r0, #27
    3568:	0fc0      	lsrs	r0, r0, #31
	}
}
    356a:	4770      	bx	lr
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    356c:	6802      	ldr	r2, [r0, #0]
    356e:	3308      	adds	r3, #8
    3570:	015b      	lsls	r3, r3, #5
    3572:	18d3      	adds	r3, r2, r3
    3574:	7998      	ldrb	r0, [r3, #6]
    3576:	0680      	lsls	r0, r0, #26
    3578:	0fc0      	lsrs	r0, r0, #31
    357a:	e7f6      	b.n	356a <usb_device_endpoint_is_halted+0x18>

0000357c <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    357c:	230f      	movs	r3, #15
    357e:	400b      	ands	r3, r1

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    3580:	b249      	sxtb	r1, r1
    3582:	2900      	cmp	r1, #0
    3584:	db06      	blt.n	3594 <usb_device_endpoint_set_halt+0x18>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    3586:	6802      	ldr	r2, [r0, #0]
    3588:	3308      	adds	r3, #8
    358a:	015b      	lsls	r3, r3, #5
    358c:	18d3      	adds	r3, r2, r3
    358e:	2210      	movs	r2, #16
    3590:	715a      	strb	r2, [r3, #5]
	}
}
    3592:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    3594:	6802      	ldr	r2, [r0, #0]
    3596:	3308      	adds	r3, #8
    3598:	015b      	lsls	r3, r3, #5
    359a:	18d3      	adds	r3, r2, r3
    359c:	2220      	movs	r2, #32
    359e:	715a      	strb	r2, [r3, #5]
    35a0:	e7f7      	b.n	3592 <usb_device_endpoint_set_halt+0x16>

000035a2 <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    35a2:	b530      	push	{r4, r5, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    35a4:	230f      	movs	r3, #15
    35a6:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    35a8:	b249      	sxtb	r1, r1
    35aa:	2900      	cmp	r1, #0
    35ac:	db1d      	blt.n	35ea <usb_device_endpoint_clear_halt+0x48>
    35ae:	0159      	lsls	r1, r3, #5
    35b0:	6802      	ldr	r2, [r0, #0]
    35b2:	1852      	adds	r2, r2, r1
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    35b4:	2483      	movs	r4, #131	; 0x83
    35b6:	0064      	lsls	r4, r4, #1
    35b8:	5d14      	ldrb	r4, [r2, r4]
    35ba:	06e4      	lsls	r4, r4, #27
    35bc:	d514      	bpl.n	35e8 <usb_device_endpoint_clear_halt+0x46>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    35be:	2510      	movs	r5, #16
    35c0:	2482      	movs	r4, #130	; 0x82
    35c2:	0064      	lsls	r4, r4, #1
    35c4:	5515      	strb	r5, [r2, r4]
    35c6:	6802      	ldr	r2, [r0, #0]
    35c8:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    35ca:	2108      	movs	r1, #8
    35cc:	31ff      	adds	r1, #255	; 0xff
    35ce:	5c51      	ldrb	r1, [r2, r1]
    35d0:	0689      	lsls	r1, r1, #26
    35d2:	d509      	bpl.n	35e8 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    35d4:	3ce4      	subs	r4, #228	; 0xe4
    35d6:	2108      	movs	r1, #8
    35d8:	31ff      	adds	r1, #255	; 0xff
    35da:	5454      	strb	r4, [r2, r1]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    35dc:	6802      	ldr	r2, [r0, #0]
    35de:	3308      	adds	r3, #8
    35e0:	015b      	lsls	r3, r3, #5
    35e2:	18d3      	adds	r3, r2, r3
    35e4:	2201      	movs	r2, #1
    35e6:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    35e8:	bd30      	pop	{r4, r5, pc}
    35ea:	0159      	lsls	r1, r3, #5
    35ec:	6802      	ldr	r2, [r0, #0]
    35ee:	1852      	adds	r2, r2, r1
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    35f0:	2483      	movs	r4, #131	; 0x83
    35f2:	0064      	lsls	r4, r4, #1
    35f4:	5d14      	ldrb	r4, [r2, r4]
    35f6:	06a4      	lsls	r4, r4, #26
    35f8:	d5f6      	bpl.n	35e8 <usb_device_endpoint_clear_halt+0x46>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    35fa:	2520      	movs	r5, #32
    35fc:	2482      	movs	r4, #130	; 0x82
    35fe:	0064      	lsls	r4, r4, #1
    3600:	5515      	strb	r5, [r2, r4]
    3602:	6802      	ldr	r2, [r0, #0]
    3604:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    3606:	2108      	movs	r1, #8
    3608:	31ff      	adds	r1, #255	; 0xff
    360a:	5c51      	ldrb	r1, [r2, r1]
    360c:	0649      	lsls	r1, r1, #25
    360e:	d5eb      	bpl.n	35e8 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    3610:	3cc4      	subs	r4, #196	; 0xc4
    3612:	2108      	movs	r1, #8
    3614:	31ff      	adds	r1, #255	; 0xff
    3616:	5454      	strb	r4, [r2, r1]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    3618:	6802      	ldr	r2, [r0, #0]
    361a:	3308      	adds	r3, #8
    361c:	015b      	lsls	r3, r3, #5
    361e:	18d3      	adds	r3, r2, r3
    3620:	2202      	movs	r2, #2
    3622:	711a      	strb	r2, [r3, #4]
    3624:	e7e0      	b.n	35e8 <usb_device_endpoint_clear_halt+0x46>
	...

00003628 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    3628:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    362a:	000c      	movs	r4, r1
    362c:	3408      	adds	r4, #8
    362e:	0164      	lsls	r4, r4, #5
    3630:	6805      	ldr	r5, [r0, #0]
    3632:	5d64      	ldrb	r4, [r4, r5]
    3634:	0664      	lsls	r4, r4, #25
    3636:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    3638:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    363a:	2c00      	cmp	r4, #0
    363c:	d101      	bne.n	3642 <usb_device_endpoint_write_buffer_job+0x1a>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;

	return STATUS_OK;
}
    363e:	0028      	movs	r0, r5
    3640:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    3642:	014c      	lsls	r4, r1, #5
    3644:	4d0b      	ldr	r5, [pc, #44]	; (3674 <usb_device_endpoint_write_buffer_job+0x4c>)
    3646:	192d      	adds	r5, r5, r4
    3648:	002c      	movs	r4, r5
    364a:	612a      	str	r2, [r5, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    364c:	696a      	ldr	r2, [r5, #20]
    364e:	4d0a      	ldr	r5, [pc, #40]	; (3678 <usb_device_endpoint_write_buffer_job+0x50>)
    3650:	402a      	ands	r2, r5
    3652:	6162      	str	r2, [r4, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    3654:	6962      	ldr	r2, [r4, #20]
    3656:	049b      	lsls	r3, r3, #18
    3658:	0c9b      	lsrs	r3, r3, #18
    365a:	0b92      	lsrs	r2, r2, #14
    365c:	0392      	lsls	r2, r2, #14
    365e:	4313      	orrs	r3, r2
    3660:	6163      	str	r3, [r4, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    3662:	6803      	ldr	r3, [r0, #0]
    3664:	3108      	adds	r1, #8
    3666:	0149      	lsls	r1, r1, #5
    3668:	1859      	adds	r1, r3, r1
    366a:	2380      	movs	r3, #128	; 0x80
    366c:	714b      	strb	r3, [r1, #5]
	return STATUS_OK;
    366e:	2500      	movs	r5, #0
    3670:	e7e5      	b.n	363e <usb_device_endpoint_write_buffer_job+0x16>
    3672:	46c0      	nop			; (mov r8, r8)
    3674:	20000a44 	.word	0x20000a44
    3678:	f0003fff 	.word	0xf0003fff

0000367c <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    367c:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    367e:	000c      	movs	r4, r1
    3680:	3408      	adds	r4, #8
    3682:	0164      	lsls	r4, r4, #5
    3684:	6805      	ldr	r5, [r0, #0]
    3686:	5d64      	ldrb	r4, [r4, r5]
    3688:	0764      	lsls	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    368a:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    368c:	2c00      	cmp	r4, #0
    368e:	d101      	bne.n	3694 <usb_device_endpoint_read_buffer_job+0x18>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;

	return STATUS_OK;
}
    3690:	0028      	movs	r0, r5
    3692:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    3694:	4c0b      	ldr	r4, [pc, #44]	; (36c4 <usb_device_endpoint_read_buffer_job+0x48>)
    3696:	014d      	lsls	r5, r1, #5
    3698:	512a      	str	r2, [r5, r4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    369a:	1962      	adds	r2, r4, r5
    369c:	6854      	ldr	r4, [r2, #4]
    369e:	049b      	lsls	r3, r3, #18
    36a0:	091b      	lsrs	r3, r3, #4
    36a2:	4d09      	ldr	r5, [pc, #36]	; (36c8 <usb_device_endpoint_read_buffer_job+0x4c>)
    36a4:	402c      	ands	r4, r5
    36a6:	4323      	orrs	r3, r4
    36a8:	6053      	str	r3, [r2, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    36aa:	6853      	ldr	r3, [r2, #4]
    36ac:	0b9b      	lsrs	r3, r3, #14
    36ae:	039b      	lsls	r3, r3, #14
    36b0:	6053      	str	r3, [r2, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    36b2:	6803      	ldr	r3, [r0, #0]
    36b4:	3108      	adds	r1, #8
    36b6:	0149      	lsls	r1, r1, #5
    36b8:	1859      	adds	r1, r3, r1
    36ba:	2340      	movs	r3, #64	; 0x40
    36bc:	710b      	strb	r3, [r1, #4]
	return STATUS_OK;
    36be:	2500      	movs	r5, #0
    36c0:	e7e6      	b.n	3690 <usb_device_endpoint_read_buffer_job+0x14>
    36c2:	46c0      	nop			; (mov r8, r8)
    36c4:	20000a44 	.word	0x20000a44
    36c8:	f0003fff 	.word	0xf0003fff

000036cc <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    36cc:	4b09      	ldr	r3, [pc, #36]	; (36f4 <usb_device_endpoint_setup_buffer_job+0x28>)
    36ce:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    36d0:	685a      	ldr	r2, [r3, #4]
    36d2:	4909      	ldr	r1, [pc, #36]	; (36f8 <usb_device_endpoint_setup_buffer_job+0x2c>)
    36d4:	4011      	ands	r1, r2
    36d6:	2280      	movs	r2, #128	; 0x80
    36d8:	0292      	lsls	r2, r2, #10
    36da:	430a      	orrs	r2, r1
    36dc:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    36de:	685a      	ldr	r2, [r3, #4]
    36e0:	0b92      	lsrs	r2, r2, #14
    36e2:	0392      	lsls	r2, r2, #14
    36e4:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    36e6:	6802      	ldr	r2, [r0, #0]
    36e8:	2140      	movs	r1, #64	; 0x40
    36ea:	2382      	movs	r3, #130	; 0x82
    36ec:	005b      	lsls	r3, r3, #1
    36ee:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
}
    36f0:	2000      	movs	r0, #0
    36f2:	4770      	bx	lr
    36f4:	20000a44 	.word	0x20000a44
    36f8:	f0003fff 	.word	0xf0003fff

000036fc <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    36fc:	6802      	ldr	r2, [r0, #0]
    36fe:	7813      	ldrb	r3, [r2, #0]
    3700:	2102      	movs	r1, #2
    3702:	430b      	orrs	r3, r1
    3704:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    3706:	6802      	ldr	r2, [r0, #0]
    3708:	7893      	ldrb	r3, [r2, #2]
    370a:	2b02      	cmp	r3, #2
    370c:	d0fc      	beq.n	3708 <usb_enable+0xc>
}
    370e:	4770      	bx	lr

00003710 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    3710:	b5f0      	push	{r4, r5, r6, r7, lr}
    3712:	46de      	mov	lr, fp
    3714:	4657      	mov	r7, sl
    3716:	464e      	mov	r6, r9
    3718:	4645      	mov	r5, r8
    371a:	b5e0      	push	{r5, r6, r7, lr}
    371c:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    371e:	4bc4      	ldr	r3, [pc, #784]	; (3a30 <USB_Handler+0x320>)
    3720:	681f      	ldr	r7, [r3, #0]
    3722:	683d      	ldr	r5, [r7, #0]
    3724:	782b      	ldrb	r3, [r5, #0]
    3726:	09db      	lsrs	r3, r3, #7
    3728:	d114      	bne.n	3754 <USB_Handler+0x44>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    372a:	8c2e      	ldrh	r6, [r5, #32]
    372c:	b2b6      	uxth	r6, r6
	if (0 == ep_inst) {
    372e:	2e00      	cmp	r6, #0
    3730:	d000      	beq.n	3734 <USB_Handler+0x24>
    3732:	e22d      	b.n	3b90 <USB_Handler+0x480>
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    3734:	8bae      	ldrh	r6, [r5, #28]
    3736:	b2b6      	uxth	r6, r6
				_usb_instances->device_enabled_callback_mask &
    3738:	23ab      	movs	r3, #171	; 0xab
    373a:	005b      	lsls	r3, r3, #1
		flags_run = flags &
    373c:	5afb      	ldrh	r3, [r7, r3]
    373e:	22aa      	movs	r2, #170	; 0xaa
    3740:	0052      	lsls	r2, r2, #1
    3742:	5abd      	ldrh	r5, [r7, r2]
    3744:	401d      	ands	r5, r3
    3746:	4035      	ands	r5, r6
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    3748:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
    374a:	4fba      	ldr	r7, [pc, #744]	; (3a34 <USB_Handler+0x324>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    374c:	4bb8      	ldr	r3, [pc, #736]	; (3a30 <USB_Handler+0x320>)
    374e:	4699      	mov	r9, r3
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    3750:	4698      	mov	r8, r3
    3752:	e208      	b.n	3b66 <USB_Handler+0x456>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    3754:	8c2b      	ldrh	r3, [r5, #32]
    3756:	b29b      	uxth	r3, r3
    3758:	2b00      	cmp	r3, #0
    375a:	d100      	bne.n	375e <USB_Handler+0x4e>
    375c:	e13d      	b.n	39da <USB_Handler+0x2ca>
    375e:	8c28      	ldrh	r0, [r5, #32]
    3760:	b280      	uxth	r0, r0
    3762:	4bb5      	ldr	r3, [pc, #724]	; (3a38 <USB_Handler+0x328>)
    3764:	4798      	blx	r3
    3766:	0004      	movs	r4, r0
	if (pipe_int < 32) {
    3768:	281f      	cmp	r0, #31
    376a:	d900      	bls.n	376e <USB_Handler+0x5e>
    376c:	e135      	b.n	39da <USB_Handler+0x2ca>
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    376e:	0003      	movs	r3, r0
    3770:	3308      	adds	r3, #8
    3772:	015b      	lsls	r3, r3, #5
    3774:	18ed      	adds	r5, r5, r3
    3776:	79ed      	ldrb	r5, [r5, #7]
    3778:	b2ed      	uxtb	r5, r5
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    377a:	07ab      	lsls	r3, r5, #30
    377c:	d041      	beq.n	3802 <USB_Handler+0xf2>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    377e:	4aaf      	ldr	r2, [pc, #700]	; (3a3c <USB_Handler+0x32c>)
    3780:	2301      	movs	r3, #1
    3782:	4083      	lsls	r3, r0
    3784:	6811      	ldr	r1, [r2, #0]
    3786:	4399      	bics	r1, r3
    3788:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    378a:	0003      	movs	r3, r0
    378c:	3308      	adds	r3, #8
    378e:	015b      	lsls	r3, r3, #5
    3790:	683a      	ldr	r2, [r7, #0]
    3792:	4694      	mov	ip, r2
    3794:	4463      	add	r3, ip
    3796:	2203      	movs	r2, #3
    3798:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    379a:	183b      	adds	r3, r7, r0
    379c:	33ae      	adds	r3, #174	; 0xae
    379e:	781b      	ldrb	r3, [r3, #0]
    37a0:	07db      	lsls	r3, r3, #31
    37a2:	d52e      	bpl.n	3802 <USB_Handler+0xf2>
				pipe_callback_para.pipe_num = pipe_int;
    37a4:	4ba6      	ldr	r3, [pc, #664]	; (3a40 <USB_Handler+0x330>)
    37a6:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    37a8:	683a      	ldr	r2, [r7, #0]
    37aa:	0003      	movs	r3, r0
    37ac:	3308      	adds	r3, #8
    37ae:	015b      	lsls	r3, r3, #5
    37b0:	5c9b      	ldrb	r3, [r3, r2]
    37b2:	079b      	lsls	r3, r3, #30
    37b4:	0f9b      	lsrs	r3, r3, #30
    37b6:	2b01      	cmp	r3, #1
    37b8:	d100      	bne.n	37bc <USB_Handler+0xac>
    37ba:	e094      	b.n	38e6 <USB_Handler+0x1d6>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    37bc:	0142      	lsls	r2, r0, #5
    37be:	4ba1      	ldr	r3, [pc, #644]	; (3a44 <USB_Handler+0x334>)
    37c0:	189b      	adds	r3, r3, r2
    37c2:	685a      	ldr	r2, [r3, #4]
    37c4:	0112      	lsls	r2, r2, #4
    37c6:	0c92      	lsrs	r2, r2, #18
    37c8:	b290      	uxth	r0, r2
    37ca:	499d      	ldr	r1, [pc, #628]	; (3a40 <USB_Handler+0x330>)
    37cc:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    37ce:	685a      	ldr	r2, [r3, #4]
    37d0:	0492      	lsls	r2, r2, #18
    37d2:	0c92      	lsrs	r2, r2, #18
    37d4:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    37d6:	685a      	ldr	r2, [r3, #4]
    37d8:	499b      	ldr	r1, [pc, #620]	; (3a48 <USB_Handler+0x338>)
    37da:	400a      	ands	r2, r1
    37dc:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    37de:	2800      	cmp	r0, #0
    37e0:	d107      	bne.n	37f2 <USB_Handler+0xe2>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    37e2:	0162      	lsls	r2, r4, #5
    37e4:	4b97      	ldr	r3, [pc, #604]	; (3a44 <USB_Handler+0x334>)
    37e6:	189b      	adds	r3, r3, r2
    37e8:	685b      	ldr	r3, [r3, #4]
    37ea:	049b      	lsls	r3, r3, #18
    37ec:	0c9b      	lsrs	r3, r3, #18
    37ee:	4a94      	ldr	r2, [pc, #592]	; (3a40 <USB_Handler+0x330>)
    37f0:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    37f2:	4b8f      	ldr	r3, [pc, #572]	; (3a30 <USB_Handler+0x320>)
    37f4:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    37f6:	1ca3      	adds	r3, r4, #2
    37f8:	011b      	lsls	r3, r3, #4
    37fa:	18c3      	adds	r3, r0, r3
    37fc:	685b      	ldr	r3, [r3, #4]
    37fe:	4990      	ldr	r1, [pc, #576]	; (3a40 <USB_Handler+0x330>)
    3800:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    3802:	076b      	lsls	r3, r5, #29
    3804:	d51f      	bpl.n	3846 <USB_Handler+0x136>
			if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_ISO &&
    3806:	4b8a      	ldr	r3, [pc, #552]	; (3a30 <USB_Handler+0x320>)
    3808:	6818      	ldr	r0, [r3, #0]
    380a:	6802      	ldr	r2, [r0, #0]
    380c:	0023      	movs	r3, r4
    380e:	3308      	adds	r3, #8
    3810:	015b      	lsls	r3, r3, #5
    3812:	5c9b      	ldrb	r3, [r3, r2]
    3814:	069b      	lsls	r3, r3, #26
    3816:	0f5b      	lsrs	r3, r3, #29
    3818:	2b02      	cmp	r3, #2
    381a:	d075      	beq.n	3908 <USB_Handler+0x1f8>
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
    381c:	0023      	movs	r3, r4
    381e:	3308      	adds	r3, #8
    3820:	015b      	lsls	r3, r3, #5
    3822:	5c9b      	ldrb	r3, [r3, r2]
    3824:	069b      	lsls	r3, r3, #26
    3826:	0f5b      	lsrs	r3, r3, #29
    3828:	2b03      	cmp	r3, #3
    382a:	d100      	bne.n	382e <USB_Handler+0x11e>
    382c:	e09e      	b.n	396c <USB_Handler+0x25c>
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    382e:	0162      	lsls	r2, r4, #5
    3830:	4b84      	ldr	r3, [pc, #528]	; (3a44 <USB_Handler+0x334>)
    3832:	189b      	adds	r3, r3, r2
    3834:	2200      	movs	r2, #0
    3836:	729a      	strb	r2, [r3, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3838:	6803      	ldr	r3, [r0, #0]
    383a:	0022      	movs	r2, r4
    383c:	3208      	adds	r2, #8
    383e:	0152      	lsls	r2, r2, #5
    3840:	189b      	adds	r3, r3, r2
    3842:	2204      	movs	r2, #4
    3844:	71da      	strb	r2, [r3, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
    3846:	072b      	lsls	r3, r5, #28
    3848:	d515      	bpl.n	3876 <USB_Handler+0x166>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    384a:	4a7c      	ldr	r2, [pc, #496]	; (3a3c <USB_Handler+0x32c>)
    384c:	2301      	movs	r3, #1
    384e:	40a3      	lsls	r3, r4
    3850:	6811      	ldr	r1, [r2, #0]
    3852:	4399      	bics	r1, r3
    3854:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3856:	4b76      	ldr	r3, [pc, #472]	; (3a30 <USB_Handler+0x320>)
    3858:	6818      	ldr	r0, [r3, #0]
    385a:	0023      	movs	r3, r4
    385c:	3308      	adds	r3, #8
    385e:	015b      	lsls	r3, r3, #5
    3860:	6802      	ldr	r2, [r0, #0]
    3862:	4694      	mov	ip, r2
    3864:	4463      	add	r3, ip
    3866:	2208      	movs	r2, #8
    3868:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    386a:	1903      	adds	r3, r0, r4
    386c:	33ae      	adds	r3, #174	; 0xae
    386e:	781b      	ldrb	r3, [r3, #0]
    3870:	079b      	lsls	r3, r3, #30
    3872:	d500      	bpl.n	3876 <USB_Handler+0x166>
    3874:	e094      	b.n	39a0 <USB_Handler+0x290>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    3876:	06eb      	lsls	r3, r5, #27
    3878:	d515      	bpl.n	38a6 <USB_Handler+0x196>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    387a:	4a70      	ldr	r2, [pc, #448]	; (3a3c <USB_Handler+0x32c>)
    387c:	2301      	movs	r3, #1
    387e:	40a3      	lsls	r3, r4
    3880:	6811      	ldr	r1, [r2, #0]
    3882:	4399      	bics	r1, r3
    3884:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3886:	4b6a      	ldr	r3, [pc, #424]	; (3a30 <USB_Handler+0x320>)
    3888:	6818      	ldr	r0, [r3, #0]
    388a:	0023      	movs	r3, r4
    388c:	3308      	adds	r3, #8
    388e:	015b      	lsls	r3, r3, #5
    3890:	6802      	ldr	r2, [r0, #0]
    3892:	4694      	mov	ip, r2
    3894:	4463      	add	r3, ip
    3896:	2210      	movs	r2, #16
    3898:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    389a:	1903      	adds	r3, r0, r4
    389c:	33ae      	adds	r3, #174	; 0xae
    389e:	781b      	ldrb	r3, [r3, #0]
    38a0:	075b      	lsls	r3, r3, #29
    38a2:	d500      	bpl.n	38a6 <USB_Handler+0x196>
    38a4:	e08a      	b.n	39bc <USB_Handler+0x2ac>
		if (flags & USB_HOST_PINTFLAG_STALL) {
    38a6:	06ab      	lsls	r3, r5, #26
    38a8:	d400      	bmi.n	38ac <USB_Handler+0x19c>
    38aa:	e12f      	b.n	3b0c <USB_Handler+0x3fc>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    38ac:	4a63      	ldr	r2, [pc, #396]	; (3a3c <USB_Handler+0x32c>)
    38ae:	2301      	movs	r3, #1
    38b0:	40a3      	lsls	r3, r4
    38b2:	6811      	ldr	r1, [r2, #0]
    38b4:	4399      	bics	r1, r3
    38b6:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    38b8:	4b5d      	ldr	r3, [pc, #372]	; (3a30 <USB_Handler+0x320>)
    38ba:	6818      	ldr	r0, [r3, #0]
    38bc:	0023      	movs	r3, r4
    38be:	3308      	adds	r3, #8
    38c0:	015b      	lsls	r3, r3, #5
    38c2:	6802      	ldr	r2, [r0, #0]
    38c4:	4694      	mov	ip, r2
    38c6:	4463      	add	r3, ip
    38c8:	2220      	movs	r2, #32
    38ca:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    38cc:	1903      	adds	r3, r0, r4
    38ce:	33ae      	adds	r3, #174	; 0xae
    38d0:	781b      	ldrb	r3, [r3, #0]
    38d2:	071b      	lsls	r3, r3, #28
    38d4:	d400      	bmi.n	38d8 <USB_Handler+0x1c8>
    38d6:	e119      	b.n	3b0c <USB_Handler+0x3fc>
				pipe_callback_para.pipe_num = pipe_int;
    38d8:	4959      	ldr	r1, [pc, #356]	; (3a40 <USB_Handler+0x330>)
    38da:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    38dc:	0124      	lsls	r4, r4, #4
    38de:	1904      	adds	r4, r0, r4
    38e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    38e2:	4798      	blx	r3
    38e4:	e112      	b.n	3b0c <USB_Handler+0x3fc>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    38e6:	0142      	lsls	r2, r0, #5
    38e8:	4b56      	ldr	r3, [pc, #344]	; (3a44 <USB_Handler+0x334>)
    38ea:	189b      	adds	r3, r3, r2
    38ec:	685a      	ldr	r2, [r3, #4]
    38ee:	0492      	lsls	r2, r2, #18
    38f0:	0c92      	lsrs	r2, r2, #18
    38f2:	4953      	ldr	r1, [pc, #332]	; (3a40 <USB_Handler+0x330>)
    38f4:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    38f6:	685a      	ldr	r2, [r3, #4]
    38f8:	0112      	lsls	r2, r2, #4
    38fa:	0c92      	lsrs	r2, r2, #18
    38fc:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    38fe:	685a      	ldr	r2, [r3, #4]
    3900:	0b92      	lsrs	r2, r2, #14
    3902:	0392      	lsls	r2, r2, #14
    3904:	605a      	str	r2, [r3, #4]
    3906:	e774      	b.n	37f2 <USB_Handler+0xe2>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
    3908:	0023      	movs	r3, r4
    390a:	3308      	adds	r3, #8
    390c:	015b      	lsls	r3, r3, #5
    390e:	5c9b      	ldrb	r3, [r3, r2]
    3910:	079b      	lsls	r3, r3, #30
    3912:	0f9b      	lsrs	r3, r3, #30
			if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_ISO &&
    3914:	2b01      	cmp	r3, #1
    3916:	d181      	bne.n	381c <USB_Handler+0x10c>
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.bit.CRCERR) {
    3918:	0161      	lsls	r1, r4, #5
    391a:	4b4a      	ldr	r3, [pc, #296]	; (3a44 <USB_Handler+0x334>)
    391c:	185b      	adds	r3, r3, r1
    391e:	3308      	adds	r3, #8
    3920:	789b      	ldrb	r3, [r3, #2]
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
    3922:	07db      	lsls	r3, r3, #31
    3924:	d400      	bmi.n	3928 <USB_Handler+0x218>
    3926:	e779      	b.n	381c <USB_Handler+0x10c>
				host_pipe_job_busy_status &= ~(1 << pipe_int);
    3928:	4a44      	ldr	r2, [pc, #272]	; (3a3c <USB_Handler+0x32c>)
    392a:	2301      	movs	r3, #1
    392c:	40a3      	lsls	r3, r4
    392e:	6811      	ldr	r1, [r2, #0]
    3930:	4399      	bics	r1, r3
    3932:	6011      	str	r1, [r2, #0]
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    3934:	0162      	lsls	r2, r4, #5
    3936:	4b43      	ldr	r3, [pc, #268]	; (3a44 <USB_Handler+0x334>)
    3938:	189b      	adds	r3, r3, r2
    393a:	2200      	movs	r2, #0
    393c:	729a      	strb	r2, [r3, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    393e:	0023      	movs	r3, r4
    3940:	3308      	adds	r3, #8
    3942:	015b      	lsls	r3, r3, #5
    3944:	6802      	ldr	r2, [r0, #0]
    3946:	4694      	mov	ip, r2
    3948:	4463      	add	r3, ip
    394a:	2204      	movs	r2, #4
    394c:	71da      	strb	r2, [r3, #7]
				if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    394e:	1903      	adds	r3, r0, r4
    3950:	33ae      	adds	r3, #174	; 0xae
    3952:	781b      	ldrb	r3, [r3, #0]
    3954:	079b      	lsls	r3, r3, #30
    3956:	d400      	bmi.n	395a <USB_Handler+0x24a>
    3958:	e775      	b.n	3846 <USB_Handler+0x136>
					pipe_callback_para.pipe_num = pipe_int;
    395a:	4939      	ldr	r1, [pc, #228]	; (3a40 <USB_Handler+0x330>)
    395c:	700c      	strb	r4, [r1, #0]
					pipe_callback_para.pipe_error_status = USB_STATUS_PIPE_CRC16ER;
    395e:	2310      	movs	r3, #16
    3960:	704b      	strb	r3, [r1, #1]
							[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    3962:	0123      	lsls	r3, r4, #4
    3964:	18c3      	adds	r3, r0, r3
    3966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3968:	4798      	blx	r3
    396a:	e76c      	b.n	3846 <USB_Handler+0x136>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN) {
    396c:	0023      	movs	r3, r4
    396e:	3308      	adds	r3, #8
    3970:	015b      	lsls	r3, r3, #5
    3972:	5c9b      	ldrb	r3, [r3, r2]
    3974:	079b      	lsls	r3, r3, #30
    3976:	0f9b      	lsrs	r3, r3, #30
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
    3978:	2b01      	cmp	r3, #1
    397a:	d000      	beq.n	397e <USB_Handler+0x26e>
    397c:	e757      	b.n	382e <USB_Handler+0x11e>
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    397e:	0162      	lsls	r2, r4, #5
    3980:	4b30      	ldr	r3, [pc, #192]	; (3a44 <USB_Handler+0x334>)
    3982:	189b      	adds	r3, r3, r2
    3984:	2200      	movs	r2, #0
    3986:	729a      	strb	r2, [r3, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3988:	0023      	movs	r3, r4
    398a:	3308      	adds	r3, #8
    398c:	015b      	lsls	r3, r3, #5
    398e:	6802      	ldr	r2, [r0, #0]
    3990:	18d2      	adds	r2, r2, r3
    3992:	2104      	movs	r1, #4
    3994:	71d1      	strb	r1, [r2, #7]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSSET.reg = USB_HOST_PSTATUS_PFREEZE;
    3996:	6802      	ldr	r2, [r0, #0]
    3998:	18d3      	adds	r3, r2, r3
    399a:	2210      	movs	r2, #16
    399c:	715a      	strb	r2, [r3, #5]
    399e:	e752      	b.n	3846 <USB_Handler+0x136>
				pipe_callback_para.pipe_num = pipe_int;
    39a0:	4927      	ldr	r1, [pc, #156]	; (3a40 <USB_Handler+0x330>)
    39a2:	700c      	strb	r4, [r1, #0]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    39a4:	0162      	lsls	r2, r4, #5
    39a6:	4b27      	ldr	r3, [pc, #156]	; (3a44 <USB_Handler+0x334>)
    39a8:	189b      	adds	r3, r3, r2
    39aa:	89db      	ldrh	r3, [r3, #14]
    39ac:	221f      	movs	r2, #31
    39ae:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
    39b0:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    39b2:	0123      	lsls	r3, r4, #4
    39b4:	18c3      	adds	r3, r0, r3
    39b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    39b8:	4798      	blx	r3
    39ba:	e75c      	b.n	3876 <USB_Handler+0x166>
				pipe_callback_para.pipe_num = pipe_int;
    39bc:	4920      	ldr	r1, [pc, #128]	; (3a40 <USB_Handler+0x330>)
    39be:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    39c0:	0162      	lsls	r2, r4, #5
    39c2:	4b20      	ldr	r3, [pc, #128]	; (3a44 <USB_Handler+0x334>)
    39c4:	189b      	adds	r3, r3, r2
    39c6:	685b      	ldr	r3, [r3, #4]
    39c8:	011b      	lsls	r3, r3, #4
    39ca:	0c9b      	lsrs	r3, r3, #18
    39cc:	804b      	strh	r3, [r1, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    39ce:	0123      	lsls	r3, r4, #4
    39d0:	18c3      	adds	r3, r0, r3
    39d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    39d4:	2100      	movs	r1, #0
    39d6:	4798      	blx	r3
    39d8:	e765      	b.n	38a6 <USB_Handler+0x196>
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    39da:	8bac      	ldrh	r4, [r5, #28]
    39dc:	b2a4      	uxth	r4, r4
		if (flags & USB_HOST_INTFLAG_HSOF) {
    39de:	0763      	lsls	r3, r4, #29
    39e0:	d538      	bpl.n	3a54 <USB_Handler+0x344>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    39e2:	2304      	movs	r3, #4
    39e4:	83ab      	strh	r3, [r5, #28]
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    39e6:	4b15      	ldr	r3, [pc, #84]	; (3a3c <USB_Handler+0x32c>)
    39e8:	681d      	ldr	r5, [r3, #0]
			for (pipe_int = 1; pipe_int < USB_PIPE_NUM; pipe_int ++) {
    39ea:	2301      	movs	r3, #1
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    39ec:	2001      	movs	r0, #1
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    39ee:	2610      	movs	r6, #16
    39f0:	e002      	b.n	39f8 <USB_Handler+0x2e8>
			for (pipe_int = 1; pipe_int < USB_PIPE_NUM; pipe_int ++) {
    39f2:	3301      	adds	r3, #1
    39f4:	2b08      	cmp	r3, #8
    39f6:	d029      	beq.n	3a4c <USB_Handler+0x33c>
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    39f8:	0002      	movs	r2, r0
    39fa:	409a      	lsls	r2, r3
    39fc:	4215      	tst	r5, r2
    39fe:	d0f8      	beq.n	39f2 <USB_Handler+0x2e2>
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    3a00:	6839      	ldr	r1, [r7, #0]
    3a02:	001a      	movs	r2, r3
    3a04:	3208      	adds	r2, #8
    3a06:	0152      	lsls	r2, r2, #5
    3a08:	5c52      	ldrb	r2, [r2, r1]
    3a0a:	0692      	lsls	r2, r2, #26
    3a0c:	0f52      	lsrs	r2, r2, #29
    3a0e:	2a03      	cmp	r2, #3
    3a10:	d1ef      	bne.n	39f2 <USB_Handler+0x2e2>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN != USB_HOST_PIPE_TOKEN_IN) {
    3a12:	001a      	movs	r2, r3
    3a14:	3208      	adds	r2, #8
    3a16:	0152      	lsls	r2, r2, #5
    3a18:	5c52      	ldrb	r2, [r2, r1]
    3a1a:	0792      	lsls	r2, r2, #30
    3a1c:	0f92      	lsrs	r2, r2, #30
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    3a1e:	2a01      	cmp	r2, #1
    3a20:	d1e7      	bne.n	39f2 <USB_Handler+0x2e2>
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    3a22:	001a      	movs	r2, r3
    3a24:	3208      	adds	r2, #8
    3a26:	0152      	lsls	r2, r2, #5
    3a28:	1889      	adds	r1, r1, r2
    3a2a:	710e      	strb	r6, [r1, #4]
    3a2c:	e7e1      	b.n	39f2 <USB_Handler+0x2e2>
    3a2e:	46c0      	nop			; (mov r8, r8)
    3a30:	20000748 	.word	0x20000748
    3a34:	00004fec 	.word	0x00004fec
    3a38:	00004e79 	.word	0x00004e79
    3a3c:	20000758 	.word	0x20000758
    3a40:	2000075c 	.word	0x2000075c
    3a44:	20000a44 	.word	0x20000a44
    3a48:	f0003fff 	.word	0xf0003fff
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    3a4c:	339d      	adds	r3, #157	; 0x9d
    3a4e:	5cfb      	ldrb	r3, [r7, r3]
    3a50:	07db      	lsls	r3, r3, #31
    3a52:	d462      	bmi.n	3b1a <USB_Handler+0x40a>
		if (flags & USB_HOST_INTFLAG_RST) {
    3a54:	0723      	lsls	r3, r4, #28
    3a56:	d50b      	bpl.n	3a70 <USB_Handler+0x360>
			host_pipe_job_busy_status = 0;
    3a58:	2200      	movs	r2, #0
    3a5a:	4baf      	ldr	r3, [pc, #700]	; (3d18 <USB_Handler+0x608>)
    3a5c:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    3a5e:	4baf      	ldr	r3, [pc, #700]	; (3d1c <USB_Handler+0x60c>)
    3a60:	6818      	ldr	r0, [r3, #0]
    3a62:	2308      	movs	r3, #8
    3a64:	6802      	ldr	r2, [r0, #0]
    3a66:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    3a68:	339d      	adds	r3, #157	; 0x9d
    3a6a:	5cc3      	ldrb	r3, [r0, r3]
    3a6c:	079b      	lsls	r3, r3, #30
    3a6e:	d458      	bmi.n	3b22 <USB_Handler+0x412>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    3a70:	0663      	lsls	r3, r4, #25
    3a72:	d508      	bpl.n	3a86 <USB_Handler+0x376>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    3a74:	4ba9      	ldr	r3, [pc, #676]	; (3d1c <USB_Handler+0x60c>)
    3a76:	6818      	ldr	r0, [r3, #0]
    3a78:	2340      	movs	r3, #64	; 0x40
    3a7a:	6802      	ldr	r2, [r0, #0]
    3a7c:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    3a7e:	3365      	adds	r3, #101	; 0x65
    3a80:	5cc3      	ldrb	r3, [r0, r3]
    3a82:	06db      	lsls	r3, r3, #27
    3a84:	d450      	bmi.n	3b28 <USB_Handler+0x418>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    3a86:	06a3      	lsls	r3, r4, #26
    3a88:	d508      	bpl.n	3a9c <USB_Handler+0x38c>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    3a8a:	4ba4      	ldr	r3, [pc, #656]	; (3d1c <USB_Handler+0x60c>)
    3a8c:	6818      	ldr	r0, [r3, #0]
    3a8e:	2320      	movs	r3, #32
    3a90:	6802      	ldr	r2, [r0, #0]
    3a92:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    3a94:	3385      	adds	r3, #133	; 0x85
    3a96:	5cc3      	ldrb	r3, [r0, r3]
    3a98:	071b      	lsls	r3, r3, #28
    3a9a:	d448      	bmi.n	3b2e <USB_Handler+0x41e>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    3a9c:	06e3      	lsls	r3, r4, #27
    3a9e:	d508      	bpl.n	3ab2 <USB_Handler+0x3a2>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    3aa0:	4b9e      	ldr	r3, [pc, #632]	; (3d1c <USB_Handler+0x60c>)
    3aa2:	6818      	ldr	r0, [r3, #0]
    3aa4:	2310      	movs	r3, #16
    3aa6:	6802      	ldr	r2, [r0, #0]
    3aa8:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    3aaa:	3395      	adds	r3, #149	; 0x95
    3aac:	5cc3      	ldrb	r3, [r0, r3]
    3aae:	075b      	lsls	r3, r3, #29
    3ab0:	d440      	bmi.n	3b34 <USB_Handler+0x424>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    3ab2:	0623      	lsls	r3, r4, #24
    3ab4:	d50b      	bpl.n	3ace <USB_Handler+0x3be>
			host_pipe_job_busy_status = 0;
    3ab6:	2200      	movs	r2, #0
    3ab8:	4b97      	ldr	r3, [pc, #604]	; (3d18 <USB_Handler+0x608>)
    3aba:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    3abc:	4b97      	ldr	r3, [pc, #604]	; (3d1c <USB_Handler+0x60c>)
    3abe:	6818      	ldr	r0, [r3, #0]
    3ac0:	2380      	movs	r3, #128	; 0x80
    3ac2:	6802      	ldr	r2, [r0, #0]
    3ac4:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    3ac6:	3325      	adds	r3, #37	; 0x25
    3ac8:	5cc3      	ldrb	r3, [r0, r3]
    3aca:	069b      	lsls	r3, r3, #26
    3acc:	d435      	bmi.n	3b3a <USB_Handler+0x42a>
		if (flags & USB_HOST_INTFLAG_DCONN) {
    3ace:	05e3      	lsls	r3, r4, #23
    3ad0:	d50c      	bpl.n	3aec <USB_Handler+0x3dc>
			host_pipe_job_busy_status = 0;
    3ad2:	2200      	movs	r2, #0
    3ad4:	4b90      	ldr	r3, [pc, #576]	; (3d18 <USB_Handler+0x608>)
    3ad6:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    3ad8:	4b90      	ldr	r3, [pc, #576]	; (3d1c <USB_Handler+0x60c>)
    3ada:	6818      	ldr	r0, [r3, #0]
    3adc:	2380      	movs	r3, #128	; 0x80
    3ade:	005b      	lsls	r3, r3, #1
    3ae0:	6802      	ldr	r2, [r0, #0]
    3ae2:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    3ae4:	3b5b      	subs	r3, #91	; 0x5b
    3ae6:	5cc3      	ldrb	r3, [r0, r3]
    3ae8:	065b      	lsls	r3, r3, #25
    3aea:	d429      	bmi.n	3b40 <USB_Handler+0x430>
		if (flags & USB_HOST_INTFLAG_DDISC) {
    3aec:	05a3      	lsls	r3, r4, #22
    3aee:	d50d      	bpl.n	3b0c <USB_Handler+0x3fc>
			host_pipe_job_busy_status = 0;
    3af0:	2200      	movs	r2, #0
    3af2:	4b89      	ldr	r3, [pc, #548]	; (3d18 <USB_Handler+0x608>)
    3af4:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    3af6:	4b89      	ldr	r3, [pc, #548]	; (3d1c <USB_Handler+0x60c>)
    3af8:	6818      	ldr	r0, [r3, #0]
    3afa:	2380      	movs	r3, #128	; 0x80
    3afc:	009b      	lsls	r3, r3, #2
    3afe:	6802      	ldr	r2, [r0, #0]
    3b00:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    3b02:	3b5c      	subs	r3, #92	; 0x5c
    3b04:	3bff      	subs	r3, #255	; 0xff
    3b06:	5cc3      	ldrb	r3, [r0, r3]
    3b08:	2b7f      	cmp	r3, #127	; 0x7f
    3b0a:	d81c      	bhi.n	3b46 <USB_Handler+0x436>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    3b0c:	b003      	add	sp, #12
    3b0e:	bc3c      	pop	{r2, r3, r4, r5}
    3b10:	4690      	mov	r8, r2
    3b12:	4699      	mov	r9, r3
    3b14:	46a2      	mov	sl, r4
    3b16:	46ab      	mov	fp, r5
    3b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    3b1a:	687b      	ldr	r3, [r7, #4]
    3b1c:	0038      	movs	r0, r7
    3b1e:	4798      	blx	r3
    3b20:	e798      	b.n	3a54 <USB_Handler+0x344>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    3b22:	6883      	ldr	r3, [r0, #8]
    3b24:	4798      	blx	r3
    3b26:	e7a3      	b.n	3a70 <USB_Handler+0x360>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    3b28:	6943      	ldr	r3, [r0, #20]
    3b2a:	4798      	blx	r3
    3b2c:	e7ab      	b.n	3a86 <USB_Handler+0x376>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    3b2e:	6903      	ldr	r3, [r0, #16]
    3b30:	4798      	blx	r3
    3b32:	e7b3      	b.n	3a9c <USB_Handler+0x38c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    3b34:	68c3      	ldr	r3, [r0, #12]
    3b36:	4798      	blx	r3
    3b38:	e7bb      	b.n	3ab2 <USB_Handler+0x3a2>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    3b3a:	6983      	ldr	r3, [r0, #24]
    3b3c:	4798      	blx	r3
    3b3e:	e7c6      	b.n	3ace <USB_Handler+0x3be>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    3b40:	69c3      	ldr	r3, [r0, #28]
    3b42:	4798      	blx	r3
    3b44:	e7d2      	b.n	3aec <USB_Handler+0x3dc>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    3b46:	6a03      	ldr	r3, [r0, #32]
    3b48:	4798      	blx	r3
    3b4a:	e7df      	b.n	3b0c <USB_Handler+0x3fc>
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    3b4c:	0023      	movs	r3, r4
    3b4e:	332e      	adds	r3, #46	; 0x2e
    3b50:	009b      	lsls	r3, r3, #2
    3b52:	4642      	mov	r2, r8
    3b54:	6812      	ldr	r2, [r2, #0]
    3b56:	589b      	ldr	r3, [r3, r2]
    3b58:	4971      	ldr	r1, [pc, #452]	; (3d20 <USB_Handler+0x610>)
    3b5a:	4642      	mov	r2, r8
    3b5c:	6810      	ldr	r0, [r2, #0]
    3b5e:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    3b60:	3401      	adds	r4, #1
    3b62:	2c07      	cmp	r4, #7
    3b64:	d0d2      	beq.n	3b0c <USB_Handler+0x3fc>
			if (flags & _usb_device_irq_bits[i]) {
    3b66:	0063      	lsls	r3, r4, #1
    3b68:	5bdb      	ldrh	r3, [r3, r7]
    3b6a:	4233      	tst	r3, r6
    3b6c:	d003      	beq.n	3b76 <USB_Handler+0x466>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    3b6e:	464a      	mov	r2, r9
    3b70:	6812      	ldr	r2, [r2, #0]
    3b72:	6812      	ldr	r2, [r2, #0]
    3b74:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    3b76:	422b      	tst	r3, r5
    3b78:	d0f2      	beq.n	3b60 <USB_Handler+0x450>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    3b7a:	2c06      	cmp	r4, #6
    3b7c:	d1e6      	bne.n	3b4c <USB_Handler+0x43c>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    3b7e:	4b69      	ldr	r3, [pc, #420]	; (3d24 <USB_Handler+0x614>)
    3b80:	891b      	ldrh	r3, [r3, #8]
    3b82:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    3b84:	2280      	movs	r2, #128	; 0x80
    3b86:	0052      	lsls	r2, r2, #1
    3b88:	4013      	ands	r3, r2
    3b8a:	4a65      	ldr	r2, [pc, #404]	; (3d20 <USB_Handler+0x610>)
    3b8c:	6013      	str	r3, [r2, #0]
    3b8e:	e7dd      	b.n	3b4c <USB_Handler+0x43c>
    3b90:	003c      	movs	r4, r7
    3b92:	3459      	adds	r4, #89	; 0x59
    3b94:	34ff      	adds	r4, #255	; 0xff
	if (0 == ep_inst) {
    3b96:	2300      	movs	r3, #0
			if (ep_inst & (1 << i)) {
    3b98:	2201      	movs	r2, #1
    3b9a:	4694      	mov	ip, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    3b9c:	325f      	adds	r2, #95	; 0x5f
    3b9e:	4691      	mov	r9, r2
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3ba0:	3a50      	subs	r2, #80	; 0x50
    3ba2:	4692      	mov	sl, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    3ba4:	3a0d      	subs	r2, #13
    3ba6:	4693      	mov	fp, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    3ba8:	46b8      	mov	r8, r7
    3baa:	002f      	movs	r7, r5
    3bac:	e0c3      	b.n	3d36 <USB_Handler+0x626>
    3bae:	002a      	movs	r2, r5
    3bb0:	003d      	movs	r5, r7
    3bb2:	4647      	mov	r7, r8
    3bb4:	4690      	mov	r8, r2
    3bb6:	015b      	lsls	r3, r3, #5
    3bb8:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    3bba:	2308      	movs	r3, #8
    3bbc:	33ff      	adds	r3, #255	; 0xff
    3bbe:	5ceb      	ldrb	r3, [r5, r3]
    3bc0:	065b      	lsls	r3, r3, #25
    3bc2:	d515      	bpl.n	3bf0 <USB_Handler+0x4e0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    3bc4:	2240      	movs	r2, #64	; 0x40
    3bc6:	2308      	movs	r3, #8
    3bc8:	33ff      	adds	r3, #255	; 0xff
    3bca:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    3bcc:	3b88      	subs	r3, #136	; 0x88
    3bce:	3bff      	subs	r3, #255	; 0xff
    3bd0:	4642      	mov	r2, r8
    3bd2:	4313      	orrs	r3, r2
    3bd4:	4a54      	ldr	r2, [pc, #336]	; (3d28 <USB_Handler+0x618>)
    3bd6:	7193      	strb	r3, [r2, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    3bd8:	2360      	movs	r3, #96	; 0x60
    3bda:	420b      	tst	r3, r1
    3bdc:	d096      	beq.n	3b0c <USB_Handler+0x3fc>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    3bde:	9b01      	ldr	r3, [sp, #4]
    3be0:	011b      	lsls	r3, r3, #4
    3be2:	18fb      	adds	r3, r7, r3
    3be4:	33e0      	adds	r3, #224	; 0xe0
    3be6:	681b      	ldr	r3, [r3, #0]
    3be8:	494f      	ldr	r1, [pc, #316]	; (3d28 <USB_Handler+0x618>)
    3bea:	0038      	movs	r0, r7
    3bec:	4798      	blx	r3
    3bee:	e78d      	b.n	3b0c <USB_Handler+0x3fc>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    3bf0:	2308      	movs	r3, #8
    3bf2:	33ff      	adds	r3, #255	; 0xff
    3bf4:	5ceb      	ldrb	r3, [r5, r3]
    3bf6:	069b      	lsls	r3, r3, #26
    3bf8:	d5ee      	bpl.n	3bd8 <USB_Handler+0x4c8>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    3bfa:	2220      	movs	r2, #32
    3bfc:	2308      	movs	r3, #8
    3bfe:	33ff      	adds	r3, #255	; 0xff
    3c00:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    3c02:	4b49      	ldr	r3, [pc, #292]	; (3d28 <USB_Handler+0x618>)
    3c04:	4642      	mov	r2, r8
    3c06:	719a      	strb	r2, [r3, #6]
    3c08:	e7e6      	b.n	3bd8 <USB_Handler+0x4c8>
    3c0a:	003d      	movs	r5, r7
    3c0c:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    3c0e:	9a01      	ldr	r2, [sp, #4]
    3c10:	0013      	movs	r3, r2
    3c12:	3308      	adds	r3, #8
    3c14:	015b      	lsls	r3, r3, #5
    3c16:	18ed      	adds	r5, r5, r3
    3c18:	2310      	movs	r3, #16
    3c1a:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    3c1c:	18bb      	adds	r3, r7, r2
    3c1e:	3361      	adds	r3, #97	; 0x61
    3c20:	33ff      	adds	r3, #255	; 0xff
    3c22:	781b      	ldrb	r3, [r3, #0]
    3c24:	06db      	lsls	r3, r3, #27
    3c26:	d400      	bmi.n	3c2a <USB_Handler+0x51a>
    3c28:	e770      	b.n	3b0c <USB_Handler+0x3fc>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    3c2a:	0010      	movs	r0, r2
    3c2c:	0152      	lsls	r2, r2, #5
    3c2e:	4b3d      	ldr	r3, [pc, #244]	; (3d24 <USB_Handler+0x614>)
    3c30:	189b      	adds	r3, r3, r2
    3c32:	685b      	ldr	r3, [r3, #4]
    3c34:	049b      	lsls	r3, r3, #18
    3c36:	0c9b      	lsrs	r3, r3, #18
    3c38:	493b      	ldr	r1, [pc, #236]	; (3d28 <USB_Handler+0x618>)
    3c3a:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    3c3c:	0103      	lsls	r3, r0, #4
    3c3e:	18fb      	adds	r3, r7, r3
    3c40:	33dc      	adds	r3, #220	; 0xdc
    3c42:	681b      	ldr	r3, [r3, #0]
    3c44:	4640      	mov	r0, r8
    3c46:	4798      	blx	r3
    3c48:	e760      	b.n	3b0c <USB_Handler+0x3fc>
    3c4a:	002a      	movs	r2, r5
    3c4c:	003d      	movs	r5, r7
    3c4e:	4647      	mov	r7, r8
    3c50:	4690      	mov	r8, r2
    3c52:	015b      	lsls	r3, r3, #5
    3c54:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    3c56:	2308      	movs	r3, #8
    3c58:	33ff      	adds	r3, #255	; 0xff
    3c5a:	5ceb      	ldrb	r3, [r5, r3]
    3c5c:	079b      	lsls	r3, r3, #30
    3c5e:	d51e      	bpl.n	3c9e <USB_Handler+0x58e>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    3c60:	2202      	movs	r2, #2
    3c62:	2308      	movs	r3, #8
    3c64:	33ff      	adds	r3, #255	; 0xff
    3c66:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    3c68:	482f      	ldr	r0, [pc, #188]	; (3d28 <USB_Handler+0x618>)
    3c6a:	3b88      	subs	r3, #136	; 0x88
    3c6c:	3bff      	subs	r3, #255	; 0xff
    3c6e:	4642      	mov	r2, r8
    3c70:	4313      	orrs	r3, r2
    3c72:	7183      	strb	r3, [r0, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    3c74:	9b01      	ldr	r3, [sp, #4]
    3c76:	015a      	lsls	r2, r3, #5
    3c78:	4b2a      	ldr	r3, [pc, #168]	; (3d24 <USB_Handler+0x614>)
    3c7a:	189b      	adds	r3, r3, r2
    3c7c:	3310      	adds	r3, #16
    3c7e:	685b      	ldr	r3, [r3, #4]
    3c80:	049b      	lsls	r3, r3, #18
    3c82:	0c9b      	lsrs	r3, r3, #18
    3c84:	8043      	strh	r3, [r0, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    3c86:	078b      	lsls	r3, r1, #30
    3c88:	d100      	bne.n	3c8c <USB_Handler+0x57c>
    3c8a:	e73f      	b.n	3b0c <USB_Handler+0x3fc>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    3c8c:	9b01      	ldr	r3, [sp, #4]
    3c8e:	330d      	adds	r3, #13
    3c90:	011b      	lsls	r3, r3, #4
    3c92:	18fb      	adds	r3, r7, r3
    3c94:	685b      	ldr	r3, [r3, #4]
    3c96:	4924      	ldr	r1, [pc, #144]	; (3d28 <USB_Handler+0x618>)
    3c98:	0038      	movs	r0, r7
    3c9a:	4798      	blx	r3
    3c9c:	e736      	b.n	3b0c <USB_Handler+0x3fc>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    3c9e:	2308      	movs	r3, #8
    3ca0:	33ff      	adds	r3, #255	; 0xff
    3ca2:	5ceb      	ldrb	r3, [r5, r3]
    3ca4:	07db      	lsls	r3, r3, #31
    3ca6:	d5ee      	bpl.n	3c86 <USB_Handler+0x576>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    3ca8:	2201      	movs	r2, #1
    3caa:	2308      	movs	r3, #8
    3cac:	33ff      	adds	r3, #255	; 0xff
    3cae:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    3cb0:	481d      	ldr	r0, [pc, #116]	; (3d28 <USB_Handler+0x618>)
    3cb2:	4643      	mov	r3, r8
    3cb4:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    3cb6:	9b01      	ldr	r3, [sp, #4]
    3cb8:	015b      	lsls	r3, r3, #5
    3cba:	4a1a      	ldr	r2, [pc, #104]	; (3d24 <USB_Handler+0x614>)
    3cbc:	18d2      	adds	r2, r2, r3
    3cbe:	6853      	ldr	r3, [r2, #4]
    3cc0:	049b      	lsls	r3, r3, #18
    3cc2:	0c9b      	lsrs	r3, r3, #18
    3cc4:	8003      	strh	r3, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    3cc6:	6853      	ldr	r3, [r2, #4]
    3cc8:	011b      	lsls	r3, r3, #4
    3cca:	0c9b      	lsrs	r3, r3, #18
    3ccc:	8083      	strh	r3, [r0, #4]
    3cce:	e7da      	b.n	3c86 <USB_Handler+0x576>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    3cd0:	2208      	movs	r2, #8
    3cd2:	32ff      	adds	r2, #255	; 0xff
    3cd4:	5c9a      	ldrb	r2, [r3, r2]
    3cd6:	0752      	lsls	r2, r2, #29
    3cd8:	d579      	bpl.n	3dce <USB_Handler+0x6be>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    3cda:	2004      	movs	r0, #4
    3cdc:	2208      	movs	r2, #8
    3cde:	32ff      	adds	r2, #255	; 0xff
    3ce0:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    3ce2:	9801      	ldr	r0, [sp, #4]
    3ce4:	0142      	lsls	r2, r0, #5
    3ce6:	4b0f      	ldr	r3, [pc, #60]	; (3d24 <USB_Handler+0x614>)
    3ce8:	189b      	adds	r3, r3, r2
    3cea:	7a9b      	ldrb	r3, [r3, #10]
    3cec:	079b      	lsls	r3, r3, #30
    3cee:	d505      	bpl.n	3cfc <USB_Handler+0x5ec>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    3cf0:	4b0c      	ldr	r3, [pc, #48]	; (3d24 <USB_Handler+0x614>)
    3cf2:	189b      	adds	r3, r3, r2
    3cf4:	7a9a      	ldrb	r2, [r3, #10]
    3cf6:	2002      	movs	r0, #2
    3cf8:	4382      	bics	r2, r0
    3cfa:	729a      	strb	r2, [r3, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    3cfc:	4b0a      	ldr	r3, [pc, #40]	; (3d28 <USB_Handler+0x618>)
    3cfe:	4642      	mov	r2, r8
    3d00:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    3d02:	9b01      	ldr	r3, [sp, #4]
    3d04:	3308      	adds	r3, #8
    3d06:	015b      	lsls	r3, r3, #5
    3d08:	683a      	ldr	r2, [r7, #0]
    3d0a:	4694      	mov	ip, r2
    3d0c:	4463      	add	r3, ip
    3d0e:	79db      	ldrb	r3, [r3, #7]
    3d10:	07db      	lsls	r3, r3, #31
    3d12:	d55c      	bpl.n	3dce <USB_Handler+0x6be>
    3d14:	e6fa      	b.n	3b0c <USB_Handler+0x3fc>
    3d16:	46c0      	nop			; (mov r8, r8)
    3d18:	20000758 	.word	0x20000758
    3d1c:	20000748 	.word	0x20000748
    3d20:	2000074c 	.word	0x2000074c
    3d24:	20000a44 	.word	0x20000a44
    3d28:	20000750 	.word	0x20000750
    3d2c:	3301      	adds	r3, #1
    3d2e:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    3d30:	2b08      	cmp	r3, #8
    3d32:	d100      	bne.n	3d36 <USB_Handler+0x626>
    3d34:	e6ea      	b.n	3b0c <USB_Handler+0x3fc>
    3d36:	b2dd      	uxtb	r5, r3
			if (ep_inst & (1 << i)) {
    3d38:	9301      	str	r3, [sp, #4]
    3d3a:	0032      	movs	r2, r6
    3d3c:	411a      	asrs	r2, r3
    3d3e:	4661      	mov	r1, ip
    3d40:	4211      	tst	r1, r2
    3d42:	d0f3      	beq.n	3d2c <USB_Handler+0x61c>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    3d44:	001a      	movs	r2, r3
    3d46:	3208      	adds	r2, #8
    3d48:	0152      	lsls	r2, r2, #5
    3d4a:	18ba      	adds	r2, r7, r2
    3d4c:	79d2      	ldrb	r2, [r2, #7]
    3d4e:	b2d2      	uxtb	r2, r2
    3d50:	7a21      	ldrb	r1, [r4, #8]
    3d52:	4011      	ands	r1, r2
    3d54:	7820      	ldrb	r0, [r4, #0]
    3d56:	4001      	ands	r1, r0
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    3d58:	4648      	mov	r0, r9
    3d5a:	4210      	tst	r0, r2
    3d5c:	d000      	beq.n	3d60 <USB_Handler+0x650>
    3d5e:	e726      	b.n	3bae <USB_Handler+0x49e>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3d60:	4650      	mov	r0, sl
    3d62:	4210      	tst	r0, r2
    3d64:	d000      	beq.n	3d68 <USB_Handler+0x658>
    3d66:	e750      	b.n	3c0a <USB_Handler+0x4fa>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    3d68:	4658      	mov	r0, fp
    3d6a:	4210      	tst	r0, r2
    3d6c:	d000      	beq.n	3d70 <USB_Handler+0x660>
    3d6e:	e76c      	b.n	3c4a <USB_Handler+0x53a>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    3d70:	200c      	movs	r0, #12
    3d72:	4210      	tst	r0, r2
    3d74:	d0da      	beq.n	3d2c <USB_Handler+0x61c>
    3d76:	002a      	movs	r2, r5
    3d78:	003d      	movs	r5, r7
    3d7a:	4647      	mov	r7, r8
    3d7c:	4690      	mov	r8, r2
    3d7e:	015b      	lsls	r3, r3, #5
    3d80:	18eb      	adds	r3, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    3d82:	2208      	movs	r2, #8
    3d84:	32ff      	adds	r2, #255	; 0xff
    3d86:	5c9a      	ldrb	r2, [r3, r2]
    3d88:	0712      	lsls	r2, r2, #28
    3d8a:	d5a1      	bpl.n	3cd0 <USB_Handler+0x5c0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    3d8c:	3804      	subs	r0, #4
    3d8e:	2208      	movs	r2, #8
    3d90:	32ff      	adds	r2, #255	; 0xff
    3d92:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    3d94:	9801      	ldr	r0, [sp, #4]
    3d96:	0142      	lsls	r2, r0, #5
    3d98:	4b13      	ldr	r3, [pc, #76]	; (3de8 <USB_Handler+0x6d8>)
    3d9a:	189b      	adds	r3, r3, r2
    3d9c:	7e9b      	ldrb	r3, [r3, #26]
    3d9e:	079b      	lsls	r3, r3, #30
    3da0:	d505      	bpl.n	3dae <USB_Handler+0x69e>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    3da2:	4b11      	ldr	r3, [pc, #68]	; (3de8 <USB_Handler+0x6d8>)
    3da4:	189b      	adds	r3, r3, r2
    3da6:	7e9a      	ldrb	r2, [r3, #26]
    3da8:	2002      	movs	r0, #2
    3daa:	4382      	bics	r2, r0
    3dac:	769a      	strb	r2, [r3, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    3dae:	2380      	movs	r3, #128	; 0x80
    3db0:	425b      	negs	r3, r3
    3db2:	4642      	mov	r2, r8
    3db4:	4313      	orrs	r3, r2
    3db6:	4a0d      	ldr	r2, [pc, #52]	; (3dec <USB_Handler+0x6dc>)
    3db8:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    3dba:	9b01      	ldr	r3, [sp, #4]
    3dbc:	3308      	adds	r3, #8
    3dbe:	015b      	lsls	r3, r3, #5
    3dc0:	683a      	ldr	r2, [r7, #0]
    3dc2:	4694      	mov	ip, r2
    3dc4:	4463      	add	r3, ip
    3dc6:	79db      	ldrb	r3, [r3, #7]
    3dc8:	079b      	lsls	r3, r3, #30
    3dca:	d500      	bpl.n	3dce <USB_Handler+0x6be>
    3dcc:	e69e      	b.n	3b0c <USB_Handler+0x3fc>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    3dce:	230c      	movs	r3, #12
    3dd0:	420b      	tst	r3, r1
    3dd2:	d100      	bne.n	3dd6 <USB_Handler+0x6c6>
    3dd4:	e69a      	b.n	3b0c <USB_Handler+0x3fc>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    3dd6:	9b01      	ldr	r3, [sp, #4]
    3dd8:	011b      	lsls	r3, r3, #4
    3dda:	18fb      	adds	r3, r7, r3
    3ddc:	33d8      	adds	r3, #216	; 0xd8
    3dde:	681b      	ldr	r3, [r3, #0]
    3de0:	4902      	ldr	r1, [pc, #8]	; (3dec <USB_Handler+0x6dc>)
    3de2:	0038      	movs	r0, r7
    3de4:	4798      	blx	r3
    3de6:	e691      	b.n	3b0c <USB_Handler+0x3fc>
    3de8:	20000a44 	.word	0x20000a44
    3dec:	20000750 	.word	0x20000750

00003df0 <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    3df0:	2200      	movs	r2, #0
    3df2:	7002      	strb	r2, [r0, #0]
	module_config->run_in_standby = 1;
    3df4:	2301      	movs	r3, #1
    3df6:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    3df8:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    3dfa:	70c3      	strb	r3, [r0, #3]
}
    3dfc:	4770      	bx	lr
	...

00003e00 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    3e00:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e02:	46ce      	mov	lr, r9
    3e04:	4647      	mov	r7, r8
    3e06:	b580      	push	{r7, lr}
    3e08:	b083      	sub	sp, #12
    3e0a:	0004      	movs	r4, r0
    3e0c:	000d      	movs	r5, r1
    3e0e:	0016      	movs	r6, r2
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    3e10:	2300      	movs	r3, #0
    3e12:	4a6e      	ldr	r2, [pc, #440]	; (3fcc <usb_init+0x1cc>)
    3e14:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
    3e16:	4a6e      	ldr	r2, [pc, #440]	; (3fd0 <usb_init+0x1d0>)
    3e18:	6010      	str	r0, [r2, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    3e1a:	6021      	str	r1, [r4, #0]
			PM->APBBMASK.reg |= mask;
    3e1c:	496d      	ldr	r1, [pc, #436]	; (3fd4 <usb_init+0x1d4>)
    3e1e:	69ca      	ldr	r2, [r1, #28]
    3e20:	2020      	movs	r0, #32
    3e22:	4302      	orrs	r2, r0
    3e24:	61ca      	str	r2, [r1, #28]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3e26:	af01      	add	r7, sp, #4
    3e28:	707b      	strb	r3, [r7, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3e2a:	2201      	movs	r2, #1
    3e2c:	70ba      	strb	r2, [r7, #2]
	config->powersave    = false;
    3e2e:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    3e30:	3306      	adds	r3, #6
    3e32:	4699      	mov	r9, r3
    3e34:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    3e36:	0039      	movs	r1, r7
    3e38:	3808      	subs	r0, #8
    3e3a:	4b67      	ldr	r3, [pc, #412]	; (3fd8 <usb_init+0x1d8>)
    3e3c:	4698      	mov	r8, r3
    3e3e:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    3e40:	464b      	mov	r3, r9
    3e42:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    3e44:	0039      	movs	r1, r7
    3e46:	2019      	movs	r0, #25
    3e48:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    3e4a:	78b3      	ldrb	r3, [r6, #2]
    3e4c:	466a      	mov	r2, sp
    3e4e:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    3e50:	4669      	mov	r1, sp
    3e52:	2006      	movs	r0, #6
    3e54:	4b61      	ldr	r3, [pc, #388]	; (3fdc <usb_init+0x1dc>)
    3e56:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    3e58:	2006      	movs	r0, #6
    3e5a:	4b61      	ldr	r3, [pc, #388]	; (3fe0 <usb_init+0x1e0>)
    3e5c:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    3e5e:	782b      	ldrb	r3, [r5, #0]
    3e60:	2201      	movs	r2, #1
    3e62:	4313      	orrs	r3, r2
    3e64:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    3e66:	78ab      	ldrb	r3, [r5, #2]
    3e68:	07db      	lsls	r3, r3, #31
    3e6a:	d4fc      	bmi.n	3e66 <usb_init+0x66>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    3e6c:	4a5d      	ldr	r2, [pc, #372]	; (3fe4 <usb_init+0x1e4>)
    3e6e:	78d3      	ldrb	r3, [r2, #3]
    3e70:	2103      	movs	r1, #3
    3e72:	438b      	bics	r3, r1
    3e74:	2102      	movs	r1, #2
    3e76:	430b      	orrs	r3, r1
    3e78:	70d3      	strb	r3, [r2, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    3e7a:	78d3      	ldrb	r3, [r2, #3]
    3e7c:	210c      	movs	r1, #12
    3e7e:	438b      	bics	r3, r1
    3e80:	2108      	movs	r1, #8
    3e82:	430b      	orrs	r3, r1
    3e84:	70d3      	strb	r3, [r2, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    3e86:	4b58      	ldr	r3, [pc, #352]	; (3fe8 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    3e88:	681b      	ldr	r3, [r3, #0]
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    3e8a:	039b      	lsls	r3, r3, #14
    3e8c:	0edb      	lsrs	r3, r3, #27
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    3e8e:	2b1f      	cmp	r3, #31
    3e90:	d100      	bne.n	3e94 <usb_init+0x94>
    3e92:	e08f      	b.n	3fb4 <usb_init+0x1b4>
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    3e94:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    3e96:	019b      	lsls	r3, r3, #6
    3e98:	4954      	ldr	r1, [pc, #336]	; (3fec <usb_init+0x1ec>)
    3e9a:	400a      	ands	r2, r1
    3e9c:	4313      	orrs	r3, r2
    3e9e:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    3ea0:	4b51      	ldr	r3, [pc, #324]	; (3fe8 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    3ea2:	681b      	ldr	r3, [r3, #0]
    3ea4:	025b      	lsls	r3, r3, #9
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    3ea6:	0edb      	lsrs	r3, r3, #27
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    3ea8:	2b1f      	cmp	r3, #31
    3eaa:	d100      	bne.n	3eae <usb_init+0xae>
    3eac:	e084      	b.n	3fb8 <usb_init+0x1b8>
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    3eae:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    3eb0:	211f      	movs	r1, #31
    3eb2:	438a      	bics	r2, r1
    3eb4:	4313      	orrs	r3, r2
    3eb6:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    3eb8:	4b4b      	ldr	r3, [pc, #300]	; (3fe8 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    3eba:	681b      	ldr	r3, [r3, #0]
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    3ebc:	019b      	lsls	r3, r3, #6
    3ebe:	0f5b      	lsrs	r3, r3, #29
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    3ec0:	2b07      	cmp	r3, #7
    3ec2:	d100      	bne.n	3ec6 <usb_init+0xc6>
    3ec4:	e07a      	b.n	3fbc <usb_init+0x1bc>
		pad_trim = 3;
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    3ec6:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    3ec8:	031b      	lsls	r3, r3, #12
    3eca:	4949      	ldr	r1, [pc, #292]	; (3ff0 <usb_init+0x1f0>)
    3ecc:	400a      	ands	r2, r1
    3ece:	4313      	orrs	r3, r2
    3ed0:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    3ed2:	7832      	ldrb	r2, [r6, #0]
    3ed4:	7829      	ldrb	r1, [r5, #0]
    3ed6:	01d2      	lsls	r2, r2, #7
    3ed8:	237f      	movs	r3, #127	; 0x7f
    3eda:	400b      	ands	r3, r1
    3edc:	4313      	orrs	r3, r2
    3ede:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    3ee0:	7871      	ldrb	r1, [r6, #1]
    3ee2:	782b      	ldrb	r3, [r5, #0]
    3ee4:	2201      	movs	r2, #1
    3ee6:	400a      	ands	r2, r1
    3ee8:	0092      	lsls	r2, r2, #2
    3eea:	2104      	movs	r1, #4
    3eec:	438b      	bics	r3, r1
    3eee:	4313      	orrs	r3, r2
    3ef0:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    3ef2:	4b40      	ldr	r3, [pc, #256]	; (3ff4 <usb_init+0x1f4>)
    3ef4:	626b      	str	r3, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    3ef6:	78f3      	ldrb	r3, [r6, #3]
    3ef8:	2b01      	cmp	r3, #1
    3efa:	d061      	beq.n	3fc0 <usb_init+0x1c0>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    3efc:	2b00      	cmp	r3, #0
    3efe:	d106      	bne.n	3f0e <usb_init+0x10e>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    3f00:	6822      	ldr	r2, [r4, #0]
    3f02:	8913      	ldrh	r3, [r2, #8]
    3f04:	210c      	movs	r1, #12
    3f06:	438b      	bics	r3, r1
    3f08:	2104      	movs	r1, #4
    3f0a:	430b      	orrs	r3, r1
    3f0c:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    3f0e:	2280      	movs	r2, #128	; 0x80
    3f10:	0052      	lsls	r2, r2, #1
    3f12:	2100      	movs	r1, #0
    3f14:	4837      	ldr	r0, [pc, #220]	; (3ff4 <usb_init+0x1f4>)
    3f16:	4b38      	ldr	r3, [pc, #224]	; (3ff8 <usb_init+0x1f8>)
    3f18:	4798      	blx	r3
    3f1a:	1d23      	adds	r3, r4, #4
    3f1c:	0021      	movs	r1, r4
    3f1e:	3124      	adds	r1, #36	; 0x24
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
    3f20:	2200      	movs	r2, #0
    3f22:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    3f24:	428b      	cmp	r3, r1
    3f26:	d1fc      	bne.n	3f22 <usb_init+0x122>
    3f28:	0021      	movs	r1, r4
    3f2a:	31a4      	adds	r1, #164	; 0xa4
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    3f2c:	2200      	movs	r2, #0
    3f2e:	601a      	str	r2, [r3, #0]
    3f30:	605a      	str	r2, [r3, #4]
    3f32:	609a      	str	r2, [r3, #8]
    3f34:	60da      	str	r2, [r3, #12]
    3f36:	3310      	adds	r3, #16
	for (i = 0; i < USB_PIPE_NUM; i++) {
    3f38:	428b      	cmp	r3, r1
    3f3a:	d1f8      	bne.n	3f2e <usb_init+0x12e>
		}
	};
	module_inst->host_registered_callback_mask = 0;
    3f3c:	2300      	movs	r3, #0
    3f3e:	22a4      	movs	r2, #164	; 0xa4
    3f40:	54a3      	strb	r3, [r4, r2]
	module_inst->host_enabled_callback_mask = 0;
    3f42:	3201      	adds	r2, #1
    3f44:	54a3      	strb	r3, [r4, r2]
    3f46:	0023      	movs	r3, r4
    3f48:	33a6      	adds	r3, #166	; 0xa6
    3f4a:	0021      	movs	r1, r4
    3f4c:	31ae      	adds	r1, #174	; 0xae
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    3f4e:	2200      	movs	r2, #0
    3f50:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    3f52:	721a      	strb	r2, [r3, #8]
    3f54:	3301      	adds	r3, #1
	for (i = 0; i < USB_PIPE_NUM; i++) {
    3f56:	4299      	cmp	r1, r3
    3f58:	d1fa      	bne.n	3f50 <usb_init+0x150>
    3f5a:	0023      	movs	r3, r4
    3f5c:	33b8      	adds	r3, #184	; 0xb8
    3f5e:	0021      	movs	r1, r4
    3f60:	31d4      	adds	r1, #212	; 0xd4
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    3f62:	2200      	movs	r2, #0
    3f64:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    3f66:	428b      	cmp	r3, r1
    3f68:	d1fc      	bne.n	3f64 <usb_init+0x164>
    3f6a:	0021      	movs	r1, r4
    3f6c:	3155      	adds	r1, #85	; 0x55
    3f6e:	31ff      	adds	r1, #255	; 0xff
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    3f70:	2200      	movs	r2, #0
    3f72:	601a      	str	r2, [r3, #0]
    3f74:	605a      	str	r2, [r3, #4]
    3f76:	609a      	str	r2, [r3, #8]
    3f78:	60da      	str	r2, [r3, #12]
    3f7a:	3310      	adds	r3, #16
	for (i = 0; i < USB_EPT_NUM; i++) {
    3f7c:	428b      	cmp	r3, r1
    3f7e:	d1f8      	bne.n	3f72 <usb_init+0x172>
		}
	}
	module_inst->device_registered_callback_mask = 0;
    3f80:	2300      	movs	r3, #0
    3f82:	22aa      	movs	r2, #170	; 0xaa
    3f84:	0052      	lsls	r2, r2, #1
    3f86:	52a3      	strh	r3, [r4, r2]
	module_inst->device_enabled_callback_mask = 0;
    3f88:	3202      	adds	r2, #2
    3f8a:	52a3      	strh	r3, [r4, r2]
    3f8c:	0023      	movs	r3, r4
    3f8e:	3359      	adds	r3, #89	; 0x59
    3f90:	33ff      	adds	r3, #255	; 0xff
    3f92:	3461      	adds	r4, #97	; 0x61
    3f94:	34ff      	adds	r4, #255	; 0xff
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    3f96:	2200      	movs	r2, #0
    3f98:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    3f9a:	721a      	strb	r2, [r3, #8]
    3f9c:	3301      	adds	r3, #1
	for (j = 0; j < USB_EPT_NUM; j++) {
    3f9e:	42a3      	cmp	r3, r4
    3fa0:	d1fa      	bne.n	3f98 <usb_init+0x198>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3fa2:	2280      	movs	r2, #128	; 0x80
    3fa4:	4b15      	ldr	r3, [pc, #84]	; (3ffc <usb_init+0x1fc>)
    3fa6:	601a      	str	r2, [r3, #0]

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    3fa8:	2000      	movs	r0, #0
    3faa:	b003      	add	sp, #12
    3fac:	bc0c      	pop	{r2, r3}
    3fae:	4690      	mov	r8, r2
    3fb0:	4699      	mov	r9, r3
    3fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pad_transn = 5;
    3fb4:	3b1a      	subs	r3, #26
    3fb6:	e76d      	b.n	3e94 <usb_init+0x94>
		pad_transp = 29;
    3fb8:	3b02      	subs	r3, #2
    3fba:	e778      	b.n	3eae <usb_init+0xae>
		pad_trim = 3;
    3fbc:	3b04      	subs	r3, #4
    3fbe:	e782      	b.n	3ec6 <usb_init+0xc6>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    3fc0:	6822      	ldr	r2, [r4, #0]
    3fc2:	8913      	ldrh	r3, [r2, #8]
    3fc4:	3108      	adds	r1, #8
    3fc6:	438b      	bics	r3, r1
    3fc8:	8113      	strh	r3, [r2, #8]
    3fca:	e7a0      	b.n	3f0e <usb_init+0x10e>
    3fcc:	20000758 	.word	0x20000758
    3fd0:	20000748 	.word	0x20000748
    3fd4:	40000400 	.word	0x40000400
    3fd8:	00002321 	.word	0x00002321
    3fdc:	00002229 	.word	0x00002229
    3fe0:	0000219d 	.word	0x0000219d
    3fe4:	41005000 	.word	0x41005000
    3fe8:	00806024 	.word	0x00806024
    3fec:	fffff83f 	.word	0xfffff83f
    3ff0:	ffff8fff 	.word	0xffff8fff
    3ff4:	20000a44 	.word	0x20000a44
    3ff8:	00004f67 	.word	0x00004f67
    3ffc:	e000e100 	.word	0xe000e100

00004000 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    4000:	e7fe      	b.n	4000 <Dummy_Handler>
	...

00004004 <Reset_Handler>:
{
    4004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    4006:	4a2a      	ldr	r2, [pc, #168]	; (40b0 <Reset_Handler+0xac>)
    4008:	4b2a      	ldr	r3, [pc, #168]	; (40b4 <Reset_Handler+0xb0>)
    400a:	429a      	cmp	r2, r3
    400c:	d011      	beq.n	4032 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    400e:	001a      	movs	r2, r3
    4010:	4b29      	ldr	r3, [pc, #164]	; (40b8 <Reset_Handler+0xb4>)
    4012:	429a      	cmp	r2, r3
    4014:	d20d      	bcs.n	4032 <Reset_Handler+0x2e>
    4016:	4a29      	ldr	r2, [pc, #164]	; (40bc <Reset_Handler+0xb8>)
    4018:	3303      	adds	r3, #3
    401a:	1a9b      	subs	r3, r3, r2
    401c:	089b      	lsrs	r3, r3, #2
    401e:	3301      	adds	r3, #1
    4020:	009b      	lsls	r3, r3, #2
    4022:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    4024:	4823      	ldr	r0, [pc, #140]	; (40b4 <Reset_Handler+0xb0>)
    4026:	4922      	ldr	r1, [pc, #136]	; (40b0 <Reset_Handler+0xac>)
    4028:	588c      	ldr	r4, [r1, r2]
    402a:	5084      	str	r4, [r0, r2]
    402c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    402e:	429a      	cmp	r2, r3
    4030:	d1fa      	bne.n	4028 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    4032:	4a23      	ldr	r2, [pc, #140]	; (40c0 <Reset_Handler+0xbc>)
    4034:	4b23      	ldr	r3, [pc, #140]	; (40c4 <Reset_Handler+0xc0>)
    4036:	429a      	cmp	r2, r3
    4038:	d20a      	bcs.n	4050 <Reset_Handler+0x4c>
    403a:	43d3      	mvns	r3, r2
    403c:	4921      	ldr	r1, [pc, #132]	; (40c4 <Reset_Handler+0xc0>)
    403e:	185b      	adds	r3, r3, r1
    4040:	2103      	movs	r1, #3
    4042:	438b      	bics	r3, r1
    4044:	3304      	adds	r3, #4
    4046:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    4048:	2100      	movs	r1, #0
    404a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    404c:	4293      	cmp	r3, r2
    404e:	d1fc      	bne.n	404a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    4050:	4a1d      	ldr	r2, [pc, #116]	; (40c8 <Reset_Handler+0xc4>)
    4052:	21ff      	movs	r1, #255	; 0xff
    4054:	4b1d      	ldr	r3, [pc, #116]	; (40cc <Reset_Handler+0xc8>)
    4056:	438b      	bics	r3, r1
    4058:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    405a:	39fd      	subs	r1, #253	; 0xfd
    405c:	2390      	movs	r3, #144	; 0x90
    405e:	005b      	lsls	r3, r3, #1
    4060:	4a1b      	ldr	r2, [pc, #108]	; (40d0 <Reset_Handler+0xcc>)
    4062:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    4064:	4a1b      	ldr	r2, [pc, #108]	; (40d4 <Reset_Handler+0xd0>)
    4066:	78d3      	ldrb	r3, [r2, #3]
    4068:	2503      	movs	r5, #3
    406a:	43ab      	bics	r3, r5
    406c:	2402      	movs	r4, #2
    406e:	4323      	orrs	r3, r4
    4070:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    4072:	78d3      	ldrb	r3, [r2, #3]
    4074:	270c      	movs	r7, #12
    4076:	43bb      	bics	r3, r7
    4078:	2608      	movs	r6, #8
    407a:	4333      	orrs	r3, r6
    407c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    407e:	4b16      	ldr	r3, [pc, #88]	; (40d8 <Reset_Handler+0xd4>)
    4080:	7b98      	ldrb	r0, [r3, #14]
    4082:	2230      	movs	r2, #48	; 0x30
    4084:	4390      	bics	r0, r2
    4086:	2220      	movs	r2, #32
    4088:	4310      	orrs	r0, r2
    408a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    408c:	7b99      	ldrb	r1, [r3, #14]
    408e:	43b9      	bics	r1, r7
    4090:	4331      	orrs	r1, r6
    4092:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    4094:	7b9a      	ldrb	r2, [r3, #14]
    4096:	43aa      	bics	r2, r5
    4098:	4322      	orrs	r2, r4
    409a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    409c:	4a0f      	ldr	r2, [pc, #60]	; (40dc <Reset_Handler+0xd8>)
    409e:	6853      	ldr	r3, [r2, #4]
    40a0:	2180      	movs	r1, #128	; 0x80
    40a2:	430b      	orrs	r3, r1
    40a4:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    40a6:	4b0e      	ldr	r3, [pc, #56]	; (40e0 <Reset_Handler+0xdc>)
    40a8:	4798      	blx	r3
        main();
    40aa:	4b0e      	ldr	r3, [pc, #56]	; (40e4 <Reset_Handler+0xe0>)
    40ac:	4798      	blx	r3
    40ae:	e7fe      	b.n	40ae <Reset_Handler+0xaa>
    40b0:	00005088 	.word	0x00005088
    40b4:	20000000 	.word	0x20000000
    40b8:	20000114 	.word	0x20000114
    40bc:	20000004 	.word	0x20000004
    40c0:	20000114 	.word	0x20000114
    40c4:	20000cec 	.word	0x20000cec
    40c8:	e000ed00 	.word	0xe000ed00
    40cc:	00000000 	.word	0x00000000
    40d0:	41007000 	.word	0x41007000
    40d4:	41005000 	.word	0x41005000
    40d8:	41004800 	.word	0x41004800
    40dc:	41004000 	.word	0x41004000
    40e0:	00004f0d 	.word	0x00004f0d
    40e4:	000040e9 	.word	0x000040e9

000040e8 <main>:
/**
 *  \brief SAM-BA Main loop.
 *  \return Unused (ANSI-C compatibility).
 */
int main(void)
{
    40e8:	b5b0      	push	{r4, r5, r7, lr}
    40ea:	b082      	sub	sp, #8
    40ec:	af00      	add	r7, sp, #0
	app_start_address = *(uint32_t *)(APP_START_ADDRESS + 4);
    40ee:	4b1a      	ldr	r3, [pc, #104]	; (4158 <main+0x70>)
    40f0:	681a      	ldr	r2, [r3, #0]
	if (app_start_address == 0xFFFFFFFF) {
    40f2:	1c53      	adds	r3, r2, #1
    40f4:	d016      	beq.n	4124 <main+0x3c>
	boot_port->DIRCLR.reg = GPIO_BOOT_PIN_MASK;
    40f6:	4b19      	ldr	r3, [pc, #100]	; (415c <main+0x74>)
    40f8:	2180      	movs	r1, #128	; 0x80
    40fa:	0209      	lsls	r1, r1, #8
    40fc:	6059      	str	r1, [r3, #4]
	boot_port->PINCFG[BOOT_LOAD_PIN & 0x1F].reg = PORT_PINCFG_INEN | PORT_PINCFG_PULLEN;
    40fe:	2406      	movs	r4, #6
    4100:	204f      	movs	r0, #79	; 0x4f
    4102:	541c      	strb	r4, [r3, r0]
	boot_port->OUTSET.reg = GPIO_BOOT_PIN_MASK;
    4104:	6199      	str	r1, [r3, #24]
	boot_en = (boot_port->IN.reg) & GPIO_BOOT_PIN_MASK;
    4106:	6a1b      	ldr	r3, [r3, #32]
    4108:	041b      	lsls	r3, r3, #16
    410a:	0fdb      	lsrs	r3, r3, #31
    410c:	71fb      	strb	r3, [r7, #7]
	if (!boot_en) {
    410e:	79fb      	ldrb	r3, [r7, #7]
    4110:	2b00      	cmp	r3, #0
    4112:	d007      	beq.n	4124 <main+0x3c>
	__set_MSP(*(uint32_t *) APP_START_ADDRESS);
    4114:	23c0      	movs	r3, #192	; 0xc0
    4116:	01db      	lsls	r3, r3, #7
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
    4118:	6819      	ldr	r1, [r3, #0]
    411a:	f381 8808 	msr	MSP, r1
	SCB->VTOR = ((uint32_t) APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
    411e:	4910      	ldr	r1, [pc, #64]	; (4160 <main+0x78>)
    4120:	608b      	str	r3, [r1, #8]
	asm("bx %0"::"r"(app_start_address));
    4122:	4710      	bx	r2
	/* Jump in application if condition is satisfied */
	check_start_application();

	/* We have determined we should stay in the monitor. */
	/* System initialization */
	system_init();
    4124:	4b0f      	ldr	r3, [pc, #60]	; (4164 <main+0x7c>)
    4126:	4798      	blx	r3

#ifdef CONF_USBCDC_INTERFACE_SUPPORT
	/* Start USB stack */
	udc_start();
    4128:	4b0f      	ldr	r3, [pc, #60]	; (4168 <main+0x80>)
    412a:	4798      	blx	r3
#endif
	/* UART is enabled in all cases */
	usart_open();
    412c:	4b0f      	ldr	r3, [pc, #60]	; (416c <main+0x84>)
    412e:	4798      	blx	r3
	DEBUG_PIN_LOW;
	/* Wait for a complete enum on usb or a '#' char on serial line */
	while (1) {
#ifdef CONF_USBCDC_INTERFACE_SUPPORT
		/* Check if a USB enumeration has succeeded and com port was opened */
		if(main_b_cdc_enable) {
    4130:	4d0f      	ldr	r5, [pc, #60]	; (4170 <main+0x88>)
				sam_ba_monitor_run();
			}
		}
#endif
		/* Check if a '#' has been received */
		if (usart_sharp_received()) {
    4132:	4c10      	ldr	r4, [pc, #64]	; (4174 <main+0x8c>)
		if(main_b_cdc_enable) {
    4134:	782b      	ldrb	r3, [r5, #0]
    4136:	2b00      	cmp	r3, #0
    4138:	d108      	bne.n	414c <main+0x64>
		if (usart_sharp_received()) {
    413a:	47a0      	blx	r4
    413c:	2800      	cmp	r0, #0
    413e:	d0f9      	beq.n	4134 <main+0x4c>
			sam_ba_monitor_init(SAM_BA_INTERFACE_USART);
    4140:	2001      	movs	r0, #1
    4142:	4b0d      	ldr	r3, [pc, #52]	; (4178 <main+0x90>)
    4144:	4798      	blx	r3
			/* SAM-BA on UART loop */
			while(1) {
				sam_ba_monitor_run();
    4146:	4c0d      	ldr	r4, [pc, #52]	; (417c <main+0x94>)
    4148:	47a0      	blx	r4
    414a:	e7fd      	b.n	4148 <main+0x60>
			sam_ba_monitor_init(SAM_BA_INTERFACE_USBCDC);
    414c:	2000      	movs	r0, #0
    414e:	4b0a      	ldr	r3, [pc, #40]	; (4178 <main+0x90>)
    4150:	4798      	blx	r3
				sam_ba_monitor_run();
    4152:	4c0a      	ldr	r4, [pc, #40]	; (417c <main+0x94>)
    4154:	47a0      	blx	r4
    4156:	e7fd      	b.n	4154 <main+0x6c>
    4158:	00006004 	.word	0x00006004
    415c:	41004400 	.word	0x41004400
    4160:	e000ed00 	.word	0xe000ed00
    4164:	00002355 	.word	0x00002355
    4168:	00000cb5 	.word	0x00000cb5
    416c:	00004635 	.word	0x00004635
    4170:	20000762 	.word	0x20000762
    4174:	000047b1 	.word	0x000047b1
    4178:	000041ad 	.word	0x000041ad
    417c:	0000428d 	.word	0x0000428d

00004180 <main_suspend_lpm_action>:

#ifdef CONF_USBCDC_INTERFACE_SUPPORT
#ifdef USB_DEVICE_LPM_SUPPORT
void main_suspend_lpm_action(void)
{
}
    4180:	4770      	bx	lr

00004182 <main_remotewakeup_lpm_disable>:

void main_remotewakeup_lpm_disable(void)
{
}
    4182:	4770      	bx	lr

00004184 <main_remotewakeup_lpm_enable>:

void main_remotewakeup_lpm_enable(void)
{
}
    4184:	4770      	bx	lr
	...

00004188 <main_cdc_enable>:
#endif

bool main_cdc_enable(uint8_t port)
{
	main_b_cdc_enable = true;
    4188:	2201      	movs	r2, #1
    418a:	4b02      	ldr	r3, [pc, #8]	; (4194 <main_cdc_enable+0xc>)
    418c:	701a      	strb	r2, [r3, #0]
	return true;
}
    418e:	2001      	movs	r0, #1
    4190:	4770      	bx	lr
    4192:	46c0      	nop			; (mov r8, r8)
    4194:	20000762 	.word	0x20000762

00004198 <main_cdc_disable>:

void main_cdc_disable(uint8_t port)
{
	main_b_cdc_enable = false;
    4198:	2200      	movs	r2, #0
    419a:	4b01      	ldr	r3, [pc, #4]	; (41a0 <main_cdc_disable+0x8>)
    419c:	701a      	strb	r2, [r3, #0]
}
    419e:	4770      	bx	lr
    41a0:	20000762 	.word	0x20000762

000041a4 <main_cdc_set_dtr>:

void main_cdc_set_dtr(uint8_t port, bool b_enable)
{
}
    41a4:	4770      	bx	lr

000041a6 <main_cdc_rx_notify>:

void main_cdc_rx_notify(uint8_t port)
{
}
    41a6:	4770      	bx	lr

000041a8 <main_cdc_set_coding>:

void main_cdc_set_coding(uint8_t port, usb_cdc_line_coding_t * cfg)
{
}
    41a8:	4770      	bx	lr
	...

000041ac <sam_ba_monitor_init>:
 * \param com_interface  Communication interface to be used.
 */
void sam_ba_monitor_init(uint8_t com_interface)
{
	/* Selects the requested interface for future actions */
	if (com_interface == SAM_BA_INTERFACE_USART)
    41ac:	2801      	cmp	r0, #1
    41ae:	d005      	beq.n	41bc <sam_ba_monitor_init+0x10>
		ptr_monitor_if = (t_monitor_if*) &uart_if;
#ifdef CONF_USBCDC_INTERFACE_SUPPORT
	if (com_interface == SAM_BA_INTERFACE_USBCDC)
    41b0:	2800      	cmp	r0, #0
    41b2:	d102      	bne.n	41ba <sam_ba_monitor_init+0xe>
		ptr_monitor_if = (t_monitor_if*) &usbcdc_if;
    41b4:	4a03      	ldr	r2, [pc, #12]	; (41c4 <sam_ba_monitor_init+0x18>)
    41b6:	4b04      	ldr	r3, [pc, #16]	; (41c8 <sam_ba_monitor_init+0x1c>)
    41b8:	601a      	str	r2, [r3, #0]
#endif
}
    41ba:	4770      	bx	lr
		ptr_monitor_if = (t_monitor_if*) &uart_if;
    41bc:	4a03      	ldr	r2, [pc, #12]	; (41cc <sam_ba_monitor_init+0x20>)
    41be:	4b02      	ldr	r3, [pc, #8]	; (41c8 <sam_ba_monitor_init+0x1c>)
    41c0:	601a      	str	r2, [r3, #0]
    41c2:	e7fa      	b.n	41ba <sam_ba_monitor_init+0xe>
    41c4:	0000504c 	.word	0x0000504c
    41c8:	20000b9c 	.word	0x20000b9c
    41cc:	00005030 	.word	0x00005030

000041d0 <sam_ba_putdata_term>:
 *
 * \param *data  Data pointer
 * \param length Length of the data
 */
void sam_ba_putdata_term(uint8_t* data, uint32_t length)
{
    41d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    41d2:	b085      	sub	sp, #20
	uint8_t temp, buf[12], *data_ascii;
	uint32_t i, int_value;

	if (b_terminal_mode)
    41d4:	4b1f      	ldr	r3, [pc, #124]	; (4254 <sam_ba_putdata_term+0x84>)
    41d6:	781b      	ldrb	r3, [r3, #0]
    41d8:	2b00      	cmp	r3, #0
    41da:	d036      	beq.n	424a <sam_ba_putdata_term+0x7a>
	{
		if (length == 4)
    41dc:	2904      	cmp	r1, #4
    41de:	d01b      	beq.n	4218 <sam_ba_putdata_term+0x48>
			int_value = *(uint32_t *) data;
		else if (length == 2)
    41e0:	2902      	cmp	r1, #2
    41e2:	d022      	beq.n	422a <sam_ba_putdata_term+0x5a>
			int_value = *(uint16_t *) data;
		else
			int_value = *(uint8_t *) data;
    41e4:	7800      	ldrb	r0, [r0, #0]

		data_ascii = buf + 2;
		data_ascii += length * 2 - 1;
    41e6:	004d      	lsls	r5, r1, #1
    41e8:	ab04      	add	r3, sp, #16
    41ea:	195a      	adds	r2, r3, r5
    41ec:	3a0b      	subs	r2, #11

		for (i = 0; i < length * 2; i++)
    41ee:	2d00      	cmp	r5, #0
    41f0:	d117      	bne.n	4222 <sam_ba_putdata_term+0x52>
				*data_ascii = temp + 0x37;

			int_value >>= 4;
			data_ascii--;
		}
		buf[0] = '0';
    41f2:	a801      	add	r0, sp, #4
    41f4:	2330      	movs	r3, #48	; 0x30
    41f6:	7003      	strb	r3, [r0, #0]
		buf[1] = 'x';
    41f8:	3348      	adds	r3, #72	; 0x48
    41fa:	7043      	strb	r3, [r0, #1]
		buf[length * 2 + 2] = '\n';
    41fc:	3101      	adds	r1, #1
    41fe:	0049      	lsls	r1, r1, #1
    4200:	3b6e      	subs	r3, #110	; 0x6e
    4202:	5443      	strb	r3, [r0, r1]
		buf[length * 2 + 3] = '\r';
    4204:	1945      	adds	r5, r0, r5
    4206:	3303      	adds	r3, #3
    4208:	70eb      	strb	r3, [r5, #3]
		ptr_monitor_if->putdata(buf, length * 2 + 4);
    420a:	3102      	adds	r1, #2
    420c:	4b12      	ldr	r3, [pc, #72]	; (4258 <sam_ba_putdata_term+0x88>)
    420e:	681b      	ldr	r3, [r3, #0]
    4210:	68db      	ldr	r3, [r3, #12]
    4212:	4798      	blx	r3
	}
	else
		ptr_monitor_if->putdata(data, length);
	return;
}
    4214:	b005      	add	sp, #20
    4216:	bdf0      	pop	{r4, r5, r6, r7, pc}
			int_value = *(uint32_t *) data;
    4218:	6800      	ldr	r0, [r0, #0]
		data_ascii += length * 2 - 1;
    421a:	004d      	lsls	r5, r1, #1
    421c:	ab04      	add	r3, sp, #16
    421e:	195a      	adds	r2, r3, r5
    4220:	3a0b      	subs	r2, #11
{
    4222:	2400      	movs	r4, #0
			temp = (uint8_t) (int_value & 0xf);
    4224:	260f      	movs	r6, #15
				*data_ascii = temp | 0x30;
    4226:	2730      	movs	r7, #48	; 0x30
    4228:	e008      	b.n	423c <sam_ba_putdata_term+0x6c>
			int_value = *(uint16_t *) data;
    422a:	8800      	ldrh	r0, [r0, #0]
    422c:	e7f5      	b.n	421a <sam_ba_putdata_term+0x4a>
				*data_ascii = temp + 0x37;
    422e:	3337      	adds	r3, #55	; 0x37
    4230:	7013      	strb	r3, [r2, #0]
			int_value >>= 4;
    4232:	0900      	lsrs	r0, r0, #4
			data_ascii--;
    4234:	3a01      	subs	r2, #1
		for (i = 0; i < length * 2; i++)
    4236:	3401      	adds	r4, #1
    4238:	42ac      	cmp	r4, r5
    423a:	d2da      	bcs.n	41f2 <sam_ba_putdata_term+0x22>
			temp = (uint8_t) (int_value & 0xf);
    423c:	0033      	movs	r3, r6
    423e:	4003      	ands	r3, r0
			if (temp <= 0x9)
    4240:	2b09      	cmp	r3, #9
    4242:	d8f4      	bhi.n	422e <sam_ba_putdata_term+0x5e>
				*data_ascii = temp | 0x30;
    4244:	433b      	orrs	r3, r7
    4246:	7013      	strb	r3, [r2, #0]
    4248:	e7f3      	b.n	4232 <sam_ba_putdata_term+0x62>
		ptr_monitor_if->putdata(data, length);
    424a:	4b03      	ldr	r3, [pc, #12]	; (4258 <sam_ba_putdata_term+0x88>)
    424c:	681b      	ldr	r3, [r3, #0]
    424e:	68db      	ldr	r3, [r3, #12]
    4250:	4798      	blx	r3
	return;
    4252:	e7df      	b.n	4214 <sam_ba_putdata_term+0x44>
    4254:	20000763 	.word	0x20000763
    4258:	20000b9c 	.word	0x20000b9c

0000425c <call_applet>:
 * \brief Execute an applet from the specified address
 *
 * \param address Applet address
 */
void call_applet(uint32_t address)
{
    425c:	b580      	push	{r7, lr}
    425e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
    4260:	b672      	cpsid	i
    4262:	f3bf 8f5f 	dmb	sy
	uint32_t app_start_address;

	cpu_irq_disable();
    4266:	2200      	movs	r2, #0
    4268:	4b06      	ldr	r3, [pc, #24]	; (4284 <call_applet+0x28>)
    426a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
    426c:	f3ef 8308 	mrs	r3, MSP

	sp = __get_MSP();
    4270:	4a05      	ldr	r2, [pc, #20]	; (4288 <call_applet+0x2c>)
    4272:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
    4274:	6803      	ldr	r3, [r0, #0]
    4276:	f383 8808 	msr	MSP, r3

	/* Load the Reset Handler address of the application */
	app_start_address = *(uint32_t *)(address + 4);

	/* Jump to application Reset Handler in the application */
	asm("bx %0"::"r"(app_start_address));
    427a:	6843      	ldr	r3, [r0, #4]
    427c:	4718      	bx	r3
}
    427e:	46bd      	mov	sp, r7
    4280:	bd80      	pop	{r7, pc}
    4282:	46c0      	nop			; (mov r8, r8)
    4284:	20000112 	.word	0x20000112
    4288:	20000ba0 	.word	0x20000ba0

0000428c <sam_ba_monitor_run>:

/**
 * \brief This function starts the SAM-BA monitor.
 */
void sam_ba_monitor_run(void)
{
    428c:	b5f0      	push	{r4, r5, r6, r7, lr}
    428e:	46de      	mov	lr, fp
    4290:	4657      	mov	r7, sl
    4292:	464e      	mov	r6, r9
    4294:	4645      	mov	r5, r8
    4296:	b5e0      	push	{r5, r6, r7, lr}
    4298:	b083      	sub	sp, #12
    429a:	af00      	add	r7, sp, #0
	ptr_data = NULL;
    429c:	2200      	movs	r2, #0
    429e:	4bcd      	ldr	r3, [pc, #820]	; (45d4 <sam_ba_monitor_run+0x348>)
    42a0:	601a      	str	r2, [r3, #0]
	command = 'z';
    42a2:	327a      	adds	r2, #122	; 0x7a
    42a4:	4bcc      	ldr	r3, [pc, #816]	; (45d8 <sam_ba_monitor_run+0x34c>)
    42a6:	701a      	strb	r2, [r3, #0]

	// Start waiting some cmd
	while (1)
	{
		length = ptr_monitor_if->getdata(data, SIZEBUFMAX);
    42a8:	4bcc      	ldr	r3, [pc, #816]	; (45dc <sam_ba_monitor_run+0x350>)
    42aa:	469a      	mov	sl, r3
    42ac:	4bcc      	ldr	r3, [pc, #816]	; (45e0 <sam_ba_monitor_run+0x354>)
    42ae:	469b      	mov	fp, r3
					{
						command = *ptr;
						current_number = 0;
					}
				}
				ptr++;
    42b0:	4ccc      	ldr	r4, [pc, #816]	; (45e4 <sam_ba_monitor_run+0x358>)
						command = *ptr;
    42b2:	4bc9      	ldr	r3, [pc, #804]	; (45d8 <sam_ba_monitor_run+0x34c>)
    42b4:	4698      	mov	r8, r3
		length = ptr_monitor_if->getdata(data, SIZEBUFMAX);
    42b6:	465b      	mov	r3, fp
    42b8:	681b      	ldr	r3, [r3, #0]
    42ba:	691b      	ldr	r3, [r3, #16]
    42bc:	2140      	movs	r1, #64	; 0x40
    42be:	4650      	mov	r0, sl
    42c0:	4798      	blx	r3
    42c2:	4bc9      	ldr	r3, [pc, #804]	; (45e8 <sam_ba_monitor_run+0x35c>)
    42c4:	6018      	str	r0, [r3, #0]
		ptr = data;
    42c6:	4bc7      	ldr	r3, [pc, #796]	; (45e4 <sam_ba_monitor_run+0x358>)
    42c8:	4652      	mov	r2, sl
    42ca:	601a      	str	r2, [r3, #0]
		for (i = 0; i < length; i++)
    42cc:	2200      	movs	r2, #0
    42ce:	4bc7      	ldr	r3, [pc, #796]	; (45ec <sam_ba_monitor_run+0x360>)
    42d0:	601a      	str	r2, [r3, #0]
    42d2:	2800      	cmp	r0, #0
    42d4:	d0ef      	beq.n	42b6 <sam_ba_monitor_run+0x2a>
			if (*ptr != 0xff)
    42d6:	4dc3      	ldr	r5, [pc, #780]	; (45e4 <sam_ba_monitor_run+0x358>)
    42d8:	e0da      	b.n	4490 <sam_ba_monitor_run+0x204>
					if (b_terminal_mode)
    42da:	4bc5      	ldr	r3, [pc, #788]	; (45f0 <sam_ba_monitor_run+0x364>)
    42dc:	781b      	ldrb	r3, [r3, #0]
    42de:	2b00      	cmp	r3, #0
    42e0:	d172      	bne.n	43c8 <sam_ba_monitor_run+0x13c>
					if (command == 'S')
    42e2:	4bbd      	ldr	r3, [pc, #756]	; (45d8 <sam_ba_monitor_run+0x34c>)
    42e4:	781b      	ldrb	r3, [r3, #0]
    42e6:	2b53      	cmp	r3, #83	; 0x53
    42e8:	d075      	beq.n	43d6 <sam_ba_monitor_run+0x14a>
					else if (command == 'R')
    42ea:	2b52      	cmp	r3, #82	; 0x52
    42ec:	d100      	bne.n	42f0 <sam_ba_monitor_run+0x64>
    42ee:	e0e9      	b.n	44c4 <sam_ba_monitor_run+0x238>
					else if (command == 'O')
    42f0:	2b4f      	cmp	r3, #79	; 0x4f
    42f2:	d100      	bne.n	42f6 <sam_ba_monitor_run+0x6a>
    42f4:	e0ef      	b.n	44d6 <sam_ba_monitor_run+0x24a>
					else if (command == 'H')
    42f6:	2b48      	cmp	r3, #72	; 0x48
    42f8:	d100      	bne.n	42fc <sam_ba_monitor_run+0x70>
    42fa:	e0f2      	b.n	44e2 <sam_ba_monitor_run+0x256>
					else if (command == 'W')
    42fc:	2b57      	cmp	r3, #87	; 0x57
    42fe:	d100      	bne.n	4302 <sam_ba_monitor_run+0x76>
    4300:	e0f5      	b.n	44ee <sam_ba_monitor_run+0x262>
					else if (command == 'o')
    4302:	2b6f      	cmp	r3, #111	; 0x6f
    4304:	d100      	bne.n	4308 <sam_ba_monitor_run+0x7c>
    4306:	e0f8      	b.n	44fa <sam_ba_monitor_run+0x26e>
					else if (command == 'h')
    4308:	2b68      	cmp	r3, #104	; 0x68
    430a:	d100      	bne.n	430e <sam_ba_monitor_run+0x82>
    430c:	e0fb      	b.n	4506 <sam_ba_monitor_run+0x27a>
					else if (command == 'w')
    430e:	2b77      	cmp	r3, #119	; 0x77
    4310:	d100      	bne.n	4314 <sam_ba_monitor_run+0x88>
    4312:	e101      	b.n	4518 <sam_ba_monitor_run+0x28c>
					else if (command == 'G')
    4314:	2b47      	cmp	r3, #71	; 0x47
    4316:	d100      	bne.n	431a <sam_ba_monitor_run+0x8e>
    4318:	e107      	b.n	452a <sam_ba_monitor_run+0x29e>
					else if (command == 'T')
    431a:	2b54      	cmp	r3, #84	; 0x54
    431c:	d100      	bne.n	4320 <sam_ba_monitor_run+0x94>
    431e:	e113      	b.n	4548 <sam_ba_monitor_run+0x2bc>
					else if (command == 'N')
    4320:	2b4e      	cmp	r3, #78	; 0x4e
    4322:	d100      	bne.n	4326 <sam_ba_monitor_run+0x9a>
    4324:	e11a      	b.n	455c <sam_ba_monitor_run+0x2d0>
					else if (command == 'V')
    4326:	2b56      	cmp	r3, #86	; 0x56
    4328:	d000      	beq.n	432c <sam_ba_monitor_run+0xa0>
    432a:	e09a      	b.n	4462 <sam_ba_monitor_run+0x1d6>
						ptr_monitor_if->putdata("v", 1);
    432c:	4bac      	ldr	r3, [pc, #688]	; (45e0 <sam_ba_monitor_run+0x354>)
    432e:	4699      	mov	r9, r3
    4330:	681b      	ldr	r3, [r3, #0]
    4332:	68db      	ldr	r3, [r3, #12]
    4334:	2101      	movs	r1, #1
    4336:	48af      	ldr	r0, [pc, #700]	; (45f4 <sam_ba_monitor_run+0x368>)
    4338:	4798      	blx	r3
						ptr_monitor_if->putdata((uint8_t *) RomBOOT_Version,
    433a:	464b      	mov	r3, r9
    433c:	681b      	ldr	r3, [r3, #0]
    433e:	68db      	ldr	r3, [r3, #12]
    4340:	2104      	movs	r1, #4
    4342:	48ad      	ldr	r0, [pc, #692]	; (45f8 <sam_ba_monitor_run+0x36c>)
    4344:	4798      	blx	r3
						ptr_monitor_if->putdata(" ", 1);
    4346:	464b      	mov	r3, r9
    4348:	681b      	ldr	r3, [r3, #0]
    434a:	68db      	ldr	r3, [r3, #12]
    434c:	2101      	movs	r1, #1
    434e:	48ab      	ldr	r0, [pc, #684]	; (45fc <sam_ba_monitor_run+0x370>)
    4350:	4798      	blx	r3
						i = 0;
    4352:	2200      	movs	r2, #0
    4354:	4ba5      	ldr	r3, [pc, #660]	; (45ec <sam_ba_monitor_run+0x360>)
    4356:	601a      	str	r2, [r3, #0]
						while (*ptr++ != '\0')
    4358:	4aa9      	ldr	r2, [pc, #676]	; (4600 <sam_ba_monitor_run+0x374>)
    435a:	4ba2      	ldr	r3, [pc, #648]	; (45e4 <sam_ba_monitor_run+0x358>)
    435c:	601a      	str	r2, [r3, #0]
							i++;
    435e:	48a3      	ldr	r0, [pc, #652]	; (45ec <sam_ba_monitor_run+0x360>)
						while (*ptr++ != '\0')
    4360:	001a      	movs	r2, r3
							i++;
    4362:	6803      	ldr	r3, [r0, #0]
    4364:	1c59      	adds	r1, r3, #1
    4366:	6001      	str	r1, [r0, #0]
						while (*ptr++ != '\0')
    4368:	6813      	ldr	r3, [r2, #0]
    436a:	1c5e      	adds	r6, r3, #1
    436c:	6016      	str	r6, [r2, #0]
    436e:	781b      	ldrb	r3, [r3, #0]
    4370:	2b00      	cmp	r3, #0
    4372:	d1f6      	bne.n	4362 <sam_ba_monitor_run+0xd6>
						ptr_monitor_if->putdata((uint8_t *) &(__DATE__), i);
    4374:	4b9a      	ldr	r3, [pc, #616]	; (45e0 <sam_ba_monitor_run+0x354>)
    4376:	4699      	mov	r9, r3
    4378:	681b      	ldr	r3, [r3, #0]
    437a:	68db      	ldr	r3, [r3, #12]
    437c:	48a1      	ldr	r0, [pc, #644]	; (4604 <sam_ba_monitor_run+0x378>)
    437e:	4798      	blx	r3
						ptr_monitor_if->putdata(" ", 1);
    4380:	464b      	mov	r3, r9
    4382:	681b      	ldr	r3, [r3, #0]
    4384:	68db      	ldr	r3, [r3, #12]
    4386:	2101      	movs	r1, #1
    4388:	489c      	ldr	r0, [pc, #624]	; (45fc <sam_ba_monitor_run+0x370>)
    438a:	4798      	blx	r3
						i = 0;
    438c:	2200      	movs	r2, #0
    438e:	4b97      	ldr	r3, [pc, #604]	; (45ec <sam_ba_monitor_run+0x360>)
    4390:	601a      	str	r2, [r3, #0]
						while (*ptr++ != '\0')
    4392:	4a9d      	ldr	r2, [pc, #628]	; (4608 <sam_ba_monitor_run+0x37c>)
    4394:	4b93      	ldr	r3, [pc, #588]	; (45e4 <sam_ba_monitor_run+0x358>)
    4396:	601a      	str	r2, [r3, #0]
							i++;
    4398:	4894      	ldr	r0, [pc, #592]	; (45ec <sam_ba_monitor_run+0x360>)
						while (*ptr++ != '\0')
    439a:	001a      	movs	r2, r3
							i++;
    439c:	6803      	ldr	r3, [r0, #0]
    439e:	1c59      	adds	r1, r3, #1
    43a0:	6001      	str	r1, [r0, #0]
						while (*ptr++ != '\0')
    43a2:	6813      	ldr	r3, [r2, #0]
    43a4:	1c5e      	adds	r6, r3, #1
    43a6:	6016      	str	r6, [r2, #0]
    43a8:	781b      	ldrb	r3, [r3, #0]
    43aa:	2b00      	cmp	r3, #0
    43ac:	d1f6      	bne.n	439c <sam_ba_monitor_run+0x110>
						ptr_monitor_if->putdata((uint8_t *) &(__TIME__), i);
    43ae:	4b8c      	ldr	r3, [pc, #560]	; (45e0 <sam_ba_monitor_run+0x354>)
    43b0:	4699      	mov	r9, r3
    43b2:	681b      	ldr	r3, [r3, #0]
    43b4:	68db      	ldr	r3, [r3, #12]
    43b6:	4895      	ldr	r0, [pc, #596]	; (460c <sam_ba_monitor_run+0x380>)
    43b8:	4798      	blx	r3
						ptr_monitor_if->putdata("\n\r", 2);
    43ba:	464b      	mov	r3, r9
    43bc:	681b      	ldr	r3, [r3, #0]
    43be:	68db      	ldr	r3, [r3, #12]
    43c0:	2102      	movs	r1, #2
    43c2:	4893      	ldr	r0, [pc, #588]	; (4610 <sam_ba_monitor_run+0x384>)
    43c4:	4798      	blx	r3
    43c6:	e04c      	b.n	4462 <sam_ba_monitor_run+0x1d6>
						ptr_monitor_if->putdata("\n\r", 2);
    43c8:	4b85      	ldr	r3, [pc, #532]	; (45e0 <sam_ba_monitor_run+0x354>)
    43ca:	681b      	ldr	r3, [r3, #0]
    43cc:	68db      	ldr	r3, [r3, #12]
    43ce:	2102      	movs	r1, #2
    43d0:	488f      	ldr	r0, [pc, #572]	; (4610 <sam_ba_monitor_run+0x384>)
    43d2:	4798      	blx	r3
    43d4:	e785      	b.n	42e2 <sam_ba_monitor_run+0x56>
						if(length>i)
    43d6:	4b84      	ldr	r3, [pc, #528]	; (45e8 <sam_ba_monitor_run+0x35c>)
    43d8:	681b      	ldr	r3, [r3, #0]
    43da:	4a84      	ldr	r2, [pc, #528]	; (45ec <sam_ba_monitor_run+0x360>)
    43dc:	6812      	ldr	r2, [r2, #0]
    43de:	4293      	cmp	r3, r2
    43e0:	d930      	bls.n	4444 <sam_ba_monitor_run+0x1b8>
							ptr++;
    43e2:	4880      	ldr	r0, [pc, #512]	; (45e4 <sam_ba_monitor_run+0x358>)
    43e4:	6801      	ldr	r1, [r0, #0]
    43e6:	3101      	adds	r1, #1
    43e8:	6001      	str	r1, [r0, #0]
							i++;
    43ea:	3201      	adds	r2, #1
    43ec:	497f      	ldr	r1, [pc, #508]	; (45ec <sam_ba_monitor_run+0x360>)
    43ee:	600a      	str	r2, [r1, #0]
							u32tmp=min((length-i),current_number);
    43f0:	4988      	ldr	r1, [pc, #544]	; (4614 <sam_ba_monitor_run+0x388>)
    43f2:	6809      	ldr	r1, [r1, #0]
    43f4:	1a9b      	subs	r3, r3, r2
    43f6:	428b      	cmp	r3, r1
    43f8:	d900      	bls.n	43fc <sam_ba_monitor_run+0x170>
    43fa:	000b      	movs	r3, r1
    43fc:	4a86      	ldr	r2, [pc, #536]	; (4618 <sam_ba_monitor_run+0x38c>)
    43fe:	6013      	str	r3, [r2, #0]
							for(j=0;j<u32tmp;j++)
    4400:	2100      	movs	r1, #0
    4402:	4a86      	ldr	r2, [pc, #536]	; (461c <sam_ba_monitor_run+0x390>)
    4404:	7011      	strb	r1, [r2, #0]
    4406:	2b00      	cmp	r3, #0
    4408:	d01c      	beq.n	4444 <sam_ba_monitor_run+0x1b8>
								*ptr_data = *ptr;
    440a:	4972      	ldr	r1, [pc, #456]	; (45d4 <sam_ba_monitor_run+0x348>)
    440c:	4a75      	ldr	r2, [pc, #468]	; (45e4 <sam_ba_monitor_run+0x358>)
							for(j=0;j<u32tmp;j++)
    440e:	4883      	ldr	r0, [pc, #524]	; (461c <sam_ba_monitor_run+0x390>)
    4410:	4b81      	ldr	r3, [pc, #516]	; (4618 <sam_ba_monitor_run+0x38c>)
    4412:	469c      	mov	ip, r3
								*ptr_data = *ptr;
    4414:	6813      	ldr	r3, [r2, #0]
    4416:	781b      	ldrb	r3, [r3, #0]
    4418:	680e      	ldr	r6, [r1, #0]
    441a:	7033      	strb	r3, [r6, #0]
								ptr_data++;
    441c:	680b      	ldr	r3, [r1, #0]
    441e:	3301      	adds	r3, #1
    4420:	600b      	str	r3, [r1, #0]
								ptr++;
    4422:	6813      	ldr	r3, [r2, #0]
    4424:	3301      	adds	r3, #1
    4426:	6013      	str	r3, [r2, #0]
								i++;
    4428:	4b70      	ldr	r3, [pc, #448]	; (45ec <sam_ba_monitor_run+0x360>)
    442a:	681b      	ldr	r3, [r3, #0]
    442c:	607b      	str	r3, [r7, #4]
    442e:	3301      	adds	r3, #1
    4430:	4e6e      	ldr	r6, [pc, #440]	; (45ec <sam_ba_monitor_run+0x360>)
    4432:	6033      	str	r3, [r6, #0]
							for(j=0;j<u32tmp;j++)
    4434:	7803      	ldrb	r3, [r0, #0]
    4436:	3301      	adds	r3, #1
    4438:	b2db      	uxtb	r3, r3
    443a:	7003      	strb	r3, [r0, #0]
    443c:	4666      	mov	r6, ip
    443e:	6836      	ldr	r6, [r6, #0]
    4440:	42b3      	cmp	r3, r6
    4442:	d3e7      	bcc.n	4414 <sam_ba_monitor_run+0x188>
						i--;
    4444:	4a69      	ldr	r2, [pc, #420]	; (45ec <sam_ba_monitor_run+0x360>)
    4446:	6813      	ldr	r3, [r2, #0]
    4448:	3b01      	subs	r3, #1
    444a:	6013      	str	r3, [r2, #0]
						ptr--;
    444c:	4a65      	ldr	r2, [pc, #404]	; (45e4 <sam_ba_monitor_run+0x358>)
    444e:	6813      	ldr	r3, [r2, #0]
    4450:	3b01      	subs	r3, #1
    4452:	6013      	str	r3, [r2, #0]
						if(j<current_number)
    4454:	4b71      	ldr	r3, [pc, #452]	; (461c <sam_ba_monitor_run+0x390>)
    4456:	781b      	ldrb	r3, [r3, #0]
    4458:	4a6e      	ldr	r2, [pc, #440]	; (4614 <sam_ba_monitor_run+0x388>)
    445a:	6811      	ldr	r1, [r2, #0]
    445c:	428b      	cmp	r3, r1
    445e:	d329      	bcc.n	44b4 <sam_ba_monitor_run+0x228>
						__asm("nop");
    4460:	46c0      	nop			; (mov r8, r8)
					command = 'z';
    4462:	227a      	movs	r2, #122	; 0x7a
    4464:	4b5c      	ldr	r3, [pc, #368]	; (45d8 <sam_ba_monitor_run+0x34c>)
    4466:	701a      	strb	r2, [r3, #0]
					current_number = 0;
    4468:	2200      	movs	r2, #0
    446a:	4b6a      	ldr	r3, [pc, #424]	; (4614 <sam_ba_monitor_run+0x388>)
    446c:	601a      	str	r2, [r3, #0]
					if (b_terminal_mode)
    446e:	4b60      	ldr	r3, [pc, #384]	; (45f0 <sam_ba_monitor_run+0x364>)
    4470:	781b      	ldrb	r3, [r3, #0]
    4472:	2b00      	cmp	r3, #0
    4474:	d000      	beq.n	4478 <sam_ba_monitor_run+0x1ec>
    4476:	e080      	b.n	457a <sam_ba_monitor_run+0x2ee>
				ptr++;
    4478:	6823      	ldr	r3, [r4, #0]
    447a:	3301      	adds	r3, #1
    447c:	6023      	str	r3, [r4, #0]
		for (i = 0; i < length; i++)
    447e:	4a5b      	ldr	r2, [pc, #364]	; (45ec <sam_ba_monitor_run+0x360>)
    4480:	6813      	ldr	r3, [r2, #0]
    4482:	3301      	adds	r3, #1
    4484:	6013      	str	r3, [r2, #0]
    4486:	4a58      	ldr	r2, [pc, #352]	; (45e8 <sam_ba_monitor_run+0x35c>)
    4488:	6812      	ldr	r2, [r2, #0]
    448a:	429a      	cmp	r2, r3
    448c:	d800      	bhi.n	4490 <sam_ba_monitor_run+0x204>
    448e:	e712      	b.n	42b6 <sam_ba_monitor_run+0x2a>
			if (*ptr != 0xff)
    4490:	682b      	ldr	r3, [r5, #0]
    4492:	781b      	ldrb	r3, [r3, #0]
    4494:	2bff      	cmp	r3, #255	; 0xff
    4496:	d0f2      	beq.n	447e <sam_ba_monitor_run+0x1f2>
				if (*ptr == '#')
    4498:	2b23      	cmp	r3, #35	; 0x23
    449a:	d100      	bne.n	449e <sam_ba_monitor_run+0x212>
    449c:	e71d      	b.n	42da <sam_ba_monitor_run+0x4e>
					if (('0' <= *ptr) && (*ptr <= '9'))
    449e:	001a      	movs	r2, r3
    44a0:	3a30      	subs	r2, #48	; 0x30
    44a2:	2a09      	cmp	r2, #9
    44a4:	d870      	bhi.n	4588 <sam_ba_monitor_run+0x2fc>
						current_number = (current_number << 4) | (*ptr - '0');
    44a6:	495b      	ldr	r1, [pc, #364]	; (4614 <sam_ba_monitor_run+0x388>)
    44a8:	680a      	ldr	r2, [r1, #0]
    44aa:	0112      	lsls	r2, r2, #4
    44ac:	3b30      	subs	r3, #48	; 0x30
    44ae:	4313      	orrs	r3, r2
    44b0:	600b      	str	r3, [r1, #0]
    44b2:	e7e1      	b.n	4478 <sam_ba_monitor_run+0x1ec>
							ptr_monitor_if->getdata_xmd(ptr_data, current_number-j);
    44b4:	1ac9      	subs	r1, r1, r3
    44b6:	4b47      	ldr	r3, [pc, #284]	; (45d4 <sam_ba_monitor_run+0x348>)
    44b8:	6818      	ldr	r0, [r3, #0]
    44ba:	4b49      	ldr	r3, [pc, #292]	; (45e0 <sam_ba_monitor_run+0x354>)
    44bc:	681b      	ldr	r3, [r3, #0]
    44be:	699b      	ldr	r3, [r3, #24]
    44c0:	4798      	blx	r3
    44c2:	e7cd      	b.n	4460 <sam_ba_monitor_run+0x1d4>
						ptr_monitor_if->putdata_xmd(ptr_data, current_number);
    44c4:	4b53      	ldr	r3, [pc, #332]	; (4614 <sam_ba_monitor_run+0x388>)
    44c6:	6819      	ldr	r1, [r3, #0]
    44c8:	4b42      	ldr	r3, [pc, #264]	; (45d4 <sam_ba_monitor_run+0x348>)
    44ca:	6818      	ldr	r0, [r3, #0]
    44cc:	4b44      	ldr	r3, [pc, #272]	; (45e0 <sam_ba_monitor_run+0x354>)
    44ce:	681b      	ldr	r3, [r3, #0]
    44d0:	695b      	ldr	r3, [r3, #20]
    44d2:	4798      	blx	r3
    44d4:	e7c5      	b.n	4462 <sam_ba_monitor_run+0x1d6>
						*ptr_data = (char) current_number;
    44d6:	4b3f      	ldr	r3, [pc, #252]	; (45d4 <sam_ba_monitor_run+0x348>)
    44d8:	681b      	ldr	r3, [r3, #0]
    44da:	4a4e      	ldr	r2, [pc, #312]	; (4614 <sam_ba_monitor_run+0x388>)
    44dc:	6812      	ldr	r2, [r2, #0]
    44de:	701a      	strb	r2, [r3, #0]
    44e0:	e7bf      	b.n	4462 <sam_ba_monitor_run+0x1d6>
						*((uint16_t *) ptr_data) = (uint16_t) current_number;
    44e2:	4b3c      	ldr	r3, [pc, #240]	; (45d4 <sam_ba_monitor_run+0x348>)
    44e4:	681b      	ldr	r3, [r3, #0]
    44e6:	4a4b      	ldr	r2, [pc, #300]	; (4614 <sam_ba_monitor_run+0x388>)
    44e8:	6812      	ldr	r2, [r2, #0]
    44ea:	801a      	strh	r2, [r3, #0]
    44ec:	e7b9      	b.n	4462 <sam_ba_monitor_run+0x1d6>
						*((int *) ptr_data) = current_number;
    44ee:	4b39      	ldr	r3, [pc, #228]	; (45d4 <sam_ba_monitor_run+0x348>)
    44f0:	681b      	ldr	r3, [r3, #0]
    44f2:	4a48      	ldr	r2, [pc, #288]	; (4614 <sam_ba_monitor_run+0x388>)
    44f4:	6812      	ldr	r2, [r2, #0]
    44f6:	601a      	str	r2, [r3, #0]
    44f8:	e7b3      	b.n	4462 <sam_ba_monitor_run+0x1d6>
						sam_ba_putdata_term(ptr_data, 1);
    44fa:	4b36      	ldr	r3, [pc, #216]	; (45d4 <sam_ba_monitor_run+0x348>)
    44fc:	6818      	ldr	r0, [r3, #0]
    44fe:	2101      	movs	r1, #1
    4500:	4b47      	ldr	r3, [pc, #284]	; (4620 <sam_ba_monitor_run+0x394>)
    4502:	4798      	blx	r3
    4504:	e7ad      	b.n	4462 <sam_ba_monitor_run+0x1d6>
						current_number = *((uint16_t *) ptr_data);
    4506:	4843      	ldr	r0, [pc, #268]	; (4614 <sam_ba_monitor_run+0x388>)
    4508:	4b32      	ldr	r3, [pc, #200]	; (45d4 <sam_ba_monitor_run+0x348>)
    450a:	681b      	ldr	r3, [r3, #0]
    450c:	881b      	ldrh	r3, [r3, #0]
    450e:	6003      	str	r3, [r0, #0]
						sam_ba_putdata_term((uint8_t*) &current_number, 2);
    4510:	2102      	movs	r1, #2
    4512:	4b43      	ldr	r3, [pc, #268]	; (4620 <sam_ba_monitor_run+0x394>)
    4514:	4798      	blx	r3
    4516:	e7a4      	b.n	4462 <sam_ba_monitor_run+0x1d6>
						current_number = *((uint32_t *) ptr_data);
    4518:	4b2e      	ldr	r3, [pc, #184]	; (45d4 <sam_ba_monitor_run+0x348>)
    451a:	681b      	ldr	r3, [r3, #0]
    451c:	681b      	ldr	r3, [r3, #0]
    451e:	483d      	ldr	r0, [pc, #244]	; (4614 <sam_ba_monitor_run+0x388>)
    4520:	6003      	str	r3, [r0, #0]
						sam_ba_putdata_term((uint8_t*) &current_number, 4);
    4522:	2104      	movs	r1, #4
    4524:	4b3e      	ldr	r3, [pc, #248]	; (4620 <sam_ba_monitor_run+0x394>)
    4526:	4798      	blx	r3
    4528:	e79b      	b.n	4462 <sam_ba_monitor_run+0x1d6>
						call_applet(current_number);
    452a:	4b3a      	ldr	r3, [pc, #232]	; (4614 <sam_ba_monitor_run+0x388>)
    452c:	6818      	ldr	r0, [r3, #0]
    452e:	4b3d      	ldr	r3, [pc, #244]	; (4624 <sam_ba_monitor_run+0x398>)
    4530:	4798      	blx	r3
						__set_MSP(sp);
    4532:	4b3d      	ldr	r3, [pc, #244]	; (4628 <sam_ba_monitor_run+0x39c>)
    4534:	681b      	ldr	r3, [r3, #0]
    4536:	f383 8808 	msr	MSP, r3
						cpu_irq_enable();
    453a:	2201      	movs	r2, #1
    453c:	4b3b      	ldr	r3, [pc, #236]	; (462c <sam_ba_monitor_run+0x3a0>)
    453e:	701a      	strb	r2, [r3, #0]
    4540:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4544:	b662      	cpsie	i
    4546:	e78c      	b.n	4462 <sam_ba_monitor_run+0x1d6>
						b_terminal_mode = 1;
    4548:	2201      	movs	r2, #1
    454a:	4b29      	ldr	r3, [pc, #164]	; (45f0 <sam_ba_monitor_run+0x364>)
    454c:	701a      	strb	r2, [r3, #0]
						ptr_monitor_if->putdata("\n\r", 2);
    454e:	4b24      	ldr	r3, [pc, #144]	; (45e0 <sam_ba_monitor_run+0x354>)
    4550:	681b      	ldr	r3, [r3, #0]
    4552:	68db      	ldr	r3, [r3, #12]
    4554:	2102      	movs	r1, #2
    4556:	482e      	ldr	r0, [pc, #184]	; (4610 <sam_ba_monitor_run+0x384>)
    4558:	4798      	blx	r3
    455a:	e782      	b.n	4462 <sam_ba_monitor_run+0x1d6>
						if (b_terminal_mode == 0)
    455c:	4b24      	ldr	r3, [pc, #144]	; (45f0 <sam_ba_monitor_run+0x364>)
    455e:	781b      	ldrb	r3, [r3, #0]
    4560:	2b00      	cmp	r3, #0
    4562:	d003      	beq.n	456c <sam_ba_monitor_run+0x2e0>
						b_terminal_mode = 0;
    4564:	2200      	movs	r2, #0
    4566:	4b22      	ldr	r3, [pc, #136]	; (45f0 <sam_ba_monitor_run+0x364>)
    4568:	701a      	strb	r2, [r3, #0]
    456a:	e77a      	b.n	4462 <sam_ba_monitor_run+0x1d6>
							ptr_monitor_if->putdata("\n\r", 2);
    456c:	4b1c      	ldr	r3, [pc, #112]	; (45e0 <sam_ba_monitor_run+0x354>)
    456e:	681b      	ldr	r3, [r3, #0]
    4570:	68db      	ldr	r3, [r3, #12]
    4572:	2102      	movs	r1, #2
    4574:	4826      	ldr	r0, [pc, #152]	; (4610 <sam_ba_monitor_run+0x384>)
    4576:	4798      	blx	r3
    4578:	e7f4      	b.n	4564 <sam_ba_monitor_run+0x2d8>
						ptr_monitor_if->putdata(">", 1);
    457a:	4b19      	ldr	r3, [pc, #100]	; (45e0 <sam_ba_monitor_run+0x354>)
    457c:	681b      	ldr	r3, [r3, #0]
    457e:	68db      	ldr	r3, [r3, #12]
    4580:	2101      	movs	r1, #1
    4582:	482b      	ldr	r0, [pc, #172]	; (4630 <sam_ba_monitor_run+0x3a4>)
    4584:	4798      	blx	r3
    4586:	e777      	b.n	4478 <sam_ba_monitor_run+0x1ec>
					else if (('A' <= *ptr) && (*ptr <= 'F'))
    4588:	001a      	movs	r2, r3
    458a:	3a41      	subs	r2, #65	; 0x41
    458c:	2a05      	cmp	r2, #5
    458e:	d806      	bhi.n	459e <sam_ba_monitor_run+0x312>
						current_number = (current_number << 4)
    4590:	4920      	ldr	r1, [pc, #128]	; (4614 <sam_ba_monitor_run+0x388>)
    4592:	680a      	ldr	r2, [r1, #0]
    4594:	0112      	lsls	r2, r2, #4
								| (*ptr - 'A' + 0xa);
    4596:	3b37      	subs	r3, #55	; 0x37
    4598:	4313      	orrs	r3, r2
						current_number = (current_number << 4)
    459a:	600b      	str	r3, [r1, #0]
    459c:	e76c      	b.n	4478 <sam_ba_monitor_run+0x1ec>
					else if (('a' <= *ptr) && (*ptr <= 'f'))
    459e:	001a      	movs	r2, r3
    45a0:	3a61      	subs	r2, #97	; 0x61
    45a2:	2a05      	cmp	r2, #5
    45a4:	d806      	bhi.n	45b4 <sam_ba_monitor_run+0x328>
						current_number = (current_number << 4)
    45a6:	491b      	ldr	r1, [pc, #108]	; (4614 <sam_ba_monitor_run+0x388>)
    45a8:	680a      	ldr	r2, [r1, #0]
    45aa:	0112      	lsls	r2, r2, #4
								| (*ptr - 'a' + 0xa);
    45ac:	3b57      	subs	r3, #87	; 0x57
    45ae:	4313      	orrs	r3, r2
						current_number = (current_number << 4)
    45b0:	600b      	str	r3, [r1, #0]
    45b2:	e761      	b.n	4478 <sam_ba_monitor_run+0x1ec>
					else if (*ptr == ',')
    45b4:	2b2c      	cmp	r3, #44	; 0x2c
    45b6:	d005      	beq.n	45c4 <sam_ba_monitor_run+0x338>
						command = *ptr;
    45b8:	4642      	mov	r2, r8
    45ba:	7013      	strb	r3, [r2, #0]
						current_number = 0;
    45bc:	2200      	movs	r2, #0
    45be:	4b15      	ldr	r3, [pc, #84]	; (4614 <sam_ba_monitor_run+0x388>)
    45c0:	601a      	str	r2, [r3, #0]
    45c2:	e759      	b.n	4478 <sam_ba_monitor_run+0x1ec>
						ptr_data = (uint8_t *) current_number;
    45c4:	4b13      	ldr	r3, [pc, #76]	; (4614 <sam_ba_monitor_run+0x388>)
    45c6:	4a03      	ldr	r2, [pc, #12]	; (45d4 <sam_ba_monitor_run+0x348>)
    45c8:	6819      	ldr	r1, [r3, #0]
    45ca:	6011      	str	r1, [r2, #0]
						current_number = 0;
    45cc:	2200      	movs	r2, #0
    45ce:	601a      	str	r2, [r3, #0]
    45d0:	e752      	b.n	4478 <sam_ba_monitor_run+0x1ec>
    45d2:	46c0      	nop			; (mov r8, r8)
    45d4:	20000b98 	.word	0x20000b98
    45d8:	20000b50 	.word	0x20000b50
    45dc:	20000b58 	.word	0x20000b58
    45e0:	20000b9c 	.word	0x20000b9c
    45e4:	20000b4c 	.word	0x20000b4c
    45e8:	20000b48 	.word	0x20000b48
    45ec:	20000b54 	.word	0x20000b54
    45f0:	20000763 	.word	0x20000763
    45f4:	0000500c 	.word	0x0000500c
    45f8:	00005000 	.word	0x00005000
    45fc:	00005010 	.word	0x00005010
    4600:	00005015 	.word	0x00005015
    4604:	00005014 	.word	0x00005014
    4608:	00005021 	.word	0x00005021
    460c:	00005020 	.word	0x00005020
    4610:	00005008 	.word	0x00005008
    4614:	20000ba4 	.word	0x20000ba4
    4618:	20000ba8 	.word	0x20000ba8
    461c:	20000b44 	.word	0x20000b44
    4620:	000041d1 	.word	0x000041d1
    4624:	0000425d 	.word	0x0000425d
    4628:	20000ba0 	.word	0x20000ba0
    462c:	20000112 	.word	0x20000112
    4630:	0000502c 	.word	0x0000502c

00004634 <usart_open>:

/**
 * \brief Open the given USART
 */
void usart_open()
{
    4634:	b530      	push	{r4, r5, lr}
    4636:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    4638:	2380      	movs	r3, #128	; 0x80
    463a:	05db      	lsls	r3, r3, #23
    463c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    463e:	2300      	movs	r3, #0
    4640:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    4642:	22ff      	movs	r2, #255	; 0xff
    4644:	4669      	mov	r1, sp
    4646:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    4648:	2200      	movs	r2, #0
    464a:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    464c:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    464e:	2101      	movs	r1, #1
    4650:	2024      	movs	r0, #36	; 0x24
    4652:	466c      	mov	r4, sp
    4654:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    4656:	3001      	adds	r0, #1
    4658:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    465a:	3125      	adds	r1, #37	; 0x25
    465c:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    465e:	3101      	adds	r1, #1
    4660:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    4662:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    4664:	3105      	adds	r1, #5
    4666:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    4668:	3101      	adds	r1, #1
    466a:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
    466c:	930e      	str	r3, [sp, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    466e:	930f      	str	r3, [sp, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    4670:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    4672:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    4674:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    4676:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    4678:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    467a:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    467c:	2313      	movs	r3, #19
    467e:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    4680:	7762      	strb	r2, [r4, #29]
	struct usart_config config;

	usart_get_config_defaults(&config);

	config.baudrate     = BOOT_USART_BAUDRATE;
    4682:	23e1      	movs	r3, #225	; 0xe1
    4684:	025b      	lsls	r3, r3, #9
    4686:	9308      	str	r3, [sp, #32]
	config.mux_setting  = BOOT_USART_MUX_SETTINGS;
    4688:	2380      	movs	r3, #128	; 0x80
    468a:	035b      	lsls	r3, r3, #13
    468c:	9303      	str	r3, [sp, #12]
#ifdef BOOT_USART_PAD0
	config.pinmux_pad0  = BOOT_USART_PAD0;
    468e:	4b26      	ldr	r3, [pc, #152]	; (4728 <usart_open+0xf4>)
    4690:	930c      	str	r3, [sp, #48]	; 0x30
#endif
#ifdef BOOT_USART_PAD1
	config.pinmux_pad1  = BOOT_USART_PAD1;
    4692:	4b26      	ldr	r3, [pc, #152]	; (472c <usart_open+0xf8>)
    4694:	930d      	str	r3, [sp, #52]	; 0x34
#ifdef BOOT_USART_PAD3
	config.pinmux_pad3  = BOOT_USART_PAD3;
#endif
	config.generator_source = BOOT_USART_GCLK_SOURCE;

	while (usart_init(&usart_sam_ba, BOOT_USART_MODULE, &config)
    4696:	4d26      	ldr	r5, [pc, #152]	; (4730 <usart_open+0xfc>)
    4698:	4c26      	ldr	r4, [pc, #152]	; (4734 <usart_open+0x100>)
    469a:	466a      	mov	r2, sp
    469c:	4926      	ldr	r1, [pc, #152]	; (4738 <usart_open+0x104>)
    469e:	0028      	movs	r0, r5
    46a0:	47a0      	blx	r4
    46a2:	2800      	cmp	r0, #0
    46a4:	d1f9      	bne.n	469a <usart_open+0x66>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    46a6:	4d22      	ldr	r5, [pc, #136]	; (4730 <usart_open+0xfc>)
    46a8:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    46aa:	0020      	movs	r0, r4
    46ac:	4b23      	ldr	r3, [pc, #140]	; (473c <usart_open+0x108>)
    46ae:	4798      	blx	r3
    46b0:	231f      	movs	r3, #31
    46b2:	4018      	ands	r0, r3
    46b4:	3b1e      	subs	r3, #30
    46b6:	4083      	lsls	r3, r0
    46b8:	4a21      	ldr	r2, [pc, #132]	; (4740 <usart_open+0x10c>)
    46ba:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    46bc:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    46be:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    46c0:	2b00      	cmp	r3, #0
    46c2:	d1fc      	bne.n	46be <usart_open+0x8a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    46c4:	6823      	ldr	r3, [r4, #0]
    46c6:	2202      	movs	r2, #2
    46c8:	4313      	orrs	r3, r2
    46ca:	6023      	str	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    46cc:	4b18      	ldr	r3, [pc, #96]	; (4730 <usart_open+0xfc>)
    46ce:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    46d0:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    46d2:	2a00      	cmp	r2, #0
    46d4:	d1fc      	bne.n	46d0 <usart_open+0x9c>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    46d6:	6859      	ldr	r1, [r3, #4]
    46d8:	2280      	movs	r2, #128	; 0x80
    46da:	0252      	lsls	r2, r2, #9
    46dc:	430a      	orrs	r2, r1
    46de:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    46e0:	2101      	movs	r1, #1
    46e2:	4a13      	ldr	r2, [pc, #76]	; (4730 <usart_open+0xfc>)
    46e4:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    46e6:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    46e8:	2a00      	cmp	r2, #0
    46ea:	d1fc      	bne.n	46e6 <usart_open+0xb2>
	return (usart_hw->SYNCBUSY.reg);
    46ec:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    46ee:	2a00      	cmp	r2, #0
    46f0:	d1fc      	bne.n	46ec <usart_open+0xb8>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    46f2:	6859      	ldr	r1, [r3, #4]
    46f4:	2280      	movs	r2, #128	; 0x80
    46f6:	0292      	lsls	r2, r2, #10
    46f8:	430a      	orrs	r2, r1
    46fa:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    46fc:	2101      	movs	r1, #1
    46fe:	4a0c      	ldr	r2, [pc, #48]	; (4730 <usart_open+0xfc>)
    4700:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    4702:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    4704:	2a00      	cmp	r2, #0
    4706:	d1fc      	bne.n	4702 <usart_open+0xce>

	usart_enable(&usart_sam_ba);
	usart_enable_transceiver(&usart_sam_ba, USART_TRANSCEIVER_TX);
	usart_enable_transceiver(&usart_sam_ba, USART_TRANSCEIVER_RX);
	//Initialize flag
	b_sharp_received = false;
    4708:	2300      	movs	r3, #0
    470a:	4a0e      	ldr	r2, [pc, #56]	; (4744 <usart_open+0x110>)
    470c:	7013      	strb	r3, [r2, #0]
	idx_rx_read = 0;
    470e:	4a0e      	ldr	r2, [pc, #56]	; (4748 <usart_open+0x114>)
    4710:	7013      	strb	r3, [r2, #0]
	idx_rx_write = 0;
    4712:	4a0e      	ldr	r2, [pc, #56]	; (474c <usart_open+0x118>)
    4714:	7013      	strb	r3, [r2, #0]
	idx_tx_read = 0;
    4716:	4a0e      	ldr	r2, [pc, #56]	; (4750 <usart_open+0x11c>)
    4718:	7013      	strb	r3, [r2, #0]
	idx_tx_write = 0;
    471a:	4a0e      	ldr	r2, [pc, #56]	; (4754 <usart_open+0x120>)
    471c:	7013      	strb	r3, [r2, #0]

	error_timeout = 0;
    471e:	4a0e      	ldr	r2, [pc, #56]	; (4758 <usart_open+0x124>)
    4720:	7013      	strb	r3, [r2, #0]
}
    4722:	b011      	add	sp, #68	; 0x44
    4724:	bd30      	pop	{r4, r5, pc}
    4726:	46c0      	nop			; (mov r8, r8)
    4728:	00160002 	.word	0x00160002
    472c:	00170002 	.word	0x00170002
    4730:	20000bb4 	.word	0x20000bb4
    4734:	0000177d 	.word	0x0000177d
    4738:	42001400 	.word	0x42001400
    473c:	000016ed 	.word	0x000016ed
    4740:	e000e100 	.word	0xe000e100
    4744:	20000bac 	.word	0x20000bac
    4748:	20000c6a 	.word	0x20000c6a
    474c:	20000bad 	.word	0x20000bad
    4750:	20000bb0 	.word	0x20000bb0
    4754:	20000c6b 	.word	0x20000c6b
    4758:	20000c68 	.word	0x20000c68

0000475c <usart_putc>:
 * \param value Value to put
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
int usart_putc(int value)
{
    475c:	b510      	push	{r4, lr}
	usart_write_wait(&usart_sam_ba, (uint16_t)value);
    475e:	b281      	uxth	r1, r0
    4760:	4802      	ldr	r0, [pc, #8]	; (476c <usart_putc+0x10>)
    4762:	4b03      	ldr	r3, [pc, #12]	; (4770 <usart_putc+0x14>)
    4764:	4798      	blx	r3
	return 1;
}
    4766:	2001      	movs	r0, #1
    4768:	bd10      	pop	{r4, pc}
    476a:	46c0      	nop			; (mov r8, r8)
    476c:	20000bb4 	.word	0x20000bb4
    4770:	00001ac1 	.word	0x00001ac1

00004774 <usart_is_rx_ready>:
	}
	return (false);
}

bool usart_is_rx_ready(void) {
	return (BOOT_USART_MODULE->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC);
    4774:	4b02      	ldr	r3, [pc, #8]	; (4780 <usart_is_rx_ready+0xc>)
    4776:	7e18      	ldrb	r0, [r3, #24]
    4778:	0740      	lsls	r0, r0, #29
    477a:	0fc0      	lsrs	r0, r0, #31
}
    477c:	4770      	bx	lr
    477e:	46c0      	nop			; (mov r8, r8)
    4780:	42001400 	.word	0x42001400

00004784 <usart_getc>:
int usart_getc(void) {
    4784:	b510      	push	{r4, lr}
    4786:	b082      	sub	sp, #8
	while(!(usart_is_rx_ready()));
    4788:	4c06      	ldr	r4, [pc, #24]	; (47a4 <usart_getc+0x20>)
    478a:	47a0      	blx	r4
    478c:	2800      	cmp	r0, #0
    478e:	d0fc      	beq.n	478a <usart_getc+0x6>
	usart_read_wait(&usart_sam_ba, &retval);
    4790:	466b      	mov	r3, sp
    4792:	1d9c      	adds	r4, r3, #6
    4794:	0021      	movs	r1, r4
    4796:	4804      	ldr	r0, [pc, #16]	; (47a8 <usart_getc+0x24>)
    4798:	4b04      	ldr	r3, [pc, #16]	; (47ac <usart_getc+0x28>)
    479a:	4798      	blx	r3
	return (int)retval;
    479c:	8820      	ldrh	r0, [r4, #0]
}
    479e:	b002      	add	sp, #8
    47a0:	bd10      	pop	{r4, pc}
    47a2:	46c0      	nop			; (mov r8, r8)
    47a4:	00004775 	.word	0x00004775
    47a8:	20000bb4 	.word	0x20000bb4
    47ac:	00001aed 	.word	0x00001aed

000047b0 <usart_sharp_received>:
int usart_sharp_received(void) {
    47b0:	b510      	push	{r4, lr}
	if (usart_is_rx_ready()) {
    47b2:	4b06      	ldr	r3, [pc, #24]	; (47cc <usart_sharp_received+0x1c>)
    47b4:	4798      	blx	r3
	return (false);
    47b6:	2300      	movs	r3, #0
	if (usart_is_rx_ready()) {
    47b8:	2800      	cmp	r0, #0
    47ba:	d101      	bne.n	47c0 <usart_sharp_received+0x10>
}
    47bc:	0018      	movs	r0, r3
    47be:	bd10      	pop	{r4, pc}
		if (usart_getc() == SHARP_CHARACTER)
    47c0:	4b03      	ldr	r3, [pc, #12]	; (47d0 <usart_sharp_received+0x20>)
    47c2:	4798      	blx	r3
    47c4:	3823      	subs	r0, #35	; 0x23
			return (true);
    47c6:	4243      	negs	r3, r0
    47c8:	4143      	adcs	r3, r0
    47ca:	e7f7      	b.n	47bc <usart_sharp_received+0xc>
    47cc:	00004775 	.word	0x00004775
    47d0:	00004785 	.word	0x00004785

000047d4 <usart_putdata>:
}

/**
 * \brief Send given data (polling)
 */
uint32_t usart_putdata(void const* data, uint32_t length) {
    47d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    47d6:	1e0f      	subs	r7, r1, #0
	uint32_t i;
	uint8_t* ptrdata;
	ptrdata = (uint8_t*) data;
	for (i = 0; i < length; i++) {
    47d8:	d007      	beq.n	47ea <usart_putdata+0x16>
    47da:	1846      	adds	r6, r0, r1
    47dc:	0004      	movs	r4, r0
		usart_putc(*ptrdata);
    47de:	4d04      	ldr	r5, [pc, #16]	; (47f0 <usart_putdata+0x1c>)
    47e0:	7820      	ldrb	r0, [r4, #0]
    47e2:	47a8      	blx	r5
		ptrdata++;
    47e4:	3401      	adds	r4, #1
	for (i = 0; i < length; i++) {
    47e6:	42a6      	cmp	r6, r4
    47e8:	d1fa      	bne.n	47e0 <usart_putdata+0xc>
	}
	return (i);
}
    47ea:	0038      	movs	r0, r7
    47ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    47ee:	46c0      	nop			; (mov r8, r8)
    47f0:	0000475d 	.word	0x0000475d

000047f4 <usart_getdata>:

/**
 * \brief Get data from com device
 */
uint32_t usart_getdata(void* data, uint32_t length) {
    47f4:	b510      	push	{r4, lr}
    47f6:	0004      	movs	r4, r0
	uint8_t* ptrdata;
	ptrdata = (uint8_t*) data;
	*ptrdata = usart_getc();
    47f8:	4b02      	ldr	r3, [pc, #8]	; (4804 <usart_getdata+0x10>)
    47fa:	4798      	blx	r3
    47fc:	7020      	strb	r0, [r4, #0]
	return (1);
}
    47fe:	2001      	movs	r0, #1
    4800:	bd10      	pop	{r4, pc}
    4802:	46c0      	nop			; (mov r8, r8)
    4804:	00004785 	.word	0x00004785

00004808 <add_crc>:
 */
unsigned short add_crc(char ptr, unsigned short crc) {

	unsigned short cmpt;

	crc = crc ^ (int) ptr << 8;
    4808:	0200      	lsls	r0, r0, #8
    480a:	4048      	eors	r0, r1
    480c:	2308      	movs	r3, #8

	for (cmpt = 0; cmpt < 8; cmpt++) {
		if (crc & 0x8000)
			crc = crc << 1 ^ CRC16POLY;
    480e:	4908      	ldr	r1, [pc, #32]	; (4830 <add_crc+0x28>)
    4810:	e006      	b.n	4820 <add_crc+0x18>
    4812:	0040      	lsls	r0, r0, #1
    4814:	4048      	eors	r0, r1
    4816:	b280      	uxth	r0, r0
    4818:	3b01      	subs	r3, #1
    481a:	b29b      	uxth	r3, r3
	for (cmpt = 0; cmpt < 8; cmpt++) {
    481c:	2b00      	cmp	r3, #0
    481e:	d005      	beq.n	482c <add_crc+0x24>
		if (crc & 0x8000)
    4820:	b202      	sxth	r2, r0
    4822:	2a00      	cmp	r2, #0
    4824:	dbf5      	blt.n	4812 <add_crc+0xa>
		else
			crc = crc << 1;
    4826:	0040      	lsls	r0, r0, #1
    4828:	b280      	uxth	r0, r0
    482a:	e7f5      	b.n	4818 <add_crc+0x10>
	}

	return (crc & 0xFFFF);
}
    482c:	4770      	bx	lr
    482e:	46c0      	nop			; (mov r8, r8)
    4830:	00001021 	.word	0x00001021

00004834 <getbytes>:

static uint16_t getbytes(uint8_t *ptr_data, uint16_t length) {
    4834:	b5f0      	push	{r4, r5, r6, r7, lr}
    4836:	46de      	mov	lr, fp
    4838:	4657      	mov	r7, sl
    483a:	464e      	mov	r6, r9
    483c:	b5c0      	push	{r6, r7, lr}
    483e:	b082      	sub	sp, #8
    4840:	0007      	movs	r7, r0
    4842:	1e0e      	subs	r6, r1, #0
	uint16_t crc = 0;
	uint16_t cpt;
	uint8_t c;

	for (cpt = 0; cpt < length; ++cpt) {
    4844:	d02a      	beq.n	489c <getbytes+0x68>
    4846:	2400      	movs	r4, #0
    4848:	2300      	movs	r3, #0
    484a:	9301      	str	r3, [sp, #4]
		c = usart_getc();
    484c:	4b19      	ldr	r3, [pc, #100]	; (48b4 <getbytes+0x80>)
    484e:	469a      	mov	sl, r3
		if (error_timeout)
    4850:	4b19      	ldr	r3, [pc, #100]	; (48b8 <getbytes+0x84>)
    4852:	4699      	mov	r9, r3
			return 1;
		crc = add_crc(c, crc);
    4854:	4b19      	ldr	r3, [pc, #100]	; (48bc <getbytes+0x88>)
    4856:	469b      	mov	fp, r3
    4858:	e008      	b.n	486c <getbytes+0x38>
		//crc = (crc << 8) ^ xcrc16tab[(crc>>8) ^ c];
		if (size_of_data || mode_of_transfer) {
			*ptr_data++ = c;
    485a:	1c7b      	adds	r3, r7, #1
    485c:	703d      	strb	r5, [r7, #0]
    485e:	001f      	movs	r7, r3
			if (length == PKTLEN_128)
    4860:	2e80      	cmp	r6, #128	; 0x80
    4862:	d016      	beq.n	4892 <getbytes+0x5e>
	for (cpt = 0; cpt < length; ++cpt) {
    4864:	3401      	adds	r4, #1
    4866:	b2a4      	uxth	r4, r4
    4868:	42a6      	cmp	r6, r4
    486a:	d01b      	beq.n	48a4 <getbytes+0x70>
		c = usart_getc();
    486c:	47d0      	blx	sl
    486e:	b2c5      	uxtb	r5, r0
		if (error_timeout)
    4870:	464b      	mov	r3, r9
    4872:	781b      	ldrb	r3, [r3, #0]
    4874:	2b00      	cmp	r3, #0
    4876:	d113      	bne.n	48a0 <getbytes+0x6c>
		crc = add_crc(c, crc);
    4878:	9901      	ldr	r1, [sp, #4]
    487a:	0028      	movs	r0, r5
    487c:	47d8      	blx	fp
    487e:	9001      	str	r0, [sp, #4]
		if (size_of_data || mode_of_transfer) {
    4880:	4b0f      	ldr	r3, [pc, #60]	; (48c0 <getbytes+0x8c>)
    4882:	881b      	ldrh	r3, [r3, #0]
    4884:	2b00      	cmp	r3, #0
    4886:	d1e8      	bne.n	485a <getbytes+0x26>
    4888:	4b0e      	ldr	r3, [pc, #56]	; (48c4 <getbytes+0x90>)
    488a:	781b      	ldrb	r3, [r3, #0]
    488c:	2b00      	cmp	r3, #0
    488e:	d0e9      	beq.n	4864 <getbytes+0x30>
    4890:	e7e3      	b.n	485a <getbytes+0x26>
				size_of_data--;
    4892:	490b      	ldr	r1, [pc, #44]	; (48c0 <getbytes+0x8c>)
    4894:	880a      	ldrh	r2, [r1, #0]
    4896:	3a01      	subs	r2, #1
    4898:	800a      	strh	r2, [r1, #0]
    489a:	e7e3      	b.n	4864 <getbytes+0x30>
	uint16_t crc = 0;
    489c:	9101      	str	r1, [sp, #4]
    489e:	e001      	b.n	48a4 <getbytes+0x70>
			return 1;
    48a0:	2301      	movs	r3, #1
    48a2:	9301      	str	r3, [sp, #4]
		}
	}

	return crc;
}
    48a4:	9801      	ldr	r0, [sp, #4]
    48a6:	b002      	add	sp, #8
    48a8:	bc1c      	pop	{r2, r3, r4}
    48aa:	4691      	mov	r9, r2
    48ac:	469a      	mov	sl, r3
    48ae:	46a3      	mov	fp, r4
    48b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    48b2:	46c0      	nop			; (mov r8, r8)
    48b4:	00004785 	.word	0x00004785
    48b8:	20000c68 	.word	0x20000c68
    48bc:	00004809 	.word	0x00004809
    48c0:	20000bae 	.word	0x20000bae
    48c4:	20000c69 	.word	0x20000c69

000048c8 <getPacket>:
}

/**
 * \brief Used by Xdown to retrieve packets.
 */
uint8_t getPacket(uint8_t *ptr_data, uint8_t sno) {
    48c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    48ca:	b085      	sub	sp, #20
    48cc:	0005      	movs	r5, r0
    48ce:	9101      	str	r1, [sp, #4]
	uint8_t seq[2];
	uint16_t crc, xcrc;

	getbytes(seq, 2);
    48d0:	2102      	movs	r1, #2
    48d2:	a803      	add	r0, sp, #12
    48d4:	4c17      	ldr	r4, [pc, #92]	; (4934 <getPacket+0x6c>)
    48d6:	47a0      	blx	r4
	xcrc = getbytes(ptr_data, PKTLEN_128);
    48d8:	2180      	movs	r1, #128	; 0x80
    48da:	0028      	movs	r0, r5
    48dc:	47a0      	blx	r4
    48de:	0005      	movs	r5, r0
	if (error_timeout)
    48e0:	4b15      	ldr	r3, [pc, #84]	; (4938 <getPacket+0x70>)
    48e2:	781f      	ldrb	r7, [r3, #0]
    48e4:	2f00      	cmp	r7, #0
    48e6:	d003      	beq.n	48f0 <getPacket+0x28>
		return (false);
    48e8:	2700      	movs	r7, #0
		return (false);
	}

	usart_putc(ACK);
	return (true);
}
    48ea:	0038      	movs	r0, r7
    48ec:	b005      	add	sp, #20
    48ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	crc = (uint16_t) usart_getc() << 8;
    48f0:	4e12      	ldr	r6, [pc, #72]	; (493c <getPacket+0x74>)
    48f2:	47b0      	blx	r6
    48f4:	0200      	lsls	r0, r0, #8
    48f6:	b284      	uxth	r4, r0
	crc += (uint16_t) usart_getc();
    48f8:	47b0      	blx	r6
    48fa:	1824      	adds	r4, r4, r0
    48fc:	b2a4      	uxth	r4, r4
	if (error_timeout == 1)
    48fe:	4b0e      	ldr	r3, [pc, #56]	; (4938 <getPacket+0x70>)
    4900:	781b      	ldrb	r3, [r3, #0]
    4902:	2b01      	cmp	r3, #1
    4904:	d0f1      	beq.n	48ea <getPacket+0x22>
	if ((crc != xcrc) || (seq[0] != sno) || (seq[1] != (uint8_t) (~sno))) {
    4906:	42a5      	cmp	r5, r4
    4908:	d104      	bne.n	4914 <getPacket+0x4c>
    490a:	ab03      	add	r3, sp, #12
    490c:	781b      	ldrb	r3, [r3, #0]
    490e:	9a01      	ldr	r2, [sp, #4]
    4910:	4293      	cmp	r3, r2
    4912:	d003      	beq.n	491c <getPacket+0x54>
		usart_putc(CAN);
    4914:	2018      	movs	r0, #24
    4916:	4b0a      	ldr	r3, [pc, #40]	; (4940 <getPacket+0x78>)
    4918:	4798      	blx	r3
		return (false);
    491a:	e7e6      	b.n	48ea <getPacket+0x22>
	if ((crc != xcrc) || (seq[0] != sno) || (seq[1] != (uint8_t) (~sno))) {
    491c:	43db      	mvns	r3, r3
    491e:	aa03      	add	r2, sp, #12
    4920:	7852      	ldrb	r2, [r2, #1]
    4922:	b2db      	uxtb	r3, r3
    4924:	429a      	cmp	r2, r3
    4926:	d1f5      	bne.n	4914 <getPacket+0x4c>
	usart_putc(ACK);
    4928:	2006      	movs	r0, #6
    492a:	4b05      	ldr	r3, [pc, #20]	; (4940 <getPacket+0x78>)
    492c:	4798      	blx	r3
	return (true);
    492e:	2701      	movs	r7, #1
    4930:	e7db      	b.n	48ea <getPacket+0x22>
    4932:	46c0      	nop			; (mov r8, r8)
    4934:	00004835 	.word	0x00004835
    4938:	20000c68 	.word	0x20000c68
    493c:	00004785 	.word	0x00004785
    4940:	0000475d 	.word	0x0000475d

00004944 <usart_putdata_xmd>:

/**
 * \brief Called when a transfer from target to host is being made(considered an upload).
 */
uint32_t usart_putdata_xmd(void const* data, uint32_t length) {
    4944:	b5f0      	push	{r4, r5, r6, r7, lr}
    4946:	46de      	mov	lr, fp
    4948:	4657      	mov	r7, sl
    494a:	464e      	mov	r6, r9
    494c:	4645      	mov	r5, r8
    494e:	b5e0      	push	{r5, r6, r7, lr}
    4950:	b085      	sub	sp, #20
    4952:	0005      	movs	r5, r0
    4954:	4689      	mov	r9, r1
	uint8_t c, sno = 1;
	uint8_t done;
	uint8_t * ptr_data = (uint8_t *) data;
	error_timeout = 0;
    4956:	2200      	movs	r2, #0
    4958:	4b4a      	ldr	r3, [pc, #296]	; (4a84 <usart_putdata_xmd+0x140>)
    495a:	701a      	strb	r2, [r3, #0]
	if (!length)
    495c:	2900      	cmp	r1, #0
    495e:	d128      	bne.n	49b2 <usart_putdata_xmd+0x6e>
		mode_of_transfer = 1;
    4960:	3201      	adds	r2, #1
    4962:	4b49      	ldr	r3, [pc, #292]	; (4a88 <usart_putdata_xmd+0x144>)
    4964:	701a      	strb	r2, [r3, #0]

	/* Startup synchronization... */
	/* Wait to receive a NAK or 'C' from receiver. */
	done = 0;
	while (!done) {
		c = (uint8_t) usart_getc();
    4966:	4f49      	ldr	r7, [pc, #292]	; (4a8c <usart_putdata_xmd+0x148>)
		if (error_timeout) { // Test for timeout in usart_getc
    4968:	4e46      	ldr	r6, [pc, #280]	; (4a84 <usart_putdata_xmd+0x140>)
			error_timeout = 0;
    496a:	0034      	movs	r4, r6
		c = (uint8_t) usart_getc();
    496c:	47b8      	blx	r7
		if (error_timeout) { // Test for timeout in usart_getc
    496e:	7833      	ldrb	r3, [r6, #0]
    4970:	2b00      	cmp	r3, #0
    4972:	d12c      	bne.n	49ce <usart_putdata_xmd+0x8a>
		c = (uint8_t) usart_getc();
    4974:	b2c0      	uxtb	r0, r0
			if (error_timeout) {
				error_timeout = 0;
				return (0);
			}
		}
		switch (c) {
    4976:	2843      	cmp	r0, #67	; 0x43
    4978:	d003      	beq.n	4982 <usart_putdata_xmd+0x3e>
    497a:	2871      	cmp	r0, #113	; 0x71
    497c:	d079      	beq.n	4a72 <usart_putdata_xmd+0x12e>
    497e:	2815      	cmp	r0, #21
    4980:	d1f4      	bne.n	496c <usart_putdata_xmd+0x28>
    4982:	9503      	str	r5, [sp, #12]
    4984:	2301      	movs	r3, #1
    4986:	9302      	str	r3, [sp, #8]
	usart_putc(SOH);
    4988:	4b41      	ldr	r3, [pc, #260]	; (4a90 <usart_putdata_xmd+0x14c>)
    498a:	469b      	mov	fp, r3
		if (size_of_data || mode_of_transfer) {
    498c:	4b41      	ldr	r3, [pc, #260]	; (4a94 <usart_putdata_xmd+0x150>)
    498e:	4698      	mov	r8, r3
			size_of_data--;
    4990:	001c      	movs	r4, r3
		if (size_of_data || mode_of_transfer) {
    4992:	4b3d      	ldr	r3, [pc, #244]	; (4a88 <usart_putdata_xmd+0x144>)
    4994:	469a      	mov	sl, r3
	usart_putc(SOH);
    4996:	2001      	movs	r0, #1
    4998:	47d8      	blx	fp
	usart_putc(sno);
    499a:	9d02      	ldr	r5, [sp, #8]
    499c:	0028      	movs	r0, r5
    499e:	47d8      	blx	fp
	usart_putc((uint8_t) ~(sno));
    49a0:	43e8      	mvns	r0, r5
    49a2:	b2c0      	uxtb	r0, r0
    49a4:	47d8      	blx	fp
    49a6:	9d03      	ldr	r5, [sp, #12]
    49a8:	2780      	movs	r7, #128	; 0x80
	chksm = 0;
    49aa:	2300      	movs	r3, #0
    49ac:	9301      	str	r3, [sp, #4]
    49ae:	002e      	movs	r6, r5
    49b0:	e02e      	b.n	4a10 <usart_putdata_xmd+0xcc>
		size_of_data = length;
    49b2:	4b38      	ldr	r3, [pc, #224]	; (4a94 <usart_putdata_xmd+0x150>)
    49b4:	8019      	strh	r1, [r3, #0]
		mode_of_transfer = 0;
    49b6:	2200      	movs	r2, #0
    49b8:	4b33      	ldr	r3, [pc, #204]	; (4a88 <usart_putdata_xmd+0x144>)
    49ba:	701a      	strb	r2, [r3, #0]
	if (length & (PKTLEN_128 - 1)) {
    49bc:	000b      	movs	r3, r1
    49be:	065b      	lsls	r3, r3, #25
    49c0:	d0d1      	beq.n	4966 <usart_putdata_xmd+0x22>
		length += PKTLEN_128;
    49c2:	000b      	movs	r3, r1
    49c4:	3380      	adds	r3, #128	; 0x80
		length &= ~(PKTLEN_128 - 1);
    49c6:	327f      	adds	r2, #127	; 0x7f
    49c8:	4393      	bics	r3, r2
    49ca:	4699      	mov	r9, r3
    49cc:	e7cb      	b.n	4966 <usart_putdata_xmd+0x22>
			error_timeout = 0;
    49ce:	2300      	movs	r3, #0
    49d0:	7023      	strb	r3, [r4, #0]
			c = (uint8_t) usart_getc();
    49d2:	4b2e      	ldr	r3, [pc, #184]	; (4a8c <usart_putdata_xmd+0x148>)
    49d4:	4798      	blx	r3
    49d6:	b2c0      	uxtb	r0, r0
			if (error_timeout) {
    49d8:	7823      	ldrb	r3, [r4, #0]
    49da:	2b00      	cmp	r3, #0
    49dc:	d0cb      	beq.n	4976 <usart_putdata_xmd+0x32>
				error_timeout = 0;
    49de:	2200      	movs	r2, #0
    49e0:	4b28      	ldr	r3, [pc, #160]	; (4a84 <usart_putdata_xmd+0x140>)
    49e2:	701a      	strb	r2, [r3, #0]
				return (0);
    49e4:	2000      	movs	r0, #0
    49e6:	e045      	b.n	4a74 <usart_putdata_xmd+0x130>
	done = 0;
	sno = 1;
	while (!done) {
		c = (uint8_t) putPacket((uint8_t *) ptr_data, sno);
		if (error_timeout) { // Test for timeout in usart_getc
			error_timeout = 0;
    49e8:	2200      	movs	r2, #0
    49ea:	4b26      	ldr	r3, [pc, #152]	; (4a84 <usart_putdata_xmd+0x140>)
    49ec:	701a      	strb	r2, [r3, #0]
			return (0);
    49ee:	2000      	movs	r0, #0
    49f0:	e040      	b.n	4a74 <usart_putdata_xmd+0x130>
			data = *tmppkt++;
    49f2:	7835      	ldrb	r5, [r6, #0]
			size_of_data--;
    49f4:	3b01      	subs	r3, #1
    49f6:	8023      	strh	r3, [r4, #0]
			data = *tmppkt++;
    49f8:	3601      	adds	r6, #1
		usart_putc(data);
    49fa:	0028      	movs	r0, r5
    49fc:	4b24      	ldr	r3, [pc, #144]	; (4a90 <usart_putdata_xmd+0x14c>)
    49fe:	4798      	blx	r3
		chksm = add_crc(data, chksm);
    4a00:	9901      	ldr	r1, [sp, #4]
    4a02:	0028      	movs	r0, r5
    4a04:	4b24      	ldr	r3, [pc, #144]	; (4a98 <usart_putdata_xmd+0x154>)
    4a06:	4798      	blx	r3
    4a08:	9001      	str	r0, [sp, #4]
    4a0a:	3f01      	subs	r7, #1
	for (i = 0; i < PKTLEN_128; i++) {
    4a0c:	2f00      	cmp	r7, #0
    4a0e:	d008      	beq.n	4a22 <usart_putdata_xmd+0xde>
		if (size_of_data || mode_of_transfer) {
    4a10:	4643      	mov	r3, r8
    4a12:	881b      	ldrh	r3, [r3, #0]
    4a14:	2b00      	cmp	r3, #0
    4a16:	d1ec      	bne.n	49f2 <usart_putdata_xmd+0xae>
    4a18:	4652      	mov	r2, sl
    4a1a:	7815      	ldrb	r5, [r2, #0]
    4a1c:	2d00      	cmp	r5, #0
    4a1e:	d0ec      	beq.n	49fa <usart_putdata_xmd+0xb6>
    4a20:	e7e7      	b.n	49f2 <usart_putdata_xmd+0xae>
	usart_putc((uint8_t) (chksm >> 8));
    4a22:	0005      	movs	r5, r0
    4a24:	0a00      	lsrs	r0, r0, #8
    4a26:	b2c0      	uxtb	r0, r0
    4a28:	4e19      	ldr	r6, [pc, #100]	; (4a90 <usart_putdata_xmd+0x14c>)
    4a2a:	47b0      	blx	r6
	usart_putc((uint8_t) chksm);
    4a2c:	b2e8      	uxtb	r0, r5
    4a2e:	47b0      	blx	r6
	return (usart_getc()); /* Wait for ack */
    4a30:	4b16      	ldr	r3, [pc, #88]	; (4a8c <usart_putdata_xmd+0x148>)
    4a32:	4798      	blx	r3
		if (error_timeout) { // Test for timeout in usart_getc
    4a34:	4b13      	ldr	r3, [pc, #76]	; (4a84 <usart_putdata_xmd+0x140>)
    4a36:	781b      	ldrb	r3, [r3, #0]
    4a38:	2b00      	cmp	r3, #0
    4a3a:	d1d5      	bne.n	49e8 <usart_putdata_xmd+0xa4>
		}
		switch (c) {
    4a3c:	23ff      	movs	r3, #255	; 0xff
    4a3e:	4018      	ands	r0, r3
    4a40:	2806      	cmp	r0, #6
    4a42:	d109      	bne.n	4a58 <usart_putdata_xmd+0x114>
		case ACK:
			++sno;
    4a44:	9b02      	ldr	r3, [sp, #8]
    4a46:	3301      	adds	r3, #1
    4a48:	b2db      	uxtb	r3, r3
    4a4a:	9302      	str	r3, [sp, #8]
			length -= PKTLEN_128;
    4a4c:	464b      	mov	r3, r9
    4a4e:	3b80      	subs	r3, #128	; 0x80
    4a50:	4699      	mov	r9, r3
			ptr_data += PKTLEN_128;
    4a52:	9b03      	ldr	r3, [sp, #12]
    4a54:	3380      	adds	r3, #128	; 0x80
    4a56:	9303      	str	r3, [sp, #12]
		case EOT:
		default:
			done = 0;
			break;
		}
		if (!length) {
    4a58:	464b      	mov	r3, r9
    4a5a:	2b00      	cmp	r3, #0
    4a5c:	d19b      	bne.n	4996 <usart_putdata_xmd+0x52>
			usart_putc(EOT);
    4a5e:	2004      	movs	r0, #4
    4a60:	4b0b      	ldr	r3, [pc, #44]	; (4a90 <usart_putdata_xmd+0x14c>)
    4a62:	4798      	blx	r3
			usart_getc(); /* Flush the ACK */
    4a64:	4b09      	ldr	r3, [pc, #36]	; (4a8c <usart_putdata_xmd+0x148>)
    4a66:	4798      	blx	r3
			break;
		}
	}

	mode_of_transfer = 0;
    4a68:	2200      	movs	r2, #0
    4a6a:	4b07      	ldr	r3, [pc, #28]	; (4a88 <usart_putdata_xmd+0x144>)
    4a6c:	701a      	strb	r2, [r3, #0]
	return (1);
    4a6e:	2001      	movs	r0, #1
    4a70:	e000      	b.n	4a74 <usart_putdata_xmd+0x130>
			return (0);
    4a72:	2000      	movs	r0, #0
}
    4a74:	b005      	add	sp, #20
    4a76:	bc3c      	pop	{r2, r3, r4, r5}
    4a78:	4690      	mov	r8, r2
    4a7a:	4699      	mov	r9, r3
    4a7c:	46a2      	mov	sl, r4
    4a7e:	46ab      	mov	fp, r5
    4a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a82:	46c0      	nop			; (mov r8, r8)
    4a84:	20000c68 	.word	0x20000c68
    4a88:	20000c69 	.word	0x20000c69
    4a8c:	00004785 	.word	0x00004785
    4a90:	0000475d 	.word	0x0000475d
    4a94:	20000bae 	.word	0x20000bae
    4a98:	00004809 	.word	0x00004809

00004a9c <usart_getdata_xmd>:

/**
 * \brief Called when a transfer from host to target is being made (considered an download).
 */
uint32_t usart_getdata_xmd(void* data, uint32_t length) {
    4a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a9e:	46c6      	mov	lr, r8
    4aa0:	b500      	push	{lr}
    4aa2:	b082      	sub	sp, #8
    4aa4:	9001      	str	r0, [sp, #4]
    4aa6:	000c      	movs	r4, r1
	uint8_t * ptr_data = (uint8_t *) data;
	uint32_t b_run, nbr_of_timeout = 100;
	uint8_t sno = 0x01;

	//Copied from legacy source code ... might need some tweaking
	uint32_t loops_per_second = system_clock_source_get_hz(CONF_CLOCK_GCLK_0_CLOCK_SOURCE) / 10;
    4aa8:	2006      	movs	r0, #6
    4aaa:	4b2f      	ldr	r3, [pc, #188]	; (4b68 <usart_getdata_xmd+0xcc>)
    4aac:	4798      	blx	r3
    4aae:	210a      	movs	r1, #10
    4ab0:	4b2e      	ldr	r3, [pc, #184]	; (4b6c <usart_getdata_xmd+0xd0>)
    4ab2:	4798      	blx	r3
    4ab4:	9000      	str	r0, [sp, #0]

	error_timeout = 0;
    4ab6:	2200      	movs	r2, #0
    4ab8:	4b2d      	ldr	r3, [pc, #180]	; (4b70 <usart_getdata_xmd+0xd4>)
    4aba:	701a      	strb	r2, [r3, #0]

	if (length == 0)
    4abc:	2c00      	cmp	r4, #0
    4abe:	d106      	bne.n	4ace <usart_getdata_xmd+0x32>
		mode_of_transfer = 1;
    4ac0:	3201      	adds	r2, #1
    4ac2:	4b2c      	ldr	r3, [pc, #176]	; (4b74 <usart_getdata_xmd+0xd8>)
    4ac4:	701a      	strb	r2, [r3, #0]
uint32_t usart_getdata_xmd(void* data, uint32_t length) {
    4ac6:	2564      	movs	r5, #100	; 0x64
	}

	/* Startup synchronization... */
	/* Continuously send NAK or 'C' until sender responds. */
	while (1) {
		usart_putc('C');
    4ac8:	4e2b      	ldr	r6, [pc, #172]	; (4b78 <usart_getdata_xmd+0xdc>)
		timeout = loops_per_second;
		while (!(usart_is_rx_ready()) && timeout)
    4aca:	4f2c      	ldr	r7, [pc, #176]	; (4b7c <usart_getdata_xmd+0xe0>)
    4acc:	e00e      	b.n	4aec <usart_getdata_xmd+0x50>
		size_of_data = length;
    4ace:	4b2c      	ldr	r3, [pc, #176]	; (4b80 <usart_getdata_xmd+0xe4>)
    4ad0:	801c      	strh	r4, [r3, #0]
		mode_of_transfer = 0;
    4ad2:	2200      	movs	r2, #0
    4ad4:	4b27      	ldr	r3, [pc, #156]	; (4b74 <usart_getdata_xmd+0xd8>)
    4ad6:	701a      	strb	r2, [r3, #0]
    4ad8:	e7f5      	b.n	4ac6 <usart_getdata_xmd+0x2a>
			timeout--;
    4ada:	3c01      	subs	r4, #1
		while (!(usart_is_rx_ready()) && timeout)
    4adc:	47b8      	blx	r7
    4ade:	2800      	cmp	r0, #0
    4ae0:	d108      	bne.n	4af4 <usart_getdata_xmd+0x58>
    4ae2:	2c00      	cmp	r4, #0
    4ae4:	d1f9      	bne.n	4ada <usart_getdata_xmd+0x3e>
    4ae6:	3d01      	subs	r5, #1
		if (timeout)
			break;

		if (!(--nbr_of_timeout))
    4ae8:	2d00      	cmp	r5, #0
    4aea:	d03b      	beq.n	4b64 <usart_getdata_xmd+0xc8>
		usart_putc('C');
    4aec:	2043      	movs	r0, #67	; 0x43
    4aee:	47b0      	blx	r6
		timeout = loops_per_second;
    4af0:	9c00      	ldr	r4, [sp, #0]
		while (!(usart_is_rx_ready()) && timeout)
    4af2:	e7f3      	b.n	4adc <usart_getdata_xmd+0x40>
		if (timeout)
    4af4:	2c00      	cmp	r4, #0
    4af6:	d0f6      	beq.n	4ae6 <usart_getdata_xmd+0x4a>
    4af8:	9e01      	ldr	r6, [sp, #4]
    4afa:	2401      	movs	r4, #1
			return (0);
	}

	b_run = true;
	while (b_run != false) {
		c = (char) usart_getc();
    4afc:	4f21      	ldr	r7, [pc, #132]	; (4b84 <usart_getdata_xmd+0xe8>)
		if (error_timeout) { // Test for timeout in usart_getc
    4afe:	4d1c      	ldr	r5, [pc, #112]	; (4b70 <usart_getdata_xmd+0xd4>)
			error_timeout = 0;
			return (0);
		}
		switch (c) {
		case SOH: /* 128-byte incoming packet */
			b_run = getPacket(ptr_data, sno);
    4b00:	4b21      	ldr	r3, [pc, #132]	; (4b88 <usart_getdata_xmd+0xec>)
    4b02:	4698      	mov	r8, r3
    4b04:	e012      	b.n	4b2c <usart_getdata_xmd+0x90>
			error_timeout = 0;
    4b06:	2200      	movs	r2, #0
    4b08:	4b19      	ldr	r3, [pc, #100]	; (4b70 <usart_getdata_xmd+0xd4>)
    4b0a:	701a      	strb	r2, [r3, #0]
			return (0);
    4b0c:	2000      	movs	r0, #0
			break;
		}
	}
	mode_of_transfer = 0;
	return (true);
}
    4b0e:	b002      	add	sp, #8
    4b10:	bc04      	pop	{r2}
    4b12:	4690      	mov	r8, r2
    4b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
			b_run = getPacket(ptr_data, sno);
    4b16:	0021      	movs	r1, r4
    4b18:	0030      	movs	r0, r6
    4b1a:	47c0      	blx	r8
			if (error_timeout) { // Test for timeout in usart_getc
    4b1c:	4b14      	ldr	r3, [pc, #80]	; (4b70 <usart_getdata_xmd+0xd4>)
    4b1e:	781b      	ldrb	r3, [r3, #0]
    4b20:	2b00      	cmp	r3, #0
    4b22:	d112      	bne.n	4b4a <usart_getdata_xmd+0xae>
			if (b_run == true) {
    4b24:	2801      	cmp	r0, #1
    4b26:	d015      	beq.n	4b54 <usart_getdata_xmd+0xb8>
	while (b_run != false) {
    4b28:	2800      	cmp	r0, #0
    4b2a:	d009      	beq.n	4b40 <usart_getdata_xmd+0xa4>
		c = (char) usart_getc();
    4b2c:	47b8      	blx	r7
		if (error_timeout) { // Test for timeout in usart_getc
    4b2e:	782b      	ldrb	r3, [r5, #0]
    4b30:	2b00      	cmp	r3, #0
    4b32:	d1e8      	bne.n	4b06 <usart_getdata_xmd+0x6a>
		switch (c) {
    4b34:	23ff      	movs	r3, #255	; 0xff
    4b36:	4018      	ands	r0, r3
    4b38:	2801      	cmp	r0, #1
    4b3a:	d0ec      	beq.n	4b16 <usart_getdata_xmd+0x7a>
    4b3c:	2804      	cmp	r0, #4
    4b3e:	d00d      	beq.n	4b5c <usart_getdata_xmd+0xc0>
	mode_of_transfer = 0;
    4b40:	2200      	movs	r2, #0
    4b42:	4b0c      	ldr	r3, [pc, #48]	; (4b74 <usart_getdata_xmd+0xd8>)
    4b44:	701a      	strb	r2, [r3, #0]
	return (true);
    4b46:	2001      	movs	r0, #1
    4b48:	e7e1      	b.n	4b0e <usart_getdata_xmd+0x72>
				error_timeout = 0;
    4b4a:	2200      	movs	r2, #0
    4b4c:	4b08      	ldr	r3, [pc, #32]	; (4b70 <usart_getdata_xmd+0xd4>)
    4b4e:	701a      	strb	r2, [r3, #0]
				return (0);
    4b50:	2000      	movs	r0, #0
    4b52:	e7dc      	b.n	4b0e <usart_getdata_xmd+0x72>
				++sno;
    4b54:	3401      	adds	r4, #1
    4b56:	b2e4      	uxtb	r4, r4
				ptr_data += PKTLEN_128;
    4b58:	3680      	adds	r6, #128	; 0x80
    4b5a:	e7e7      	b.n	4b2c <usart_getdata_xmd+0x90>
			usart_putc(ACK);
    4b5c:	2006      	movs	r0, #6
    4b5e:	4b06      	ldr	r3, [pc, #24]	; (4b78 <usart_getdata_xmd+0xdc>)
    4b60:	4798      	blx	r3
    4b62:	e7ed      	b.n	4b40 <usart_getdata_xmd+0xa4>
			return (0);
    4b64:	2000      	movs	r0, #0
    4b66:	e7d2      	b.n	4b0e <usart_getdata_xmd+0x72>
    4b68:	00001cf1 	.word	0x00001cf1
    4b6c:	00004b8d 	.word	0x00004b8d
    4b70:	20000c68 	.word	0x20000c68
    4b74:	20000c69 	.word	0x20000c69
    4b78:	0000475d 	.word	0x0000475d
    4b7c:	00004775 	.word	0x00004775
    4b80:	20000bae 	.word	0x20000bae
    4b84:	00004785 	.word	0x00004785
    4b88:	000048c9 	.word	0x000048c9

00004b8c <__udivsi3>:
    4b8c:	2200      	movs	r2, #0
    4b8e:	0843      	lsrs	r3, r0, #1
    4b90:	428b      	cmp	r3, r1
    4b92:	d374      	bcc.n	4c7e <__udivsi3+0xf2>
    4b94:	0903      	lsrs	r3, r0, #4
    4b96:	428b      	cmp	r3, r1
    4b98:	d35f      	bcc.n	4c5a <__udivsi3+0xce>
    4b9a:	0a03      	lsrs	r3, r0, #8
    4b9c:	428b      	cmp	r3, r1
    4b9e:	d344      	bcc.n	4c2a <__udivsi3+0x9e>
    4ba0:	0b03      	lsrs	r3, r0, #12
    4ba2:	428b      	cmp	r3, r1
    4ba4:	d328      	bcc.n	4bf8 <__udivsi3+0x6c>
    4ba6:	0c03      	lsrs	r3, r0, #16
    4ba8:	428b      	cmp	r3, r1
    4baa:	d30d      	bcc.n	4bc8 <__udivsi3+0x3c>
    4bac:	22ff      	movs	r2, #255	; 0xff
    4bae:	0209      	lsls	r1, r1, #8
    4bb0:	ba12      	rev	r2, r2
    4bb2:	0c03      	lsrs	r3, r0, #16
    4bb4:	428b      	cmp	r3, r1
    4bb6:	d302      	bcc.n	4bbe <__udivsi3+0x32>
    4bb8:	1212      	asrs	r2, r2, #8
    4bba:	0209      	lsls	r1, r1, #8
    4bbc:	d065      	beq.n	4c8a <__udivsi3+0xfe>
    4bbe:	0b03      	lsrs	r3, r0, #12
    4bc0:	428b      	cmp	r3, r1
    4bc2:	d319      	bcc.n	4bf8 <__udivsi3+0x6c>
    4bc4:	e000      	b.n	4bc8 <__udivsi3+0x3c>
    4bc6:	0a09      	lsrs	r1, r1, #8
    4bc8:	0bc3      	lsrs	r3, r0, #15
    4bca:	428b      	cmp	r3, r1
    4bcc:	d301      	bcc.n	4bd2 <__udivsi3+0x46>
    4bce:	03cb      	lsls	r3, r1, #15
    4bd0:	1ac0      	subs	r0, r0, r3
    4bd2:	4152      	adcs	r2, r2
    4bd4:	0b83      	lsrs	r3, r0, #14
    4bd6:	428b      	cmp	r3, r1
    4bd8:	d301      	bcc.n	4bde <__udivsi3+0x52>
    4bda:	038b      	lsls	r3, r1, #14
    4bdc:	1ac0      	subs	r0, r0, r3
    4bde:	4152      	adcs	r2, r2
    4be0:	0b43      	lsrs	r3, r0, #13
    4be2:	428b      	cmp	r3, r1
    4be4:	d301      	bcc.n	4bea <__udivsi3+0x5e>
    4be6:	034b      	lsls	r3, r1, #13
    4be8:	1ac0      	subs	r0, r0, r3
    4bea:	4152      	adcs	r2, r2
    4bec:	0b03      	lsrs	r3, r0, #12
    4bee:	428b      	cmp	r3, r1
    4bf0:	d301      	bcc.n	4bf6 <__udivsi3+0x6a>
    4bf2:	030b      	lsls	r3, r1, #12
    4bf4:	1ac0      	subs	r0, r0, r3
    4bf6:	4152      	adcs	r2, r2
    4bf8:	0ac3      	lsrs	r3, r0, #11
    4bfa:	428b      	cmp	r3, r1
    4bfc:	d301      	bcc.n	4c02 <__udivsi3+0x76>
    4bfe:	02cb      	lsls	r3, r1, #11
    4c00:	1ac0      	subs	r0, r0, r3
    4c02:	4152      	adcs	r2, r2
    4c04:	0a83      	lsrs	r3, r0, #10
    4c06:	428b      	cmp	r3, r1
    4c08:	d301      	bcc.n	4c0e <__udivsi3+0x82>
    4c0a:	028b      	lsls	r3, r1, #10
    4c0c:	1ac0      	subs	r0, r0, r3
    4c0e:	4152      	adcs	r2, r2
    4c10:	0a43      	lsrs	r3, r0, #9
    4c12:	428b      	cmp	r3, r1
    4c14:	d301      	bcc.n	4c1a <__udivsi3+0x8e>
    4c16:	024b      	lsls	r3, r1, #9
    4c18:	1ac0      	subs	r0, r0, r3
    4c1a:	4152      	adcs	r2, r2
    4c1c:	0a03      	lsrs	r3, r0, #8
    4c1e:	428b      	cmp	r3, r1
    4c20:	d301      	bcc.n	4c26 <__udivsi3+0x9a>
    4c22:	020b      	lsls	r3, r1, #8
    4c24:	1ac0      	subs	r0, r0, r3
    4c26:	4152      	adcs	r2, r2
    4c28:	d2cd      	bcs.n	4bc6 <__udivsi3+0x3a>
    4c2a:	09c3      	lsrs	r3, r0, #7
    4c2c:	428b      	cmp	r3, r1
    4c2e:	d301      	bcc.n	4c34 <__udivsi3+0xa8>
    4c30:	01cb      	lsls	r3, r1, #7
    4c32:	1ac0      	subs	r0, r0, r3
    4c34:	4152      	adcs	r2, r2
    4c36:	0983      	lsrs	r3, r0, #6
    4c38:	428b      	cmp	r3, r1
    4c3a:	d301      	bcc.n	4c40 <__udivsi3+0xb4>
    4c3c:	018b      	lsls	r3, r1, #6
    4c3e:	1ac0      	subs	r0, r0, r3
    4c40:	4152      	adcs	r2, r2
    4c42:	0943      	lsrs	r3, r0, #5
    4c44:	428b      	cmp	r3, r1
    4c46:	d301      	bcc.n	4c4c <__udivsi3+0xc0>
    4c48:	014b      	lsls	r3, r1, #5
    4c4a:	1ac0      	subs	r0, r0, r3
    4c4c:	4152      	adcs	r2, r2
    4c4e:	0903      	lsrs	r3, r0, #4
    4c50:	428b      	cmp	r3, r1
    4c52:	d301      	bcc.n	4c58 <__udivsi3+0xcc>
    4c54:	010b      	lsls	r3, r1, #4
    4c56:	1ac0      	subs	r0, r0, r3
    4c58:	4152      	adcs	r2, r2
    4c5a:	08c3      	lsrs	r3, r0, #3
    4c5c:	428b      	cmp	r3, r1
    4c5e:	d301      	bcc.n	4c64 <__udivsi3+0xd8>
    4c60:	00cb      	lsls	r3, r1, #3
    4c62:	1ac0      	subs	r0, r0, r3
    4c64:	4152      	adcs	r2, r2
    4c66:	0883      	lsrs	r3, r0, #2
    4c68:	428b      	cmp	r3, r1
    4c6a:	d301      	bcc.n	4c70 <__udivsi3+0xe4>
    4c6c:	008b      	lsls	r3, r1, #2
    4c6e:	1ac0      	subs	r0, r0, r3
    4c70:	4152      	adcs	r2, r2
    4c72:	0843      	lsrs	r3, r0, #1
    4c74:	428b      	cmp	r3, r1
    4c76:	d301      	bcc.n	4c7c <__udivsi3+0xf0>
    4c78:	004b      	lsls	r3, r1, #1
    4c7a:	1ac0      	subs	r0, r0, r3
    4c7c:	4152      	adcs	r2, r2
    4c7e:	1a41      	subs	r1, r0, r1
    4c80:	d200      	bcs.n	4c84 <__udivsi3+0xf8>
    4c82:	4601      	mov	r1, r0
    4c84:	4152      	adcs	r2, r2
    4c86:	4610      	mov	r0, r2
    4c88:	4770      	bx	lr
    4c8a:	e7ff      	b.n	4c8c <__udivsi3+0x100>
    4c8c:	b501      	push	{r0, lr}
    4c8e:	2000      	movs	r0, #0
    4c90:	f000 f8f0 	bl	4e74 <__aeabi_idiv0>
    4c94:	bd02      	pop	{r1, pc}
    4c96:	46c0      	nop			; (mov r8, r8)

00004c98 <__aeabi_uidivmod>:
    4c98:	2900      	cmp	r1, #0
    4c9a:	d0f7      	beq.n	4c8c <__udivsi3+0x100>
    4c9c:	e776      	b.n	4b8c <__udivsi3>
    4c9e:	4770      	bx	lr

00004ca0 <__divsi3>:
    4ca0:	4603      	mov	r3, r0
    4ca2:	430b      	orrs	r3, r1
    4ca4:	d47f      	bmi.n	4da6 <__divsi3+0x106>
    4ca6:	2200      	movs	r2, #0
    4ca8:	0843      	lsrs	r3, r0, #1
    4caa:	428b      	cmp	r3, r1
    4cac:	d374      	bcc.n	4d98 <__divsi3+0xf8>
    4cae:	0903      	lsrs	r3, r0, #4
    4cb0:	428b      	cmp	r3, r1
    4cb2:	d35f      	bcc.n	4d74 <__divsi3+0xd4>
    4cb4:	0a03      	lsrs	r3, r0, #8
    4cb6:	428b      	cmp	r3, r1
    4cb8:	d344      	bcc.n	4d44 <__divsi3+0xa4>
    4cba:	0b03      	lsrs	r3, r0, #12
    4cbc:	428b      	cmp	r3, r1
    4cbe:	d328      	bcc.n	4d12 <__divsi3+0x72>
    4cc0:	0c03      	lsrs	r3, r0, #16
    4cc2:	428b      	cmp	r3, r1
    4cc4:	d30d      	bcc.n	4ce2 <__divsi3+0x42>
    4cc6:	22ff      	movs	r2, #255	; 0xff
    4cc8:	0209      	lsls	r1, r1, #8
    4cca:	ba12      	rev	r2, r2
    4ccc:	0c03      	lsrs	r3, r0, #16
    4cce:	428b      	cmp	r3, r1
    4cd0:	d302      	bcc.n	4cd8 <__divsi3+0x38>
    4cd2:	1212      	asrs	r2, r2, #8
    4cd4:	0209      	lsls	r1, r1, #8
    4cd6:	d065      	beq.n	4da4 <__divsi3+0x104>
    4cd8:	0b03      	lsrs	r3, r0, #12
    4cda:	428b      	cmp	r3, r1
    4cdc:	d319      	bcc.n	4d12 <__divsi3+0x72>
    4cde:	e000      	b.n	4ce2 <__divsi3+0x42>
    4ce0:	0a09      	lsrs	r1, r1, #8
    4ce2:	0bc3      	lsrs	r3, r0, #15
    4ce4:	428b      	cmp	r3, r1
    4ce6:	d301      	bcc.n	4cec <__divsi3+0x4c>
    4ce8:	03cb      	lsls	r3, r1, #15
    4cea:	1ac0      	subs	r0, r0, r3
    4cec:	4152      	adcs	r2, r2
    4cee:	0b83      	lsrs	r3, r0, #14
    4cf0:	428b      	cmp	r3, r1
    4cf2:	d301      	bcc.n	4cf8 <__divsi3+0x58>
    4cf4:	038b      	lsls	r3, r1, #14
    4cf6:	1ac0      	subs	r0, r0, r3
    4cf8:	4152      	adcs	r2, r2
    4cfa:	0b43      	lsrs	r3, r0, #13
    4cfc:	428b      	cmp	r3, r1
    4cfe:	d301      	bcc.n	4d04 <__divsi3+0x64>
    4d00:	034b      	lsls	r3, r1, #13
    4d02:	1ac0      	subs	r0, r0, r3
    4d04:	4152      	adcs	r2, r2
    4d06:	0b03      	lsrs	r3, r0, #12
    4d08:	428b      	cmp	r3, r1
    4d0a:	d301      	bcc.n	4d10 <__divsi3+0x70>
    4d0c:	030b      	lsls	r3, r1, #12
    4d0e:	1ac0      	subs	r0, r0, r3
    4d10:	4152      	adcs	r2, r2
    4d12:	0ac3      	lsrs	r3, r0, #11
    4d14:	428b      	cmp	r3, r1
    4d16:	d301      	bcc.n	4d1c <__divsi3+0x7c>
    4d18:	02cb      	lsls	r3, r1, #11
    4d1a:	1ac0      	subs	r0, r0, r3
    4d1c:	4152      	adcs	r2, r2
    4d1e:	0a83      	lsrs	r3, r0, #10
    4d20:	428b      	cmp	r3, r1
    4d22:	d301      	bcc.n	4d28 <__divsi3+0x88>
    4d24:	028b      	lsls	r3, r1, #10
    4d26:	1ac0      	subs	r0, r0, r3
    4d28:	4152      	adcs	r2, r2
    4d2a:	0a43      	lsrs	r3, r0, #9
    4d2c:	428b      	cmp	r3, r1
    4d2e:	d301      	bcc.n	4d34 <__divsi3+0x94>
    4d30:	024b      	lsls	r3, r1, #9
    4d32:	1ac0      	subs	r0, r0, r3
    4d34:	4152      	adcs	r2, r2
    4d36:	0a03      	lsrs	r3, r0, #8
    4d38:	428b      	cmp	r3, r1
    4d3a:	d301      	bcc.n	4d40 <__divsi3+0xa0>
    4d3c:	020b      	lsls	r3, r1, #8
    4d3e:	1ac0      	subs	r0, r0, r3
    4d40:	4152      	adcs	r2, r2
    4d42:	d2cd      	bcs.n	4ce0 <__divsi3+0x40>
    4d44:	09c3      	lsrs	r3, r0, #7
    4d46:	428b      	cmp	r3, r1
    4d48:	d301      	bcc.n	4d4e <__divsi3+0xae>
    4d4a:	01cb      	lsls	r3, r1, #7
    4d4c:	1ac0      	subs	r0, r0, r3
    4d4e:	4152      	adcs	r2, r2
    4d50:	0983      	lsrs	r3, r0, #6
    4d52:	428b      	cmp	r3, r1
    4d54:	d301      	bcc.n	4d5a <__divsi3+0xba>
    4d56:	018b      	lsls	r3, r1, #6
    4d58:	1ac0      	subs	r0, r0, r3
    4d5a:	4152      	adcs	r2, r2
    4d5c:	0943      	lsrs	r3, r0, #5
    4d5e:	428b      	cmp	r3, r1
    4d60:	d301      	bcc.n	4d66 <__divsi3+0xc6>
    4d62:	014b      	lsls	r3, r1, #5
    4d64:	1ac0      	subs	r0, r0, r3
    4d66:	4152      	adcs	r2, r2
    4d68:	0903      	lsrs	r3, r0, #4
    4d6a:	428b      	cmp	r3, r1
    4d6c:	d301      	bcc.n	4d72 <__divsi3+0xd2>
    4d6e:	010b      	lsls	r3, r1, #4
    4d70:	1ac0      	subs	r0, r0, r3
    4d72:	4152      	adcs	r2, r2
    4d74:	08c3      	lsrs	r3, r0, #3
    4d76:	428b      	cmp	r3, r1
    4d78:	d301      	bcc.n	4d7e <__divsi3+0xde>
    4d7a:	00cb      	lsls	r3, r1, #3
    4d7c:	1ac0      	subs	r0, r0, r3
    4d7e:	4152      	adcs	r2, r2
    4d80:	0883      	lsrs	r3, r0, #2
    4d82:	428b      	cmp	r3, r1
    4d84:	d301      	bcc.n	4d8a <__divsi3+0xea>
    4d86:	008b      	lsls	r3, r1, #2
    4d88:	1ac0      	subs	r0, r0, r3
    4d8a:	4152      	adcs	r2, r2
    4d8c:	0843      	lsrs	r3, r0, #1
    4d8e:	428b      	cmp	r3, r1
    4d90:	d301      	bcc.n	4d96 <__divsi3+0xf6>
    4d92:	004b      	lsls	r3, r1, #1
    4d94:	1ac0      	subs	r0, r0, r3
    4d96:	4152      	adcs	r2, r2
    4d98:	1a41      	subs	r1, r0, r1
    4d9a:	d200      	bcs.n	4d9e <__divsi3+0xfe>
    4d9c:	4601      	mov	r1, r0
    4d9e:	4152      	adcs	r2, r2
    4da0:	4610      	mov	r0, r2
    4da2:	4770      	bx	lr
    4da4:	e05d      	b.n	4e62 <__divsi3+0x1c2>
    4da6:	0fca      	lsrs	r2, r1, #31
    4da8:	d000      	beq.n	4dac <__divsi3+0x10c>
    4daa:	4249      	negs	r1, r1
    4dac:	1003      	asrs	r3, r0, #32
    4dae:	d300      	bcc.n	4db2 <__divsi3+0x112>
    4db0:	4240      	negs	r0, r0
    4db2:	4053      	eors	r3, r2
    4db4:	2200      	movs	r2, #0
    4db6:	469c      	mov	ip, r3
    4db8:	0903      	lsrs	r3, r0, #4
    4dba:	428b      	cmp	r3, r1
    4dbc:	d32d      	bcc.n	4e1a <__divsi3+0x17a>
    4dbe:	0a03      	lsrs	r3, r0, #8
    4dc0:	428b      	cmp	r3, r1
    4dc2:	d312      	bcc.n	4dea <__divsi3+0x14a>
    4dc4:	22fc      	movs	r2, #252	; 0xfc
    4dc6:	0189      	lsls	r1, r1, #6
    4dc8:	ba12      	rev	r2, r2
    4dca:	0a03      	lsrs	r3, r0, #8
    4dcc:	428b      	cmp	r3, r1
    4dce:	d30c      	bcc.n	4dea <__divsi3+0x14a>
    4dd0:	0189      	lsls	r1, r1, #6
    4dd2:	1192      	asrs	r2, r2, #6
    4dd4:	428b      	cmp	r3, r1
    4dd6:	d308      	bcc.n	4dea <__divsi3+0x14a>
    4dd8:	0189      	lsls	r1, r1, #6
    4dda:	1192      	asrs	r2, r2, #6
    4ddc:	428b      	cmp	r3, r1
    4dde:	d304      	bcc.n	4dea <__divsi3+0x14a>
    4de0:	0189      	lsls	r1, r1, #6
    4de2:	d03a      	beq.n	4e5a <__divsi3+0x1ba>
    4de4:	1192      	asrs	r2, r2, #6
    4de6:	e000      	b.n	4dea <__divsi3+0x14a>
    4de8:	0989      	lsrs	r1, r1, #6
    4dea:	09c3      	lsrs	r3, r0, #7
    4dec:	428b      	cmp	r3, r1
    4dee:	d301      	bcc.n	4df4 <__divsi3+0x154>
    4df0:	01cb      	lsls	r3, r1, #7
    4df2:	1ac0      	subs	r0, r0, r3
    4df4:	4152      	adcs	r2, r2
    4df6:	0983      	lsrs	r3, r0, #6
    4df8:	428b      	cmp	r3, r1
    4dfa:	d301      	bcc.n	4e00 <__divsi3+0x160>
    4dfc:	018b      	lsls	r3, r1, #6
    4dfe:	1ac0      	subs	r0, r0, r3
    4e00:	4152      	adcs	r2, r2
    4e02:	0943      	lsrs	r3, r0, #5
    4e04:	428b      	cmp	r3, r1
    4e06:	d301      	bcc.n	4e0c <__divsi3+0x16c>
    4e08:	014b      	lsls	r3, r1, #5
    4e0a:	1ac0      	subs	r0, r0, r3
    4e0c:	4152      	adcs	r2, r2
    4e0e:	0903      	lsrs	r3, r0, #4
    4e10:	428b      	cmp	r3, r1
    4e12:	d301      	bcc.n	4e18 <__divsi3+0x178>
    4e14:	010b      	lsls	r3, r1, #4
    4e16:	1ac0      	subs	r0, r0, r3
    4e18:	4152      	adcs	r2, r2
    4e1a:	08c3      	lsrs	r3, r0, #3
    4e1c:	428b      	cmp	r3, r1
    4e1e:	d301      	bcc.n	4e24 <__divsi3+0x184>
    4e20:	00cb      	lsls	r3, r1, #3
    4e22:	1ac0      	subs	r0, r0, r3
    4e24:	4152      	adcs	r2, r2
    4e26:	0883      	lsrs	r3, r0, #2
    4e28:	428b      	cmp	r3, r1
    4e2a:	d301      	bcc.n	4e30 <__divsi3+0x190>
    4e2c:	008b      	lsls	r3, r1, #2
    4e2e:	1ac0      	subs	r0, r0, r3
    4e30:	4152      	adcs	r2, r2
    4e32:	d2d9      	bcs.n	4de8 <__divsi3+0x148>
    4e34:	0843      	lsrs	r3, r0, #1
    4e36:	428b      	cmp	r3, r1
    4e38:	d301      	bcc.n	4e3e <__divsi3+0x19e>
    4e3a:	004b      	lsls	r3, r1, #1
    4e3c:	1ac0      	subs	r0, r0, r3
    4e3e:	4152      	adcs	r2, r2
    4e40:	1a41      	subs	r1, r0, r1
    4e42:	d200      	bcs.n	4e46 <__divsi3+0x1a6>
    4e44:	4601      	mov	r1, r0
    4e46:	4663      	mov	r3, ip
    4e48:	4152      	adcs	r2, r2
    4e4a:	105b      	asrs	r3, r3, #1
    4e4c:	4610      	mov	r0, r2
    4e4e:	d301      	bcc.n	4e54 <__divsi3+0x1b4>
    4e50:	4240      	negs	r0, r0
    4e52:	2b00      	cmp	r3, #0
    4e54:	d500      	bpl.n	4e58 <__divsi3+0x1b8>
    4e56:	4249      	negs	r1, r1
    4e58:	4770      	bx	lr
    4e5a:	4663      	mov	r3, ip
    4e5c:	105b      	asrs	r3, r3, #1
    4e5e:	d300      	bcc.n	4e62 <__divsi3+0x1c2>
    4e60:	4240      	negs	r0, r0
    4e62:	b501      	push	{r0, lr}
    4e64:	2000      	movs	r0, #0
    4e66:	f000 f805 	bl	4e74 <__aeabi_idiv0>
    4e6a:	bd02      	pop	{r1, pc}

00004e6c <__aeabi_idivmod>:
    4e6c:	2900      	cmp	r1, #0
    4e6e:	d0f8      	beq.n	4e62 <__divsi3+0x1c2>
    4e70:	e716      	b.n	4ca0 <__divsi3>
    4e72:	4770      	bx	lr

00004e74 <__aeabi_idiv0>:
    4e74:	4770      	bx	lr
    4e76:	46c0      	nop			; (mov r8, r8)

00004e78 <__ctzsi2>:
    4e78:	4241      	negs	r1, r0
    4e7a:	4008      	ands	r0, r1
    4e7c:	211c      	movs	r1, #28
    4e7e:	2301      	movs	r3, #1
    4e80:	041b      	lsls	r3, r3, #16
    4e82:	4298      	cmp	r0, r3
    4e84:	d301      	bcc.n	4e8a <__ctzsi2+0x12>
    4e86:	0c00      	lsrs	r0, r0, #16
    4e88:	3910      	subs	r1, #16
    4e8a:	0a1b      	lsrs	r3, r3, #8
    4e8c:	4298      	cmp	r0, r3
    4e8e:	d301      	bcc.n	4e94 <__ctzsi2+0x1c>
    4e90:	0a00      	lsrs	r0, r0, #8
    4e92:	3908      	subs	r1, #8
    4e94:	091b      	lsrs	r3, r3, #4
    4e96:	4298      	cmp	r0, r3
    4e98:	d301      	bcc.n	4e9e <__ctzsi2+0x26>
    4e9a:	0900      	lsrs	r0, r0, #4
    4e9c:	3904      	subs	r1, #4
    4e9e:	a202      	add	r2, pc, #8	; (adr r2, 4ea8 <__ctzsi2+0x30>)
    4ea0:	5c10      	ldrb	r0, [r2, r0]
    4ea2:	1a40      	subs	r0, r0, r1
    4ea4:	4770      	bx	lr
    4ea6:	46c0      	nop			; (mov r8, r8)
    4ea8:	1d1d1c1b 	.word	0x1d1d1c1b
    4eac:	1e1e1e1e 	.word	0x1e1e1e1e
    4eb0:	1f1f1f1f 	.word	0x1f1f1f1f
    4eb4:	1f1f1f1f 	.word	0x1f1f1f1f

00004eb8 <__aeabi_lmul>:
    4eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4eba:	46ce      	mov	lr, r9
    4ebc:	4647      	mov	r7, r8
    4ebe:	0415      	lsls	r5, r2, #16
    4ec0:	0c2d      	lsrs	r5, r5, #16
    4ec2:	002e      	movs	r6, r5
    4ec4:	b580      	push	{r7, lr}
    4ec6:	0407      	lsls	r7, r0, #16
    4ec8:	0c14      	lsrs	r4, r2, #16
    4eca:	0c3f      	lsrs	r7, r7, #16
    4ecc:	4699      	mov	r9, r3
    4ece:	0c03      	lsrs	r3, r0, #16
    4ed0:	437e      	muls	r6, r7
    4ed2:	435d      	muls	r5, r3
    4ed4:	4367      	muls	r7, r4
    4ed6:	4363      	muls	r3, r4
    4ed8:	197f      	adds	r7, r7, r5
    4eda:	0c34      	lsrs	r4, r6, #16
    4edc:	19e4      	adds	r4, r4, r7
    4ede:	469c      	mov	ip, r3
    4ee0:	42a5      	cmp	r5, r4
    4ee2:	d903      	bls.n	4eec <__aeabi_lmul+0x34>
    4ee4:	2380      	movs	r3, #128	; 0x80
    4ee6:	025b      	lsls	r3, r3, #9
    4ee8:	4698      	mov	r8, r3
    4eea:	44c4      	add	ip, r8
    4eec:	464b      	mov	r3, r9
    4eee:	4351      	muls	r1, r2
    4ef0:	4343      	muls	r3, r0
    4ef2:	0436      	lsls	r6, r6, #16
    4ef4:	0c36      	lsrs	r6, r6, #16
    4ef6:	0c25      	lsrs	r5, r4, #16
    4ef8:	0424      	lsls	r4, r4, #16
    4efa:	4465      	add	r5, ip
    4efc:	19a4      	adds	r4, r4, r6
    4efe:	1859      	adds	r1, r3, r1
    4f00:	1949      	adds	r1, r1, r5
    4f02:	0020      	movs	r0, r4
    4f04:	bc0c      	pop	{r2, r3}
    4f06:	4690      	mov	r8, r2
    4f08:	4699      	mov	r9, r3
    4f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004f0c <__libc_init_array>:
    4f0c:	b570      	push	{r4, r5, r6, lr}
    4f0e:	2600      	movs	r6, #0
    4f10:	4d0c      	ldr	r5, [pc, #48]	; (4f44 <__libc_init_array+0x38>)
    4f12:	4c0d      	ldr	r4, [pc, #52]	; (4f48 <__libc_init_array+0x3c>)
    4f14:	1b64      	subs	r4, r4, r5
    4f16:	10a4      	asrs	r4, r4, #2
    4f18:	42a6      	cmp	r6, r4
    4f1a:	d109      	bne.n	4f30 <__libc_init_array+0x24>
    4f1c:	2600      	movs	r6, #0
    4f1e:	f000 f8a3 	bl	5068 <_init>
    4f22:	4d0a      	ldr	r5, [pc, #40]	; (4f4c <__libc_init_array+0x40>)
    4f24:	4c0a      	ldr	r4, [pc, #40]	; (4f50 <__libc_init_array+0x44>)
    4f26:	1b64      	subs	r4, r4, r5
    4f28:	10a4      	asrs	r4, r4, #2
    4f2a:	42a6      	cmp	r6, r4
    4f2c:	d105      	bne.n	4f3a <__libc_init_array+0x2e>
    4f2e:	bd70      	pop	{r4, r5, r6, pc}
    4f30:	00b3      	lsls	r3, r6, #2
    4f32:	58eb      	ldr	r3, [r5, r3]
    4f34:	4798      	blx	r3
    4f36:	3601      	adds	r6, #1
    4f38:	e7ee      	b.n	4f18 <__libc_init_array+0xc>
    4f3a:	00b3      	lsls	r3, r6, #2
    4f3c:	58eb      	ldr	r3, [r5, r3]
    4f3e:	4798      	blx	r3
    4f40:	3601      	adds	r6, #1
    4f42:	e7f2      	b.n	4f2a <__libc_init_array+0x1e>
    4f44:	00005074 	.word	0x00005074
    4f48:	00005074 	.word	0x00005074
    4f4c:	00005074 	.word	0x00005074
    4f50:	00005078 	.word	0x00005078

00004f54 <memcpy>:
    4f54:	2300      	movs	r3, #0
    4f56:	b510      	push	{r4, lr}
    4f58:	429a      	cmp	r2, r3
    4f5a:	d100      	bne.n	4f5e <memcpy+0xa>
    4f5c:	bd10      	pop	{r4, pc}
    4f5e:	5ccc      	ldrb	r4, [r1, r3]
    4f60:	54c4      	strb	r4, [r0, r3]
    4f62:	3301      	adds	r3, #1
    4f64:	e7f8      	b.n	4f58 <memcpy+0x4>

00004f66 <memset>:
    4f66:	0003      	movs	r3, r0
    4f68:	1882      	adds	r2, r0, r2
    4f6a:	4293      	cmp	r3, r2
    4f6c:	d100      	bne.n	4f70 <memset+0xa>
    4f6e:	4770      	bx	lr
    4f70:	7019      	strb	r1, [r3, #0]
    4f72:	3301      	adds	r3, #1
    4f74:	e7f9      	b.n	4f6a <memset+0x4>
    4f76:	0000      	movs	r0, r0
    4f78:	42000800 	.word	0x42000800
    4f7c:	42000c00 	.word	0x42000c00
    4f80:	42001000 	.word	0x42001000
    4f84:	42001400 	.word	0x42001400
    4f88:	42001800 	.word	0x42001800
    4f8c:	42001c00 	.word	0x42001c00
    4f90:	00001d02 	.word	0x00001d02
    4f94:	00001cfe 	.word	0x00001cfe
    4f98:	00001cfe 	.word	0x00001cfe
    4f9c:	00001d64 	.word	0x00001d64
    4fa0:	00001d64 	.word	0x00001d64
    4fa4:	00001d16 	.word	0x00001d16
    4fa8:	00001d08 	.word	0x00001d08
    4fac:	00001d1c 	.word	0x00001d1c
    4fb0:	00001d52 	.word	0x00001d52
    4fb4:	00001e6c 	.word	0x00001e6c
    4fb8:	00001e4c 	.word	0x00001e4c
    4fbc:	00001e4c 	.word	0x00001e4c
    4fc0:	00001ed8 	.word	0x00001ed8
    4fc4:	00001e5e 	.word	0x00001e5e
    4fc8:	00001e7a 	.word	0x00001e7a
    4fcc:	00001e50 	.word	0x00001e50
    4fd0:	00001e88 	.word	0x00001e88
    4fd4:	00001ec8 	.word	0x00001ec8
    4fd8:	000032f0 	.word	0x000032f0
    4fdc:	000032fe 	.word	0x000032fe
    4fe0:	00003398 	.word	0x00003398
    4fe4:	00003438 	.word	0x00003438
    4fe8:	0000349c 	.word	0x0000349c

00004fec <_usb_device_irq_bits>:
    4fec:	00080004 00800070 01000001 00000200     ....p...........

00004ffc <_usb_endpoint_irq_bits>:
    4ffc:	60100c03                                ...`

00005000 <RomBOOT_Version>:
    5000:	36312e32 00000000 00000d0a 00000076     2.16........v...
    5010:	00000020 206e754a 32203620 00303230      ...Jun  6 2020.
    5020:	303a3131 31353a35 00000000 0000003e     11:05:51....>...

00005030 <uart_if>:
    5030:	0000475d 00004785 00004775 000047d5     ]G...G..uG...G..
    5040:	000047f5 00004945 00004a9d              .G..EI...J..

0000504c <usbcdc_if>:
    504c:	00000a25 00000719 00000639 00000b05     %.......9.......
    505c:	000007f9 00000b05 000008c1              ............

00005068 <_init>:
    5068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    506a:	46c0      	nop			; (mov r8, r8)
    506c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    506e:	bc08      	pop	{r3}
    5070:	469e      	mov	lr, r3
    5072:	4770      	bx	lr

00005074 <__init_array_start>:
    5074:	000000dd 	.word	0x000000dd

00005078 <_fini>:
    5078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    507a:	46c0      	nop			; (mov r8, r8)
    507c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    507e:	bc08      	pop	{r3}
    5080:	469e      	mov	lr, r3
    5082:	4770      	bx	lr

00005084 <__fini_array_start>:
    5084:	000000b5 	.word	0x000000b5
