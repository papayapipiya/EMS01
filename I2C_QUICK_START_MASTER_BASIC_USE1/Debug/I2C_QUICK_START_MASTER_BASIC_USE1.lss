
I2C_QUICK_START_MASTER_BASIC_USE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a94  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000010  20000000  00002a94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004c  20000010  00002aa4  00020010  2**2
                  ALLOC
  3 .stack        00002004  2000005c  00002af0  00020010  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
  6 .debug_info   00015126  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002190  00000000  00000000  000351b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000308  00000000  00000000  00037347  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000002a0  00000000  00000000  0003764f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0001cc1d  00000000  00000000  000378ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00007b76  00000000  00000000  0005450c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0009d84c  00000000  00000000  0005c082  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000008b8  00000000  00000000  000f98d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000318c  00000000  00000000  000fa188  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	60 20 00 20 01 0e 00 00 fd 0d 00 00 fd 0d 00 00     ` . ............
	...
      2c:	fd 0d 00 00 00 00 00 00 00 00 00 00 fd 0d 00 00     ................
      3c:	fd 0d 00 00 fd 0d 00 00 fd 0d 00 00 fd 0d 00 00     ................
      4c:	fd 0d 00 00 fd 0d 00 00 fd 0d 00 00 fd 0d 00 00     ................
      5c:	fd 0d 00 00 fd 0d 00 00 fd 0d 00 00 fd 0d 00 00     ................
      6c:	fd 0d 00 00 fd 0d 00 00 fd 0d 00 00 fd 0d 00 00     ................
      7c:	fd 0d 00 00 fd 0d 00 00 fd 0d 00 00 fd 0d 00 00     ................
      8c:	fd 0d 00 00 fd 0d 00 00 fd 0d 00 00 fd 0d 00 00     ................
      9c:	fd 0d 00 00 fd 0d 00 00 fd 0d 00 00 fd 0d 00 00     ................
      ac:	fd 0d 00 00 fd 0d 00 00 fd 0d 00 00 fd 0d 00 00     ................

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	20000010 	.word	0x20000010
      dc:	00000000 	.word	0x00000000
      e0:	00002a94 	.word	0x00002a94

000000e4 <frame_dummy>:
      e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e6:	b510      	push	{r4, lr}
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd10      	pop	{r4, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	20000014 	.word	0x20000014
     110:	00002a94 	.word	0x00002a94
     114:	00002a94 	.word	0x00002a94
     118:	00000000 	.word	0x00000000

0000011c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     11c:	4b0c      	ldr	r3, [pc, #48]	; (150 <cpu_irq_enter_critical+0x34>)
     11e:	681b      	ldr	r3, [r3, #0]
     120:	2b00      	cmp	r3, #0
     122:	d106      	bne.n	132 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     124:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     128:	2b00      	cmp	r3, #0
     12a:	d007      	beq.n	13c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     12c:	2200      	movs	r2, #0
     12e:	4b09      	ldr	r3, [pc, #36]	; (154 <cpu_irq_enter_critical+0x38>)
     130:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     132:	4a07      	ldr	r2, [pc, #28]	; (150 <cpu_irq_enter_critical+0x34>)
     134:	6813      	ldr	r3, [r2, #0]
     136:	3301      	adds	r3, #1
     138:	6013      	str	r3, [r2, #0]
}
     13a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     13c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     13e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     142:	2200      	movs	r2, #0
     144:	4b04      	ldr	r3, [pc, #16]	; (158 <cpu_irq_enter_critical+0x3c>)
     146:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     148:	3201      	adds	r2, #1
     14a:	4b02      	ldr	r3, [pc, #8]	; (154 <cpu_irq_enter_critical+0x38>)
     14c:	701a      	strb	r2, [r3, #0]
     14e:	e7f0      	b.n	132 <cpu_irq_enter_critical+0x16>
     150:	2000002c 	.word	0x2000002c
     154:	20000030 	.word	0x20000030
     158:	20000000 	.word	0x20000000

0000015c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     15c:	4b08      	ldr	r3, [pc, #32]	; (180 <cpu_irq_leave_critical+0x24>)
     15e:	681a      	ldr	r2, [r3, #0]
     160:	3a01      	subs	r2, #1
     162:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     164:	681b      	ldr	r3, [r3, #0]
     166:	2b00      	cmp	r3, #0
     168:	d109      	bne.n	17e <cpu_irq_leave_critical+0x22>
     16a:	4b06      	ldr	r3, [pc, #24]	; (184 <cpu_irq_leave_critical+0x28>)
     16c:	781b      	ldrb	r3, [r3, #0]
     16e:	2b00      	cmp	r3, #0
     170:	d005      	beq.n	17e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     172:	2201      	movs	r2, #1
     174:	4b04      	ldr	r3, [pc, #16]	; (188 <cpu_irq_leave_critical+0x2c>)
     176:	701a      	strb	r2, [r3, #0]
     178:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     17c:	b662      	cpsie	i
	}
}
     17e:	4770      	bx	lr
     180:	2000002c 	.word	0x2000002c
     184:	20000030 	.word	0x20000030
     188:	20000000 	.word	0x20000000

0000018c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     18c:	b5f0      	push	{r4, r5, r6, r7, lr}
     18e:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     190:	ac01      	add	r4, sp, #4
     192:	2501      	movs	r5, #1
     194:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     196:	2700      	movs	r7, #0
     198:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     19a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     19c:	0021      	movs	r1, r4
     19e:	200f      	movs	r0, #15
     1a0:	4e06      	ldr	r6, [pc, #24]	; (1bc <system_board_init+0x30>)
     1a2:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     1a4:	2280      	movs	r2, #128	; 0x80
     1a6:	0212      	lsls	r2, r2, #8
     1a8:	2382      	movs	r3, #130	; 0x82
     1aa:	05db      	lsls	r3, r3, #23
     1ac:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     1ae:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     1b0:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     1b2:	0021      	movs	r1, r4
     1b4:	201c      	movs	r0, #28
     1b6:	47b0      	blx	r6
}
     1b8:	b003      	add	sp, #12
     1ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1bc:	000001c1 	.word	0x000001c1

000001c0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     1c0:	b500      	push	{lr}
     1c2:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     1c4:	ab01      	add	r3, sp, #4
     1c6:	2280      	movs	r2, #128	; 0x80
     1c8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     1ca:	780a      	ldrb	r2, [r1, #0]
     1cc:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     1ce:	784a      	ldrb	r2, [r1, #1]
     1d0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     1d2:	788a      	ldrb	r2, [r1, #2]
     1d4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     1d6:	0019      	movs	r1, r3
     1d8:	4b01      	ldr	r3, [pc, #4]	; (1e0 <port_pin_set_config+0x20>)
     1da:	4798      	blx	r3
}
     1dc:	b003      	add	sp, #12
     1de:	bd00      	pop	{pc}
     1e0:	00000da1 	.word	0x00000da1

000001e4 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     1e4:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     1e6:	2207      	movs	r2, #7
     1e8:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     1ea:	421a      	tst	r2, r3
     1ec:	d1fc      	bne.n	1e8 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     1ee:	4770      	bx	lr

000001f0 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
     1f2:	46d6      	mov	lr, sl
     1f4:	464f      	mov	r7, r9
     1f6:	4646      	mov	r6, r8
     1f8:	b5c0      	push	{r6, r7, lr}
     1fa:	b08a      	sub	sp, #40	; 0x28
     1fc:	0006      	movs	r6, r0
     1fe:	000f      	movs	r7, r1
     200:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     202:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     204:	0008      	movs	r0, r1
     206:	4b99      	ldr	r3, [pc, #612]	; (46c <i2c_master_init+0x27c>)
     208:	4798      	blx	r3
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#elif (SAMC21)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
     20a:	1c45      	adds	r5, r0, #1
	if (sercom_index == 5) {
     20c:	2805      	cmp	r0, #5
     20e:	d01e      	beq.n	24e <i2c_master_init+0x5e>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     210:	3013      	adds	r0, #19
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     212:	4a97      	ldr	r2, [pc, #604]	; (470 <i2c_master_init+0x280>)
     214:	69d1      	ldr	r1, [r2, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     216:	2301      	movs	r3, #1
     218:	40ab      	lsls	r3, r5
     21a:	430b      	orrs	r3, r1
     21c:	61d3      	str	r3, [r2, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     21e:	a909      	add	r1, sp, #36	; 0x24
     220:	7b23      	ldrb	r3, [r4, #12]
     222:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     224:	b2c5      	uxtb	r5, r0
     226:	0028      	movs	r0, r5
     228:	4b92      	ldr	r3, [pc, #584]	; (474 <i2c_master_init+0x284>)
     22a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     22c:	0028      	movs	r0, r5
     22e:	4b92      	ldr	r3, [pc, #584]	; (478 <i2c_master_init+0x288>)
     230:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     232:	7b20      	ldrb	r0, [r4, #12]
     234:	2100      	movs	r1, #0
     236:	4b91      	ldr	r3, [pc, #580]	; (47c <i2c_master_init+0x28c>)
     238:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     23a:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
     23c:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     23e:	079b      	lsls	r3, r3, #30
     240:	d507      	bpl.n	252 <i2c_master_init+0x62>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     242:	b00a      	add	sp, #40	; 0x28
     244:	bc1c      	pop	{r2, r3, r4}
     246:	4690      	mov	r8, r2
     248:	4699      	mov	r9, r3
     24a:	46a2      	mov	sl, r4
     24c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index   = SERCOM5_GCLK_ID_CORE;
     24e:	2019      	movs	r0, #25
     250:	e7df      	b.n	212 <i2c_master_init+0x22>
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     252:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
     254:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     256:	07db      	lsls	r3, r3, #31
     258:	d4f3      	bmi.n	242 <i2c_master_init+0x52>
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     25a:	2314      	movs	r3, #20
     25c:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     25e:	6833      	ldr	r3, [r6, #0]
     260:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     262:	0018      	movs	r0, r3
     264:	4b81      	ldr	r3, [pc, #516]	; (46c <i2c_master_init+0x27c>)
     266:	4798      	blx	r3
     268:	0005      	movs	r5, r0
     26a:	2380      	movs	r3, #128	; 0x80
     26c:	aa08      	add	r2, sp, #32
     26e:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     270:	2300      	movs	r3, #0
     272:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     274:	2201      	movs	r2, #1
     276:	a908      	add	r1, sp, #32
     278:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
     27a:	70cb      	strb	r3, [r1, #3]
	uint32_t pad0 = config->pinmux_pad0;
     27c:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
     27e:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     280:	2800      	cmp	r0, #0
     282:	d100      	bne.n	286 <i2c_master_init+0x96>
     284:	e0ae      	b.n	3e4 <i2c_master_init+0x1f4>
	pin_conf.mux_position = pad0 & 0xFFFF;
     286:	ab08      	add	r3, sp, #32
     288:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     28a:	2302      	movs	r3, #2
     28c:	aa08      	add	r2, sp, #32
     28e:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     290:	0c00      	lsrs	r0, r0, #16
     292:	b2c0      	uxtb	r0, r0
     294:	0011      	movs	r1, r2
     296:	4b7a      	ldr	r3, [pc, #488]	; (480 <i2c_master_init+0x290>)
     298:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     29a:	2f00      	cmp	r7, #0
     29c:	d100      	bne.n	2a0 <i2c_master_init+0xb0>
     29e:	e0a6      	b.n	3ee <i2c_master_init+0x1fe>
	pin_conf.mux_position = pad1 & 0xFFFF;
     2a0:	ab08      	add	r3, sp, #32
     2a2:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     2a4:	2302      	movs	r3, #2
     2a6:	aa08      	add	r2, sp, #32
     2a8:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     2aa:	0c3f      	lsrs	r7, r7, #16
     2ac:	b2f8      	uxtb	r0, r7
     2ae:	0011      	movs	r1, r2
     2b0:	4b73      	ldr	r3, [pc, #460]	; (480 <i2c_master_init+0x290>)
     2b2:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     2b4:	8aa3      	ldrh	r3, [r4, #20]
     2b6:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
     2b8:	8ae3      	ldrh	r3, [r4, #22]
     2ba:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     2bc:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     2be:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     2c0:	2b00      	cmp	r3, #0
     2c2:	d104      	bne.n	2ce <i2c_master_init+0xde>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     2c4:	4b6f      	ldr	r3, [pc, #444]	; (484 <i2c_master_init+0x294>)
     2c6:	789b      	ldrb	r3, [r3, #2]
     2c8:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     2ca:	0fdb      	lsrs	r3, r3, #31
     2cc:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     2ce:	68a1      	ldr	r1, [r4, #8]
     2d0:	6923      	ldr	r3, [r4, #16]
     2d2:	430b      	orrs	r3, r1
     2d4:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     2d6:	2224      	movs	r2, #36	; 0x24
     2d8:	5ca2      	ldrb	r2, [r4, r2]
     2da:	2a00      	cmp	r2, #0
     2dc:	d002      	beq.n	2e4 <i2c_master_init+0xf4>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     2de:	2280      	movs	r2, #128	; 0x80
     2e0:	05d2      	lsls	r2, r2, #23
     2e2:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     2e4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     2e6:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     2e8:	222c      	movs	r2, #44	; 0x2c
     2ea:	5ca2      	ldrb	r2, [r4, r2]
     2ec:	2a00      	cmp	r2, #0
     2ee:	d103      	bne.n	2f8 <i2c_master_init+0x108>
     2f0:	2280      	movs	r2, #128	; 0x80
     2f2:	0492      	lsls	r2, r2, #18
     2f4:	4291      	cmp	r1, r2
     2f6:	d102      	bne.n	2fe <i2c_master_init+0x10e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     2f8:	2280      	movs	r2, #128	; 0x80
     2fa:	0512      	lsls	r2, r2, #20
     2fc:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     2fe:	222d      	movs	r2, #45	; 0x2d
     300:	5ca2      	ldrb	r2, [r4, r2]
     302:	2a00      	cmp	r2, #0
     304:	d002      	beq.n	30c <i2c_master_init+0x11c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     306:	2280      	movs	r2, #128	; 0x80
     308:	0412      	lsls	r2, r2, #16
     30a:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     30c:	222e      	movs	r2, #46	; 0x2e
     30e:	5ca2      	ldrb	r2, [r4, r2]
     310:	2a00      	cmp	r2, #0
     312:	d002      	beq.n	31a <i2c_master_init+0x12a>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     314:	2280      	movs	r2, #128	; 0x80
     316:	03d2      	lsls	r2, r2, #15
     318:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     31a:	4642      	mov	r2, r8
     31c:	6812      	ldr	r2, [r2, #0]
     31e:	4313      	orrs	r3, r2
     320:	4642      	mov	r2, r8
     322:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     324:	2380      	movs	r3, #128	; 0x80
     326:	005b      	lsls	r3, r3, #1
     328:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     32a:	3513      	adds	r5, #19
     32c:	b2e8      	uxtb	r0, r5
     32e:	4b56      	ldr	r3, [pc, #344]	; (488 <i2c_master_init+0x298>)
     330:	4798      	blx	r3
     332:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     334:	23fa      	movs	r3, #250	; 0xfa
     336:	009b      	lsls	r3, r3, #2
     338:	6822      	ldr	r2, [r4, #0]
     33a:	435a      	muls	r2, r3
     33c:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     33e:	6863      	ldr	r3, [r4, #4]
     340:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
     342:	4d52      	ldr	r5, [pc, #328]	; (48c <i2c_master_init+0x29c>)
     344:	47a8      	blx	r5
     346:	9000      	str	r0, [sp, #0]
     348:	9101      	str	r1, [sp, #4]
     34a:	464b      	mov	r3, r9
     34c:	0058      	lsls	r0, r3, #1
     34e:	47a8      	blx	r5
     350:	9002      	str	r0, [sp, #8]
     352:	9103      	str	r1, [sp, #12]
     354:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     356:	47a8      	blx	r5
     358:	9004      	str	r0, [sp, #16]
     35a:	9105      	str	r1, [sp, #20]
     35c:	4f4c      	ldr	r7, [pc, #304]	; (490 <i2c_master_init+0x2a0>)
     35e:	4a4d      	ldr	r2, [pc, #308]	; (494 <i2c_master_init+0x2a4>)
     360:	4b4d      	ldr	r3, [pc, #308]	; (498 <i2c_master_init+0x2a8>)
     362:	9800      	ldr	r0, [sp, #0]
     364:	9901      	ldr	r1, [sp, #4]
     366:	47b8      	blx	r7
     368:	0002      	movs	r2, r0
     36a:	000b      	movs	r3, r1
     36c:	9804      	ldr	r0, [sp, #16]
     36e:	9905      	ldr	r1, [sp, #20]
     370:	47b8      	blx	r7
     372:	4e4a      	ldr	r6, [pc, #296]	; (49c <i2c_master_init+0x2ac>)
     374:	2200      	movs	r2, #0
     376:	4b4a      	ldr	r3, [pc, #296]	; (4a0 <i2c_master_init+0x2b0>)
     378:	47b0      	blx	r6
     37a:	9004      	str	r0, [sp, #16]
     37c:	9105      	str	r1, [sp, #20]
     37e:	4648      	mov	r0, r9
     380:	47a8      	blx	r5
     382:	0002      	movs	r2, r0
     384:	000b      	movs	r3, r1
     386:	9804      	ldr	r0, [sp, #16]
     388:	9905      	ldr	r1, [sp, #20]
     38a:	47b8      	blx	r7
     38c:	0002      	movs	r2, r0
     38e:	000b      	movs	r3, r1
     390:	4d44      	ldr	r5, [pc, #272]	; (4a4 <i2c_master_init+0x2b4>)
     392:	9800      	ldr	r0, [sp, #0]
     394:	9901      	ldr	r1, [sp, #4]
     396:	47a8      	blx	r5
     398:	9a02      	ldr	r2, [sp, #8]
     39a:	9b03      	ldr	r3, [sp, #12]
     39c:	47b0      	blx	r6
     39e:	2200      	movs	r2, #0
     3a0:	4b41      	ldr	r3, [pc, #260]	; (4a8 <i2c_master_init+0x2b8>)
     3a2:	47a8      	blx	r5
     3a4:	9a02      	ldr	r2, [sp, #8]
     3a6:	9b03      	ldr	r3, [sp, #12]
     3a8:	4d40      	ldr	r5, [pc, #256]	; (4ac <i2c_master_init+0x2bc>)
     3aa:	47a8      	blx	r5
     3ac:	4b40      	ldr	r3, [pc, #256]	; (4b0 <i2c_master_init+0x2c0>)
     3ae:	4798      	blx	r3
     3b0:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     3b2:	2380      	movs	r3, #128	; 0x80
     3b4:	049b      	lsls	r3, r3, #18
     3b6:	68a2      	ldr	r2, [r4, #8]
     3b8:	429a      	cmp	r2, r3
     3ba:	d01e      	beq.n	3fa <i2c_master_init+0x20a>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     3bc:	0003      	movs	r3, r0
     3be:	2040      	movs	r0, #64	; 0x40
     3c0:	2dff      	cmp	r5, #255	; 0xff
     3c2:	d900      	bls.n	3c6 <i2c_master_init+0x1d6>
     3c4:	e73d      	b.n	242 <i2c_master_init+0x52>
	int32_t tmp_baudlow_hs = 0;
     3c6:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
     3c8:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     3ca:	25ff      	movs	r5, #255	; 0xff
     3cc:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     3ce:	0624      	lsls	r4, r4, #24
     3d0:	4325      	orrs	r5, r4
     3d2:	0400      	lsls	r0, r0, #16
     3d4:	23ff      	movs	r3, #255	; 0xff
     3d6:	041b      	lsls	r3, r3, #16
     3d8:	4018      	ands	r0, r3
     3da:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     3dc:	4643      	mov	r3, r8
     3de:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
     3e0:	2000      	movs	r0, #0
     3e2:	e72e      	b.n	242 <i2c_master_init+0x52>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     3e4:	2100      	movs	r1, #0
     3e6:	4640      	mov	r0, r8
     3e8:	4b32      	ldr	r3, [pc, #200]	; (4b4 <i2c_master_init+0x2c4>)
     3ea:	4798      	blx	r3
     3ec:	e74b      	b.n	286 <i2c_master_init+0x96>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     3ee:	2101      	movs	r1, #1
     3f0:	4640      	mov	r0, r8
     3f2:	4b30      	ldr	r3, [pc, #192]	; (4b4 <i2c_master_init+0x2c4>)
     3f4:	4798      	blx	r3
     3f6:	0007      	movs	r7, r0
     3f8:	e752      	b.n	2a0 <i2c_master_init+0xb0>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     3fa:	26fa      	movs	r6, #250	; 0xfa
     3fc:	00b6      	lsls	r6, r6, #2
     3fe:	4653      	mov	r3, sl
     400:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     402:	9800      	ldr	r0, [sp, #0]
     404:	9901      	ldr	r1, [sp, #4]
     406:	0002      	movs	r2, r0
     408:	000b      	movs	r3, r1
     40a:	4c24      	ldr	r4, [pc, #144]	; (49c <i2c_master_init+0x2ac>)
     40c:	47a0      	blx	r4
     40e:	9000      	str	r0, [sp, #0]
     410:	9101      	str	r1, [sp, #4]
     412:	0030      	movs	r0, r6
     414:	4b1d      	ldr	r3, [pc, #116]	; (48c <i2c_master_init+0x29c>)
     416:	4798      	blx	r3
     418:	2200      	movs	r2, #0
     41a:	4b27      	ldr	r3, [pc, #156]	; (4b8 <i2c_master_init+0x2c8>)
     41c:	47b8      	blx	r7
     41e:	0002      	movs	r2, r0
     420:	000b      	movs	r3, r1
     422:	9800      	ldr	r0, [sp, #0]
     424:	9901      	ldr	r1, [sp, #4]
     426:	4c21      	ldr	r4, [pc, #132]	; (4ac <i2c_master_init+0x2bc>)
     428:	47a0      	blx	r4
     42a:	2200      	movs	r2, #0
     42c:	4b1e      	ldr	r3, [pc, #120]	; (4a8 <i2c_master_init+0x2b8>)
     42e:	4c1d      	ldr	r4, [pc, #116]	; (4a4 <i2c_master_init+0x2b4>)
     430:	47a0      	blx	r4
     432:	4b1f      	ldr	r3, [pc, #124]	; (4b0 <i2c_master_init+0x2c0>)
     434:	4798      	blx	r3
     436:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
     438:	d00c      	beq.n	454 <i2c_master_init+0x264>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     43a:	0031      	movs	r1, r6
     43c:	9807      	ldr	r0, [sp, #28]
     43e:	4b1f      	ldr	r3, [pc, #124]	; (4bc <i2c_master_init+0x2cc>)
     440:	4798      	blx	r3
     442:	3802      	subs	r0, #2
     444:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     446:	002b      	movs	r3, r5
     448:	2dff      	cmp	r5, #255	; 0xff
     44a:	d80c      	bhi.n	466 <i2c_master_init+0x276>
     44c:	28ff      	cmp	r0, #255	; 0xff
     44e:	d9bc      	bls.n	3ca <i2c_master_init+0x1da>
     450:	2040      	movs	r0, #64	; 0x40
     452:	e6f6      	b.n	242 <i2c_master_init+0x52>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     454:	0071      	lsls	r1, r6, #1
     456:	1e48      	subs	r0, r1, #1
     458:	9b07      	ldr	r3, [sp, #28]
     45a:	469c      	mov	ip, r3
     45c:	4460      	add	r0, ip
     45e:	4b17      	ldr	r3, [pc, #92]	; (4bc <i2c_master_init+0x2cc>)
     460:	4798      	blx	r3
     462:	3801      	subs	r0, #1
     464:	e7ef      	b.n	446 <i2c_master_init+0x256>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     466:	2040      	movs	r0, #64	; 0x40
     468:	e6eb      	b.n	242 <i2c_master_init+0x52>
     46a:	46c0      	nop			; (mov r8, r8)
     46c:	000009c1 	.word	0x000009c1
     470:	40000800 	.word	0x40000800
     474:	00000ca5 	.word	0x00000ca5
     478:	00000c35 	.word	0x00000c35
     47c:	000007f9 	.word	0x000007f9
     480:	00000da1 	.word	0x00000da1
     484:	41002000 	.word	0x41002000
     488:	00000cc9 	.word	0x00000cc9
     48c:	000028bd 	.word	0x000028bd
     490:	00001d29 	.word	0x00001d29
     494:	e826d695 	.word	0xe826d695
     498:	3e112e0b 	.word	0x3e112e0b
     49c:	000010a1 	.word	0x000010a1
     4a0:	40240000 	.word	0x40240000
     4a4:	00002229 	.word	0x00002229
     4a8:	3ff00000 	.word	0x3ff00000
     4ac:	000016c1 	.word	0x000016c1
     4b0:	00002855 	.word	0x00002855
     4b4:	00000845 	.word	0x00000845
     4b8:	40080000 	.word	0x40080000
     4bc:	00000f89 	.word	0x00000f89

000004c0 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     4c0:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     4c2:	7e1a      	ldrb	r2, [r3, #24]
     4c4:	0792      	lsls	r2, r2, #30
     4c6:	d507      	bpl.n	4d8 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     4c8:	2202      	movs	r2, #2
     4ca:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     4cc:	8b5b      	ldrh	r3, [r3, #26]
     4ce:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     4d0:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     4d2:	17db      	asrs	r3, r3, #31
     4d4:	4018      	ands	r0, r3
}
     4d6:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     4d8:	8b5a      	ldrh	r2, [r3, #26]
     4da:	0752      	lsls	r2, r2, #29
     4dc:	d506      	bpl.n	4ec <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     4de:	6859      	ldr	r1, [r3, #4]
     4e0:	22c0      	movs	r2, #192	; 0xc0
     4e2:	0292      	lsls	r2, r2, #10
     4e4:	430a      	orrs	r2, r1
     4e6:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     4e8:	2018      	movs	r0, #24
     4ea:	e7f4      	b.n	4d6 <_i2c_master_address_response+0x16>
	return STATUS_OK;
     4ec:	2000      	movs	r0, #0
     4ee:	e7f2      	b.n	4d6 <_i2c_master_address_response+0x16>

000004f0 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     4f0:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     4f2:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     4f4:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     4f6:	2401      	movs	r4, #1
     4f8:	2502      	movs	r5, #2
     4fa:	7e11      	ldrb	r1, [r2, #24]
     4fc:	4221      	tst	r1, r4
     4fe:	d10b      	bne.n	518 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     500:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     502:	4229      	tst	r1, r5
     504:	d106      	bne.n	514 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     506:	3301      	adds	r3, #1
     508:	b29b      	uxth	r3, r3
     50a:	8901      	ldrh	r1, [r0, #8]
     50c:	4299      	cmp	r1, r3
     50e:	d8f4      	bhi.n	4fa <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     510:	2012      	movs	r0, #18
     512:	e002      	b.n	51a <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     514:	2000      	movs	r0, #0
     516:	e000      	b.n	51a <_i2c_master_wait_for_bus+0x2a>
     518:	2000      	movs	r0, #0
}
     51a:	bd30      	pop	{r4, r5, pc}

0000051c <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     51c:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     51e:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     520:	6862      	ldr	r2, [r4, #4]
     522:	2380      	movs	r3, #128	; 0x80
     524:	02db      	lsls	r3, r3, #11
     526:	4313      	orrs	r3, r2
     528:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     52a:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     52c:	4b02      	ldr	r3, [pc, #8]	; (538 <_i2c_master_send_hs_master_code+0x1c>)
     52e:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     530:	2301      	movs	r3, #1
     532:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     534:	bd10      	pop	{r4, pc}
     536:	46c0      	nop			; (mov r8, r8)
     538:	000004f1 	.word	0x000004f1

0000053c <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     53c:	b5f0      	push	{r4, r5, r6, r7, lr}
     53e:	46de      	mov	lr, fp
     540:	4657      	mov	r7, sl
     542:	464e      	mov	r6, r9
     544:	4645      	mov	r5, r8
     546:	b5e0      	push	{r5, r6, r7, lr}
     548:	b083      	sub	sp, #12
     54a:	0006      	movs	r6, r0
     54c:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     54e:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     550:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     552:	682b      	ldr	r3, [r5, #0]
     554:	011b      	lsls	r3, r3, #4
     556:	0fdb      	lsrs	r3, r3, #31
     558:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     55a:	7a4b      	ldrb	r3, [r1, #9]
     55c:	2b00      	cmp	r3, #0
     55e:	d12b      	bne.n	5b8 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     560:	686b      	ldr	r3, [r5, #4]
     562:	4a58      	ldr	r2, [pc, #352]	; (6c4 <_i2c_master_read_packet+0x188>)
     564:	4013      	ands	r3, r2
     566:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     568:	464b      	mov	r3, r9
     56a:	7a1b      	ldrb	r3, [r3, #8]
     56c:	2b00      	cmp	r3, #0
     56e:	d127      	bne.n	5c0 <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     570:	464b      	mov	r3, r9
     572:	881b      	ldrh	r3, [r3, #0]
     574:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     576:	464a      	mov	r2, r9
     578:	7a52      	ldrb	r2, [r2, #9]
     57a:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     57c:	4313      	orrs	r3, r2
     57e:	2201      	movs	r2, #1
     580:	4313      	orrs	r3, r2
     582:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     584:	0030      	movs	r0, r6
     586:	4b50      	ldr	r3, [pc, #320]	; (6c8 <_i2c_master_read_packet+0x18c>)
     588:	4798      	blx	r3
     58a:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
     58c:	4653      	mov	r3, sl
     58e:	2b00      	cmp	r3, #0
     590:	d003      	beq.n	59a <_i2c_master_read_packet+0x5e>
     592:	464b      	mov	r3, r9
     594:	885b      	ldrh	r3, [r3, #2]
     596:	2b01      	cmp	r3, #1
     598:	d03b      	beq.n	612 <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
     59a:	686b      	ldr	r3, [r5, #4]
     59c:	4a49      	ldr	r2, [pc, #292]	; (6c4 <_i2c_master_read_packet+0x188>)
     59e:	4013      	ands	r3, r2
     5a0:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     5a2:	9b01      	ldr	r3, [sp, #4]
     5a4:	2b00      	cmp	r3, #0
     5a6:	d03a      	beq.n	61e <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
     5a8:	9801      	ldr	r0, [sp, #4]
     5aa:	b003      	add	sp, #12
     5ac:	bc3c      	pop	{r2, r3, r4, r5}
     5ae:	4690      	mov	r8, r2
     5b0:	4699      	mov	r9, r3
     5b2:	46a2      	mov	sl, r4
     5b4:	46ab      	mov	fp, r5
     5b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     5b8:	7a89      	ldrb	r1, [r1, #10]
     5ba:	4b44      	ldr	r3, [pc, #272]	; (6cc <_i2c_master_read_packet+0x190>)
     5bc:	4798      	blx	r3
     5be:	e7cf      	b.n	560 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
     5c0:	464b      	mov	r3, r9
     5c2:	881b      	ldrh	r3, [r3, #0]
     5c4:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     5c6:	464a      	mov	r2, r9
     5c8:	7a52      	ldrb	r2, [r2, #9]
     5ca:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     5cc:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     5ce:	2280      	movs	r2, #128	; 0x80
     5d0:	0212      	lsls	r2, r2, #8
     5d2:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     5d4:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     5d6:	0030      	movs	r0, r6
     5d8:	4b3b      	ldr	r3, [pc, #236]	; (6c8 <_i2c_master_read_packet+0x18c>)
     5da:	4798      	blx	r3
     5dc:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     5de:	686b      	ldr	r3, [r5, #4]
     5e0:	4a38      	ldr	r2, [pc, #224]	; (6c4 <_i2c_master_read_packet+0x188>)
     5e2:	4013      	ands	r3, r2
     5e4:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
     5e6:	2800      	cmp	r0, #0
     5e8:	d1de      	bne.n	5a8 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
     5ea:	0030      	movs	r0, r6
     5ec:	4b38      	ldr	r3, [pc, #224]	; (6d0 <_i2c_master_read_packet+0x194>)
     5ee:	4798      	blx	r3
     5f0:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
     5f2:	2800      	cmp	r0, #0
     5f4:	d1d8      	bne.n	5a8 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     5f6:	464b      	mov	r3, r9
     5f8:	881b      	ldrh	r3, [r3, #0]
     5fa:	0a1b      	lsrs	r3, r3, #8
     5fc:	2278      	movs	r2, #120	; 0x78
     5fe:	4313      	orrs	r3, r2
     600:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     602:	464a      	mov	r2, r9
     604:	7a52      	ldrb	r2, [r2, #9]
     606:	0392      	lsls	r2, r2, #14
     608:	2101      	movs	r1, #1
     60a:	430a      	orrs	r2, r1
     60c:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     60e:	626b      	str	r3, [r5, #36]	; 0x24
     610:	e7b8      	b.n	584 <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     612:	686a      	ldr	r2, [r5, #4]
     614:	2380      	movs	r3, #128	; 0x80
     616:	02db      	lsls	r3, r3, #11
     618:	4313      	orrs	r3, r2
     61a:	606b      	str	r3, [r5, #4]
     61c:	e7c1      	b.n	5a2 <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
     61e:	0030      	movs	r0, r6
     620:	4b2b      	ldr	r3, [pc, #172]	; (6d0 <_i2c_master_read_packet+0x194>)
     622:	4798      	blx	r3
     624:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     626:	2800      	cmp	r0, #0
     628:	d1be      	bne.n	5a8 <_i2c_master_read_packet+0x6c>
     62a:	3c01      	subs	r4, #1
     62c:	b2a4      	uxth	r4, r4
     62e:	4680      	mov	r8, r0
		while (tmp_data_length--) {
     630:	4b28      	ldr	r3, [pc, #160]	; (6d4 <_i2c_master_read_packet+0x198>)
     632:	469b      	mov	fp, r3
     634:	e015      	b.n	662 <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
     636:	2c01      	cmp	r4, #1
     638:	d020      	beq.n	67c <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
     63a:	0030      	movs	r0, r6
     63c:	4b26      	ldr	r3, [pc, #152]	; (6d8 <_i2c_master_read_packet+0x19c>)
     63e:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
     640:	4643      	mov	r3, r8
     642:	1c5f      	adds	r7, r3, #1
     644:	b2bf      	uxth	r7, r7
     646:	2328      	movs	r3, #40	; 0x28
     648:	5ceb      	ldrb	r3, [r5, r3]
     64a:	464a      	mov	r2, r9
     64c:	6852      	ldr	r2, [r2, #4]
     64e:	4641      	mov	r1, r8
     650:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
     652:	0030      	movs	r0, r6
     654:	4b1c      	ldr	r3, [pc, #112]	; (6c8 <_i2c_master_read_packet+0x18c>)
     656:	4798      	blx	r3
     658:	3c01      	subs	r4, #1
     65a:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
     65c:	2800      	cmp	r0, #0
     65e:	d115      	bne.n	68c <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
     660:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
     662:	455c      	cmp	r4, fp
     664:	d014      	beq.n	690 <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     666:	8b6b      	ldrh	r3, [r5, #26]
     668:	069b      	lsls	r3, r3, #26
     66a:	d527      	bpl.n	6bc <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
     66c:	7af3      	ldrb	r3, [r6, #11]
     66e:	2b00      	cmp	r3, #0
     670:	d0e3      	beq.n	63a <_i2c_master_read_packet+0xfe>
     672:	4653      	mov	r3, sl
     674:	2b00      	cmp	r3, #0
     676:	d1de      	bne.n	636 <_i2c_master_read_packet+0xfa>
     678:	2c00      	cmp	r4, #0
     67a:	d1de      	bne.n	63a <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     67c:	686a      	ldr	r2, [r5, #4]
     67e:	2380      	movs	r3, #128	; 0x80
     680:	02db      	lsls	r3, r3, #11
     682:	4313      	orrs	r3, r2
     684:	606b      	str	r3, [r5, #4]
     686:	3c01      	subs	r4, #1
     688:	b2a4      	uxth	r4, r4
     68a:	e7ea      	b.n	662 <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
     68c:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
     68e:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     690:	7ab3      	ldrb	r3, [r6, #10]
     692:	2b00      	cmp	r3, #0
     694:	d109      	bne.n	6aa <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
     696:	0030      	movs	r0, r6
     698:	4b0f      	ldr	r3, [pc, #60]	; (6d8 <_i2c_master_read_packet+0x19c>)
     69a:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     69c:	2328      	movs	r3, #40	; 0x28
     69e:	5cea      	ldrb	r2, [r5, r3]
     6a0:	464b      	mov	r3, r9
     6a2:	685b      	ldr	r3, [r3, #4]
     6a4:	4641      	mov	r1, r8
     6a6:	545a      	strb	r2, [r3, r1]
     6a8:	e77e      	b.n	5a8 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
     6aa:	0030      	movs	r0, r6
     6ac:	4b0a      	ldr	r3, [pc, #40]	; (6d8 <_i2c_master_read_packet+0x19c>)
     6ae:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     6b0:	686a      	ldr	r2, [r5, #4]
     6b2:	23c0      	movs	r3, #192	; 0xc0
     6b4:	029b      	lsls	r3, r3, #10
     6b6:	4313      	orrs	r3, r2
     6b8:	606b      	str	r3, [r5, #4]
     6ba:	e7ec      	b.n	696 <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
     6bc:	2341      	movs	r3, #65	; 0x41
     6be:	9301      	str	r3, [sp, #4]
     6c0:	e772      	b.n	5a8 <_i2c_master_read_packet+0x6c>
     6c2:	46c0      	nop			; (mov r8, r8)
     6c4:	fffbffff 	.word	0xfffbffff
     6c8:	000004f1 	.word	0x000004f1
     6cc:	0000051d 	.word	0x0000051d
     6d0:	000004c1 	.word	0x000004c1
     6d4:	0000ffff 	.word	0x0000ffff
     6d8:	000001e5 	.word	0x000001e5

000006dc <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     6dc:	b5f0      	push	{r4, r5, r6, r7, lr}
     6de:	46de      	mov	lr, fp
     6e0:	4657      	mov	r7, sl
     6e2:	464e      	mov	r6, r9
     6e4:	4645      	mov	r5, r8
     6e6:	b5e0      	push	{r5, r6, r7, lr}
     6e8:	b083      	sub	sp, #12
     6ea:	0006      	movs	r6, r0
     6ec:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     6ee:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     6f0:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
     6f2:	4b32      	ldr	r3, [pc, #200]	; (7bc <_i2c_master_write_packet+0xe0>)
     6f4:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     6f6:	7a7b      	ldrb	r3, [r7, #9]
     6f8:	2b00      	cmp	r3, #0
     6fa:	d11d      	bne.n	738 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     6fc:	686b      	ldr	r3, [r5, #4]
     6fe:	4a30      	ldr	r2, [pc, #192]	; (7c0 <_i2c_master_write_packet+0xe4>)
     700:	4013      	ands	r3, r2
     702:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     704:	7a3b      	ldrb	r3, [r7, #8]
     706:	2b00      	cmp	r3, #0
     708:	d01b      	beq.n	742 <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     70a:	883b      	ldrh	r3, [r7, #0]
     70c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     70e:	7a7a      	ldrb	r2, [r7, #9]
     710:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     712:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     714:	2280      	movs	r2, #128	; 0x80
     716:	0212      	lsls	r2, r2, #8
     718:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     71a:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     71c:	0030      	movs	r0, r6
     71e:	4b29      	ldr	r3, [pc, #164]	; (7c4 <_i2c_master_write_packet+0xe8>)
     720:	4798      	blx	r3
     722:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     724:	2800      	cmp	r0, #0
     726:	d013      	beq.n	750 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     728:	9801      	ldr	r0, [sp, #4]
     72a:	b003      	add	sp, #12
     72c:	bc3c      	pop	{r2, r3, r4, r5}
     72e:	4690      	mov	r8, r2
     730:	4699      	mov	r9, r3
     732:	46a2      	mov	sl, r4
     734:	46ab      	mov	fp, r5
     736:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     738:	7ab9      	ldrb	r1, [r7, #10]
     73a:	0030      	movs	r0, r6
     73c:	4b22      	ldr	r3, [pc, #136]	; (7c8 <_i2c_master_write_packet+0xec>)
     73e:	4798      	blx	r3
     740:	e7dc      	b.n	6fc <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     742:	883b      	ldrh	r3, [r7, #0]
     744:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     746:	7a7a      	ldrb	r2, [r7, #9]
     748:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     74a:	4313      	orrs	r3, r2
     74c:	626b      	str	r3, [r5, #36]	; 0x24
     74e:	e7e5      	b.n	71c <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
     750:	0030      	movs	r0, r6
     752:	4b1e      	ldr	r3, [pc, #120]	; (7cc <_i2c_master_write_packet+0xf0>)
     754:	4798      	blx	r3
     756:	1e03      	subs	r3, r0, #0
     758:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     75a:	d1e5      	bne.n	728 <_i2c_master_write_packet+0x4c>
     75c:	46a0      	mov	r8, r4
     75e:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     760:	3320      	adds	r3, #32
     762:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
     764:	4b15      	ldr	r3, [pc, #84]	; (7bc <_i2c_master_write_packet+0xe0>)
     766:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
     768:	4b16      	ldr	r3, [pc, #88]	; (7c4 <_i2c_master_write_packet+0xe8>)
     76a:	469a      	mov	sl, r3
		while (tmp_data_length--) {
     76c:	4544      	cmp	r4, r8
     76e:	d015      	beq.n	79c <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     770:	8b6b      	ldrh	r3, [r5, #26]
     772:	464a      	mov	r2, r9
     774:	4213      	tst	r3, r2
     776:	d01d      	beq.n	7b4 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
     778:	0030      	movs	r0, r6
     77a:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     77c:	687b      	ldr	r3, [r7, #4]
     77e:	5d1a      	ldrb	r2, [r3, r4]
     780:	2328      	movs	r3, #40	; 0x28
     782:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
     784:	0030      	movs	r0, r6
     786:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
     788:	2800      	cmp	r0, #0
     78a:	d106      	bne.n	79a <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     78c:	8b6b      	ldrh	r3, [r5, #26]
     78e:	3401      	adds	r4, #1
     790:	075b      	lsls	r3, r3, #29
     792:	d5eb      	bpl.n	76c <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
     794:	231e      	movs	r3, #30
     796:	9301      	str	r3, [sp, #4]
     798:	e000      	b.n	79c <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
     79a:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     79c:	7ab3      	ldrb	r3, [r6, #10]
     79e:	2b00      	cmp	r3, #0
     7a0:	d0c2      	beq.n	728 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
     7a2:	0030      	movs	r0, r6
     7a4:	4b05      	ldr	r3, [pc, #20]	; (7bc <_i2c_master_write_packet+0xe0>)
     7a6:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     7a8:	686a      	ldr	r2, [r5, #4]
     7aa:	23c0      	movs	r3, #192	; 0xc0
     7ac:	029b      	lsls	r3, r3, #10
     7ae:	4313      	orrs	r3, r2
     7b0:	606b      	str	r3, [r5, #4]
     7b2:	e7b9      	b.n	728 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
     7b4:	2341      	movs	r3, #65	; 0x41
     7b6:	9301      	str	r3, [sp, #4]
     7b8:	e7b6      	b.n	728 <_i2c_master_write_packet+0x4c>
     7ba:	46c0      	nop			; (mov r8, r8)
     7bc:	000001e5 	.word	0x000001e5
     7c0:	fffbffff 	.word	0xfffbffff
     7c4:	000004f1 	.word	0x000004f1
     7c8:	0000051d 	.word	0x0000051d
     7cc:	000004c1 	.word	0x000004c1

000007d0 <i2c_master_read_packet_wait>:
{
     7d0:	b510      	push	{r4, lr}
	module->send_stop = true;
     7d2:	2301      	movs	r3, #1
     7d4:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     7d6:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     7d8:	4b01      	ldr	r3, [pc, #4]	; (7e0 <i2c_master_read_packet_wait+0x10>)
     7da:	4798      	blx	r3
}
     7dc:	bd10      	pop	{r4, pc}
     7de:	46c0      	nop			; (mov r8, r8)
     7e0:	0000053d 	.word	0x0000053d

000007e4 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     7e4:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
     7e6:	2301      	movs	r3, #1
     7e8:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     7ea:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
     7ec:	4b01      	ldr	r3, [pc, #4]	; (7f4 <i2c_master_write_packet_wait+0x10>)
     7ee:	4798      	blx	r3
}
     7f0:	bd10      	pop	{r4, pc}
     7f2:	46c0      	nop			; (mov r8, r8)
     7f4:	000006dd 	.word	0x000006dd

000007f8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     7f8:	b510      	push	{r4, lr}
     7fa:	b082      	sub	sp, #8
     7fc:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     7fe:	4b0e      	ldr	r3, [pc, #56]	; (838 <sercom_set_gclk_generator+0x40>)
     800:	781b      	ldrb	r3, [r3, #0]
     802:	2b00      	cmp	r3, #0
     804:	d007      	beq.n	816 <sercom_set_gclk_generator+0x1e>
     806:	2900      	cmp	r1, #0
     808:	d105      	bne.n	816 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     80a:	4b0b      	ldr	r3, [pc, #44]	; (838 <sercom_set_gclk_generator+0x40>)
     80c:	785b      	ldrb	r3, [r3, #1]
     80e:	4283      	cmp	r3, r0
     810:	d010      	beq.n	834 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     812:	201d      	movs	r0, #29
     814:	e00c      	b.n	830 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     816:	a901      	add	r1, sp, #4
     818:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     81a:	2012      	movs	r0, #18
     81c:	4b07      	ldr	r3, [pc, #28]	; (83c <sercom_set_gclk_generator+0x44>)
     81e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     820:	2012      	movs	r0, #18
     822:	4b07      	ldr	r3, [pc, #28]	; (840 <sercom_set_gclk_generator+0x48>)
     824:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     826:	4b04      	ldr	r3, [pc, #16]	; (838 <sercom_set_gclk_generator+0x40>)
     828:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     82a:	2201      	movs	r2, #1
     82c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     82e:	2000      	movs	r0, #0
}
     830:	b002      	add	sp, #8
     832:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     834:	2000      	movs	r0, #0
     836:	e7fb      	b.n	830 <sercom_set_gclk_generator+0x38>
     838:	20000034 	.word	0x20000034
     83c:	00000ca5 	.word	0x00000ca5
     840:	00000c35 	.word	0x00000c35

00000844 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     844:	4b40      	ldr	r3, [pc, #256]	; (948 <_sercom_get_default_pad+0x104>)
     846:	4298      	cmp	r0, r3
     848:	d031      	beq.n	8ae <_sercom_get_default_pad+0x6a>
     84a:	d90a      	bls.n	862 <_sercom_get_default_pad+0x1e>
     84c:	4b3f      	ldr	r3, [pc, #252]	; (94c <_sercom_get_default_pad+0x108>)
     84e:	4298      	cmp	r0, r3
     850:	d04d      	beq.n	8ee <_sercom_get_default_pad+0xaa>
     852:	4b3f      	ldr	r3, [pc, #252]	; (950 <_sercom_get_default_pad+0x10c>)
     854:	4298      	cmp	r0, r3
     856:	d05a      	beq.n	90e <_sercom_get_default_pad+0xca>
     858:	4b3e      	ldr	r3, [pc, #248]	; (954 <_sercom_get_default_pad+0x110>)
     85a:	4298      	cmp	r0, r3
     85c:	d037      	beq.n	8ce <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     85e:	2000      	movs	r0, #0
}
     860:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     862:	4b3d      	ldr	r3, [pc, #244]	; (958 <_sercom_get_default_pad+0x114>)
     864:	4298      	cmp	r0, r3
     866:	d00c      	beq.n	882 <_sercom_get_default_pad+0x3e>
     868:	4b3c      	ldr	r3, [pc, #240]	; (95c <_sercom_get_default_pad+0x118>)
     86a:	4298      	cmp	r0, r3
     86c:	d1f7      	bne.n	85e <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     86e:	2901      	cmp	r1, #1
     870:	d017      	beq.n	8a2 <_sercom_get_default_pad+0x5e>
     872:	2900      	cmp	r1, #0
     874:	d05d      	beq.n	932 <_sercom_get_default_pad+0xee>
     876:	2902      	cmp	r1, #2
     878:	d015      	beq.n	8a6 <_sercom_get_default_pad+0x62>
     87a:	2903      	cmp	r1, #3
     87c:	d015      	beq.n	8aa <_sercom_get_default_pad+0x66>
	return 0;
     87e:	2000      	movs	r0, #0
     880:	e7ee      	b.n	860 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     882:	2901      	cmp	r1, #1
     884:	d007      	beq.n	896 <_sercom_get_default_pad+0x52>
     886:	2900      	cmp	r1, #0
     888:	d051      	beq.n	92e <_sercom_get_default_pad+0xea>
     88a:	2902      	cmp	r1, #2
     88c:	d005      	beq.n	89a <_sercom_get_default_pad+0x56>
     88e:	2903      	cmp	r1, #3
     890:	d005      	beq.n	89e <_sercom_get_default_pad+0x5a>
	return 0;
     892:	2000      	movs	r0, #0
     894:	e7e4      	b.n	860 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     896:	4832      	ldr	r0, [pc, #200]	; (960 <_sercom_get_default_pad+0x11c>)
     898:	e7e2      	b.n	860 <_sercom_get_default_pad+0x1c>
     89a:	4832      	ldr	r0, [pc, #200]	; (964 <_sercom_get_default_pad+0x120>)
     89c:	e7e0      	b.n	860 <_sercom_get_default_pad+0x1c>
     89e:	4832      	ldr	r0, [pc, #200]	; (968 <_sercom_get_default_pad+0x124>)
     8a0:	e7de      	b.n	860 <_sercom_get_default_pad+0x1c>
     8a2:	4832      	ldr	r0, [pc, #200]	; (96c <_sercom_get_default_pad+0x128>)
     8a4:	e7dc      	b.n	860 <_sercom_get_default_pad+0x1c>
     8a6:	4832      	ldr	r0, [pc, #200]	; (970 <_sercom_get_default_pad+0x12c>)
     8a8:	e7da      	b.n	860 <_sercom_get_default_pad+0x1c>
     8aa:	4832      	ldr	r0, [pc, #200]	; (974 <_sercom_get_default_pad+0x130>)
     8ac:	e7d8      	b.n	860 <_sercom_get_default_pad+0x1c>
     8ae:	2901      	cmp	r1, #1
     8b0:	d007      	beq.n	8c2 <_sercom_get_default_pad+0x7e>
     8b2:	2900      	cmp	r1, #0
     8b4:	d03f      	beq.n	936 <_sercom_get_default_pad+0xf2>
     8b6:	2902      	cmp	r1, #2
     8b8:	d005      	beq.n	8c6 <_sercom_get_default_pad+0x82>
     8ba:	2903      	cmp	r1, #3
     8bc:	d005      	beq.n	8ca <_sercom_get_default_pad+0x86>
	return 0;
     8be:	2000      	movs	r0, #0
     8c0:	e7ce      	b.n	860 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8c2:	482d      	ldr	r0, [pc, #180]	; (978 <_sercom_get_default_pad+0x134>)
     8c4:	e7cc      	b.n	860 <_sercom_get_default_pad+0x1c>
     8c6:	482d      	ldr	r0, [pc, #180]	; (97c <_sercom_get_default_pad+0x138>)
     8c8:	e7ca      	b.n	860 <_sercom_get_default_pad+0x1c>
     8ca:	482d      	ldr	r0, [pc, #180]	; (980 <_sercom_get_default_pad+0x13c>)
     8cc:	e7c8      	b.n	860 <_sercom_get_default_pad+0x1c>
     8ce:	2901      	cmp	r1, #1
     8d0:	d007      	beq.n	8e2 <_sercom_get_default_pad+0x9e>
     8d2:	2900      	cmp	r1, #0
     8d4:	d031      	beq.n	93a <_sercom_get_default_pad+0xf6>
     8d6:	2902      	cmp	r1, #2
     8d8:	d005      	beq.n	8e6 <_sercom_get_default_pad+0xa2>
     8da:	2903      	cmp	r1, #3
     8dc:	d005      	beq.n	8ea <_sercom_get_default_pad+0xa6>
	return 0;
     8de:	2000      	movs	r0, #0
     8e0:	e7be      	b.n	860 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8e2:	4828      	ldr	r0, [pc, #160]	; (984 <_sercom_get_default_pad+0x140>)
     8e4:	e7bc      	b.n	860 <_sercom_get_default_pad+0x1c>
     8e6:	4828      	ldr	r0, [pc, #160]	; (988 <_sercom_get_default_pad+0x144>)
     8e8:	e7ba      	b.n	860 <_sercom_get_default_pad+0x1c>
     8ea:	4828      	ldr	r0, [pc, #160]	; (98c <_sercom_get_default_pad+0x148>)
     8ec:	e7b8      	b.n	860 <_sercom_get_default_pad+0x1c>
     8ee:	2901      	cmp	r1, #1
     8f0:	d007      	beq.n	902 <_sercom_get_default_pad+0xbe>
     8f2:	2900      	cmp	r1, #0
     8f4:	d023      	beq.n	93e <_sercom_get_default_pad+0xfa>
     8f6:	2902      	cmp	r1, #2
     8f8:	d005      	beq.n	906 <_sercom_get_default_pad+0xc2>
     8fa:	2903      	cmp	r1, #3
     8fc:	d005      	beq.n	90a <_sercom_get_default_pad+0xc6>
	return 0;
     8fe:	2000      	movs	r0, #0
     900:	e7ae      	b.n	860 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     902:	4823      	ldr	r0, [pc, #140]	; (990 <_sercom_get_default_pad+0x14c>)
     904:	e7ac      	b.n	860 <_sercom_get_default_pad+0x1c>
     906:	4823      	ldr	r0, [pc, #140]	; (994 <_sercom_get_default_pad+0x150>)
     908:	e7aa      	b.n	860 <_sercom_get_default_pad+0x1c>
     90a:	4823      	ldr	r0, [pc, #140]	; (998 <_sercom_get_default_pad+0x154>)
     90c:	e7a8      	b.n	860 <_sercom_get_default_pad+0x1c>
     90e:	2901      	cmp	r1, #1
     910:	d007      	beq.n	922 <_sercom_get_default_pad+0xde>
     912:	2900      	cmp	r1, #0
     914:	d015      	beq.n	942 <_sercom_get_default_pad+0xfe>
     916:	2902      	cmp	r1, #2
     918:	d005      	beq.n	926 <_sercom_get_default_pad+0xe2>
     91a:	2903      	cmp	r1, #3
     91c:	d005      	beq.n	92a <_sercom_get_default_pad+0xe6>
	return 0;
     91e:	2000      	movs	r0, #0
     920:	e79e      	b.n	860 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     922:	481e      	ldr	r0, [pc, #120]	; (99c <_sercom_get_default_pad+0x158>)
     924:	e79c      	b.n	860 <_sercom_get_default_pad+0x1c>
     926:	481e      	ldr	r0, [pc, #120]	; (9a0 <_sercom_get_default_pad+0x15c>)
     928:	e79a      	b.n	860 <_sercom_get_default_pad+0x1c>
     92a:	481e      	ldr	r0, [pc, #120]	; (9a4 <_sercom_get_default_pad+0x160>)
     92c:	e798      	b.n	860 <_sercom_get_default_pad+0x1c>
     92e:	481e      	ldr	r0, [pc, #120]	; (9a8 <_sercom_get_default_pad+0x164>)
     930:	e796      	b.n	860 <_sercom_get_default_pad+0x1c>
     932:	481e      	ldr	r0, [pc, #120]	; (9ac <_sercom_get_default_pad+0x168>)
     934:	e794      	b.n	860 <_sercom_get_default_pad+0x1c>
     936:	481e      	ldr	r0, [pc, #120]	; (9b0 <_sercom_get_default_pad+0x16c>)
     938:	e792      	b.n	860 <_sercom_get_default_pad+0x1c>
     93a:	481e      	ldr	r0, [pc, #120]	; (9b4 <_sercom_get_default_pad+0x170>)
     93c:	e790      	b.n	860 <_sercom_get_default_pad+0x1c>
     93e:	481e      	ldr	r0, [pc, #120]	; (9b8 <_sercom_get_default_pad+0x174>)
     940:	e78e      	b.n	860 <_sercom_get_default_pad+0x1c>
     942:	481e      	ldr	r0, [pc, #120]	; (9bc <_sercom_get_default_pad+0x178>)
     944:	e78c      	b.n	860 <_sercom_get_default_pad+0x1c>
     946:	46c0      	nop			; (mov r8, r8)
     948:	42000c00 	.word	0x42000c00
     94c:	42001400 	.word	0x42001400
     950:	42001800 	.word	0x42001800
     954:	42001000 	.word	0x42001000
     958:	42000400 	.word	0x42000400
     95c:	42000800 	.word	0x42000800
     960:	00050003 	.word	0x00050003
     964:	00060003 	.word	0x00060003
     968:	00070003 	.word	0x00070003
     96c:	00110002 	.word	0x00110002
     970:	00120002 	.word	0x00120002
     974:	00130002 	.word	0x00130002
     978:	000d0002 	.word	0x000d0002
     97c:	000e0002 	.word	0x000e0002
     980:	000f0002 	.word	0x000f0002
     984:	00170002 	.word	0x00170002
     988:	00180002 	.word	0x00180002
     98c:	00190002 	.word	0x00190002
     990:	00290003 	.word	0x00290003
     994:	002a0003 	.word	0x002a0003
     998:	002b0003 	.word	0x002b0003
     99c:	00230003 	.word	0x00230003
     9a0:	00200003 	.word	0x00200003
     9a4:	00210003 	.word	0x00210003
     9a8:	00040003 	.word	0x00040003
     9ac:	00100002 	.word	0x00100002
     9b0:	000c0002 	.word	0x000c0002
     9b4:	00160002 	.word	0x00160002
     9b8:	00280003 	.word	0x00280003
     9bc:	00220003 	.word	0x00220003

000009c0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     9c0:	b530      	push	{r4, r5, lr}
     9c2:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     9c4:	4b0b      	ldr	r3, [pc, #44]	; (9f4 <_sercom_get_sercom_inst_index+0x34>)
     9c6:	466a      	mov	r2, sp
     9c8:	cb32      	ldmia	r3!, {r1, r4, r5}
     9ca:	c232      	stmia	r2!, {r1, r4, r5}
     9cc:	cb32      	ldmia	r3!, {r1, r4, r5}
     9ce:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     9d0:	9b00      	ldr	r3, [sp, #0]
     9d2:	4283      	cmp	r3, r0
     9d4:	d00b      	beq.n	9ee <_sercom_get_sercom_inst_index+0x2e>
     9d6:	2301      	movs	r3, #1
     9d8:	009a      	lsls	r2, r3, #2
     9da:	4669      	mov	r1, sp
     9dc:	5852      	ldr	r2, [r2, r1]
     9de:	4282      	cmp	r2, r0
     9e0:	d006      	beq.n	9f0 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     9e2:	3301      	adds	r3, #1
     9e4:	2b06      	cmp	r3, #6
     9e6:	d1f7      	bne.n	9d8 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     9e8:	2000      	movs	r0, #0
}
     9ea:	b007      	add	sp, #28
     9ec:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     9ee:	2300      	movs	r3, #0
			return i;
     9f0:	b2d8      	uxtb	r0, r3
     9f2:	e7fa      	b.n	9ea <_sercom_get_sercom_inst_index+0x2a>
     9f4:	000029b0 	.word	0x000029b0

000009f8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     9f8:	b510      	push	{r4, lr}
	switch (clock_source) {
     9fa:	2807      	cmp	r0, #7
     9fc:	d803      	bhi.n	a06 <system_clock_source_get_hz+0xe>
     9fe:	0080      	lsls	r0, r0, #2
     a00:	4b0f      	ldr	r3, [pc, #60]	; (a40 <system_clock_source_get_hz+0x48>)
     a02:	581b      	ldr	r3, [r3, r0]
     a04:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
     a06:	2000      	movs	r0, #0
     a08:	e018      	b.n	a3c <system_clock_source_get_hz+0x44>
		return _system_clock_inst.xosc.frequency;
     a0a:	4b0e      	ldr	r3, [pc, #56]	; (a44 <system_clock_source_get_hz+0x4c>)
     a0c:	6858      	ldr	r0, [r3, #4]
     a0e:	e015      	b.n	a3c <system_clock_source_get_hz+0x44>
		return 48000000UL / (OSCCTRL->OSC48MDIV.bit.DIV + 1);
     a10:	4b0d      	ldr	r3, [pc, #52]	; (a48 <system_clock_source_get_hz+0x50>)
     a12:	7d59      	ldrb	r1, [r3, #21]
     a14:	0709      	lsls	r1, r1, #28
     a16:	0f09      	lsrs	r1, r1, #28
     a18:	3101      	adds	r1, #1
     a1a:	480c      	ldr	r0, [pc, #48]	; (a4c <system_clock_source_get_hz+0x54>)
     a1c:	4b0c      	ldr	r3, [pc, #48]	; (a50 <system_clock_source_get_hz+0x58>)
     a1e:	4798      	blx	r3
     a20:	e00c      	b.n	a3c <system_clock_source_get_hz+0x44>
		return _system_clock_inst.xosc32k.frequency;
     a22:	4b08      	ldr	r3, [pc, #32]	; (a44 <system_clock_source_get_hz+0x4c>)
     a24:	6898      	ldr	r0, [r3, #8]
     a26:	e009      	b.n	a3c <system_clock_source_get_hz+0x44>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
     a28:	4b07      	ldr	r3, [pc, #28]	; (a48 <system_clock_source_get_hz+0x50>)
     a2a:	7f1b      	ldrb	r3, [r3, #28]
			return 0;
     a2c:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
     a2e:	079b      	lsls	r3, r3, #30
     a30:	d504      	bpl.n	a3c <system_clock_source_get_hz+0x44>
		return _system_clock_inst.dpll.frequency;
     a32:	4b04      	ldr	r3, [pc, #16]	; (a44 <system_clock_source_get_hz+0x4c>)
     a34:	6818      	ldr	r0, [r3, #0]
     a36:	e001      	b.n	a3c <system_clock_source_get_hz+0x44>
		return 32768UL;
     a38:	2080      	movs	r0, #128	; 0x80
     a3a:	0200      	lsls	r0, r0, #8
	}
}
     a3c:	bd10      	pop	{r4, pc}
     a3e:	46c0      	nop			; (mov r8, r8)
     a40:	000029c8 	.word	0x000029c8
     a44:	20000038 	.word	0x20000038
     a48:	40001000 	.word	0x40001000
     a4c:	02dc6c00 	.word	0x02dc6c00
     a50:	00000f89 	.word	0x00000f89

00000a54 <system_clock_init>:
 * \note OSC48M is always enabled and if the user selects other clocks for GCLK generators,
 * the OSC48M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC48M.
 */
void system_clock_init(void)
{
     a54:	b500      	push	{lr}
     a56:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BODVDDRDY | SUPC_INTFLAG_BODVDDDET;
     a58:	2203      	movs	r2, #3
     a5a:	4b10      	ldr	r3, [pc, #64]	; (a9c <system_clock_init+0x48>)
     a5c:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     a5e:	4a10      	ldr	r2, [pc, #64]	; (aa0 <system_clock_init+0x4c>)
     a60:	6853      	ldr	r3, [r2, #4]
     a62:	211e      	movs	r1, #30
     a64:	438b      	bics	r3, r1
     a66:	6053      	str	r3, [r2, #4]
	system_clock_source_osc32k_set_config(&osc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC48M */
	OSCCTRL->OSC48MCTRL.reg |= (CONF_CLOCK_OSC48M_ON_DEMAND << OSCCTRL_OSC48MCTRL_ONDEMAND_Pos)
     a68:	4a0e      	ldr	r2, [pc, #56]	; (aa4 <system_clock_init+0x50>)
     a6a:	7d13      	ldrb	r3, [r2, #20]
     a6c:	3162      	adds	r1, #98	; 0x62
     a6e:	430b      	orrs	r3, r1
     a70:	7513      	strb	r3, [r2, #20]
		while(OSCCTRL->OSC48MSYNCBUSY.reg) ;
	}

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     a72:	4b0d      	ldr	r3, [pc, #52]	; (aa8 <system_clock_init+0x54>)
     a74:	4798      	blx	r3
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
     a76:	2301      	movs	r3, #1
     a78:	4a0c      	ldr	r2, [pc, #48]	; (aac <system_clock_init+0x58>)
     a7a:	7113      	strb	r3, [r2, #4]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     a7c:	a901      	add	r1, sp, #4
     a7e:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
     a80:	2300      	movs	r3, #0
     a82:	704b      	strb	r3, [r1, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
     a84:	2206      	movs	r2, #6
     a86:	700a      	strb	r2, [r1, #0]
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
     a88:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
     a8a:	724b      	strb	r3, [r1, #9]
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     a8c:	2000      	movs	r0, #0
     a8e:	4b08      	ldr	r3, [pc, #32]	; (ab0 <system_clock_init+0x5c>)
     a90:	4798      	blx	r3
     a92:	2000      	movs	r0, #0
     a94:	4b07      	ldr	r3, [pc, #28]	; (ab4 <system_clock_init+0x60>)
     a96:	4798      	blx	r3
#endif

}
     a98:	b005      	add	sp, #20
     a9a:	bd00      	pop	{pc}
     a9c:	40001800 	.word	0x40001800
     aa0:	41004000 	.word	0x41004000
     aa4:	40001000 	.word	0x40001000
     aa8:	00000ab9 	.word	0x00000ab9
     aac:	40000800 	.word	0x40000800
     ab0:	00000add 	.word	0x00000add
     ab4:	00000b89 	.word	0x00000b89

00000ab8 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
     ab8:	4a06      	ldr	r2, [pc, #24]	; (ad4 <system_gclk_init+0x1c>)
     aba:	6953      	ldr	r3, [r2, #20]
     abc:	2180      	movs	r1, #128	; 0x80
     abe:	430b      	orrs	r3, r1
     ac0:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
     ac2:	2201      	movs	r2, #1
     ac4:	4b04      	ldr	r3, [pc, #16]	; (ad8 <system_gclk_init+0x20>)
     ac6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
     ac8:	0019      	movs	r1, r3
     aca:	780b      	ldrb	r3, [r1, #0]
     acc:	4213      	tst	r3, r2
     ace:	d1fc      	bne.n	aca <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     ad0:	4770      	bx	lr
     ad2:	46c0      	nop			; (mov r8, r8)
     ad4:	40000800 	.word	0x40000800
     ad8:	40001c00 	.word	0x40001c00

00000adc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     adc:	b570      	push	{r4, r5, r6, lr}
     ade:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
     ae0:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     ae2:	784b      	ldrb	r3, [r1, #1]
     ae4:	2b00      	cmp	r3, #0
     ae6:	d002      	beq.n	aee <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     ae8:	2380      	movs	r3, #128	; 0x80
     aea:	00db      	lsls	r3, r3, #3
     aec:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     aee:	7a4b      	ldrb	r3, [r1, #9]
     af0:	2b00      	cmp	r3, #0
     af2:	d002      	beq.n	afa <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     af4:	2380      	movs	r3, #128	; 0x80
     af6:	011b      	lsls	r3, r3, #4
     af8:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     afa:	6848      	ldr	r0, [r1, #4]
     afc:	2801      	cmp	r0, #1
     afe:	d90f      	bls.n	b20 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     b00:	1e43      	subs	r3, r0, #1
     b02:	4218      	tst	r0, r3
     b04:	d131      	bne.n	b6a <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     b06:	2802      	cmp	r0, #2
     b08:	d92d      	bls.n	b66 <system_gclk_gen_set_config+0x8a>
     b0a:	2302      	movs	r3, #2
     b0c:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     b0e:	3201      	adds	r2, #1
						mask <<= 1) {
     b10:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     b12:	4298      	cmp	r0, r3
     b14:	d8fb      	bhi.n	b0e <system_gclk_gen_set_config+0x32>
     b16:	2380      	movs	r3, #128	; 0x80
     b18:	015b      	lsls	r3, r3, #5
     b1a:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
     b1c:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     b1e:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     b20:	7a0b      	ldrb	r3, [r1, #8]
     b22:	2b00      	cmp	r3, #0
     b24:	d002      	beq.n	b2c <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     b26:	2380      	movs	r3, #128	; 0x80
     b28:	019b      	lsls	r3, r3, #6
     b2a:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     b2c:	2604      	movs	r6, #4
     b2e:	40a6      	lsls	r6, r4
     b30:	4911      	ldr	r1, [pc, #68]	; (b78 <system_gclk_gen_set_config+0x9c>)
     b32:	4a12      	ldr	r2, [pc, #72]	; (b7c <system_gclk_gen_set_config+0xa0>)
     b34:	684b      	ldr	r3, [r1, #4]
     b36:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
     b38:	421e      	tst	r6, r3
     b3a:	d1fb      	bne.n	b34 <system_gclk_gen_set_config+0x58>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     b3c:	4b10      	ldr	r3, [pc, #64]	; (b80 <system_gclk_gen_set_config+0xa4>)
     b3e:	4798      	blx	r3
     b40:	00a4      	lsls	r4, r4, #2
     b42:	4b0d      	ldr	r3, [pc, #52]	; (b78 <system_gclk_gen_set_config+0x9c>)
     b44:	469c      	mov	ip, r3
     b46:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
     b48:	6a22      	ldr	r2, [r4, #32]
     b4a:	2380      	movs	r3, #128	; 0x80
     b4c:	005b      	lsls	r3, r3, #1
     b4e:	401a      	ands	r2, r3
     b50:	432a      	orrs	r2, r5
     b52:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     b54:	4661      	mov	r1, ip
     b56:	4a09      	ldr	r2, [pc, #36]	; (b7c <system_gclk_gen_set_config+0xa0>)
     b58:	684b      	ldr	r3, [r1, #4]
     b5a:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
     b5c:	421e      	tst	r6, r3
     b5e:	d1fb      	bne.n	b58 <system_gclk_gen_set_config+0x7c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     b60:	4b08      	ldr	r3, [pc, #32]	; (b84 <system_gclk_gen_set_config+0xa8>)
     b62:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
     b64:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
     b66:	2200      	movs	r2, #0
     b68:	e7d5      	b.n	b16 <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
     b6a:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     b6c:	2380      	movs	r3, #128	; 0x80
     b6e:	009b      	lsls	r3, r3, #2
     b70:	4318      	orrs	r0, r3
     b72:	4305      	orrs	r5, r0
     b74:	e7d4      	b.n	b20 <system_gclk_gen_set_config+0x44>
     b76:	46c0      	nop			; (mov r8, r8)
     b78:	40001c00 	.word	0x40001c00
     b7c:	000007fc 	.word	0x000007fc
     b80:	0000011d 	.word	0x0000011d
     b84:	0000015d 	.word	0x0000015d

00000b88 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     b88:	b510      	push	{r4, lr}
     b8a:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     b8c:	2204      	movs	r2, #4
     b8e:	4082      	lsls	r2, r0
     b90:	4809      	ldr	r0, [pc, #36]	; (bb8 <system_gclk_gen_enable+0x30>)
     b92:	490a      	ldr	r1, [pc, #40]	; (bbc <system_gclk_gen_enable+0x34>)
     b94:	6843      	ldr	r3, [r0, #4]
     b96:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
     b98:	421a      	tst	r2, r3
     b9a:	d1fb      	bne.n	b94 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
     b9c:	4b08      	ldr	r3, [pc, #32]	; (bc0 <system_gclk_gen_enable+0x38>)
     b9e:	4798      	blx	r3
     ba0:	00a4      	lsls	r4, r4, #2
     ba2:	4b05      	ldr	r3, [pc, #20]	; (bb8 <system_gclk_gen_enable+0x30>)
     ba4:	469c      	mov	ip, r3
     ba6:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
     ba8:	6a22      	ldr	r2, [r4, #32]
     baa:	2380      	movs	r3, #128	; 0x80
     bac:	005b      	lsls	r3, r3, #1
     bae:	4313      	orrs	r3, r2
     bb0:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
     bb2:	4b04      	ldr	r3, [pc, #16]	; (bc4 <system_gclk_gen_enable+0x3c>)
     bb4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     bb6:	bd10      	pop	{r4, pc}
     bb8:	40001c00 	.word	0x40001c00
     bbc:	000007fc 	.word	0x000007fc
     bc0:	0000011d 	.word	0x0000011d
     bc4:	0000015d 	.word	0x0000015d

00000bc8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     bca:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     bcc:	2204      	movs	r2, #4
     bce:	4082      	lsls	r2, r0
     bd0:	4812      	ldr	r0, [pc, #72]	; (c1c <system_gclk_gen_get_hz+0x54>)
     bd2:	4913      	ldr	r1, [pc, #76]	; (c20 <system_gclk_gen_get_hz+0x58>)
     bd4:	6843      	ldr	r3, [r0, #4]
     bd6:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
     bd8:	421a      	tst	r2, r3
     bda:	d1fb      	bne.n	bd4 <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
     bdc:	4b11      	ldr	r3, [pc, #68]	; (c24 <system_gclk_gen_get_hz+0x5c>)
     bde:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
     be0:	4f0e      	ldr	r7, [pc, #56]	; (c1c <system_gclk_gen_get_hz+0x54>)
     be2:	3408      	adds	r4, #8
     be4:	00a4      	lsls	r4, r4, #2
     be6:	59e0      	ldr	r0, [r4, r7]
     be8:	0740      	lsls	r0, r0, #29
     bea:	0f40      	lsrs	r0, r0, #29
	uint32_t gen_input_hz = system_clock_source_get_hz(
     bec:	4b0e      	ldr	r3, [pc, #56]	; (c28 <system_gclk_gen_get_hz+0x60>)
     bee:	4798      	blx	r3
     bf0:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
     bf2:	59e5      	ldr	r5, [r4, r7]
     bf4:	04ed      	lsls	r5, r5, #19
     bf6:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
     bf8:	59e4      	ldr	r4, [r4, r7]
     bfa:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
     bfc:	4b0b      	ldr	r3, [pc, #44]	; (c2c <system_gclk_gen_get_hz+0x64>)
     bfe:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
     c00:	2d00      	cmp	r5, #0
     c02:	d107      	bne.n	c14 <system_gclk_gen_get_hz+0x4c>
     c04:	2c01      	cmp	r4, #1
     c06:	d907      	bls.n	c18 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
     c08:	0021      	movs	r1, r4
     c0a:	0030      	movs	r0, r6
     c0c:	4b08      	ldr	r3, [pc, #32]	; (c30 <system_gclk_gen_get_hz+0x68>)
     c0e:	4798      	blx	r3
     c10:	0006      	movs	r6, r0
     c12:	e001      	b.n	c18 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
     c14:	3401      	adds	r4, #1
     c16:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
     c18:	0030      	movs	r0, r6
     c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c1c:	40001c00 	.word	0x40001c00
     c20:	000007fc 	.word	0x000007fc
     c24:	0000011d 	.word	0x0000011d
     c28:	000009f9 	.word	0x000009f9
     c2c:	0000015d 	.word	0x0000015d
     c30:	00000f89 	.word	0x00000f89

00000c34 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
     c34:	b510      	push	{r4, lr}
     c36:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     c38:	4b09      	ldr	r3, [pc, #36]	; (c60 <system_gclk_chan_enable+0x2c>)
     c3a:	4798      	blx	r3
     c3c:	00a0      	lsls	r0, r4, #2
     c3e:	4b09      	ldr	r3, [pc, #36]	; (c64 <system_gclk_chan_enable+0x30>)
     c40:	469c      	mov	ip, r3
     c42:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
     c44:	2280      	movs	r2, #128	; 0x80
     c46:	5883      	ldr	r3, [r0, r2]
     c48:	2140      	movs	r1, #64	; 0x40
     c4a:	430b      	orrs	r3, r1
     c4c:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
     c4e:	3140      	adds	r1, #64	; 0x40
     c50:	3a40      	subs	r2, #64	; 0x40
     c52:	5843      	ldr	r3, [r0, r1]
     c54:	421a      	tst	r2, r3
     c56:	d0fc      	beq.n	c52 <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
     c58:	4b03      	ldr	r3, [pc, #12]	; (c68 <system_gclk_chan_enable+0x34>)
     c5a:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
     c5c:	bd10      	pop	{r4, pc}
     c5e:	46c0      	nop			; (mov r8, r8)
     c60:	0000011d 	.word	0x0000011d
     c64:	40001c00 	.word	0x40001c00
     c68:	0000015d 	.word	0x0000015d

00000c6c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
     c6c:	b510      	push	{r4, lr}
     c6e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     c70:	4b09      	ldr	r3, [pc, #36]	; (c98 <system_gclk_chan_disable+0x2c>)
     c72:	4798      	blx	r3
     c74:	00a0      	lsls	r0, r4, #2
     c76:	4b09      	ldr	r3, [pc, #36]	; (c9c <system_gclk_chan_disable+0x30>)
     c78:	469c      	mov	ip, r3
     c7a:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
     c7c:	2280      	movs	r2, #128	; 0x80
     c7e:	5883      	ldr	r3, [r0, r2]
     c80:	2140      	movs	r1, #64	; 0x40
     c82:	438b      	bics	r3, r1
     c84:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
     c86:	3140      	adds	r1, #64	; 0x40
     c88:	3a40      	subs	r2, #64	; 0x40
     c8a:	5843      	ldr	r3, [r0, r1]
     c8c:	421a      	tst	r2, r3
     c8e:	d1fc      	bne.n	c8a <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
     c90:	4b03      	ldr	r3, [pc, #12]	; (ca0 <system_gclk_chan_disable+0x34>)
     c92:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
     c94:	bd10      	pop	{r4, pc}
     c96:	46c0      	nop			; (mov r8, r8)
     c98:	0000011d 	.word	0x0000011d
     c9c:	40001c00 	.word	0x40001c00
     ca0:	0000015d 	.word	0x0000015d

00000ca4 <system_gclk_chan_set_config>:
{
     ca4:	b570      	push	{r4, r5, r6, lr}
     ca6:	0004      	movs	r4, r0
     ca8:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
     caa:	4b05      	ldr	r3, [pc, #20]	; (cc0 <system_gclk_chan_set_config+0x1c>)
     cac:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
     cae:	782a      	ldrb	r2, [r5, #0]
     cb0:	230f      	movs	r3, #15
     cb2:	4013      	ands	r3, r2
     cb4:	3420      	adds	r4, #32
     cb6:	00a4      	lsls	r4, r4, #2
     cb8:	4a02      	ldr	r2, [pc, #8]	; (cc4 <system_gclk_chan_set_config+0x20>)
     cba:	50a3      	str	r3, [r4, r2]
}
     cbc:	bd70      	pop	{r4, r5, r6, pc}
     cbe:	46c0      	nop			; (mov r8, r8)
     cc0:	00000c6d 	.word	0x00000c6d
     cc4:	40001c00 	.word	0x40001c00

00000cc8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
     cc8:	b510      	push	{r4, lr}
     cca:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     ccc:	4b06      	ldr	r3, [pc, #24]	; (ce8 <system_gclk_chan_get_hz+0x20>)
     cce:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
     cd0:	3420      	adds	r4, #32
     cd2:	00a4      	lsls	r4, r4, #2
     cd4:	4b05      	ldr	r3, [pc, #20]	; (cec <system_gclk_chan_get_hz+0x24>)
     cd6:	58e4      	ldr	r4, [r4, r3]
     cd8:	0724      	lsls	r4, r4, #28
     cda:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
     cdc:	4b04      	ldr	r3, [pc, #16]	; (cf0 <system_gclk_chan_get_hz+0x28>)
     cde:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
     ce0:	0020      	movs	r0, r4
     ce2:	4b04      	ldr	r3, [pc, #16]	; (cf4 <system_gclk_chan_get_hz+0x2c>)
     ce4:	4798      	blx	r3
}
     ce6:	bd10      	pop	{r4, pc}
     ce8:	0000011d 	.word	0x0000011d
     cec:	40001c00 	.word	0x40001c00
     cf0:	0000015d 	.word	0x0000015d
     cf4:	00000bc9 	.word	0x00000bc9

00000cf8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
     cf8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
     cfa:	78d3      	ldrb	r3, [r2, #3]
     cfc:	2b00      	cmp	r3, #0
     cfe:	d135      	bne.n	d6c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
     d00:	7813      	ldrb	r3, [r2, #0]
     d02:	2b80      	cmp	r3, #128	; 0x80
     d04:	d029      	beq.n	d5a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
     d06:	061b      	lsls	r3, r3, #24
     d08:	2480      	movs	r4, #128	; 0x80
     d0a:	0264      	lsls	r4, r4, #9
     d0c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
     d0e:	7854      	ldrb	r4, [r2, #1]
     d10:	2502      	movs	r5, #2
     d12:	43ac      	bics	r4, r5
     d14:	d106      	bne.n	d24 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
     d16:	7894      	ldrb	r4, [r2, #2]
     d18:	2c00      	cmp	r4, #0
     d1a:	d120      	bne.n	d5e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
     d1c:	2480      	movs	r4, #128	; 0x80
     d1e:	02a4      	lsls	r4, r4, #10
     d20:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
     d22:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     d24:	7854      	ldrb	r4, [r2, #1]
     d26:	3c01      	subs	r4, #1
     d28:	2c01      	cmp	r4, #1
     d2a:	d91c      	bls.n	d66 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     d2c:	040d      	lsls	r5, r1, #16
     d2e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     d30:	24a0      	movs	r4, #160	; 0xa0
     d32:	05e4      	lsls	r4, r4, #23
     d34:	432c      	orrs	r4, r5
     d36:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     d38:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
     d3a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     d3c:	24d0      	movs	r4, #208	; 0xd0
     d3e:	0624      	lsls	r4, r4, #24
     d40:	432c      	orrs	r4, r5
     d42:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     d44:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
     d46:	78d4      	ldrb	r4, [r2, #3]
     d48:	2c00      	cmp	r4, #0
     d4a:	d122      	bne.n	d92 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
     d4c:	035b      	lsls	r3, r3, #13
     d4e:	d51c      	bpl.n	d8a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
     d50:	7893      	ldrb	r3, [r2, #2]
     d52:	2b01      	cmp	r3, #1
     d54:	d01e      	beq.n	d94 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
     d56:	6141      	str	r1, [r0, #20]
     d58:	e017      	b.n	d8a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
     d5a:	2300      	movs	r3, #0
     d5c:	e7d7      	b.n	d0e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
     d5e:	24c0      	movs	r4, #192	; 0xc0
     d60:	02e4      	lsls	r4, r4, #11
     d62:	4323      	orrs	r3, r4
     d64:	e7dd      	b.n	d22 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
     d66:	4c0d      	ldr	r4, [pc, #52]	; (d9c <_system_pinmux_config+0xa4>)
     d68:	4023      	ands	r3, r4
     d6a:	e7df      	b.n	d2c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
     d6c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     d6e:	040c      	lsls	r4, r1, #16
     d70:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     d72:	23a0      	movs	r3, #160	; 0xa0
     d74:	05db      	lsls	r3, r3, #23
     d76:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     d78:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
     d7a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     d7c:	23d0      	movs	r3, #208	; 0xd0
     d7e:	061b      	lsls	r3, r3, #24
     d80:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     d82:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
     d84:	78d3      	ldrb	r3, [r2, #3]
     d86:	2b00      	cmp	r3, #0
     d88:	d103      	bne.n	d92 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     d8a:	7853      	ldrb	r3, [r2, #1]
     d8c:	3b01      	subs	r3, #1
     d8e:	2b01      	cmp	r3, #1
     d90:	d902      	bls.n	d98 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
     d92:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
     d94:	6181      	str	r1, [r0, #24]
     d96:	e7f8      	b.n	d8a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
     d98:	6081      	str	r1, [r0, #8]
}
     d9a:	e7fa      	b.n	d92 <_system_pinmux_config+0x9a>
     d9c:	fffbffff 	.word	0xfffbffff

00000da0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
     da0:	b510      	push	{r4, lr}
     da2:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     da4:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     da6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     da8:	2900      	cmp	r1, #0
     daa:	d105      	bne.n	db8 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
     dac:	0943      	lsrs	r3, r0, #5
     dae:	01db      	lsls	r3, r3, #7
     db0:	2182      	movs	r1, #130	; 0x82
     db2:	05c9      	lsls	r1, r1, #23
     db4:	468c      	mov	ip, r1
     db6:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
     db8:	241f      	movs	r4, #31
     dba:	4020      	ands	r0, r4
     dbc:	2101      	movs	r1, #1
     dbe:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
     dc0:	0018      	movs	r0, r3
     dc2:	4b01      	ldr	r3, [pc, #4]	; (dc8 <system_pinmux_pin_set_config+0x28>)
     dc4:	4798      	blx	r3
}
     dc6:	bd10      	pop	{r4, pc}
     dc8:	00000cf9 	.word	0x00000cf9

00000dcc <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
     dcc:	4770      	bx	lr
	...

00000dd0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
     dd0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
     dd2:	4b05      	ldr	r3, [pc, #20]	; (de8 <system_init+0x18>)
     dd4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
     dd6:	4b05      	ldr	r3, [pc, #20]	; (dec <system_init+0x1c>)
     dd8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
     dda:	4b05      	ldr	r3, [pc, #20]	; (df0 <system_init+0x20>)
     ddc:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
     dde:	4b05      	ldr	r3, [pc, #20]	; (df4 <system_init+0x24>)
     de0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
     de2:	4b05      	ldr	r3, [pc, #20]	; (df8 <system_init+0x28>)
     de4:	4798      	blx	r3
}
     de6:	bd10      	pop	{r4, pc}
     de8:	00000a55 	.word	0x00000a55
     dec:	0000018d 	.word	0x0000018d
     df0:	00000dcd 	.word	0x00000dcd
     df4:	00000dcd 	.word	0x00000dcd
     df8:	00000dcd 	.word	0x00000dcd

00000dfc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     dfc:	e7fe      	b.n	dfc <Dummy_Handler>
	...

00000e00 <Reset_Handler>:
{
     e00:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     e02:	4a17      	ldr	r2, [pc, #92]	; (e60 <Reset_Handler+0x60>)
     e04:	4b17      	ldr	r3, [pc, #92]	; (e64 <Reset_Handler+0x64>)
     e06:	429a      	cmp	r2, r3
     e08:	d011      	beq.n	e2e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     e0a:	001a      	movs	r2, r3
     e0c:	4b16      	ldr	r3, [pc, #88]	; (e68 <Reset_Handler+0x68>)
     e0e:	429a      	cmp	r2, r3
     e10:	d20d      	bcs.n	e2e <Reset_Handler+0x2e>
     e12:	4a16      	ldr	r2, [pc, #88]	; (e6c <Reset_Handler+0x6c>)
     e14:	3303      	adds	r3, #3
     e16:	1a9b      	subs	r3, r3, r2
     e18:	089b      	lsrs	r3, r3, #2
     e1a:	3301      	adds	r3, #1
     e1c:	009b      	lsls	r3, r3, #2
     e1e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     e20:	4810      	ldr	r0, [pc, #64]	; (e64 <Reset_Handler+0x64>)
     e22:	490f      	ldr	r1, [pc, #60]	; (e60 <Reset_Handler+0x60>)
     e24:	588c      	ldr	r4, [r1, r2]
     e26:	5084      	str	r4, [r0, r2]
     e28:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     e2a:	429a      	cmp	r2, r3
     e2c:	d1fa      	bne.n	e24 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     e2e:	4a10      	ldr	r2, [pc, #64]	; (e70 <Reset_Handler+0x70>)
     e30:	4b10      	ldr	r3, [pc, #64]	; (e74 <Reset_Handler+0x74>)
     e32:	429a      	cmp	r2, r3
     e34:	d20a      	bcs.n	e4c <Reset_Handler+0x4c>
     e36:	43d3      	mvns	r3, r2
     e38:	490e      	ldr	r1, [pc, #56]	; (e74 <Reset_Handler+0x74>)
     e3a:	185b      	adds	r3, r3, r1
     e3c:	2103      	movs	r1, #3
     e3e:	438b      	bics	r3, r1
     e40:	3304      	adds	r3, #4
     e42:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     e44:	2100      	movs	r1, #0
     e46:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     e48:	4293      	cmp	r3, r2
     e4a:	d1fc      	bne.n	e46 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     e4c:	4a0a      	ldr	r2, [pc, #40]	; (e78 <Reset_Handler+0x78>)
     e4e:	21ff      	movs	r1, #255	; 0xff
     e50:	4b0a      	ldr	r3, [pc, #40]	; (e7c <Reset_Handler+0x7c>)
     e52:	438b      	bics	r3, r1
     e54:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     e56:	4b0a      	ldr	r3, [pc, #40]	; (e80 <Reset_Handler+0x80>)
     e58:	4798      	blx	r3
        main();
     e5a:	4b0a      	ldr	r3, [pc, #40]	; (e84 <Reset_Handler+0x84>)
     e5c:	4798      	blx	r3
     e5e:	e7fe      	b.n	e5e <Reset_Handler+0x5e>
     e60:	00002a94 	.word	0x00002a94
     e64:	20000000 	.word	0x20000000
     e68:	20000010 	.word	0x20000010
     e6c:	20000004 	.word	0x20000004
     e70:	20000010 	.word	0x20000010
     e74:	2000005c 	.word	0x2000005c
     e78:	e000ed00 	.word	0xe000ed00
     e7c:	00000000 	.word	0x00000000
     e80:	00002969 	.word	0x00002969
     e84:	00000f15 	.word	0x00000f15

00000e88 <configure_i2c_master>:

void configure_i2c_master(void);

//! [initialize_i2c]
void configure_i2c_master(void)
{
     e88:	b510      	push	{r4, lr}
     e8a:	b08e      	sub	sp, #56	; 0x38
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
     e8c:	aa01      	add	r2, sp, #4
     e8e:	2364      	movs	r3, #100	; 0x64
     e90:	9301      	str	r3, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
     e92:	4b1b      	ldr	r3, [pc, #108]	; (f00 <configure_i2c_master+0x78>)
     e94:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
     e96:	2300      	movs	r3, #0
     e98:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
     e9a:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
     e9c:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
     e9e:	2180      	movs	r1, #128	; 0x80
     ea0:	0389      	lsls	r1, r1, #14
     ea2:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
     ea4:	2101      	movs	r1, #1
     ea6:	4249      	negs	r1, r1
     ea8:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
     eaa:	61d3      	str	r3, [r2, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
     eac:	6213      	str	r3, [r2, #32]
	config->scl_low_timeout  = false;
     eae:	3125      	adds	r1, #37	; 0x25
     eb0:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
     eb2:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
     eb4:	3108      	adds	r1, #8
     eb6:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
     eb8:	3101      	adds	r1, #1
     eba:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
     ebc:	3101      	adds	r1, #1
     ebe:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
     ec0:	33d7      	adds	r3, #215	; 0xd7
     ec2:	8613      	strh	r3, [r2, #48]	; 0x30
	i2c_master_get_config_defaults(&config_i2c_master);
	//! [init_conf]

	/* Change buffer timeout to something longer. */
	//! [conf_change]
	config_i2c_master.buffer_timeout = 10000;
     ec4:	4b0f      	ldr	r3, [pc, #60]	; (f04 <configure_i2c_master+0x7c>)
     ec6:	82d3      	strh	r3, [r2, #22]
	config_i2c_master.pinmux_pad1    = CONF_MASTER_SCK_PINMUX;
#endif
	//! [conf_change]
	/* Initialize and enable device with config. */
	//! [init_module]
	i2c_master_init(&i2c_master_instance, CONF_I2C_MASTER_MODULE, &config_i2c_master);
     ec8:	4c0f      	ldr	r4, [pc, #60]	; (f08 <configure_i2c_master+0x80>)
     eca:	4910      	ldr	r1, [pc, #64]	; (f0c <configure_i2c_master+0x84>)
     ecc:	0020      	movs	r0, r4
     ece:	4b10      	ldr	r3, [pc, #64]	; (f10 <configure_i2c_master+0x88>)
     ed0:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     ed2:	6822      	ldr	r2, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     ed4:	2107      	movs	r1, #7
     ed6:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
     ed8:	4219      	tst	r1, r3
     eda:	d1fc      	bne.n	ed6 <configure_i2c_master+0x4e>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     edc:	6813      	ldr	r3, [r2, #0]
     ede:	2102      	movs	r1, #2
     ee0:	430b      	orrs	r3, r1
     ee2:	6013      	str	r3, [r2, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     ee4:	4b08      	ldr	r3, [pc, #32]	; (f08 <configure_i2c_master+0x80>)
     ee6:	88dc      	ldrh	r4, [r3, #6]
	uint32_t timeout_counter = 0;
     ee8:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     eea:	2010      	movs	r0, #16
     eec:	8b51      	ldrh	r1, [r2, #26]
     eee:	4201      	tst	r1, r0
     ef0:	d104      	bne.n	efc <configure_i2c_master+0x74>
		timeout_counter++;
     ef2:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     ef4:	42a3      	cmp	r3, r4
     ef6:	d3f9      	bcc.n	eec <configure_i2c_master+0x64>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
     ef8:	2310      	movs	r3, #16
     efa:	8353      	strh	r3, [r2, #26]
	//! [init_module]

	//! [enable_module]
	i2c_master_enable(&i2c_master_instance);
	//! [enable_module]
}
     efc:	b00e      	add	sp, #56	; 0x38
     efe:	bd10      	pop	{r4, pc}
     f00:	00000d48 	.word	0x00000d48
     f04:	00002710 	.word	0x00002710
     f08:	20000050 	.word	0x20000050
     f0c:	42000c00 	.word	0x42000c00
     f10:	000001f1 	.word	0x000001f1

00000f14 <main>:
//! [initialize_i2c]

int main(void)
{
     f14:	b570      	push	{r4, r5, r6, lr}
     f16:	b084      	sub	sp, #16
	system_init();
     f18:	4b13      	ldr	r3, [pc, #76]	; (f68 <main+0x54>)
     f1a:	4798      	blx	r3

	//! [init]
	/* Configure device and enable. */
	//! [config]
	configure_i2c_master();
     f1c:	4b13      	ldr	r3, [pc, #76]	; (f6c <main+0x58>)
     f1e:	4798      	blx	r3
	uint16_t timeout = 0;
	//! [timeout_counter]

	/* Init i2c packet. */
	//! [packet]
	struct i2c_master_packet packet = {
     f20:	aa01      	add	r2, sp, #4
     f22:	4b13      	ldr	r3, [pc, #76]	; (f70 <main+0x5c>)
     f24:	cb13      	ldmia	r3!, {r0, r1, r4}
     f26:	c213      	stmia	r2!, {r0, r1, r4}
	uint16_t timeout = 0;
     f28:	2400      	movs	r4, #0
	//! [init]

	//! [main]
	/* Write buffer to slave until success. */
	//! [write_packet]
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
     f2a:	4e12      	ldr	r6, [pc, #72]	; (f74 <main+0x60>)
     f2c:	4d12      	ldr	r5, [pc, #72]	; (f78 <main+0x64>)
     f2e:	e004      	b.n	f3a <main+0x26>
			STATUS_OK) {
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == TIMEOUT) {
     f30:	3401      	adds	r4, #1
     f32:	b2a4      	uxth	r4, r4
     f34:	4b11      	ldr	r3, [pc, #68]	; (f7c <main+0x68>)
     f36:	429c      	cmp	r4, r3
     f38:	d004      	beq.n	f44 <main+0x30>
	while (i2c_master_write_packet_wait(&i2c_master_instance, &packet) !=
     f3a:	a901      	add	r1, sp, #4
     f3c:	0030      	movs	r0, r6
     f3e:	47a8      	blx	r5
     f40:	2800      	cmp	r0, #0
     f42:	d1f5      	bne.n	f30 <main+0x1c>
	}
	//! [write_packet]

	/* Read from slave until success. */
	//! [read_packet]
	packet.data = read_buffer;
     f44:	4b0e      	ldr	r3, [pc, #56]	; (f80 <main+0x6c>)
     f46:	9302      	str	r3, [sp, #8]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=
     f48:	4e0a      	ldr	r6, [pc, #40]	; (f74 <main+0x60>)
     f4a:	4d0e      	ldr	r5, [pc, #56]	; (f84 <main+0x70>)
     f4c:	e006      	b.n	f5c <main+0x48>
			STATUS_OK) {
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == TIMEOUT) {
     f4e:	1c63      	adds	r3, r4, #1
     f50:	b29b      	uxth	r3, r3
     f52:	22fa      	movs	r2, #250	; 0xfa
     f54:	0092      	lsls	r2, r2, #2
     f56:	4294      	cmp	r4, r2
     f58:	d005      	beq.n	f66 <main+0x52>
     f5a:	001c      	movs	r4, r3
	while (i2c_master_read_packet_wait(&i2c_master_instance, &packet) !=
     f5c:	a901      	add	r1, sp, #4
     f5e:	0030      	movs	r0, r6
     f60:	47a8      	blx	r5
     f62:	2800      	cmp	r0, #0
     f64:	d1f3      	bne.n	f4e <main+0x3a>
     f66:	e7fe      	b.n	f66 <main+0x52>
     f68:	00000dd1 	.word	0x00000dd1
     f6c:	00000e89 	.word	0x00000e89
     f70:	000029e8 	.word	0x000029e8
     f74:	20000050 	.word	0x20000050
     f78:	000007e5 	.word	0x000007e5
     f7c:	000003e9 	.word	0x000003e9
     f80:	20000044 	.word	0x20000044
     f84:	000007d1 	.word	0x000007d1

00000f88 <__udivsi3>:
     f88:	2200      	movs	r2, #0
     f8a:	0843      	lsrs	r3, r0, #1
     f8c:	428b      	cmp	r3, r1
     f8e:	d374      	bcc.n	107a <__udivsi3+0xf2>
     f90:	0903      	lsrs	r3, r0, #4
     f92:	428b      	cmp	r3, r1
     f94:	d35f      	bcc.n	1056 <__udivsi3+0xce>
     f96:	0a03      	lsrs	r3, r0, #8
     f98:	428b      	cmp	r3, r1
     f9a:	d344      	bcc.n	1026 <__udivsi3+0x9e>
     f9c:	0b03      	lsrs	r3, r0, #12
     f9e:	428b      	cmp	r3, r1
     fa0:	d328      	bcc.n	ff4 <__udivsi3+0x6c>
     fa2:	0c03      	lsrs	r3, r0, #16
     fa4:	428b      	cmp	r3, r1
     fa6:	d30d      	bcc.n	fc4 <__udivsi3+0x3c>
     fa8:	22ff      	movs	r2, #255	; 0xff
     faa:	0209      	lsls	r1, r1, #8
     fac:	ba12      	rev	r2, r2
     fae:	0c03      	lsrs	r3, r0, #16
     fb0:	428b      	cmp	r3, r1
     fb2:	d302      	bcc.n	fba <__udivsi3+0x32>
     fb4:	1212      	asrs	r2, r2, #8
     fb6:	0209      	lsls	r1, r1, #8
     fb8:	d065      	beq.n	1086 <__udivsi3+0xfe>
     fba:	0b03      	lsrs	r3, r0, #12
     fbc:	428b      	cmp	r3, r1
     fbe:	d319      	bcc.n	ff4 <__udivsi3+0x6c>
     fc0:	e000      	b.n	fc4 <__udivsi3+0x3c>
     fc2:	0a09      	lsrs	r1, r1, #8
     fc4:	0bc3      	lsrs	r3, r0, #15
     fc6:	428b      	cmp	r3, r1
     fc8:	d301      	bcc.n	fce <__udivsi3+0x46>
     fca:	03cb      	lsls	r3, r1, #15
     fcc:	1ac0      	subs	r0, r0, r3
     fce:	4152      	adcs	r2, r2
     fd0:	0b83      	lsrs	r3, r0, #14
     fd2:	428b      	cmp	r3, r1
     fd4:	d301      	bcc.n	fda <__udivsi3+0x52>
     fd6:	038b      	lsls	r3, r1, #14
     fd8:	1ac0      	subs	r0, r0, r3
     fda:	4152      	adcs	r2, r2
     fdc:	0b43      	lsrs	r3, r0, #13
     fde:	428b      	cmp	r3, r1
     fe0:	d301      	bcc.n	fe6 <__udivsi3+0x5e>
     fe2:	034b      	lsls	r3, r1, #13
     fe4:	1ac0      	subs	r0, r0, r3
     fe6:	4152      	adcs	r2, r2
     fe8:	0b03      	lsrs	r3, r0, #12
     fea:	428b      	cmp	r3, r1
     fec:	d301      	bcc.n	ff2 <__udivsi3+0x6a>
     fee:	030b      	lsls	r3, r1, #12
     ff0:	1ac0      	subs	r0, r0, r3
     ff2:	4152      	adcs	r2, r2
     ff4:	0ac3      	lsrs	r3, r0, #11
     ff6:	428b      	cmp	r3, r1
     ff8:	d301      	bcc.n	ffe <__udivsi3+0x76>
     ffa:	02cb      	lsls	r3, r1, #11
     ffc:	1ac0      	subs	r0, r0, r3
     ffe:	4152      	adcs	r2, r2
    1000:	0a83      	lsrs	r3, r0, #10
    1002:	428b      	cmp	r3, r1
    1004:	d301      	bcc.n	100a <__udivsi3+0x82>
    1006:	028b      	lsls	r3, r1, #10
    1008:	1ac0      	subs	r0, r0, r3
    100a:	4152      	adcs	r2, r2
    100c:	0a43      	lsrs	r3, r0, #9
    100e:	428b      	cmp	r3, r1
    1010:	d301      	bcc.n	1016 <__udivsi3+0x8e>
    1012:	024b      	lsls	r3, r1, #9
    1014:	1ac0      	subs	r0, r0, r3
    1016:	4152      	adcs	r2, r2
    1018:	0a03      	lsrs	r3, r0, #8
    101a:	428b      	cmp	r3, r1
    101c:	d301      	bcc.n	1022 <__udivsi3+0x9a>
    101e:	020b      	lsls	r3, r1, #8
    1020:	1ac0      	subs	r0, r0, r3
    1022:	4152      	adcs	r2, r2
    1024:	d2cd      	bcs.n	fc2 <__udivsi3+0x3a>
    1026:	09c3      	lsrs	r3, r0, #7
    1028:	428b      	cmp	r3, r1
    102a:	d301      	bcc.n	1030 <__udivsi3+0xa8>
    102c:	01cb      	lsls	r3, r1, #7
    102e:	1ac0      	subs	r0, r0, r3
    1030:	4152      	adcs	r2, r2
    1032:	0983      	lsrs	r3, r0, #6
    1034:	428b      	cmp	r3, r1
    1036:	d301      	bcc.n	103c <__udivsi3+0xb4>
    1038:	018b      	lsls	r3, r1, #6
    103a:	1ac0      	subs	r0, r0, r3
    103c:	4152      	adcs	r2, r2
    103e:	0943      	lsrs	r3, r0, #5
    1040:	428b      	cmp	r3, r1
    1042:	d301      	bcc.n	1048 <__udivsi3+0xc0>
    1044:	014b      	lsls	r3, r1, #5
    1046:	1ac0      	subs	r0, r0, r3
    1048:	4152      	adcs	r2, r2
    104a:	0903      	lsrs	r3, r0, #4
    104c:	428b      	cmp	r3, r1
    104e:	d301      	bcc.n	1054 <__udivsi3+0xcc>
    1050:	010b      	lsls	r3, r1, #4
    1052:	1ac0      	subs	r0, r0, r3
    1054:	4152      	adcs	r2, r2
    1056:	08c3      	lsrs	r3, r0, #3
    1058:	428b      	cmp	r3, r1
    105a:	d301      	bcc.n	1060 <__udivsi3+0xd8>
    105c:	00cb      	lsls	r3, r1, #3
    105e:	1ac0      	subs	r0, r0, r3
    1060:	4152      	adcs	r2, r2
    1062:	0883      	lsrs	r3, r0, #2
    1064:	428b      	cmp	r3, r1
    1066:	d301      	bcc.n	106c <__udivsi3+0xe4>
    1068:	008b      	lsls	r3, r1, #2
    106a:	1ac0      	subs	r0, r0, r3
    106c:	4152      	adcs	r2, r2
    106e:	0843      	lsrs	r3, r0, #1
    1070:	428b      	cmp	r3, r1
    1072:	d301      	bcc.n	1078 <__udivsi3+0xf0>
    1074:	004b      	lsls	r3, r1, #1
    1076:	1ac0      	subs	r0, r0, r3
    1078:	4152      	adcs	r2, r2
    107a:	1a41      	subs	r1, r0, r1
    107c:	d200      	bcs.n	1080 <__udivsi3+0xf8>
    107e:	4601      	mov	r1, r0
    1080:	4152      	adcs	r2, r2
    1082:	4610      	mov	r0, r2
    1084:	4770      	bx	lr
    1086:	e7ff      	b.n	1088 <__udivsi3+0x100>
    1088:	b501      	push	{r0, lr}
    108a:	2000      	movs	r0, #0
    108c:	f000 f806 	bl	109c <__aeabi_idiv0>
    1090:	bd02      	pop	{r1, pc}
    1092:	46c0      	nop			; (mov r8, r8)

00001094 <__aeabi_uidivmod>:
    1094:	2900      	cmp	r1, #0
    1096:	d0f7      	beq.n	1088 <__udivsi3+0x100>
    1098:	e776      	b.n	f88 <__udivsi3>
    109a:	4770      	bx	lr

0000109c <__aeabi_idiv0>:
    109c:	4770      	bx	lr
    109e:	46c0      	nop			; (mov r8, r8)

000010a0 <__aeabi_dadd>:
    10a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    10a2:	4645      	mov	r5, r8
    10a4:	46de      	mov	lr, fp
    10a6:	4657      	mov	r7, sl
    10a8:	464e      	mov	r6, r9
    10aa:	030c      	lsls	r4, r1, #12
    10ac:	b5e0      	push	{r5, r6, r7, lr}
    10ae:	004e      	lsls	r6, r1, #1
    10b0:	0fc9      	lsrs	r1, r1, #31
    10b2:	4688      	mov	r8, r1
    10b4:	000d      	movs	r5, r1
    10b6:	0a61      	lsrs	r1, r4, #9
    10b8:	0f44      	lsrs	r4, r0, #29
    10ba:	430c      	orrs	r4, r1
    10bc:	00c7      	lsls	r7, r0, #3
    10be:	0319      	lsls	r1, r3, #12
    10c0:	0058      	lsls	r0, r3, #1
    10c2:	0fdb      	lsrs	r3, r3, #31
    10c4:	469b      	mov	fp, r3
    10c6:	0a4b      	lsrs	r3, r1, #9
    10c8:	0f51      	lsrs	r1, r2, #29
    10ca:	430b      	orrs	r3, r1
    10cc:	0d76      	lsrs	r6, r6, #21
    10ce:	0d40      	lsrs	r0, r0, #21
    10d0:	0019      	movs	r1, r3
    10d2:	00d2      	lsls	r2, r2, #3
    10d4:	45d8      	cmp	r8, fp
    10d6:	d100      	bne.n	10da <__aeabi_dadd+0x3a>
    10d8:	e0ae      	b.n	1238 <__aeabi_dadd+0x198>
    10da:	1a35      	subs	r5, r6, r0
    10dc:	2d00      	cmp	r5, #0
    10de:	dc00      	bgt.n	10e2 <__aeabi_dadd+0x42>
    10e0:	e0f6      	b.n	12d0 <__aeabi_dadd+0x230>
    10e2:	2800      	cmp	r0, #0
    10e4:	d10f      	bne.n	1106 <__aeabi_dadd+0x66>
    10e6:	4313      	orrs	r3, r2
    10e8:	d100      	bne.n	10ec <__aeabi_dadd+0x4c>
    10ea:	e0db      	b.n	12a4 <__aeabi_dadd+0x204>
    10ec:	1e6b      	subs	r3, r5, #1
    10ee:	2b00      	cmp	r3, #0
    10f0:	d000      	beq.n	10f4 <__aeabi_dadd+0x54>
    10f2:	e137      	b.n	1364 <__aeabi_dadd+0x2c4>
    10f4:	1aba      	subs	r2, r7, r2
    10f6:	4297      	cmp	r7, r2
    10f8:	41bf      	sbcs	r7, r7
    10fa:	1a64      	subs	r4, r4, r1
    10fc:	427f      	negs	r7, r7
    10fe:	1be4      	subs	r4, r4, r7
    1100:	2601      	movs	r6, #1
    1102:	0017      	movs	r7, r2
    1104:	e024      	b.n	1150 <__aeabi_dadd+0xb0>
    1106:	4bc6      	ldr	r3, [pc, #792]	; (1420 <__aeabi_dadd+0x380>)
    1108:	429e      	cmp	r6, r3
    110a:	d04d      	beq.n	11a8 <__aeabi_dadd+0x108>
    110c:	2380      	movs	r3, #128	; 0x80
    110e:	041b      	lsls	r3, r3, #16
    1110:	4319      	orrs	r1, r3
    1112:	2d38      	cmp	r5, #56	; 0x38
    1114:	dd00      	ble.n	1118 <__aeabi_dadd+0x78>
    1116:	e107      	b.n	1328 <__aeabi_dadd+0x288>
    1118:	2d1f      	cmp	r5, #31
    111a:	dd00      	ble.n	111e <__aeabi_dadd+0x7e>
    111c:	e138      	b.n	1390 <__aeabi_dadd+0x2f0>
    111e:	2020      	movs	r0, #32
    1120:	1b43      	subs	r3, r0, r5
    1122:	469a      	mov	sl, r3
    1124:	000b      	movs	r3, r1
    1126:	4650      	mov	r0, sl
    1128:	4083      	lsls	r3, r0
    112a:	4699      	mov	r9, r3
    112c:	0013      	movs	r3, r2
    112e:	4648      	mov	r0, r9
    1130:	40eb      	lsrs	r3, r5
    1132:	4318      	orrs	r0, r3
    1134:	0003      	movs	r3, r0
    1136:	4650      	mov	r0, sl
    1138:	4082      	lsls	r2, r0
    113a:	1e50      	subs	r0, r2, #1
    113c:	4182      	sbcs	r2, r0
    113e:	40e9      	lsrs	r1, r5
    1140:	431a      	orrs	r2, r3
    1142:	1aba      	subs	r2, r7, r2
    1144:	1a61      	subs	r1, r4, r1
    1146:	4297      	cmp	r7, r2
    1148:	41a4      	sbcs	r4, r4
    114a:	0017      	movs	r7, r2
    114c:	4264      	negs	r4, r4
    114e:	1b0c      	subs	r4, r1, r4
    1150:	0223      	lsls	r3, r4, #8
    1152:	d562      	bpl.n	121a <__aeabi_dadd+0x17a>
    1154:	0264      	lsls	r4, r4, #9
    1156:	0a65      	lsrs	r5, r4, #9
    1158:	2d00      	cmp	r5, #0
    115a:	d100      	bne.n	115e <__aeabi_dadd+0xbe>
    115c:	e0df      	b.n	131e <__aeabi_dadd+0x27e>
    115e:	0028      	movs	r0, r5
    1160:	f001 fbe4 	bl	292c <__clzsi2>
    1164:	0003      	movs	r3, r0
    1166:	3b08      	subs	r3, #8
    1168:	2b1f      	cmp	r3, #31
    116a:	dd00      	ble.n	116e <__aeabi_dadd+0xce>
    116c:	e0d2      	b.n	1314 <__aeabi_dadd+0x274>
    116e:	2220      	movs	r2, #32
    1170:	003c      	movs	r4, r7
    1172:	1ad2      	subs	r2, r2, r3
    1174:	409d      	lsls	r5, r3
    1176:	40d4      	lsrs	r4, r2
    1178:	409f      	lsls	r7, r3
    117a:	4325      	orrs	r5, r4
    117c:	429e      	cmp	r6, r3
    117e:	dd00      	ble.n	1182 <__aeabi_dadd+0xe2>
    1180:	e0c4      	b.n	130c <__aeabi_dadd+0x26c>
    1182:	1b9e      	subs	r6, r3, r6
    1184:	1c73      	adds	r3, r6, #1
    1186:	2b1f      	cmp	r3, #31
    1188:	dd00      	ble.n	118c <__aeabi_dadd+0xec>
    118a:	e0f1      	b.n	1370 <__aeabi_dadd+0x2d0>
    118c:	2220      	movs	r2, #32
    118e:	0038      	movs	r0, r7
    1190:	0029      	movs	r1, r5
    1192:	1ad2      	subs	r2, r2, r3
    1194:	40d8      	lsrs	r0, r3
    1196:	4091      	lsls	r1, r2
    1198:	4097      	lsls	r7, r2
    119a:	002c      	movs	r4, r5
    119c:	4301      	orrs	r1, r0
    119e:	1e78      	subs	r0, r7, #1
    11a0:	4187      	sbcs	r7, r0
    11a2:	40dc      	lsrs	r4, r3
    11a4:	2600      	movs	r6, #0
    11a6:	430f      	orrs	r7, r1
    11a8:	077b      	lsls	r3, r7, #29
    11aa:	d009      	beq.n	11c0 <__aeabi_dadd+0x120>
    11ac:	230f      	movs	r3, #15
    11ae:	403b      	ands	r3, r7
    11b0:	2b04      	cmp	r3, #4
    11b2:	d005      	beq.n	11c0 <__aeabi_dadd+0x120>
    11b4:	1d3b      	adds	r3, r7, #4
    11b6:	42bb      	cmp	r3, r7
    11b8:	41bf      	sbcs	r7, r7
    11ba:	427f      	negs	r7, r7
    11bc:	19e4      	adds	r4, r4, r7
    11be:	001f      	movs	r7, r3
    11c0:	0223      	lsls	r3, r4, #8
    11c2:	d52c      	bpl.n	121e <__aeabi_dadd+0x17e>
    11c4:	4b96      	ldr	r3, [pc, #600]	; (1420 <__aeabi_dadd+0x380>)
    11c6:	3601      	adds	r6, #1
    11c8:	429e      	cmp	r6, r3
    11ca:	d100      	bne.n	11ce <__aeabi_dadd+0x12e>
    11cc:	e09a      	b.n	1304 <__aeabi_dadd+0x264>
    11ce:	4645      	mov	r5, r8
    11d0:	4b94      	ldr	r3, [pc, #592]	; (1424 <__aeabi_dadd+0x384>)
    11d2:	08ff      	lsrs	r7, r7, #3
    11d4:	401c      	ands	r4, r3
    11d6:	0760      	lsls	r0, r4, #29
    11d8:	0576      	lsls	r6, r6, #21
    11da:	0264      	lsls	r4, r4, #9
    11dc:	4307      	orrs	r7, r0
    11de:	0b24      	lsrs	r4, r4, #12
    11e0:	0d76      	lsrs	r6, r6, #21
    11e2:	2100      	movs	r1, #0
    11e4:	0324      	lsls	r4, r4, #12
    11e6:	0b23      	lsrs	r3, r4, #12
    11e8:	0d0c      	lsrs	r4, r1, #20
    11ea:	4a8f      	ldr	r2, [pc, #572]	; (1428 <__aeabi_dadd+0x388>)
    11ec:	0524      	lsls	r4, r4, #20
    11ee:	431c      	orrs	r4, r3
    11f0:	4014      	ands	r4, r2
    11f2:	0533      	lsls	r3, r6, #20
    11f4:	4323      	orrs	r3, r4
    11f6:	005b      	lsls	r3, r3, #1
    11f8:	07ed      	lsls	r5, r5, #31
    11fa:	085b      	lsrs	r3, r3, #1
    11fc:	432b      	orrs	r3, r5
    11fe:	0038      	movs	r0, r7
    1200:	0019      	movs	r1, r3
    1202:	bc3c      	pop	{r2, r3, r4, r5}
    1204:	4690      	mov	r8, r2
    1206:	4699      	mov	r9, r3
    1208:	46a2      	mov	sl, r4
    120a:	46ab      	mov	fp, r5
    120c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    120e:	4664      	mov	r4, ip
    1210:	4304      	orrs	r4, r0
    1212:	d100      	bne.n	1216 <__aeabi_dadd+0x176>
    1214:	e211      	b.n	163a <__aeabi_dadd+0x59a>
    1216:	0004      	movs	r4, r0
    1218:	4667      	mov	r7, ip
    121a:	077b      	lsls	r3, r7, #29
    121c:	d1c6      	bne.n	11ac <__aeabi_dadd+0x10c>
    121e:	4645      	mov	r5, r8
    1220:	0760      	lsls	r0, r4, #29
    1222:	08ff      	lsrs	r7, r7, #3
    1224:	4307      	orrs	r7, r0
    1226:	08e4      	lsrs	r4, r4, #3
    1228:	4b7d      	ldr	r3, [pc, #500]	; (1420 <__aeabi_dadd+0x380>)
    122a:	429e      	cmp	r6, r3
    122c:	d030      	beq.n	1290 <__aeabi_dadd+0x1f0>
    122e:	0324      	lsls	r4, r4, #12
    1230:	0576      	lsls	r6, r6, #21
    1232:	0b24      	lsrs	r4, r4, #12
    1234:	0d76      	lsrs	r6, r6, #21
    1236:	e7d4      	b.n	11e2 <__aeabi_dadd+0x142>
    1238:	1a33      	subs	r3, r6, r0
    123a:	469a      	mov	sl, r3
    123c:	2b00      	cmp	r3, #0
    123e:	dd78      	ble.n	1332 <__aeabi_dadd+0x292>
    1240:	2800      	cmp	r0, #0
    1242:	d031      	beq.n	12a8 <__aeabi_dadd+0x208>
    1244:	4876      	ldr	r0, [pc, #472]	; (1420 <__aeabi_dadd+0x380>)
    1246:	4286      	cmp	r6, r0
    1248:	d0ae      	beq.n	11a8 <__aeabi_dadd+0x108>
    124a:	2080      	movs	r0, #128	; 0x80
    124c:	0400      	lsls	r0, r0, #16
    124e:	4301      	orrs	r1, r0
    1250:	4653      	mov	r3, sl
    1252:	2b38      	cmp	r3, #56	; 0x38
    1254:	dc00      	bgt.n	1258 <__aeabi_dadd+0x1b8>
    1256:	e0e9      	b.n	142c <__aeabi_dadd+0x38c>
    1258:	430a      	orrs	r2, r1
    125a:	1e51      	subs	r1, r2, #1
    125c:	418a      	sbcs	r2, r1
    125e:	2100      	movs	r1, #0
    1260:	19d2      	adds	r2, r2, r7
    1262:	42ba      	cmp	r2, r7
    1264:	41bf      	sbcs	r7, r7
    1266:	1909      	adds	r1, r1, r4
    1268:	427c      	negs	r4, r7
    126a:	0017      	movs	r7, r2
    126c:	190c      	adds	r4, r1, r4
    126e:	0223      	lsls	r3, r4, #8
    1270:	d5d3      	bpl.n	121a <__aeabi_dadd+0x17a>
    1272:	4b6b      	ldr	r3, [pc, #428]	; (1420 <__aeabi_dadd+0x380>)
    1274:	3601      	adds	r6, #1
    1276:	429e      	cmp	r6, r3
    1278:	d100      	bne.n	127c <__aeabi_dadd+0x1dc>
    127a:	e13a      	b.n	14f2 <__aeabi_dadd+0x452>
    127c:	2001      	movs	r0, #1
    127e:	4b69      	ldr	r3, [pc, #420]	; (1424 <__aeabi_dadd+0x384>)
    1280:	401c      	ands	r4, r3
    1282:	087b      	lsrs	r3, r7, #1
    1284:	4007      	ands	r7, r0
    1286:	431f      	orrs	r7, r3
    1288:	07e0      	lsls	r0, r4, #31
    128a:	4307      	orrs	r7, r0
    128c:	0864      	lsrs	r4, r4, #1
    128e:	e78b      	b.n	11a8 <__aeabi_dadd+0x108>
    1290:	0023      	movs	r3, r4
    1292:	433b      	orrs	r3, r7
    1294:	d100      	bne.n	1298 <__aeabi_dadd+0x1f8>
    1296:	e1cb      	b.n	1630 <__aeabi_dadd+0x590>
    1298:	2280      	movs	r2, #128	; 0x80
    129a:	0312      	lsls	r2, r2, #12
    129c:	4314      	orrs	r4, r2
    129e:	0324      	lsls	r4, r4, #12
    12a0:	0b24      	lsrs	r4, r4, #12
    12a2:	e79e      	b.n	11e2 <__aeabi_dadd+0x142>
    12a4:	002e      	movs	r6, r5
    12a6:	e77f      	b.n	11a8 <__aeabi_dadd+0x108>
    12a8:	0008      	movs	r0, r1
    12aa:	4310      	orrs	r0, r2
    12ac:	d100      	bne.n	12b0 <__aeabi_dadd+0x210>
    12ae:	e0b4      	b.n	141a <__aeabi_dadd+0x37a>
    12b0:	1e58      	subs	r0, r3, #1
    12b2:	2800      	cmp	r0, #0
    12b4:	d000      	beq.n	12b8 <__aeabi_dadd+0x218>
    12b6:	e0de      	b.n	1476 <__aeabi_dadd+0x3d6>
    12b8:	18ba      	adds	r2, r7, r2
    12ba:	42ba      	cmp	r2, r7
    12bc:	419b      	sbcs	r3, r3
    12be:	1864      	adds	r4, r4, r1
    12c0:	425b      	negs	r3, r3
    12c2:	18e4      	adds	r4, r4, r3
    12c4:	0017      	movs	r7, r2
    12c6:	2601      	movs	r6, #1
    12c8:	0223      	lsls	r3, r4, #8
    12ca:	d5a6      	bpl.n	121a <__aeabi_dadd+0x17a>
    12cc:	2602      	movs	r6, #2
    12ce:	e7d5      	b.n	127c <__aeabi_dadd+0x1dc>
    12d0:	2d00      	cmp	r5, #0
    12d2:	d16e      	bne.n	13b2 <__aeabi_dadd+0x312>
    12d4:	1c70      	adds	r0, r6, #1
    12d6:	0540      	lsls	r0, r0, #21
    12d8:	0d40      	lsrs	r0, r0, #21
    12da:	2801      	cmp	r0, #1
    12dc:	dc00      	bgt.n	12e0 <__aeabi_dadd+0x240>
    12de:	e0f9      	b.n	14d4 <__aeabi_dadd+0x434>
    12e0:	1ab8      	subs	r0, r7, r2
    12e2:	4684      	mov	ip, r0
    12e4:	4287      	cmp	r7, r0
    12e6:	4180      	sbcs	r0, r0
    12e8:	1ae5      	subs	r5, r4, r3
    12ea:	4240      	negs	r0, r0
    12ec:	1a2d      	subs	r5, r5, r0
    12ee:	0228      	lsls	r0, r5, #8
    12f0:	d400      	bmi.n	12f4 <__aeabi_dadd+0x254>
    12f2:	e089      	b.n	1408 <__aeabi_dadd+0x368>
    12f4:	1bd7      	subs	r7, r2, r7
    12f6:	42ba      	cmp	r2, r7
    12f8:	4192      	sbcs	r2, r2
    12fa:	1b1c      	subs	r4, r3, r4
    12fc:	4252      	negs	r2, r2
    12fe:	1aa5      	subs	r5, r4, r2
    1300:	46d8      	mov	r8, fp
    1302:	e729      	b.n	1158 <__aeabi_dadd+0xb8>
    1304:	4645      	mov	r5, r8
    1306:	2400      	movs	r4, #0
    1308:	2700      	movs	r7, #0
    130a:	e76a      	b.n	11e2 <__aeabi_dadd+0x142>
    130c:	4c45      	ldr	r4, [pc, #276]	; (1424 <__aeabi_dadd+0x384>)
    130e:	1af6      	subs	r6, r6, r3
    1310:	402c      	ands	r4, r5
    1312:	e749      	b.n	11a8 <__aeabi_dadd+0x108>
    1314:	003d      	movs	r5, r7
    1316:	3828      	subs	r0, #40	; 0x28
    1318:	4085      	lsls	r5, r0
    131a:	2700      	movs	r7, #0
    131c:	e72e      	b.n	117c <__aeabi_dadd+0xdc>
    131e:	0038      	movs	r0, r7
    1320:	f001 fb04 	bl	292c <__clzsi2>
    1324:	3020      	adds	r0, #32
    1326:	e71d      	b.n	1164 <__aeabi_dadd+0xc4>
    1328:	430a      	orrs	r2, r1
    132a:	1e51      	subs	r1, r2, #1
    132c:	418a      	sbcs	r2, r1
    132e:	2100      	movs	r1, #0
    1330:	e707      	b.n	1142 <__aeabi_dadd+0xa2>
    1332:	2b00      	cmp	r3, #0
    1334:	d000      	beq.n	1338 <__aeabi_dadd+0x298>
    1336:	e0f3      	b.n	1520 <__aeabi_dadd+0x480>
    1338:	1c70      	adds	r0, r6, #1
    133a:	0543      	lsls	r3, r0, #21
    133c:	0d5b      	lsrs	r3, r3, #21
    133e:	2b01      	cmp	r3, #1
    1340:	dc00      	bgt.n	1344 <__aeabi_dadd+0x2a4>
    1342:	e0ad      	b.n	14a0 <__aeabi_dadd+0x400>
    1344:	4b36      	ldr	r3, [pc, #216]	; (1420 <__aeabi_dadd+0x380>)
    1346:	4298      	cmp	r0, r3
    1348:	d100      	bne.n	134c <__aeabi_dadd+0x2ac>
    134a:	e0d1      	b.n	14f0 <__aeabi_dadd+0x450>
    134c:	18ba      	adds	r2, r7, r2
    134e:	42ba      	cmp	r2, r7
    1350:	41bf      	sbcs	r7, r7
    1352:	1864      	adds	r4, r4, r1
    1354:	427f      	negs	r7, r7
    1356:	19e4      	adds	r4, r4, r7
    1358:	07e7      	lsls	r7, r4, #31
    135a:	0852      	lsrs	r2, r2, #1
    135c:	4317      	orrs	r7, r2
    135e:	0864      	lsrs	r4, r4, #1
    1360:	0006      	movs	r6, r0
    1362:	e721      	b.n	11a8 <__aeabi_dadd+0x108>
    1364:	482e      	ldr	r0, [pc, #184]	; (1420 <__aeabi_dadd+0x380>)
    1366:	4285      	cmp	r5, r0
    1368:	d100      	bne.n	136c <__aeabi_dadd+0x2cc>
    136a:	e093      	b.n	1494 <__aeabi_dadd+0x3f4>
    136c:	001d      	movs	r5, r3
    136e:	e6d0      	b.n	1112 <__aeabi_dadd+0x72>
    1370:	0029      	movs	r1, r5
    1372:	3e1f      	subs	r6, #31
    1374:	40f1      	lsrs	r1, r6
    1376:	2b20      	cmp	r3, #32
    1378:	d100      	bne.n	137c <__aeabi_dadd+0x2dc>
    137a:	e08d      	b.n	1498 <__aeabi_dadd+0x3f8>
    137c:	2240      	movs	r2, #64	; 0x40
    137e:	1ad3      	subs	r3, r2, r3
    1380:	409d      	lsls	r5, r3
    1382:	432f      	orrs	r7, r5
    1384:	1e7d      	subs	r5, r7, #1
    1386:	41af      	sbcs	r7, r5
    1388:	2400      	movs	r4, #0
    138a:	430f      	orrs	r7, r1
    138c:	2600      	movs	r6, #0
    138e:	e744      	b.n	121a <__aeabi_dadd+0x17a>
    1390:	002b      	movs	r3, r5
    1392:	0008      	movs	r0, r1
    1394:	3b20      	subs	r3, #32
    1396:	40d8      	lsrs	r0, r3
    1398:	0003      	movs	r3, r0
    139a:	2d20      	cmp	r5, #32
    139c:	d100      	bne.n	13a0 <__aeabi_dadd+0x300>
    139e:	e07d      	b.n	149c <__aeabi_dadd+0x3fc>
    13a0:	2040      	movs	r0, #64	; 0x40
    13a2:	1b45      	subs	r5, r0, r5
    13a4:	40a9      	lsls	r1, r5
    13a6:	430a      	orrs	r2, r1
    13a8:	1e51      	subs	r1, r2, #1
    13aa:	418a      	sbcs	r2, r1
    13ac:	2100      	movs	r1, #0
    13ae:	431a      	orrs	r2, r3
    13b0:	e6c7      	b.n	1142 <__aeabi_dadd+0xa2>
    13b2:	2e00      	cmp	r6, #0
    13b4:	d050      	beq.n	1458 <__aeabi_dadd+0x3b8>
    13b6:	4e1a      	ldr	r6, [pc, #104]	; (1420 <__aeabi_dadd+0x380>)
    13b8:	42b0      	cmp	r0, r6
    13ba:	d057      	beq.n	146c <__aeabi_dadd+0x3cc>
    13bc:	2680      	movs	r6, #128	; 0x80
    13be:	426b      	negs	r3, r5
    13c0:	4699      	mov	r9, r3
    13c2:	0436      	lsls	r6, r6, #16
    13c4:	4334      	orrs	r4, r6
    13c6:	464b      	mov	r3, r9
    13c8:	2b38      	cmp	r3, #56	; 0x38
    13ca:	dd00      	ble.n	13ce <__aeabi_dadd+0x32e>
    13cc:	e0d6      	b.n	157c <__aeabi_dadd+0x4dc>
    13ce:	2b1f      	cmp	r3, #31
    13d0:	dd00      	ble.n	13d4 <__aeabi_dadd+0x334>
    13d2:	e135      	b.n	1640 <__aeabi_dadd+0x5a0>
    13d4:	2620      	movs	r6, #32
    13d6:	1af5      	subs	r5, r6, r3
    13d8:	0026      	movs	r6, r4
    13da:	40ae      	lsls	r6, r5
    13dc:	46b2      	mov	sl, r6
    13de:	003e      	movs	r6, r7
    13e0:	40de      	lsrs	r6, r3
    13e2:	46ac      	mov	ip, r5
    13e4:	0035      	movs	r5, r6
    13e6:	4656      	mov	r6, sl
    13e8:	432e      	orrs	r6, r5
    13ea:	4665      	mov	r5, ip
    13ec:	40af      	lsls	r7, r5
    13ee:	1e7d      	subs	r5, r7, #1
    13f0:	41af      	sbcs	r7, r5
    13f2:	40dc      	lsrs	r4, r3
    13f4:	4337      	orrs	r7, r6
    13f6:	1bd7      	subs	r7, r2, r7
    13f8:	42ba      	cmp	r2, r7
    13fa:	4192      	sbcs	r2, r2
    13fc:	1b0c      	subs	r4, r1, r4
    13fe:	4252      	negs	r2, r2
    1400:	1aa4      	subs	r4, r4, r2
    1402:	0006      	movs	r6, r0
    1404:	46d8      	mov	r8, fp
    1406:	e6a3      	b.n	1150 <__aeabi_dadd+0xb0>
    1408:	4664      	mov	r4, ip
    140a:	4667      	mov	r7, ip
    140c:	432c      	orrs	r4, r5
    140e:	d000      	beq.n	1412 <__aeabi_dadd+0x372>
    1410:	e6a2      	b.n	1158 <__aeabi_dadd+0xb8>
    1412:	2500      	movs	r5, #0
    1414:	2600      	movs	r6, #0
    1416:	2700      	movs	r7, #0
    1418:	e706      	b.n	1228 <__aeabi_dadd+0x188>
    141a:	001e      	movs	r6, r3
    141c:	e6c4      	b.n	11a8 <__aeabi_dadd+0x108>
    141e:	46c0      	nop			; (mov r8, r8)
    1420:	000007ff 	.word	0x000007ff
    1424:	ff7fffff 	.word	0xff7fffff
    1428:	800fffff 	.word	0x800fffff
    142c:	2b1f      	cmp	r3, #31
    142e:	dc63      	bgt.n	14f8 <__aeabi_dadd+0x458>
    1430:	2020      	movs	r0, #32
    1432:	1ac3      	subs	r3, r0, r3
    1434:	0008      	movs	r0, r1
    1436:	4098      	lsls	r0, r3
    1438:	469c      	mov	ip, r3
    143a:	4683      	mov	fp, r0
    143c:	4653      	mov	r3, sl
    143e:	0010      	movs	r0, r2
    1440:	40d8      	lsrs	r0, r3
    1442:	0003      	movs	r3, r0
    1444:	4658      	mov	r0, fp
    1446:	4318      	orrs	r0, r3
    1448:	4663      	mov	r3, ip
    144a:	409a      	lsls	r2, r3
    144c:	1e53      	subs	r3, r2, #1
    144e:	419a      	sbcs	r2, r3
    1450:	4653      	mov	r3, sl
    1452:	4302      	orrs	r2, r0
    1454:	40d9      	lsrs	r1, r3
    1456:	e703      	b.n	1260 <__aeabi_dadd+0x1c0>
    1458:	0026      	movs	r6, r4
    145a:	433e      	orrs	r6, r7
    145c:	d006      	beq.n	146c <__aeabi_dadd+0x3cc>
    145e:	43eb      	mvns	r3, r5
    1460:	4699      	mov	r9, r3
    1462:	2b00      	cmp	r3, #0
    1464:	d0c7      	beq.n	13f6 <__aeabi_dadd+0x356>
    1466:	4e94      	ldr	r6, [pc, #592]	; (16b8 <__aeabi_dadd+0x618>)
    1468:	42b0      	cmp	r0, r6
    146a:	d1ac      	bne.n	13c6 <__aeabi_dadd+0x326>
    146c:	000c      	movs	r4, r1
    146e:	0017      	movs	r7, r2
    1470:	0006      	movs	r6, r0
    1472:	46d8      	mov	r8, fp
    1474:	e698      	b.n	11a8 <__aeabi_dadd+0x108>
    1476:	4b90      	ldr	r3, [pc, #576]	; (16b8 <__aeabi_dadd+0x618>)
    1478:	459a      	cmp	sl, r3
    147a:	d00b      	beq.n	1494 <__aeabi_dadd+0x3f4>
    147c:	4682      	mov	sl, r0
    147e:	e6e7      	b.n	1250 <__aeabi_dadd+0x1b0>
    1480:	2800      	cmp	r0, #0
    1482:	d000      	beq.n	1486 <__aeabi_dadd+0x3e6>
    1484:	e09e      	b.n	15c4 <__aeabi_dadd+0x524>
    1486:	0018      	movs	r0, r3
    1488:	4310      	orrs	r0, r2
    148a:	d100      	bne.n	148e <__aeabi_dadd+0x3ee>
    148c:	e0e9      	b.n	1662 <__aeabi_dadd+0x5c2>
    148e:	001c      	movs	r4, r3
    1490:	0017      	movs	r7, r2
    1492:	46d8      	mov	r8, fp
    1494:	4e88      	ldr	r6, [pc, #544]	; (16b8 <__aeabi_dadd+0x618>)
    1496:	e687      	b.n	11a8 <__aeabi_dadd+0x108>
    1498:	2500      	movs	r5, #0
    149a:	e772      	b.n	1382 <__aeabi_dadd+0x2e2>
    149c:	2100      	movs	r1, #0
    149e:	e782      	b.n	13a6 <__aeabi_dadd+0x306>
    14a0:	0023      	movs	r3, r4
    14a2:	433b      	orrs	r3, r7
    14a4:	2e00      	cmp	r6, #0
    14a6:	d000      	beq.n	14aa <__aeabi_dadd+0x40a>
    14a8:	e0ab      	b.n	1602 <__aeabi_dadd+0x562>
    14aa:	2b00      	cmp	r3, #0
    14ac:	d100      	bne.n	14b0 <__aeabi_dadd+0x410>
    14ae:	e0e7      	b.n	1680 <__aeabi_dadd+0x5e0>
    14b0:	000b      	movs	r3, r1
    14b2:	4313      	orrs	r3, r2
    14b4:	d100      	bne.n	14b8 <__aeabi_dadd+0x418>
    14b6:	e677      	b.n	11a8 <__aeabi_dadd+0x108>
    14b8:	18ba      	adds	r2, r7, r2
    14ba:	42ba      	cmp	r2, r7
    14bc:	41bf      	sbcs	r7, r7
    14be:	1864      	adds	r4, r4, r1
    14c0:	427f      	negs	r7, r7
    14c2:	19e4      	adds	r4, r4, r7
    14c4:	0223      	lsls	r3, r4, #8
    14c6:	d400      	bmi.n	14ca <__aeabi_dadd+0x42a>
    14c8:	e0f2      	b.n	16b0 <__aeabi_dadd+0x610>
    14ca:	4b7c      	ldr	r3, [pc, #496]	; (16bc <__aeabi_dadd+0x61c>)
    14cc:	0017      	movs	r7, r2
    14ce:	401c      	ands	r4, r3
    14d0:	0006      	movs	r6, r0
    14d2:	e669      	b.n	11a8 <__aeabi_dadd+0x108>
    14d4:	0020      	movs	r0, r4
    14d6:	4338      	orrs	r0, r7
    14d8:	2e00      	cmp	r6, #0
    14da:	d1d1      	bne.n	1480 <__aeabi_dadd+0x3e0>
    14dc:	2800      	cmp	r0, #0
    14de:	d15b      	bne.n	1598 <__aeabi_dadd+0x4f8>
    14e0:	001c      	movs	r4, r3
    14e2:	4314      	orrs	r4, r2
    14e4:	d100      	bne.n	14e8 <__aeabi_dadd+0x448>
    14e6:	e0a8      	b.n	163a <__aeabi_dadd+0x59a>
    14e8:	001c      	movs	r4, r3
    14ea:	0017      	movs	r7, r2
    14ec:	46d8      	mov	r8, fp
    14ee:	e65b      	b.n	11a8 <__aeabi_dadd+0x108>
    14f0:	0006      	movs	r6, r0
    14f2:	2400      	movs	r4, #0
    14f4:	2700      	movs	r7, #0
    14f6:	e697      	b.n	1228 <__aeabi_dadd+0x188>
    14f8:	4650      	mov	r0, sl
    14fa:	000b      	movs	r3, r1
    14fc:	3820      	subs	r0, #32
    14fe:	40c3      	lsrs	r3, r0
    1500:	4699      	mov	r9, r3
    1502:	4653      	mov	r3, sl
    1504:	2b20      	cmp	r3, #32
    1506:	d100      	bne.n	150a <__aeabi_dadd+0x46a>
    1508:	e095      	b.n	1636 <__aeabi_dadd+0x596>
    150a:	2340      	movs	r3, #64	; 0x40
    150c:	4650      	mov	r0, sl
    150e:	1a1b      	subs	r3, r3, r0
    1510:	4099      	lsls	r1, r3
    1512:	430a      	orrs	r2, r1
    1514:	1e51      	subs	r1, r2, #1
    1516:	418a      	sbcs	r2, r1
    1518:	464b      	mov	r3, r9
    151a:	2100      	movs	r1, #0
    151c:	431a      	orrs	r2, r3
    151e:	e69f      	b.n	1260 <__aeabi_dadd+0x1c0>
    1520:	2e00      	cmp	r6, #0
    1522:	d130      	bne.n	1586 <__aeabi_dadd+0x4e6>
    1524:	0026      	movs	r6, r4
    1526:	433e      	orrs	r6, r7
    1528:	d067      	beq.n	15fa <__aeabi_dadd+0x55a>
    152a:	43db      	mvns	r3, r3
    152c:	469a      	mov	sl, r3
    152e:	2b00      	cmp	r3, #0
    1530:	d01c      	beq.n	156c <__aeabi_dadd+0x4cc>
    1532:	4e61      	ldr	r6, [pc, #388]	; (16b8 <__aeabi_dadd+0x618>)
    1534:	42b0      	cmp	r0, r6
    1536:	d060      	beq.n	15fa <__aeabi_dadd+0x55a>
    1538:	4653      	mov	r3, sl
    153a:	2b38      	cmp	r3, #56	; 0x38
    153c:	dd00      	ble.n	1540 <__aeabi_dadd+0x4a0>
    153e:	e096      	b.n	166e <__aeabi_dadd+0x5ce>
    1540:	2b1f      	cmp	r3, #31
    1542:	dd00      	ble.n	1546 <__aeabi_dadd+0x4a6>
    1544:	e09f      	b.n	1686 <__aeabi_dadd+0x5e6>
    1546:	2620      	movs	r6, #32
    1548:	1af3      	subs	r3, r6, r3
    154a:	0026      	movs	r6, r4
    154c:	409e      	lsls	r6, r3
    154e:	469c      	mov	ip, r3
    1550:	46b3      	mov	fp, r6
    1552:	4653      	mov	r3, sl
    1554:	003e      	movs	r6, r7
    1556:	40de      	lsrs	r6, r3
    1558:	0033      	movs	r3, r6
    155a:	465e      	mov	r6, fp
    155c:	431e      	orrs	r6, r3
    155e:	4663      	mov	r3, ip
    1560:	409f      	lsls	r7, r3
    1562:	1e7b      	subs	r3, r7, #1
    1564:	419f      	sbcs	r7, r3
    1566:	4653      	mov	r3, sl
    1568:	40dc      	lsrs	r4, r3
    156a:	4337      	orrs	r7, r6
    156c:	18bf      	adds	r7, r7, r2
    156e:	4297      	cmp	r7, r2
    1570:	4192      	sbcs	r2, r2
    1572:	1864      	adds	r4, r4, r1
    1574:	4252      	negs	r2, r2
    1576:	18a4      	adds	r4, r4, r2
    1578:	0006      	movs	r6, r0
    157a:	e678      	b.n	126e <__aeabi_dadd+0x1ce>
    157c:	4327      	orrs	r7, r4
    157e:	1e7c      	subs	r4, r7, #1
    1580:	41a7      	sbcs	r7, r4
    1582:	2400      	movs	r4, #0
    1584:	e737      	b.n	13f6 <__aeabi_dadd+0x356>
    1586:	4e4c      	ldr	r6, [pc, #304]	; (16b8 <__aeabi_dadd+0x618>)
    1588:	42b0      	cmp	r0, r6
    158a:	d036      	beq.n	15fa <__aeabi_dadd+0x55a>
    158c:	2680      	movs	r6, #128	; 0x80
    158e:	425b      	negs	r3, r3
    1590:	0436      	lsls	r6, r6, #16
    1592:	469a      	mov	sl, r3
    1594:	4334      	orrs	r4, r6
    1596:	e7cf      	b.n	1538 <__aeabi_dadd+0x498>
    1598:	0018      	movs	r0, r3
    159a:	4310      	orrs	r0, r2
    159c:	d100      	bne.n	15a0 <__aeabi_dadd+0x500>
    159e:	e603      	b.n	11a8 <__aeabi_dadd+0x108>
    15a0:	1ab8      	subs	r0, r7, r2
    15a2:	4684      	mov	ip, r0
    15a4:	4567      	cmp	r7, ip
    15a6:	41ad      	sbcs	r5, r5
    15a8:	1ae0      	subs	r0, r4, r3
    15aa:	426d      	negs	r5, r5
    15ac:	1b40      	subs	r0, r0, r5
    15ae:	0205      	lsls	r5, r0, #8
    15b0:	d400      	bmi.n	15b4 <__aeabi_dadd+0x514>
    15b2:	e62c      	b.n	120e <__aeabi_dadd+0x16e>
    15b4:	1bd7      	subs	r7, r2, r7
    15b6:	42ba      	cmp	r2, r7
    15b8:	4192      	sbcs	r2, r2
    15ba:	1b1c      	subs	r4, r3, r4
    15bc:	4252      	negs	r2, r2
    15be:	1aa4      	subs	r4, r4, r2
    15c0:	46d8      	mov	r8, fp
    15c2:	e5f1      	b.n	11a8 <__aeabi_dadd+0x108>
    15c4:	0018      	movs	r0, r3
    15c6:	4310      	orrs	r0, r2
    15c8:	d100      	bne.n	15cc <__aeabi_dadd+0x52c>
    15ca:	e763      	b.n	1494 <__aeabi_dadd+0x3f4>
    15cc:	08f8      	lsrs	r0, r7, #3
    15ce:	0767      	lsls	r7, r4, #29
    15d0:	4307      	orrs	r7, r0
    15d2:	2080      	movs	r0, #128	; 0x80
    15d4:	08e4      	lsrs	r4, r4, #3
    15d6:	0300      	lsls	r0, r0, #12
    15d8:	4204      	tst	r4, r0
    15da:	d008      	beq.n	15ee <__aeabi_dadd+0x54e>
    15dc:	08dd      	lsrs	r5, r3, #3
    15de:	4205      	tst	r5, r0
    15e0:	d105      	bne.n	15ee <__aeabi_dadd+0x54e>
    15e2:	08d2      	lsrs	r2, r2, #3
    15e4:	0759      	lsls	r1, r3, #29
    15e6:	4311      	orrs	r1, r2
    15e8:	000f      	movs	r7, r1
    15ea:	002c      	movs	r4, r5
    15ec:	46d8      	mov	r8, fp
    15ee:	0f7b      	lsrs	r3, r7, #29
    15f0:	00e4      	lsls	r4, r4, #3
    15f2:	431c      	orrs	r4, r3
    15f4:	00ff      	lsls	r7, r7, #3
    15f6:	4e30      	ldr	r6, [pc, #192]	; (16b8 <__aeabi_dadd+0x618>)
    15f8:	e5d6      	b.n	11a8 <__aeabi_dadd+0x108>
    15fa:	000c      	movs	r4, r1
    15fc:	0017      	movs	r7, r2
    15fe:	0006      	movs	r6, r0
    1600:	e5d2      	b.n	11a8 <__aeabi_dadd+0x108>
    1602:	2b00      	cmp	r3, #0
    1604:	d038      	beq.n	1678 <__aeabi_dadd+0x5d8>
    1606:	000b      	movs	r3, r1
    1608:	4313      	orrs	r3, r2
    160a:	d100      	bne.n	160e <__aeabi_dadd+0x56e>
    160c:	e742      	b.n	1494 <__aeabi_dadd+0x3f4>
    160e:	08f8      	lsrs	r0, r7, #3
    1610:	0767      	lsls	r7, r4, #29
    1612:	4307      	orrs	r7, r0
    1614:	2080      	movs	r0, #128	; 0x80
    1616:	08e4      	lsrs	r4, r4, #3
    1618:	0300      	lsls	r0, r0, #12
    161a:	4204      	tst	r4, r0
    161c:	d0e7      	beq.n	15ee <__aeabi_dadd+0x54e>
    161e:	08cb      	lsrs	r3, r1, #3
    1620:	4203      	tst	r3, r0
    1622:	d1e4      	bne.n	15ee <__aeabi_dadd+0x54e>
    1624:	08d2      	lsrs	r2, r2, #3
    1626:	0749      	lsls	r1, r1, #29
    1628:	4311      	orrs	r1, r2
    162a:	000f      	movs	r7, r1
    162c:	001c      	movs	r4, r3
    162e:	e7de      	b.n	15ee <__aeabi_dadd+0x54e>
    1630:	2700      	movs	r7, #0
    1632:	2400      	movs	r4, #0
    1634:	e5d5      	b.n	11e2 <__aeabi_dadd+0x142>
    1636:	2100      	movs	r1, #0
    1638:	e76b      	b.n	1512 <__aeabi_dadd+0x472>
    163a:	2500      	movs	r5, #0
    163c:	2700      	movs	r7, #0
    163e:	e5f3      	b.n	1228 <__aeabi_dadd+0x188>
    1640:	464e      	mov	r6, r9
    1642:	0025      	movs	r5, r4
    1644:	3e20      	subs	r6, #32
    1646:	40f5      	lsrs	r5, r6
    1648:	464b      	mov	r3, r9
    164a:	002e      	movs	r6, r5
    164c:	2b20      	cmp	r3, #32
    164e:	d02d      	beq.n	16ac <__aeabi_dadd+0x60c>
    1650:	2540      	movs	r5, #64	; 0x40
    1652:	1aed      	subs	r5, r5, r3
    1654:	40ac      	lsls	r4, r5
    1656:	4327      	orrs	r7, r4
    1658:	1e7c      	subs	r4, r7, #1
    165a:	41a7      	sbcs	r7, r4
    165c:	2400      	movs	r4, #0
    165e:	4337      	orrs	r7, r6
    1660:	e6c9      	b.n	13f6 <__aeabi_dadd+0x356>
    1662:	2480      	movs	r4, #128	; 0x80
    1664:	2500      	movs	r5, #0
    1666:	0324      	lsls	r4, r4, #12
    1668:	4e13      	ldr	r6, [pc, #76]	; (16b8 <__aeabi_dadd+0x618>)
    166a:	2700      	movs	r7, #0
    166c:	e5dc      	b.n	1228 <__aeabi_dadd+0x188>
    166e:	4327      	orrs	r7, r4
    1670:	1e7c      	subs	r4, r7, #1
    1672:	41a7      	sbcs	r7, r4
    1674:	2400      	movs	r4, #0
    1676:	e779      	b.n	156c <__aeabi_dadd+0x4cc>
    1678:	000c      	movs	r4, r1
    167a:	0017      	movs	r7, r2
    167c:	4e0e      	ldr	r6, [pc, #56]	; (16b8 <__aeabi_dadd+0x618>)
    167e:	e593      	b.n	11a8 <__aeabi_dadd+0x108>
    1680:	000c      	movs	r4, r1
    1682:	0017      	movs	r7, r2
    1684:	e590      	b.n	11a8 <__aeabi_dadd+0x108>
    1686:	4656      	mov	r6, sl
    1688:	0023      	movs	r3, r4
    168a:	3e20      	subs	r6, #32
    168c:	40f3      	lsrs	r3, r6
    168e:	4699      	mov	r9, r3
    1690:	4653      	mov	r3, sl
    1692:	2b20      	cmp	r3, #32
    1694:	d00e      	beq.n	16b4 <__aeabi_dadd+0x614>
    1696:	2340      	movs	r3, #64	; 0x40
    1698:	4656      	mov	r6, sl
    169a:	1b9b      	subs	r3, r3, r6
    169c:	409c      	lsls	r4, r3
    169e:	4327      	orrs	r7, r4
    16a0:	1e7c      	subs	r4, r7, #1
    16a2:	41a7      	sbcs	r7, r4
    16a4:	464b      	mov	r3, r9
    16a6:	2400      	movs	r4, #0
    16a8:	431f      	orrs	r7, r3
    16aa:	e75f      	b.n	156c <__aeabi_dadd+0x4cc>
    16ac:	2400      	movs	r4, #0
    16ae:	e7d2      	b.n	1656 <__aeabi_dadd+0x5b6>
    16b0:	0017      	movs	r7, r2
    16b2:	e5b2      	b.n	121a <__aeabi_dadd+0x17a>
    16b4:	2400      	movs	r4, #0
    16b6:	e7f2      	b.n	169e <__aeabi_dadd+0x5fe>
    16b8:	000007ff 	.word	0x000007ff
    16bc:	ff7fffff 	.word	0xff7fffff

000016c0 <__aeabi_ddiv>:
    16c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    16c2:	4657      	mov	r7, sl
    16c4:	4645      	mov	r5, r8
    16c6:	46de      	mov	lr, fp
    16c8:	464e      	mov	r6, r9
    16ca:	b5e0      	push	{r5, r6, r7, lr}
    16cc:	004c      	lsls	r4, r1, #1
    16ce:	030e      	lsls	r6, r1, #12
    16d0:	b087      	sub	sp, #28
    16d2:	4683      	mov	fp, r0
    16d4:	4692      	mov	sl, r2
    16d6:	001d      	movs	r5, r3
    16d8:	4680      	mov	r8, r0
    16da:	0b36      	lsrs	r6, r6, #12
    16dc:	0d64      	lsrs	r4, r4, #21
    16de:	0fcf      	lsrs	r7, r1, #31
    16e0:	2c00      	cmp	r4, #0
    16e2:	d04f      	beq.n	1784 <__aeabi_ddiv+0xc4>
    16e4:	4b6f      	ldr	r3, [pc, #444]	; (18a4 <__aeabi_ddiv+0x1e4>)
    16e6:	429c      	cmp	r4, r3
    16e8:	d035      	beq.n	1756 <__aeabi_ddiv+0x96>
    16ea:	2380      	movs	r3, #128	; 0x80
    16ec:	0f42      	lsrs	r2, r0, #29
    16ee:	041b      	lsls	r3, r3, #16
    16f0:	00f6      	lsls	r6, r6, #3
    16f2:	4313      	orrs	r3, r2
    16f4:	4333      	orrs	r3, r6
    16f6:	4699      	mov	r9, r3
    16f8:	00c3      	lsls	r3, r0, #3
    16fa:	4698      	mov	r8, r3
    16fc:	4b6a      	ldr	r3, [pc, #424]	; (18a8 <__aeabi_ddiv+0x1e8>)
    16fe:	2600      	movs	r6, #0
    1700:	469c      	mov	ip, r3
    1702:	2300      	movs	r3, #0
    1704:	4464      	add	r4, ip
    1706:	9303      	str	r3, [sp, #12]
    1708:	032b      	lsls	r3, r5, #12
    170a:	0b1b      	lsrs	r3, r3, #12
    170c:	469b      	mov	fp, r3
    170e:	006b      	lsls	r3, r5, #1
    1710:	0fed      	lsrs	r5, r5, #31
    1712:	4650      	mov	r0, sl
    1714:	0d5b      	lsrs	r3, r3, #21
    1716:	9501      	str	r5, [sp, #4]
    1718:	d05e      	beq.n	17d8 <__aeabi_ddiv+0x118>
    171a:	4a62      	ldr	r2, [pc, #392]	; (18a4 <__aeabi_ddiv+0x1e4>)
    171c:	4293      	cmp	r3, r2
    171e:	d053      	beq.n	17c8 <__aeabi_ddiv+0x108>
    1720:	465a      	mov	r2, fp
    1722:	00d1      	lsls	r1, r2, #3
    1724:	2280      	movs	r2, #128	; 0x80
    1726:	0f40      	lsrs	r0, r0, #29
    1728:	0412      	lsls	r2, r2, #16
    172a:	4302      	orrs	r2, r0
    172c:	430a      	orrs	r2, r1
    172e:	4693      	mov	fp, r2
    1730:	4652      	mov	r2, sl
    1732:	00d1      	lsls	r1, r2, #3
    1734:	4a5c      	ldr	r2, [pc, #368]	; (18a8 <__aeabi_ddiv+0x1e8>)
    1736:	4694      	mov	ip, r2
    1738:	2200      	movs	r2, #0
    173a:	4463      	add	r3, ip
    173c:	0038      	movs	r0, r7
    173e:	4068      	eors	r0, r5
    1740:	4684      	mov	ip, r0
    1742:	9002      	str	r0, [sp, #8]
    1744:	1ae4      	subs	r4, r4, r3
    1746:	4316      	orrs	r6, r2
    1748:	2e0f      	cmp	r6, #15
    174a:	d900      	bls.n	174e <__aeabi_ddiv+0x8e>
    174c:	e0b4      	b.n	18b8 <__aeabi_ddiv+0x1f8>
    174e:	4b57      	ldr	r3, [pc, #348]	; (18ac <__aeabi_ddiv+0x1ec>)
    1750:	00b6      	lsls	r6, r6, #2
    1752:	599b      	ldr	r3, [r3, r6]
    1754:	469f      	mov	pc, r3
    1756:	0003      	movs	r3, r0
    1758:	4333      	orrs	r3, r6
    175a:	4699      	mov	r9, r3
    175c:	d16c      	bne.n	1838 <__aeabi_ddiv+0x178>
    175e:	2300      	movs	r3, #0
    1760:	4698      	mov	r8, r3
    1762:	3302      	adds	r3, #2
    1764:	2608      	movs	r6, #8
    1766:	9303      	str	r3, [sp, #12]
    1768:	e7ce      	b.n	1708 <__aeabi_ddiv+0x48>
    176a:	46cb      	mov	fp, r9
    176c:	4641      	mov	r1, r8
    176e:	9a03      	ldr	r2, [sp, #12]
    1770:	9701      	str	r7, [sp, #4]
    1772:	2a02      	cmp	r2, #2
    1774:	d165      	bne.n	1842 <__aeabi_ddiv+0x182>
    1776:	9b01      	ldr	r3, [sp, #4]
    1778:	4c4a      	ldr	r4, [pc, #296]	; (18a4 <__aeabi_ddiv+0x1e4>)
    177a:	469c      	mov	ip, r3
    177c:	2300      	movs	r3, #0
    177e:	2200      	movs	r2, #0
    1780:	4698      	mov	r8, r3
    1782:	e06b      	b.n	185c <__aeabi_ddiv+0x19c>
    1784:	0003      	movs	r3, r0
    1786:	4333      	orrs	r3, r6
    1788:	4699      	mov	r9, r3
    178a:	d04e      	beq.n	182a <__aeabi_ddiv+0x16a>
    178c:	2e00      	cmp	r6, #0
    178e:	d100      	bne.n	1792 <__aeabi_ddiv+0xd2>
    1790:	e1bc      	b.n	1b0c <__aeabi_ddiv+0x44c>
    1792:	0030      	movs	r0, r6
    1794:	f001 f8ca 	bl	292c <__clzsi2>
    1798:	0003      	movs	r3, r0
    179a:	3b0b      	subs	r3, #11
    179c:	2b1c      	cmp	r3, #28
    179e:	dd00      	ble.n	17a2 <__aeabi_ddiv+0xe2>
    17a0:	e1ac      	b.n	1afc <__aeabi_ddiv+0x43c>
    17a2:	221d      	movs	r2, #29
    17a4:	1ad3      	subs	r3, r2, r3
    17a6:	465a      	mov	r2, fp
    17a8:	0001      	movs	r1, r0
    17aa:	40da      	lsrs	r2, r3
    17ac:	3908      	subs	r1, #8
    17ae:	408e      	lsls	r6, r1
    17b0:	0013      	movs	r3, r2
    17b2:	4333      	orrs	r3, r6
    17b4:	4699      	mov	r9, r3
    17b6:	465b      	mov	r3, fp
    17b8:	408b      	lsls	r3, r1
    17ba:	4698      	mov	r8, r3
    17bc:	2300      	movs	r3, #0
    17be:	4c3c      	ldr	r4, [pc, #240]	; (18b0 <__aeabi_ddiv+0x1f0>)
    17c0:	2600      	movs	r6, #0
    17c2:	1a24      	subs	r4, r4, r0
    17c4:	9303      	str	r3, [sp, #12]
    17c6:	e79f      	b.n	1708 <__aeabi_ddiv+0x48>
    17c8:	4651      	mov	r1, sl
    17ca:	465a      	mov	r2, fp
    17cc:	4311      	orrs	r1, r2
    17ce:	d129      	bne.n	1824 <__aeabi_ddiv+0x164>
    17d0:	2200      	movs	r2, #0
    17d2:	4693      	mov	fp, r2
    17d4:	3202      	adds	r2, #2
    17d6:	e7b1      	b.n	173c <__aeabi_ddiv+0x7c>
    17d8:	4659      	mov	r1, fp
    17da:	4301      	orrs	r1, r0
    17dc:	d01e      	beq.n	181c <__aeabi_ddiv+0x15c>
    17de:	465b      	mov	r3, fp
    17e0:	2b00      	cmp	r3, #0
    17e2:	d100      	bne.n	17e6 <__aeabi_ddiv+0x126>
    17e4:	e19e      	b.n	1b24 <__aeabi_ddiv+0x464>
    17e6:	4658      	mov	r0, fp
    17e8:	f001 f8a0 	bl	292c <__clzsi2>
    17ec:	0003      	movs	r3, r0
    17ee:	3b0b      	subs	r3, #11
    17f0:	2b1c      	cmp	r3, #28
    17f2:	dd00      	ble.n	17f6 <__aeabi_ddiv+0x136>
    17f4:	e18f      	b.n	1b16 <__aeabi_ddiv+0x456>
    17f6:	0002      	movs	r2, r0
    17f8:	4659      	mov	r1, fp
    17fa:	3a08      	subs	r2, #8
    17fc:	4091      	lsls	r1, r2
    17fe:	468b      	mov	fp, r1
    1800:	211d      	movs	r1, #29
    1802:	1acb      	subs	r3, r1, r3
    1804:	4651      	mov	r1, sl
    1806:	40d9      	lsrs	r1, r3
    1808:	000b      	movs	r3, r1
    180a:	4659      	mov	r1, fp
    180c:	430b      	orrs	r3, r1
    180e:	4651      	mov	r1, sl
    1810:	469b      	mov	fp, r3
    1812:	4091      	lsls	r1, r2
    1814:	4b26      	ldr	r3, [pc, #152]	; (18b0 <__aeabi_ddiv+0x1f0>)
    1816:	2200      	movs	r2, #0
    1818:	1a1b      	subs	r3, r3, r0
    181a:	e78f      	b.n	173c <__aeabi_ddiv+0x7c>
    181c:	2300      	movs	r3, #0
    181e:	2201      	movs	r2, #1
    1820:	469b      	mov	fp, r3
    1822:	e78b      	b.n	173c <__aeabi_ddiv+0x7c>
    1824:	4651      	mov	r1, sl
    1826:	2203      	movs	r2, #3
    1828:	e788      	b.n	173c <__aeabi_ddiv+0x7c>
    182a:	2300      	movs	r3, #0
    182c:	4698      	mov	r8, r3
    182e:	3301      	adds	r3, #1
    1830:	2604      	movs	r6, #4
    1832:	2400      	movs	r4, #0
    1834:	9303      	str	r3, [sp, #12]
    1836:	e767      	b.n	1708 <__aeabi_ddiv+0x48>
    1838:	2303      	movs	r3, #3
    183a:	46b1      	mov	r9, r6
    183c:	9303      	str	r3, [sp, #12]
    183e:	260c      	movs	r6, #12
    1840:	e762      	b.n	1708 <__aeabi_ddiv+0x48>
    1842:	2a03      	cmp	r2, #3
    1844:	d100      	bne.n	1848 <__aeabi_ddiv+0x188>
    1846:	e25c      	b.n	1d02 <__aeabi_ddiv+0x642>
    1848:	9b01      	ldr	r3, [sp, #4]
    184a:	2a01      	cmp	r2, #1
    184c:	d000      	beq.n	1850 <__aeabi_ddiv+0x190>
    184e:	e1e4      	b.n	1c1a <__aeabi_ddiv+0x55a>
    1850:	4013      	ands	r3, r2
    1852:	469c      	mov	ip, r3
    1854:	2300      	movs	r3, #0
    1856:	2400      	movs	r4, #0
    1858:	2200      	movs	r2, #0
    185a:	4698      	mov	r8, r3
    185c:	2100      	movs	r1, #0
    185e:	0312      	lsls	r2, r2, #12
    1860:	0b13      	lsrs	r3, r2, #12
    1862:	0d0a      	lsrs	r2, r1, #20
    1864:	0512      	lsls	r2, r2, #20
    1866:	431a      	orrs	r2, r3
    1868:	0523      	lsls	r3, r4, #20
    186a:	4c12      	ldr	r4, [pc, #72]	; (18b4 <__aeabi_ddiv+0x1f4>)
    186c:	4640      	mov	r0, r8
    186e:	4022      	ands	r2, r4
    1870:	4313      	orrs	r3, r2
    1872:	4662      	mov	r2, ip
    1874:	005b      	lsls	r3, r3, #1
    1876:	07d2      	lsls	r2, r2, #31
    1878:	085b      	lsrs	r3, r3, #1
    187a:	4313      	orrs	r3, r2
    187c:	0019      	movs	r1, r3
    187e:	b007      	add	sp, #28
    1880:	bc3c      	pop	{r2, r3, r4, r5}
    1882:	4690      	mov	r8, r2
    1884:	4699      	mov	r9, r3
    1886:	46a2      	mov	sl, r4
    1888:	46ab      	mov	fp, r5
    188a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    188c:	2300      	movs	r3, #0
    188e:	2280      	movs	r2, #128	; 0x80
    1890:	469c      	mov	ip, r3
    1892:	0312      	lsls	r2, r2, #12
    1894:	4698      	mov	r8, r3
    1896:	4c03      	ldr	r4, [pc, #12]	; (18a4 <__aeabi_ddiv+0x1e4>)
    1898:	e7e0      	b.n	185c <__aeabi_ddiv+0x19c>
    189a:	2300      	movs	r3, #0
    189c:	4c01      	ldr	r4, [pc, #4]	; (18a4 <__aeabi_ddiv+0x1e4>)
    189e:	2200      	movs	r2, #0
    18a0:	4698      	mov	r8, r3
    18a2:	e7db      	b.n	185c <__aeabi_ddiv+0x19c>
    18a4:	000007ff 	.word	0x000007ff
    18a8:	fffffc01 	.word	0xfffffc01
    18ac:	000029f4 	.word	0x000029f4
    18b0:	fffffc0d 	.word	0xfffffc0d
    18b4:	800fffff 	.word	0x800fffff
    18b8:	45d9      	cmp	r9, fp
    18ba:	d900      	bls.n	18be <__aeabi_ddiv+0x1fe>
    18bc:	e139      	b.n	1b32 <__aeabi_ddiv+0x472>
    18be:	d100      	bne.n	18c2 <__aeabi_ddiv+0x202>
    18c0:	e134      	b.n	1b2c <__aeabi_ddiv+0x46c>
    18c2:	2300      	movs	r3, #0
    18c4:	4646      	mov	r6, r8
    18c6:	464d      	mov	r5, r9
    18c8:	469a      	mov	sl, r3
    18ca:	3c01      	subs	r4, #1
    18cc:	465b      	mov	r3, fp
    18ce:	0e0a      	lsrs	r2, r1, #24
    18d0:	021b      	lsls	r3, r3, #8
    18d2:	431a      	orrs	r2, r3
    18d4:	020b      	lsls	r3, r1, #8
    18d6:	0c17      	lsrs	r7, r2, #16
    18d8:	9303      	str	r3, [sp, #12]
    18da:	0413      	lsls	r3, r2, #16
    18dc:	0c1b      	lsrs	r3, r3, #16
    18de:	0039      	movs	r1, r7
    18e0:	0028      	movs	r0, r5
    18e2:	4690      	mov	r8, r2
    18e4:	9301      	str	r3, [sp, #4]
    18e6:	f7ff fb4f 	bl	f88 <__udivsi3>
    18ea:	0002      	movs	r2, r0
    18ec:	9b01      	ldr	r3, [sp, #4]
    18ee:	4683      	mov	fp, r0
    18f0:	435a      	muls	r2, r3
    18f2:	0028      	movs	r0, r5
    18f4:	0039      	movs	r1, r7
    18f6:	4691      	mov	r9, r2
    18f8:	f7ff fbcc 	bl	1094 <__aeabi_uidivmod>
    18fc:	0c35      	lsrs	r5, r6, #16
    18fe:	0409      	lsls	r1, r1, #16
    1900:	430d      	orrs	r5, r1
    1902:	45a9      	cmp	r9, r5
    1904:	d90d      	bls.n	1922 <__aeabi_ddiv+0x262>
    1906:	465b      	mov	r3, fp
    1908:	4445      	add	r5, r8
    190a:	3b01      	subs	r3, #1
    190c:	45a8      	cmp	r8, r5
    190e:	d900      	bls.n	1912 <__aeabi_ddiv+0x252>
    1910:	e13a      	b.n	1b88 <__aeabi_ddiv+0x4c8>
    1912:	45a9      	cmp	r9, r5
    1914:	d800      	bhi.n	1918 <__aeabi_ddiv+0x258>
    1916:	e137      	b.n	1b88 <__aeabi_ddiv+0x4c8>
    1918:	2302      	movs	r3, #2
    191a:	425b      	negs	r3, r3
    191c:	469c      	mov	ip, r3
    191e:	4445      	add	r5, r8
    1920:	44e3      	add	fp, ip
    1922:	464b      	mov	r3, r9
    1924:	1aeb      	subs	r3, r5, r3
    1926:	0039      	movs	r1, r7
    1928:	0018      	movs	r0, r3
    192a:	9304      	str	r3, [sp, #16]
    192c:	f7ff fb2c 	bl	f88 <__udivsi3>
    1930:	9b01      	ldr	r3, [sp, #4]
    1932:	0005      	movs	r5, r0
    1934:	4343      	muls	r3, r0
    1936:	0039      	movs	r1, r7
    1938:	9804      	ldr	r0, [sp, #16]
    193a:	4699      	mov	r9, r3
    193c:	f7ff fbaa 	bl	1094 <__aeabi_uidivmod>
    1940:	0433      	lsls	r3, r6, #16
    1942:	0409      	lsls	r1, r1, #16
    1944:	0c1b      	lsrs	r3, r3, #16
    1946:	430b      	orrs	r3, r1
    1948:	4599      	cmp	r9, r3
    194a:	d909      	bls.n	1960 <__aeabi_ddiv+0x2a0>
    194c:	4443      	add	r3, r8
    194e:	1e6a      	subs	r2, r5, #1
    1950:	4598      	cmp	r8, r3
    1952:	d900      	bls.n	1956 <__aeabi_ddiv+0x296>
    1954:	e11a      	b.n	1b8c <__aeabi_ddiv+0x4cc>
    1956:	4599      	cmp	r9, r3
    1958:	d800      	bhi.n	195c <__aeabi_ddiv+0x29c>
    195a:	e117      	b.n	1b8c <__aeabi_ddiv+0x4cc>
    195c:	3d02      	subs	r5, #2
    195e:	4443      	add	r3, r8
    1960:	464a      	mov	r2, r9
    1962:	1a9b      	subs	r3, r3, r2
    1964:	465a      	mov	r2, fp
    1966:	0412      	lsls	r2, r2, #16
    1968:	432a      	orrs	r2, r5
    196a:	9903      	ldr	r1, [sp, #12]
    196c:	4693      	mov	fp, r2
    196e:	0c10      	lsrs	r0, r2, #16
    1970:	0c0a      	lsrs	r2, r1, #16
    1972:	4691      	mov	r9, r2
    1974:	0409      	lsls	r1, r1, #16
    1976:	465a      	mov	r2, fp
    1978:	0c09      	lsrs	r1, r1, #16
    197a:	464e      	mov	r6, r9
    197c:	000d      	movs	r5, r1
    197e:	0412      	lsls	r2, r2, #16
    1980:	0c12      	lsrs	r2, r2, #16
    1982:	4345      	muls	r5, r0
    1984:	9105      	str	r1, [sp, #20]
    1986:	4351      	muls	r1, r2
    1988:	4372      	muls	r2, r6
    198a:	4370      	muls	r0, r6
    198c:	1952      	adds	r2, r2, r5
    198e:	0c0e      	lsrs	r6, r1, #16
    1990:	18b2      	adds	r2, r6, r2
    1992:	4295      	cmp	r5, r2
    1994:	d903      	bls.n	199e <__aeabi_ddiv+0x2de>
    1996:	2580      	movs	r5, #128	; 0x80
    1998:	026d      	lsls	r5, r5, #9
    199a:	46ac      	mov	ip, r5
    199c:	4460      	add	r0, ip
    199e:	0c15      	lsrs	r5, r2, #16
    19a0:	0409      	lsls	r1, r1, #16
    19a2:	0412      	lsls	r2, r2, #16
    19a4:	0c09      	lsrs	r1, r1, #16
    19a6:	1828      	adds	r0, r5, r0
    19a8:	1852      	adds	r2, r2, r1
    19aa:	4283      	cmp	r3, r0
    19ac:	d200      	bcs.n	19b0 <__aeabi_ddiv+0x2f0>
    19ae:	e0ce      	b.n	1b4e <__aeabi_ddiv+0x48e>
    19b0:	d100      	bne.n	19b4 <__aeabi_ddiv+0x2f4>
    19b2:	e0c8      	b.n	1b46 <__aeabi_ddiv+0x486>
    19b4:	1a1d      	subs	r5, r3, r0
    19b6:	4653      	mov	r3, sl
    19b8:	1a9e      	subs	r6, r3, r2
    19ba:	45b2      	cmp	sl, r6
    19bc:	4192      	sbcs	r2, r2
    19be:	4252      	negs	r2, r2
    19c0:	1aab      	subs	r3, r5, r2
    19c2:	469a      	mov	sl, r3
    19c4:	4598      	cmp	r8, r3
    19c6:	d100      	bne.n	19ca <__aeabi_ddiv+0x30a>
    19c8:	e117      	b.n	1bfa <__aeabi_ddiv+0x53a>
    19ca:	0039      	movs	r1, r7
    19cc:	0018      	movs	r0, r3
    19ce:	f7ff fadb 	bl	f88 <__udivsi3>
    19d2:	9b01      	ldr	r3, [sp, #4]
    19d4:	0005      	movs	r5, r0
    19d6:	4343      	muls	r3, r0
    19d8:	0039      	movs	r1, r7
    19da:	4650      	mov	r0, sl
    19dc:	9304      	str	r3, [sp, #16]
    19de:	f7ff fb59 	bl	1094 <__aeabi_uidivmod>
    19e2:	9804      	ldr	r0, [sp, #16]
    19e4:	040b      	lsls	r3, r1, #16
    19e6:	0c31      	lsrs	r1, r6, #16
    19e8:	4319      	orrs	r1, r3
    19ea:	4288      	cmp	r0, r1
    19ec:	d909      	bls.n	1a02 <__aeabi_ddiv+0x342>
    19ee:	4441      	add	r1, r8
    19f0:	1e6b      	subs	r3, r5, #1
    19f2:	4588      	cmp	r8, r1
    19f4:	d900      	bls.n	19f8 <__aeabi_ddiv+0x338>
    19f6:	e107      	b.n	1c08 <__aeabi_ddiv+0x548>
    19f8:	4288      	cmp	r0, r1
    19fa:	d800      	bhi.n	19fe <__aeabi_ddiv+0x33e>
    19fc:	e104      	b.n	1c08 <__aeabi_ddiv+0x548>
    19fe:	3d02      	subs	r5, #2
    1a00:	4441      	add	r1, r8
    1a02:	9b04      	ldr	r3, [sp, #16]
    1a04:	1acb      	subs	r3, r1, r3
    1a06:	0018      	movs	r0, r3
    1a08:	0039      	movs	r1, r7
    1a0a:	9304      	str	r3, [sp, #16]
    1a0c:	f7ff fabc 	bl	f88 <__udivsi3>
    1a10:	9b01      	ldr	r3, [sp, #4]
    1a12:	4682      	mov	sl, r0
    1a14:	4343      	muls	r3, r0
    1a16:	0039      	movs	r1, r7
    1a18:	9804      	ldr	r0, [sp, #16]
    1a1a:	9301      	str	r3, [sp, #4]
    1a1c:	f7ff fb3a 	bl	1094 <__aeabi_uidivmod>
    1a20:	9801      	ldr	r0, [sp, #4]
    1a22:	040b      	lsls	r3, r1, #16
    1a24:	0431      	lsls	r1, r6, #16
    1a26:	0c09      	lsrs	r1, r1, #16
    1a28:	4319      	orrs	r1, r3
    1a2a:	4288      	cmp	r0, r1
    1a2c:	d90d      	bls.n	1a4a <__aeabi_ddiv+0x38a>
    1a2e:	4653      	mov	r3, sl
    1a30:	4441      	add	r1, r8
    1a32:	3b01      	subs	r3, #1
    1a34:	4588      	cmp	r8, r1
    1a36:	d900      	bls.n	1a3a <__aeabi_ddiv+0x37a>
    1a38:	e0e8      	b.n	1c0c <__aeabi_ddiv+0x54c>
    1a3a:	4288      	cmp	r0, r1
    1a3c:	d800      	bhi.n	1a40 <__aeabi_ddiv+0x380>
    1a3e:	e0e5      	b.n	1c0c <__aeabi_ddiv+0x54c>
    1a40:	2302      	movs	r3, #2
    1a42:	425b      	negs	r3, r3
    1a44:	469c      	mov	ip, r3
    1a46:	4441      	add	r1, r8
    1a48:	44e2      	add	sl, ip
    1a4a:	9b01      	ldr	r3, [sp, #4]
    1a4c:	042d      	lsls	r5, r5, #16
    1a4e:	1ace      	subs	r6, r1, r3
    1a50:	4651      	mov	r1, sl
    1a52:	4329      	orrs	r1, r5
    1a54:	9d05      	ldr	r5, [sp, #20]
    1a56:	464f      	mov	r7, r9
    1a58:	002a      	movs	r2, r5
    1a5a:	040b      	lsls	r3, r1, #16
    1a5c:	0c08      	lsrs	r0, r1, #16
    1a5e:	0c1b      	lsrs	r3, r3, #16
    1a60:	435a      	muls	r2, r3
    1a62:	4345      	muls	r5, r0
    1a64:	437b      	muls	r3, r7
    1a66:	4378      	muls	r0, r7
    1a68:	195b      	adds	r3, r3, r5
    1a6a:	0c17      	lsrs	r7, r2, #16
    1a6c:	18fb      	adds	r3, r7, r3
    1a6e:	429d      	cmp	r5, r3
    1a70:	d903      	bls.n	1a7a <__aeabi_ddiv+0x3ba>
    1a72:	2580      	movs	r5, #128	; 0x80
    1a74:	026d      	lsls	r5, r5, #9
    1a76:	46ac      	mov	ip, r5
    1a78:	4460      	add	r0, ip
    1a7a:	0c1d      	lsrs	r5, r3, #16
    1a7c:	0412      	lsls	r2, r2, #16
    1a7e:	041b      	lsls	r3, r3, #16
    1a80:	0c12      	lsrs	r2, r2, #16
    1a82:	1828      	adds	r0, r5, r0
    1a84:	189b      	adds	r3, r3, r2
    1a86:	4286      	cmp	r6, r0
    1a88:	d200      	bcs.n	1a8c <__aeabi_ddiv+0x3cc>
    1a8a:	e093      	b.n	1bb4 <__aeabi_ddiv+0x4f4>
    1a8c:	d100      	bne.n	1a90 <__aeabi_ddiv+0x3d0>
    1a8e:	e08e      	b.n	1bae <__aeabi_ddiv+0x4ee>
    1a90:	2301      	movs	r3, #1
    1a92:	4319      	orrs	r1, r3
    1a94:	4ba0      	ldr	r3, [pc, #640]	; (1d18 <__aeabi_ddiv+0x658>)
    1a96:	18e3      	adds	r3, r4, r3
    1a98:	2b00      	cmp	r3, #0
    1a9a:	dc00      	bgt.n	1a9e <__aeabi_ddiv+0x3de>
    1a9c:	e099      	b.n	1bd2 <__aeabi_ddiv+0x512>
    1a9e:	074a      	lsls	r2, r1, #29
    1aa0:	d000      	beq.n	1aa4 <__aeabi_ddiv+0x3e4>
    1aa2:	e09e      	b.n	1be2 <__aeabi_ddiv+0x522>
    1aa4:	465a      	mov	r2, fp
    1aa6:	01d2      	lsls	r2, r2, #7
    1aa8:	d506      	bpl.n	1ab8 <__aeabi_ddiv+0x3f8>
    1aaa:	465a      	mov	r2, fp
    1aac:	4b9b      	ldr	r3, [pc, #620]	; (1d1c <__aeabi_ddiv+0x65c>)
    1aae:	401a      	ands	r2, r3
    1ab0:	2380      	movs	r3, #128	; 0x80
    1ab2:	4693      	mov	fp, r2
    1ab4:	00db      	lsls	r3, r3, #3
    1ab6:	18e3      	adds	r3, r4, r3
    1ab8:	4a99      	ldr	r2, [pc, #612]	; (1d20 <__aeabi_ddiv+0x660>)
    1aba:	4293      	cmp	r3, r2
    1abc:	dd68      	ble.n	1b90 <__aeabi_ddiv+0x4d0>
    1abe:	2301      	movs	r3, #1
    1ac0:	9a02      	ldr	r2, [sp, #8]
    1ac2:	4c98      	ldr	r4, [pc, #608]	; (1d24 <__aeabi_ddiv+0x664>)
    1ac4:	401a      	ands	r2, r3
    1ac6:	2300      	movs	r3, #0
    1ac8:	4694      	mov	ip, r2
    1aca:	4698      	mov	r8, r3
    1acc:	2200      	movs	r2, #0
    1ace:	e6c5      	b.n	185c <__aeabi_ddiv+0x19c>
    1ad0:	2280      	movs	r2, #128	; 0x80
    1ad2:	464b      	mov	r3, r9
    1ad4:	0312      	lsls	r2, r2, #12
    1ad6:	4213      	tst	r3, r2
    1ad8:	d00a      	beq.n	1af0 <__aeabi_ddiv+0x430>
    1ada:	465b      	mov	r3, fp
    1adc:	4213      	tst	r3, r2
    1ade:	d106      	bne.n	1aee <__aeabi_ddiv+0x42e>
    1ae0:	431a      	orrs	r2, r3
    1ae2:	0312      	lsls	r2, r2, #12
    1ae4:	0b12      	lsrs	r2, r2, #12
    1ae6:	46ac      	mov	ip, r5
    1ae8:	4688      	mov	r8, r1
    1aea:	4c8e      	ldr	r4, [pc, #568]	; (1d24 <__aeabi_ddiv+0x664>)
    1aec:	e6b6      	b.n	185c <__aeabi_ddiv+0x19c>
    1aee:	464b      	mov	r3, r9
    1af0:	431a      	orrs	r2, r3
    1af2:	0312      	lsls	r2, r2, #12
    1af4:	0b12      	lsrs	r2, r2, #12
    1af6:	46bc      	mov	ip, r7
    1af8:	4c8a      	ldr	r4, [pc, #552]	; (1d24 <__aeabi_ddiv+0x664>)
    1afa:	e6af      	b.n	185c <__aeabi_ddiv+0x19c>
    1afc:	0003      	movs	r3, r0
    1afe:	465a      	mov	r2, fp
    1b00:	3b28      	subs	r3, #40	; 0x28
    1b02:	409a      	lsls	r2, r3
    1b04:	2300      	movs	r3, #0
    1b06:	4691      	mov	r9, r2
    1b08:	4698      	mov	r8, r3
    1b0a:	e657      	b.n	17bc <__aeabi_ddiv+0xfc>
    1b0c:	4658      	mov	r0, fp
    1b0e:	f000 ff0d 	bl	292c <__clzsi2>
    1b12:	3020      	adds	r0, #32
    1b14:	e640      	b.n	1798 <__aeabi_ddiv+0xd8>
    1b16:	0003      	movs	r3, r0
    1b18:	4652      	mov	r2, sl
    1b1a:	3b28      	subs	r3, #40	; 0x28
    1b1c:	409a      	lsls	r2, r3
    1b1e:	2100      	movs	r1, #0
    1b20:	4693      	mov	fp, r2
    1b22:	e677      	b.n	1814 <__aeabi_ddiv+0x154>
    1b24:	f000 ff02 	bl	292c <__clzsi2>
    1b28:	3020      	adds	r0, #32
    1b2a:	e65f      	b.n	17ec <__aeabi_ddiv+0x12c>
    1b2c:	4588      	cmp	r8, r1
    1b2e:	d200      	bcs.n	1b32 <__aeabi_ddiv+0x472>
    1b30:	e6c7      	b.n	18c2 <__aeabi_ddiv+0x202>
    1b32:	464b      	mov	r3, r9
    1b34:	07de      	lsls	r6, r3, #31
    1b36:	085d      	lsrs	r5, r3, #1
    1b38:	4643      	mov	r3, r8
    1b3a:	085b      	lsrs	r3, r3, #1
    1b3c:	431e      	orrs	r6, r3
    1b3e:	4643      	mov	r3, r8
    1b40:	07db      	lsls	r3, r3, #31
    1b42:	469a      	mov	sl, r3
    1b44:	e6c2      	b.n	18cc <__aeabi_ddiv+0x20c>
    1b46:	2500      	movs	r5, #0
    1b48:	4592      	cmp	sl, r2
    1b4a:	d300      	bcc.n	1b4e <__aeabi_ddiv+0x48e>
    1b4c:	e733      	b.n	19b6 <__aeabi_ddiv+0x2f6>
    1b4e:	9e03      	ldr	r6, [sp, #12]
    1b50:	4659      	mov	r1, fp
    1b52:	46b4      	mov	ip, r6
    1b54:	44e2      	add	sl, ip
    1b56:	45b2      	cmp	sl, r6
    1b58:	41ad      	sbcs	r5, r5
    1b5a:	426d      	negs	r5, r5
    1b5c:	4445      	add	r5, r8
    1b5e:	18eb      	adds	r3, r5, r3
    1b60:	3901      	subs	r1, #1
    1b62:	4598      	cmp	r8, r3
    1b64:	d207      	bcs.n	1b76 <__aeabi_ddiv+0x4b6>
    1b66:	4298      	cmp	r0, r3
    1b68:	d900      	bls.n	1b6c <__aeabi_ddiv+0x4ac>
    1b6a:	e07f      	b.n	1c6c <__aeabi_ddiv+0x5ac>
    1b6c:	d100      	bne.n	1b70 <__aeabi_ddiv+0x4b0>
    1b6e:	e0bc      	b.n	1cea <__aeabi_ddiv+0x62a>
    1b70:	1a1d      	subs	r5, r3, r0
    1b72:	468b      	mov	fp, r1
    1b74:	e71f      	b.n	19b6 <__aeabi_ddiv+0x2f6>
    1b76:	4598      	cmp	r8, r3
    1b78:	d1fa      	bne.n	1b70 <__aeabi_ddiv+0x4b0>
    1b7a:	9d03      	ldr	r5, [sp, #12]
    1b7c:	4555      	cmp	r5, sl
    1b7e:	d9f2      	bls.n	1b66 <__aeabi_ddiv+0x4a6>
    1b80:	4643      	mov	r3, r8
    1b82:	468b      	mov	fp, r1
    1b84:	1a1d      	subs	r5, r3, r0
    1b86:	e716      	b.n	19b6 <__aeabi_ddiv+0x2f6>
    1b88:	469b      	mov	fp, r3
    1b8a:	e6ca      	b.n	1922 <__aeabi_ddiv+0x262>
    1b8c:	0015      	movs	r5, r2
    1b8e:	e6e7      	b.n	1960 <__aeabi_ddiv+0x2a0>
    1b90:	465a      	mov	r2, fp
    1b92:	08c9      	lsrs	r1, r1, #3
    1b94:	0752      	lsls	r2, r2, #29
    1b96:	430a      	orrs	r2, r1
    1b98:	055b      	lsls	r3, r3, #21
    1b9a:	4690      	mov	r8, r2
    1b9c:	0d5c      	lsrs	r4, r3, #21
    1b9e:	465a      	mov	r2, fp
    1ba0:	2301      	movs	r3, #1
    1ba2:	9902      	ldr	r1, [sp, #8]
    1ba4:	0252      	lsls	r2, r2, #9
    1ba6:	4019      	ands	r1, r3
    1ba8:	0b12      	lsrs	r2, r2, #12
    1baa:	468c      	mov	ip, r1
    1bac:	e656      	b.n	185c <__aeabi_ddiv+0x19c>
    1bae:	2b00      	cmp	r3, #0
    1bb0:	d100      	bne.n	1bb4 <__aeabi_ddiv+0x4f4>
    1bb2:	e76f      	b.n	1a94 <__aeabi_ddiv+0x3d4>
    1bb4:	4446      	add	r6, r8
    1bb6:	1e4a      	subs	r2, r1, #1
    1bb8:	45b0      	cmp	r8, r6
    1bba:	d929      	bls.n	1c10 <__aeabi_ddiv+0x550>
    1bbc:	0011      	movs	r1, r2
    1bbe:	4286      	cmp	r6, r0
    1bc0:	d000      	beq.n	1bc4 <__aeabi_ddiv+0x504>
    1bc2:	e765      	b.n	1a90 <__aeabi_ddiv+0x3d0>
    1bc4:	9a03      	ldr	r2, [sp, #12]
    1bc6:	4293      	cmp	r3, r2
    1bc8:	d000      	beq.n	1bcc <__aeabi_ddiv+0x50c>
    1bca:	e761      	b.n	1a90 <__aeabi_ddiv+0x3d0>
    1bcc:	e762      	b.n	1a94 <__aeabi_ddiv+0x3d4>
    1bce:	2101      	movs	r1, #1
    1bd0:	4249      	negs	r1, r1
    1bd2:	2001      	movs	r0, #1
    1bd4:	1ac2      	subs	r2, r0, r3
    1bd6:	2a38      	cmp	r2, #56	; 0x38
    1bd8:	dd21      	ble.n	1c1e <__aeabi_ddiv+0x55e>
    1bda:	9b02      	ldr	r3, [sp, #8]
    1bdc:	4003      	ands	r3, r0
    1bde:	469c      	mov	ip, r3
    1be0:	e638      	b.n	1854 <__aeabi_ddiv+0x194>
    1be2:	220f      	movs	r2, #15
    1be4:	400a      	ands	r2, r1
    1be6:	2a04      	cmp	r2, #4
    1be8:	d100      	bne.n	1bec <__aeabi_ddiv+0x52c>
    1bea:	e75b      	b.n	1aa4 <__aeabi_ddiv+0x3e4>
    1bec:	000a      	movs	r2, r1
    1bee:	1d11      	adds	r1, r2, #4
    1bf0:	4291      	cmp	r1, r2
    1bf2:	4192      	sbcs	r2, r2
    1bf4:	4252      	negs	r2, r2
    1bf6:	4493      	add	fp, r2
    1bf8:	e754      	b.n	1aa4 <__aeabi_ddiv+0x3e4>
    1bfa:	4b47      	ldr	r3, [pc, #284]	; (1d18 <__aeabi_ddiv+0x658>)
    1bfc:	18e3      	adds	r3, r4, r3
    1bfe:	2b00      	cmp	r3, #0
    1c00:	dde5      	ble.n	1bce <__aeabi_ddiv+0x50e>
    1c02:	2201      	movs	r2, #1
    1c04:	4252      	negs	r2, r2
    1c06:	e7f2      	b.n	1bee <__aeabi_ddiv+0x52e>
    1c08:	001d      	movs	r5, r3
    1c0a:	e6fa      	b.n	1a02 <__aeabi_ddiv+0x342>
    1c0c:	469a      	mov	sl, r3
    1c0e:	e71c      	b.n	1a4a <__aeabi_ddiv+0x38a>
    1c10:	42b0      	cmp	r0, r6
    1c12:	d839      	bhi.n	1c88 <__aeabi_ddiv+0x5c8>
    1c14:	d06e      	beq.n	1cf4 <__aeabi_ddiv+0x634>
    1c16:	0011      	movs	r1, r2
    1c18:	e73a      	b.n	1a90 <__aeabi_ddiv+0x3d0>
    1c1a:	9302      	str	r3, [sp, #8]
    1c1c:	e73a      	b.n	1a94 <__aeabi_ddiv+0x3d4>
    1c1e:	2a1f      	cmp	r2, #31
    1c20:	dc3c      	bgt.n	1c9c <__aeabi_ddiv+0x5dc>
    1c22:	2320      	movs	r3, #32
    1c24:	1a9b      	subs	r3, r3, r2
    1c26:	000c      	movs	r4, r1
    1c28:	4658      	mov	r0, fp
    1c2a:	4099      	lsls	r1, r3
    1c2c:	4098      	lsls	r0, r3
    1c2e:	1e4b      	subs	r3, r1, #1
    1c30:	4199      	sbcs	r1, r3
    1c32:	465b      	mov	r3, fp
    1c34:	40d4      	lsrs	r4, r2
    1c36:	40d3      	lsrs	r3, r2
    1c38:	4320      	orrs	r0, r4
    1c3a:	4308      	orrs	r0, r1
    1c3c:	001a      	movs	r2, r3
    1c3e:	0743      	lsls	r3, r0, #29
    1c40:	d009      	beq.n	1c56 <__aeabi_ddiv+0x596>
    1c42:	230f      	movs	r3, #15
    1c44:	4003      	ands	r3, r0
    1c46:	2b04      	cmp	r3, #4
    1c48:	d005      	beq.n	1c56 <__aeabi_ddiv+0x596>
    1c4a:	0001      	movs	r1, r0
    1c4c:	1d08      	adds	r0, r1, #4
    1c4e:	4288      	cmp	r0, r1
    1c50:	419b      	sbcs	r3, r3
    1c52:	425b      	negs	r3, r3
    1c54:	18d2      	adds	r2, r2, r3
    1c56:	0213      	lsls	r3, r2, #8
    1c58:	d53a      	bpl.n	1cd0 <__aeabi_ddiv+0x610>
    1c5a:	2301      	movs	r3, #1
    1c5c:	9a02      	ldr	r2, [sp, #8]
    1c5e:	2401      	movs	r4, #1
    1c60:	401a      	ands	r2, r3
    1c62:	2300      	movs	r3, #0
    1c64:	4694      	mov	ip, r2
    1c66:	4698      	mov	r8, r3
    1c68:	2200      	movs	r2, #0
    1c6a:	e5f7      	b.n	185c <__aeabi_ddiv+0x19c>
    1c6c:	2102      	movs	r1, #2
    1c6e:	4249      	negs	r1, r1
    1c70:	468c      	mov	ip, r1
    1c72:	9d03      	ldr	r5, [sp, #12]
    1c74:	44e3      	add	fp, ip
    1c76:	46ac      	mov	ip, r5
    1c78:	44e2      	add	sl, ip
    1c7a:	45aa      	cmp	sl, r5
    1c7c:	41ad      	sbcs	r5, r5
    1c7e:	426d      	negs	r5, r5
    1c80:	4445      	add	r5, r8
    1c82:	18ed      	adds	r5, r5, r3
    1c84:	1a2d      	subs	r5, r5, r0
    1c86:	e696      	b.n	19b6 <__aeabi_ddiv+0x2f6>
    1c88:	1e8a      	subs	r2, r1, #2
    1c8a:	9903      	ldr	r1, [sp, #12]
    1c8c:	004d      	lsls	r5, r1, #1
    1c8e:	428d      	cmp	r5, r1
    1c90:	4189      	sbcs	r1, r1
    1c92:	4249      	negs	r1, r1
    1c94:	4441      	add	r1, r8
    1c96:	1876      	adds	r6, r6, r1
    1c98:	9503      	str	r5, [sp, #12]
    1c9a:	e78f      	b.n	1bbc <__aeabi_ddiv+0x4fc>
    1c9c:	201f      	movs	r0, #31
    1c9e:	4240      	negs	r0, r0
    1ca0:	1ac3      	subs	r3, r0, r3
    1ca2:	4658      	mov	r0, fp
    1ca4:	40d8      	lsrs	r0, r3
    1ca6:	0003      	movs	r3, r0
    1ca8:	2a20      	cmp	r2, #32
    1caa:	d028      	beq.n	1cfe <__aeabi_ddiv+0x63e>
    1cac:	2040      	movs	r0, #64	; 0x40
    1cae:	465d      	mov	r5, fp
    1cb0:	1a82      	subs	r2, r0, r2
    1cb2:	4095      	lsls	r5, r2
    1cb4:	4329      	orrs	r1, r5
    1cb6:	1e4a      	subs	r2, r1, #1
    1cb8:	4191      	sbcs	r1, r2
    1cba:	4319      	orrs	r1, r3
    1cbc:	2307      	movs	r3, #7
    1cbe:	2200      	movs	r2, #0
    1cc0:	400b      	ands	r3, r1
    1cc2:	d009      	beq.n	1cd8 <__aeabi_ddiv+0x618>
    1cc4:	230f      	movs	r3, #15
    1cc6:	2200      	movs	r2, #0
    1cc8:	400b      	ands	r3, r1
    1cca:	0008      	movs	r0, r1
    1ccc:	2b04      	cmp	r3, #4
    1cce:	d1bd      	bne.n	1c4c <__aeabi_ddiv+0x58c>
    1cd0:	0001      	movs	r1, r0
    1cd2:	0753      	lsls	r3, r2, #29
    1cd4:	0252      	lsls	r2, r2, #9
    1cd6:	0b12      	lsrs	r2, r2, #12
    1cd8:	08c9      	lsrs	r1, r1, #3
    1cda:	4319      	orrs	r1, r3
    1cdc:	2301      	movs	r3, #1
    1cde:	4688      	mov	r8, r1
    1ce0:	9902      	ldr	r1, [sp, #8]
    1ce2:	2400      	movs	r4, #0
    1ce4:	4019      	ands	r1, r3
    1ce6:	468c      	mov	ip, r1
    1ce8:	e5b8      	b.n	185c <__aeabi_ddiv+0x19c>
    1cea:	4552      	cmp	r2, sl
    1cec:	d8be      	bhi.n	1c6c <__aeabi_ddiv+0x5ac>
    1cee:	468b      	mov	fp, r1
    1cf0:	2500      	movs	r5, #0
    1cf2:	e660      	b.n	19b6 <__aeabi_ddiv+0x2f6>
    1cf4:	9d03      	ldr	r5, [sp, #12]
    1cf6:	429d      	cmp	r5, r3
    1cf8:	d3c6      	bcc.n	1c88 <__aeabi_ddiv+0x5c8>
    1cfa:	0011      	movs	r1, r2
    1cfc:	e762      	b.n	1bc4 <__aeabi_ddiv+0x504>
    1cfe:	2500      	movs	r5, #0
    1d00:	e7d8      	b.n	1cb4 <__aeabi_ddiv+0x5f4>
    1d02:	2280      	movs	r2, #128	; 0x80
    1d04:	465b      	mov	r3, fp
    1d06:	0312      	lsls	r2, r2, #12
    1d08:	431a      	orrs	r2, r3
    1d0a:	9b01      	ldr	r3, [sp, #4]
    1d0c:	0312      	lsls	r2, r2, #12
    1d0e:	0b12      	lsrs	r2, r2, #12
    1d10:	469c      	mov	ip, r3
    1d12:	4688      	mov	r8, r1
    1d14:	4c03      	ldr	r4, [pc, #12]	; (1d24 <__aeabi_ddiv+0x664>)
    1d16:	e5a1      	b.n	185c <__aeabi_ddiv+0x19c>
    1d18:	000003ff 	.word	0x000003ff
    1d1c:	feffffff 	.word	0xfeffffff
    1d20:	000007fe 	.word	0x000007fe
    1d24:	000007ff 	.word	0x000007ff

00001d28 <__aeabi_dmul>:
    1d28:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d2a:	4657      	mov	r7, sl
    1d2c:	4645      	mov	r5, r8
    1d2e:	46de      	mov	lr, fp
    1d30:	464e      	mov	r6, r9
    1d32:	b5e0      	push	{r5, r6, r7, lr}
    1d34:	030c      	lsls	r4, r1, #12
    1d36:	4698      	mov	r8, r3
    1d38:	004e      	lsls	r6, r1, #1
    1d3a:	0b23      	lsrs	r3, r4, #12
    1d3c:	b087      	sub	sp, #28
    1d3e:	0007      	movs	r7, r0
    1d40:	4692      	mov	sl, r2
    1d42:	469b      	mov	fp, r3
    1d44:	0d76      	lsrs	r6, r6, #21
    1d46:	0fcd      	lsrs	r5, r1, #31
    1d48:	2e00      	cmp	r6, #0
    1d4a:	d06b      	beq.n	1e24 <__aeabi_dmul+0xfc>
    1d4c:	4b6d      	ldr	r3, [pc, #436]	; (1f04 <__aeabi_dmul+0x1dc>)
    1d4e:	429e      	cmp	r6, r3
    1d50:	d035      	beq.n	1dbe <__aeabi_dmul+0x96>
    1d52:	2480      	movs	r4, #128	; 0x80
    1d54:	465b      	mov	r3, fp
    1d56:	0f42      	lsrs	r2, r0, #29
    1d58:	0424      	lsls	r4, r4, #16
    1d5a:	00db      	lsls	r3, r3, #3
    1d5c:	4314      	orrs	r4, r2
    1d5e:	431c      	orrs	r4, r3
    1d60:	00c3      	lsls	r3, r0, #3
    1d62:	4699      	mov	r9, r3
    1d64:	4b68      	ldr	r3, [pc, #416]	; (1f08 <__aeabi_dmul+0x1e0>)
    1d66:	46a3      	mov	fp, r4
    1d68:	469c      	mov	ip, r3
    1d6a:	2300      	movs	r3, #0
    1d6c:	2700      	movs	r7, #0
    1d6e:	4466      	add	r6, ip
    1d70:	9302      	str	r3, [sp, #8]
    1d72:	4643      	mov	r3, r8
    1d74:	031c      	lsls	r4, r3, #12
    1d76:	005a      	lsls	r2, r3, #1
    1d78:	0fdb      	lsrs	r3, r3, #31
    1d7a:	4650      	mov	r0, sl
    1d7c:	0b24      	lsrs	r4, r4, #12
    1d7e:	0d52      	lsrs	r2, r2, #21
    1d80:	4698      	mov	r8, r3
    1d82:	d100      	bne.n	1d86 <__aeabi_dmul+0x5e>
    1d84:	e076      	b.n	1e74 <__aeabi_dmul+0x14c>
    1d86:	4b5f      	ldr	r3, [pc, #380]	; (1f04 <__aeabi_dmul+0x1dc>)
    1d88:	429a      	cmp	r2, r3
    1d8a:	d06d      	beq.n	1e68 <__aeabi_dmul+0x140>
    1d8c:	2380      	movs	r3, #128	; 0x80
    1d8e:	0f41      	lsrs	r1, r0, #29
    1d90:	041b      	lsls	r3, r3, #16
    1d92:	430b      	orrs	r3, r1
    1d94:	495c      	ldr	r1, [pc, #368]	; (1f08 <__aeabi_dmul+0x1e0>)
    1d96:	00e4      	lsls	r4, r4, #3
    1d98:	468c      	mov	ip, r1
    1d9a:	431c      	orrs	r4, r3
    1d9c:	00c3      	lsls	r3, r0, #3
    1d9e:	2000      	movs	r0, #0
    1da0:	4462      	add	r2, ip
    1da2:	4641      	mov	r1, r8
    1da4:	18b6      	adds	r6, r6, r2
    1da6:	4069      	eors	r1, r5
    1da8:	1c72      	adds	r2, r6, #1
    1daa:	9101      	str	r1, [sp, #4]
    1dac:	4694      	mov	ip, r2
    1dae:	4307      	orrs	r7, r0
    1db0:	2f0f      	cmp	r7, #15
    1db2:	d900      	bls.n	1db6 <__aeabi_dmul+0x8e>
    1db4:	e0b0      	b.n	1f18 <__aeabi_dmul+0x1f0>
    1db6:	4a55      	ldr	r2, [pc, #340]	; (1f0c <__aeabi_dmul+0x1e4>)
    1db8:	00bf      	lsls	r7, r7, #2
    1dba:	59d2      	ldr	r2, [r2, r7]
    1dbc:	4697      	mov	pc, r2
    1dbe:	465b      	mov	r3, fp
    1dc0:	4303      	orrs	r3, r0
    1dc2:	4699      	mov	r9, r3
    1dc4:	d000      	beq.n	1dc8 <__aeabi_dmul+0xa0>
    1dc6:	e087      	b.n	1ed8 <__aeabi_dmul+0x1b0>
    1dc8:	2300      	movs	r3, #0
    1dca:	469b      	mov	fp, r3
    1dcc:	3302      	adds	r3, #2
    1dce:	2708      	movs	r7, #8
    1dd0:	9302      	str	r3, [sp, #8]
    1dd2:	e7ce      	b.n	1d72 <__aeabi_dmul+0x4a>
    1dd4:	4642      	mov	r2, r8
    1dd6:	9201      	str	r2, [sp, #4]
    1dd8:	2802      	cmp	r0, #2
    1dda:	d067      	beq.n	1eac <__aeabi_dmul+0x184>
    1ddc:	2803      	cmp	r0, #3
    1dde:	d100      	bne.n	1de2 <__aeabi_dmul+0xba>
    1de0:	e20e      	b.n	2200 <STACK_SIZE+0x200>
    1de2:	2801      	cmp	r0, #1
    1de4:	d000      	beq.n	1de8 <__aeabi_dmul+0xc0>
    1de6:	e162      	b.n	20ae <STACK_SIZE+0xae>
    1de8:	2300      	movs	r3, #0
    1dea:	2400      	movs	r4, #0
    1dec:	2200      	movs	r2, #0
    1dee:	4699      	mov	r9, r3
    1df0:	9901      	ldr	r1, [sp, #4]
    1df2:	4001      	ands	r1, r0
    1df4:	b2cd      	uxtb	r5, r1
    1df6:	2100      	movs	r1, #0
    1df8:	0312      	lsls	r2, r2, #12
    1dfa:	0d0b      	lsrs	r3, r1, #20
    1dfc:	0b12      	lsrs	r2, r2, #12
    1dfe:	051b      	lsls	r3, r3, #20
    1e00:	4313      	orrs	r3, r2
    1e02:	4a43      	ldr	r2, [pc, #268]	; (1f10 <__aeabi_dmul+0x1e8>)
    1e04:	0524      	lsls	r4, r4, #20
    1e06:	4013      	ands	r3, r2
    1e08:	431c      	orrs	r4, r3
    1e0a:	0064      	lsls	r4, r4, #1
    1e0c:	07ed      	lsls	r5, r5, #31
    1e0e:	0864      	lsrs	r4, r4, #1
    1e10:	432c      	orrs	r4, r5
    1e12:	4648      	mov	r0, r9
    1e14:	0021      	movs	r1, r4
    1e16:	b007      	add	sp, #28
    1e18:	bc3c      	pop	{r2, r3, r4, r5}
    1e1a:	4690      	mov	r8, r2
    1e1c:	4699      	mov	r9, r3
    1e1e:	46a2      	mov	sl, r4
    1e20:	46ab      	mov	fp, r5
    1e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e24:	4303      	orrs	r3, r0
    1e26:	4699      	mov	r9, r3
    1e28:	d04f      	beq.n	1eca <__aeabi_dmul+0x1a2>
    1e2a:	465b      	mov	r3, fp
    1e2c:	2b00      	cmp	r3, #0
    1e2e:	d100      	bne.n	1e32 <__aeabi_dmul+0x10a>
    1e30:	e189      	b.n	2146 <STACK_SIZE+0x146>
    1e32:	4658      	mov	r0, fp
    1e34:	f000 fd7a 	bl	292c <__clzsi2>
    1e38:	0003      	movs	r3, r0
    1e3a:	3b0b      	subs	r3, #11
    1e3c:	2b1c      	cmp	r3, #28
    1e3e:	dd00      	ble.n	1e42 <__aeabi_dmul+0x11a>
    1e40:	e17a      	b.n	2138 <STACK_SIZE+0x138>
    1e42:	221d      	movs	r2, #29
    1e44:	1ad3      	subs	r3, r2, r3
    1e46:	003a      	movs	r2, r7
    1e48:	0001      	movs	r1, r0
    1e4a:	465c      	mov	r4, fp
    1e4c:	40da      	lsrs	r2, r3
    1e4e:	3908      	subs	r1, #8
    1e50:	408c      	lsls	r4, r1
    1e52:	0013      	movs	r3, r2
    1e54:	408f      	lsls	r7, r1
    1e56:	4323      	orrs	r3, r4
    1e58:	469b      	mov	fp, r3
    1e5a:	46b9      	mov	r9, r7
    1e5c:	2300      	movs	r3, #0
    1e5e:	4e2d      	ldr	r6, [pc, #180]	; (1f14 <__aeabi_dmul+0x1ec>)
    1e60:	2700      	movs	r7, #0
    1e62:	1a36      	subs	r6, r6, r0
    1e64:	9302      	str	r3, [sp, #8]
    1e66:	e784      	b.n	1d72 <__aeabi_dmul+0x4a>
    1e68:	4653      	mov	r3, sl
    1e6a:	4323      	orrs	r3, r4
    1e6c:	d12a      	bne.n	1ec4 <__aeabi_dmul+0x19c>
    1e6e:	2400      	movs	r4, #0
    1e70:	2002      	movs	r0, #2
    1e72:	e796      	b.n	1da2 <__aeabi_dmul+0x7a>
    1e74:	4653      	mov	r3, sl
    1e76:	4323      	orrs	r3, r4
    1e78:	d020      	beq.n	1ebc <__aeabi_dmul+0x194>
    1e7a:	2c00      	cmp	r4, #0
    1e7c:	d100      	bne.n	1e80 <__aeabi_dmul+0x158>
    1e7e:	e157      	b.n	2130 <STACK_SIZE+0x130>
    1e80:	0020      	movs	r0, r4
    1e82:	f000 fd53 	bl	292c <__clzsi2>
    1e86:	0003      	movs	r3, r0
    1e88:	3b0b      	subs	r3, #11
    1e8a:	2b1c      	cmp	r3, #28
    1e8c:	dd00      	ble.n	1e90 <__aeabi_dmul+0x168>
    1e8e:	e149      	b.n	2124 <STACK_SIZE+0x124>
    1e90:	211d      	movs	r1, #29
    1e92:	1acb      	subs	r3, r1, r3
    1e94:	4651      	mov	r1, sl
    1e96:	0002      	movs	r2, r0
    1e98:	40d9      	lsrs	r1, r3
    1e9a:	4653      	mov	r3, sl
    1e9c:	3a08      	subs	r2, #8
    1e9e:	4094      	lsls	r4, r2
    1ea0:	4093      	lsls	r3, r2
    1ea2:	430c      	orrs	r4, r1
    1ea4:	4a1b      	ldr	r2, [pc, #108]	; (1f14 <__aeabi_dmul+0x1ec>)
    1ea6:	1a12      	subs	r2, r2, r0
    1ea8:	2000      	movs	r0, #0
    1eaa:	e77a      	b.n	1da2 <__aeabi_dmul+0x7a>
    1eac:	2501      	movs	r5, #1
    1eae:	9b01      	ldr	r3, [sp, #4]
    1eb0:	4c14      	ldr	r4, [pc, #80]	; (1f04 <__aeabi_dmul+0x1dc>)
    1eb2:	401d      	ands	r5, r3
    1eb4:	2300      	movs	r3, #0
    1eb6:	2200      	movs	r2, #0
    1eb8:	4699      	mov	r9, r3
    1eba:	e79c      	b.n	1df6 <__aeabi_dmul+0xce>
    1ebc:	2400      	movs	r4, #0
    1ebe:	2200      	movs	r2, #0
    1ec0:	2001      	movs	r0, #1
    1ec2:	e76e      	b.n	1da2 <__aeabi_dmul+0x7a>
    1ec4:	4653      	mov	r3, sl
    1ec6:	2003      	movs	r0, #3
    1ec8:	e76b      	b.n	1da2 <__aeabi_dmul+0x7a>
    1eca:	2300      	movs	r3, #0
    1ecc:	469b      	mov	fp, r3
    1ece:	3301      	adds	r3, #1
    1ed0:	2704      	movs	r7, #4
    1ed2:	2600      	movs	r6, #0
    1ed4:	9302      	str	r3, [sp, #8]
    1ed6:	e74c      	b.n	1d72 <__aeabi_dmul+0x4a>
    1ed8:	2303      	movs	r3, #3
    1eda:	4681      	mov	r9, r0
    1edc:	270c      	movs	r7, #12
    1ede:	9302      	str	r3, [sp, #8]
    1ee0:	e747      	b.n	1d72 <__aeabi_dmul+0x4a>
    1ee2:	2280      	movs	r2, #128	; 0x80
    1ee4:	2300      	movs	r3, #0
    1ee6:	2500      	movs	r5, #0
    1ee8:	0312      	lsls	r2, r2, #12
    1eea:	4699      	mov	r9, r3
    1eec:	4c05      	ldr	r4, [pc, #20]	; (1f04 <__aeabi_dmul+0x1dc>)
    1eee:	e782      	b.n	1df6 <__aeabi_dmul+0xce>
    1ef0:	465c      	mov	r4, fp
    1ef2:	464b      	mov	r3, r9
    1ef4:	9802      	ldr	r0, [sp, #8]
    1ef6:	e76f      	b.n	1dd8 <__aeabi_dmul+0xb0>
    1ef8:	465c      	mov	r4, fp
    1efa:	464b      	mov	r3, r9
    1efc:	9501      	str	r5, [sp, #4]
    1efe:	9802      	ldr	r0, [sp, #8]
    1f00:	e76a      	b.n	1dd8 <__aeabi_dmul+0xb0>
    1f02:	46c0      	nop			; (mov r8, r8)
    1f04:	000007ff 	.word	0x000007ff
    1f08:	fffffc01 	.word	0xfffffc01
    1f0c:	00002a34 	.word	0x00002a34
    1f10:	800fffff 	.word	0x800fffff
    1f14:	fffffc0d 	.word	0xfffffc0d
    1f18:	464a      	mov	r2, r9
    1f1a:	4649      	mov	r1, r9
    1f1c:	0c17      	lsrs	r7, r2, #16
    1f1e:	0c1a      	lsrs	r2, r3, #16
    1f20:	041b      	lsls	r3, r3, #16
    1f22:	0c1b      	lsrs	r3, r3, #16
    1f24:	0408      	lsls	r0, r1, #16
    1f26:	0019      	movs	r1, r3
    1f28:	0c00      	lsrs	r0, r0, #16
    1f2a:	4341      	muls	r1, r0
    1f2c:	0015      	movs	r5, r2
    1f2e:	4688      	mov	r8, r1
    1f30:	0019      	movs	r1, r3
    1f32:	437d      	muls	r5, r7
    1f34:	4379      	muls	r1, r7
    1f36:	9503      	str	r5, [sp, #12]
    1f38:	4689      	mov	r9, r1
    1f3a:	0029      	movs	r1, r5
    1f3c:	0015      	movs	r5, r2
    1f3e:	4345      	muls	r5, r0
    1f40:	444d      	add	r5, r9
    1f42:	9502      	str	r5, [sp, #8]
    1f44:	4645      	mov	r5, r8
    1f46:	0c2d      	lsrs	r5, r5, #16
    1f48:	46aa      	mov	sl, r5
    1f4a:	9d02      	ldr	r5, [sp, #8]
    1f4c:	4455      	add	r5, sl
    1f4e:	45a9      	cmp	r9, r5
    1f50:	d906      	bls.n	1f60 <__aeabi_dmul+0x238>
    1f52:	468a      	mov	sl, r1
    1f54:	2180      	movs	r1, #128	; 0x80
    1f56:	0249      	lsls	r1, r1, #9
    1f58:	4689      	mov	r9, r1
    1f5a:	44ca      	add	sl, r9
    1f5c:	4651      	mov	r1, sl
    1f5e:	9103      	str	r1, [sp, #12]
    1f60:	0c29      	lsrs	r1, r5, #16
    1f62:	9104      	str	r1, [sp, #16]
    1f64:	4641      	mov	r1, r8
    1f66:	0409      	lsls	r1, r1, #16
    1f68:	042d      	lsls	r5, r5, #16
    1f6a:	0c09      	lsrs	r1, r1, #16
    1f6c:	4688      	mov	r8, r1
    1f6e:	0029      	movs	r1, r5
    1f70:	0c25      	lsrs	r5, r4, #16
    1f72:	0424      	lsls	r4, r4, #16
    1f74:	4441      	add	r1, r8
    1f76:	0c24      	lsrs	r4, r4, #16
    1f78:	9105      	str	r1, [sp, #20]
    1f7a:	0021      	movs	r1, r4
    1f7c:	4341      	muls	r1, r0
    1f7e:	4688      	mov	r8, r1
    1f80:	0021      	movs	r1, r4
    1f82:	4379      	muls	r1, r7
    1f84:	468a      	mov	sl, r1
    1f86:	4368      	muls	r0, r5
    1f88:	4641      	mov	r1, r8
    1f8a:	4450      	add	r0, sl
    1f8c:	4681      	mov	r9, r0
    1f8e:	0c08      	lsrs	r0, r1, #16
    1f90:	4448      	add	r0, r9
    1f92:	436f      	muls	r7, r5
    1f94:	4582      	cmp	sl, r0
    1f96:	d903      	bls.n	1fa0 <__aeabi_dmul+0x278>
    1f98:	2180      	movs	r1, #128	; 0x80
    1f9a:	0249      	lsls	r1, r1, #9
    1f9c:	4689      	mov	r9, r1
    1f9e:	444f      	add	r7, r9
    1fa0:	0c01      	lsrs	r1, r0, #16
    1fa2:	4689      	mov	r9, r1
    1fa4:	0039      	movs	r1, r7
    1fa6:	4449      	add	r1, r9
    1fa8:	9102      	str	r1, [sp, #8]
    1faa:	4641      	mov	r1, r8
    1fac:	040f      	lsls	r7, r1, #16
    1fae:	9904      	ldr	r1, [sp, #16]
    1fb0:	0c3f      	lsrs	r7, r7, #16
    1fb2:	4688      	mov	r8, r1
    1fb4:	0400      	lsls	r0, r0, #16
    1fb6:	19c0      	adds	r0, r0, r7
    1fb8:	4480      	add	r8, r0
    1fba:	4641      	mov	r1, r8
    1fbc:	9104      	str	r1, [sp, #16]
    1fbe:	4659      	mov	r1, fp
    1fc0:	0c0f      	lsrs	r7, r1, #16
    1fc2:	0409      	lsls	r1, r1, #16
    1fc4:	0c09      	lsrs	r1, r1, #16
    1fc6:	4688      	mov	r8, r1
    1fc8:	4359      	muls	r1, r3
    1fca:	468a      	mov	sl, r1
    1fcc:	0039      	movs	r1, r7
    1fce:	4351      	muls	r1, r2
    1fd0:	4689      	mov	r9, r1
    1fd2:	4641      	mov	r1, r8
    1fd4:	434a      	muls	r2, r1
    1fd6:	4651      	mov	r1, sl
    1fd8:	0c09      	lsrs	r1, r1, #16
    1fda:	468b      	mov	fp, r1
    1fdc:	437b      	muls	r3, r7
    1fde:	18d2      	adds	r2, r2, r3
    1fe0:	445a      	add	r2, fp
    1fe2:	4293      	cmp	r3, r2
    1fe4:	d903      	bls.n	1fee <__aeabi_dmul+0x2c6>
    1fe6:	2380      	movs	r3, #128	; 0x80
    1fe8:	025b      	lsls	r3, r3, #9
    1fea:	469b      	mov	fp, r3
    1fec:	44d9      	add	r9, fp
    1fee:	4651      	mov	r1, sl
    1ff0:	0409      	lsls	r1, r1, #16
    1ff2:	0c09      	lsrs	r1, r1, #16
    1ff4:	468a      	mov	sl, r1
    1ff6:	4641      	mov	r1, r8
    1ff8:	4361      	muls	r1, r4
    1ffa:	437c      	muls	r4, r7
    1ffc:	0c13      	lsrs	r3, r2, #16
    1ffe:	0412      	lsls	r2, r2, #16
    2000:	444b      	add	r3, r9
    2002:	4452      	add	r2, sl
    2004:	46a1      	mov	r9, r4
    2006:	468a      	mov	sl, r1
    2008:	003c      	movs	r4, r7
    200a:	4641      	mov	r1, r8
    200c:	436c      	muls	r4, r5
    200e:	434d      	muls	r5, r1
    2010:	4651      	mov	r1, sl
    2012:	444d      	add	r5, r9
    2014:	0c0f      	lsrs	r7, r1, #16
    2016:	197d      	adds	r5, r7, r5
    2018:	45a9      	cmp	r9, r5
    201a:	d903      	bls.n	2024 <STACK_SIZE+0x24>
    201c:	2180      	movs	r1, #128	; 0x80
    201e:	0249      	lsls	r1, r1, #9
    2020:	4688      	mov	r8, r1
    2022:	4444      	add	r4, r8
    2024:	9f04      	ldr	r7, [sp, #16]
    2026:	9903      	ldr	r1, [sp, #12]
    2028:	46b8      	mov	r8, r7
    202a:	4441      	add	r1, r8
    202c:	468b      	mov	fp, r1
    202e:	4583      	cmp	fp, r0
    2030:	4180      	sbcs	r0, r0
    2032:	4241      	negs	r1, r0
    2034:	4688      	mov	r8, r1
    2036:	4651      	mov	r1, sl
    2038:	0408      	lsls	r0, r1, #16
    203a:	042f      	lsls	r7, r5, #16
    203c:	0c00      	lsrs	r0, r0, #16
    203e:	183f      	adds	r7, r7, r0
    2040:	4658      	mov	r0, fp
    2042:	9902      	ldr	r1, [sp, #8]
    2044:	1810      	adds	r0, r2, r0
    2046:	4689      	mov	r9, r1
    2048:	4290      	cmp	r0, r2
    204a:	4192      	sbcs	r2, r2
    204c:	444f      	add	r7, r9
    204e:	46ba      	mov	sl, r7
    2050:	4252      	negs	r2, r2
    2052:	4699      	mov	r9, r3
    2054:	4693      	mov	fp, r2
    2056:	44c2      	add	sl, r8
    2058:	44d1      	add	r9, sl
    205a:	44cb      	add	fp, r9
    205c:	428f      	cmp	r7, r1
    205e:	41bf      	sbcs	r7, r7
    2060:	45c2      	cmp	sl, r8
    2062:	4189      	sbcs	r1, r1
    2064:	4599      	cmp	r9, r3
    2066:	419b      	sbcs	r3, r3
    2068:	4593      	cmp	fp, r2
    206a:	4192      	sbcs	r2, r2
    206c:	427f      	negs	r7, r7
    206e:	4249      	negs	r1, r1
    2070:	0c2d      	lsrs	r5, r5, #16
    2072:	4252      	negs	r2, r2
    2074:	430f      	orrs	r7, r1
    2076:	425b      	negs	r3, r3
    2078:	4313      	orrs	r3, r2
    207a:	197f      	adds	r7, r7, r5
    207c:	18ff      	adds	r7, r7, r3
    207e:	465b      	mov	r3, fp
    2080:	193c      	adds	r4, r7, r4
    2082:	0ddb      	lsrs	r3, r3, #23
    2084:	9a05      	ldr	r2, [sp, #20]
    2086:	0264      	lsls	r4, r4, #9
    2088:	431c      	orrs	r4, r3
    208a:	0243      	lsls	r3, r0, #9
    208c:	4313      	orrs	r3, r2
    208e:	1e5d      	subs	r5, r3, #1
    2090:	41ab      	sbcs	r3, r5
    2092:	465a      	mov	r2, fp
    2094:	0dc0      	lsrs	r0, r0, #23
    2096:	4303      	orrs	r3, r0
    2098:	0252      	lsls	r2, r2, #9
    209a:	4313      	orrs	r3, r2
    209c:	01e2      	lsls	r2, r4, #7
    209e:	d556      	bpl.n	214e <STACK_SIZE+0x14e>
    20a0:	2001      	movs	r0, #1
    20a2:	085a      	lsrs	r2, r3, #1
    20a4:	4003      	ands	r3, r0
    20a6:	4313      	orrs	r3, r2
    20a8:	07e2      	lsls	r2, r4, #31
    20aa:	4313      	orrs	r3, r2
    20ac:	0864      	lsrs	r4, r4, #1
    20ae:	485a      	ldr	r0, [pc, #360]	; (2218 <STACK_SIZE+0x218>)
    20b0:	4460      	add	r0, ip
    20b2:	2800      	cmp	r0, #0
    20b4:	dd4d      	ble.n	2152 <STACK_SIZE+0x152>
    20b6:	075a      	lsls	r2, r3, #29
    20b8:	d009      	beq.n	20ce <STACK_SIZE+0xce>
    20ba:	220f      	movs	r2, #15
    20bc:	401a      	ands	r2, r3
    20be:	2a04      	cmp	r2, #4
    20c0:	d005      	beq.n	20ce <STACK_SIZE+0xce>
    20c2:	1d1a      	adds	r2, r3, #4
    20c4:	429a      	cmp	r2, r3
    20c6:	419b      	sbcs	r3, r3
    20c8:	425b      	negs	r3, r3
    20ca:	18e4      	adds	r4, r4, r3
    20cc:	0013      	movs	r3, r2
    20ce:	01e2      	lsls	r2, r4, #7
    20d0:	d504      	bpl.n	20dc <STACK_SIZE+0xdc>
    20d2:	2080      	movs	r0, #128	; 0x80
    20d4:	4a51      	ldr	r2, [pc, #324]	; (221c <STACK_SIZE+0x21c>)
    20d6:	00c0      	lsls	r0, r0, #3
    20d8:	4014      	ands	r4, r2
    20da:	4460      	add	r0, ip
    20dc:	4a50      	ldr	r2, [pc, #320]	; (2220 <STACK_SIZE+0x220>)
    20de:	4290      	cmp	r0, r2
    20e0:	dd00      	ble.n	20e4 <STACK_SIZE+0xe4>
    20e2:	e6e3      	b.n	1eac <__aeabi_dmul+0x184>
    20e4:	2501      	movs	r5, #1
    20e6:	08db      	lsrs	r3, r3, #3
    20e8:	0762      	lsls	r2, r4, #29
    20ea:	431a      	orrs	r2, r3
    20ec:	0264      	lsls	r4, r4, #9
    20ee:	9b01      	ldr	r3, [sp, #4]
    20f0:	4691      	mov	r9, r2
    20f2:	0b22      	lsrs	r2, r4, #12
    20f4:	0544      	lsls	r4, r0, #21
    20f6:	0d64      	lsrs	r4, r4, #21
    20f8:	401d      	ands	r5, r3
    20fa:	e67c      	b.n	1df6 <__aeabi_dmul+0xce>
    20fc:	2280      	movs	r2, #128	; 0x80
    20fe:	4659      	mov	r1, fp
    2100:	0312      	lsls	r2, r2, #12
    2102:	4211      	tst	r1, r2
    2104:	d008      	beq.n	2118 <STACK_SIZE+0x118>
    2106:	4214      	tst	r4, r2
    2108:	d106      	bne.n	2118 <STACK_SIZE+0x118>
    210a:	4322      	orrs	r2, r4
    210c:	0312      	lsls	r2, r2, #12
    210e:	0b12      	lsrs	r2, r2, #12
    2110:	4645      	mov	r5, r8
    2112:	4699      	mov	r9, r3
    2114:	4c43      	ldr	r4, [pc, #268]	; (2224 <STACK_SIZE+0x224>)
    2116:	e66e      	b.n	1df6 <__aeabi_dmul+0xce>
    2118:	465b      	mov	r3, fp
    211a:	431a      	orrs	r2, r3
    211c:	0312      	lsls	r2, r2, #12
    211e:	0b12      	lsrs	r2, r2, #12
    2120:	4c40      	ldr	r4, [pc, #256]	; (2224 <STACK_SIZE+0x224>)
    2122:	e668      	b.n	1df6 <__aeabi_dmul+0xce>
    2124:	0003      	movs	r3, r0
    2126:	4654      	mov	r4, sl
    2128:	3b28      	subs	r3, #40	; 0x28
    212a:	409c      	lsls	r4, r3
    212c:	2300      	movs	r3, #0
    212e:	e6b9      	b.n	1ea4 <__aeabi_dmul+0x17c>
    2130:	f000 fbfc 	bl	292c <__clzsi2>
    2134:	3020      	adds	r0, #32
    2136:	e6a6      	b.n	1e86 <__aeabi_dmul+0x15e>
    2138:	0003      	movs	r3, r0
    213a:	3b28      	subs	r3, #40	; 0x28
    213c:	409f      	lsls	r7, r3
    213e:	2300      	movs	r3, #0
    2140:	46bb      	mov	fp, r7
    2142:	4699      	mov	r9, r3
    2144:	e68a      	b.n	1e5c <__aeabi_dmul+0x134>
    2146:	f000 fbf1 	bl	292c <__clzsi2>
    214a:	3020      	adds	r0, #32
    214c:	e674      	b.n	1e38 <__aeabi_dmul+0x110>
    214e:	46b4      	mov	ip, r6
    2150:	e7ad      	b.n	20ae <STACK_SIZE+0xae>
    2152:	2501      	movs	r5, #1
    2154:	1a2a      	subs	r2, r5, r0
    2156:	2a38      	cmp	r2, #56	; 0x38
    2158:	dd06      	ble.n	2168 <STACK_SIZE+0x168>
    215a:	9b01      	ldr	r3, [sp, #4]
    215c:	2400      	movs	r4, #0
    215e:	401d      	ands	r5, r3
    2160:	2300      	movs	r3, #0
    2162:	2200      	movs	r2, #0
    2164:	4699      	mov	r9, r3
    2166:	e646      	b.n	1df6 <__aeabi_dmul+0xce>
    2168:	2a1f      	cmp	r2, #31
    216a:	dc21      	bgt.n	21b0 <STACK_SIZE+0x1b0>
    216c:	2520      	movs	r5, #32
    216e:	0020      	movs	r0, r4
    2170:	1aad      	subs	r5, r5, r2
    2172:	001e      	movs	r6, r3
    2174:	40ab      	lsls	r3, r5
    2176:	40a8      	lsls	r0, r5
    2178:	40d6      	lsrs	r6, r2
    217a:	1e5d      	subs	r5, r3, #1
    217c:	41ab      	sbcs	r3, r5
    217e:	4330      	orrs	r0, r6
    2180:	4318      	orrs	r0, r3
    2182:	40d4      	lsrs	r4, r2
    2184:	0743      	lsls	r3, r0, #29
    2186:	d009      	beq.n	219c <STACK_SIZE+0x19c>
    2188:	230f      	movs	r3, #15
    218a:	4003      	ands	r3, r0
    218c:	2b04      	cmp	r3, #4
    218e:	d005      	beq.n	219c <STACK_SIZE+0x19c>
    2190:	0003      	movs	r3, r0
    2192:	1d18      	adds	r0, r3, #4
    2194:	4298      	cmp	r0, r3
    2196:	419b      	sbcs	r3, r3
    2198:	425b      	negs	r3, r3
    219a:	18e4      	adds	r4, r4, r3
    219c:	0223      	lsls	r3, r4, #8
    219e:	d521      	bpl.n	21e4 <STACK_SIZE+0x1e4>
    21a0:	2501      	movs	r5, #1
    21a2:	9b01      	ldr	r3, [sp, #4]
    21a4:	2401      	movs	r4, #1
    21a6:	401d      	ands	r5, r3
    21a8:	2300      	movs	r3, #0
    21aa:	2200      	movs	r2, #0
    21ac:	4699      	mov	r9, r3
    21ae:	e622      	b.n	1df6 <__aeabi_dmul+0xce>
    21b0:	251f      	movs	r5, #31
    21b2:	0021      	movs	r1, r4
    21b4:	426d      	negs	r5, r5
    21b6:	1a28      	subs	r0, r5, r0
    21b8:	40c1      	lsrs	r1, r0
    21ba:	0008      	movs	r0, r1
    21bc:	2a20      	cmp	r2, #32
    21be:	d01d      	beq.n	21fc <STACK_SIZE+0x1fc>
    21c0:	355f      	adds	r5, #95	; 0x5f
    21c2:	1aaa      	subs	r2, r5, r2
    21c4:	4094      	lsls	r4, r2
    21c6:	4323      	orrs	r3, r4
    21c8:	1e5c      	subs	r4, r3, #1
    21ca:	41a3      	sbcs	r3, r4
    21cc:	2507      	movs	r5, #7
    21ce:	4303      	orrs	r3, r0
    21d0:	401d      	ands	r5, r3
    21d2:	2200      	movs	r2, #0
    21d4:	2d00      	cmp	r5, #0
    21d6:	d009      	beq.n	21ec <STACK_SIZE+0x1ec>
    21d8:	220f      	movs	r2, #15
    21da:	2400      	movs	r4, #0
    21dc:	401a      	ands	r2, r3
    21de:	0018      	movs	r0, r3
    21e0:	2a04      	cmp	r2, #4
    21e2:	d1d6      	bne.n	2192 <STACK_SIZE+0x192>
    21e4:	0003      	movs	r3, r0
    21e6:	0765      	lsls	r5, r4, #29
    21e8:	0264      	lsls	r4, r4, #9
    21ea:	0b22      	lsrs	r2, r4, #12
    21ec:	08db      	lsrs	r3, r3, #3
    21ee:	432b      	orrs	r3, r5
    21f0:	2501      	movs	r5, #1
    21f2:	4699      	mov	r9, r3
    21f4:	9b01      	ldr	r3, [sp, #4]
    21f6:	2400      	movs	r4, #0
    21f8:	401d      	ands	r5, r3
    21fa:	e5fc      	b.n	1df6 <__aeabi_dmul+0xce>
    21fc:	2400      	movs	r4, #0
    21fe:	e7e2      	b.n	21c6 <STACK_SIZE+0x1c6>
    2200:	2280      	movs	r2, #128	; 0x80
    2202:	2501      	movs	r5, #1
    2204:	0312      	lsls	r2, r2, #12
    2206:	4322      	orrs	r2, r4
    2208:	9901      	ldr	r1, [sp, #4]
    220a:	0312      	lsls	r2, r2, #12
    220c:	0b12      	lsrs	r2, r2, #12
    220e:	400d      	ands	r5, r1
    2210:	4699      	mov	r9, r3
    2212:	4c04      	ldr	r4, [pc, #16]	; (2224 <STACK_SIZE+0x224>)
    2214:	e5ef      	b.n	1df6 <__aeabi_dmul+0xce>
    2216:	46c0      	nop			; (mov r8, r8)
    2218:	000003ff 	.word	0x000003ff
    221c:	feffffff 	.word	0xfeffffff
    2220:	000007fe 	.word	0x000007fe
    2224:	000007ff 	.word	0x000007ff

00002228 <__aeabi_dsub>:
    2228:	b5f0      	push	{r4, r5, r6, r7, lr}
    222a:	4646      	mov	r6, r8
    222c:	46d6      	mov	lr, sl
    222e:	464f      	mov	r7, r9
    2230:	030c      	lsls	r4, r1, #12
    2232:	b5c0      	push	{r6, r7, lr}
    2234:	0fcd      	lsrs	r5, r1, #31
    2236:	004e      	lsls	r6, r1, #1
    2238:	0a61      	lsrs	r1, r4, #9
    223a:	0f44      	lsrs	r4, r0, #29
    223c:	430c      	orrs	r4, r1
    223e:	00c1      	lsls	r1, r0, #3
    2240:	0058      	lsls	r0, r3, #1
    2242:	0d40      	lsrs	r0, r0, #21
    2244:	4684      	mov	ip, r0
    2246:	468a      	mov	sl, r1
    2248:	000f      	movs	r7, r1
    224a:	0319      	lsls	r1, r3, #12
    224c:	0f50      	lsrs	r0, r2, #29
    224e:	0a49      	lsrs	r1, r1, #9
    2250:	4301      	orrs	r1, r0
    2252:	48c6      	ldr	r0, [pc, #792]	; (256c <__aeabi_dsub+0x344>)
    2254:	0d76      	lsrs	r6, r6, #21
    2256:	46a8      	mov	r8, r5
    2258:	0fdb      	lsrs	r3, r3, #31
    225a:	00d2      	lsls	r2, r2, #3
    225c:	4584      	cmp	ip, r0
    225e:	d100      	bne.n	2262 <__aeabi_dsub+0x3a>
    2260:	e0d8      	b.n	2414 <__aeabi_dsub+0x1ec>
    2262:	2001      	movs	r0, #1
    2264:	4043      	eors	r3, r0
    2266:	42ab      	cmp	r3, r5
    2268:	d100      	bne.n	226c <__aeabi_dsub+0x44>
    226a:	e0a6      	b.n	23ba <__aeabi_dsub+0x192>
    226c:	4660      	mov	r0, ip
    226e:	1a35      	subs	r5, r6, r0
    2270:	2d00      	cmp	r5, #0
    2272:	dc00      	bgt.n	2276 <__aeabi_dsub+0x4e>
    2274:	e105      	b.n	2482 <__aeabi_dsub+0x25a>
    2276:	2800      	cmp	r0, #0
    2278:	d110      	bne.n	229c <__aeabi_dsub+0x74>
    227a:	000b      	movs	r3, r1
    227c:	4313      	orrs	r3, r2
    227e:	d100      	bne.n	2282 <__aeabi_dsub+0x5a>
    2280:	e0d7      	b.n	2432 <__aeabi_dsub+0x20a>
    2282:	1e6b      	subs	r3, r5, #1
    2284:	2b00      	cmp	r3, #0
    2286:	d000      	beq.n	228a <__aeabi_dsub+0x62>
    2288:	e14b      	b.n	2522 <__aeabi_dsub+0x2fa>
    228a:	4653      	mov	r3, sl
    228c:	1a9f      	subs	r7, r3, r2
    228e:	45ba      	cmp	sl, r7
    2290:	4180      	sbcs	r0, r0
    2292:	1a64      	subs	r4, r4, r1
    2294:	4240      	negs	r0, r0
    2296:	1a24      	subs	r4, r4, r0
    2298:	2601      	movs	r6, #1
    229a:	e01e      	b.n	22da <__aeabi_dsub+0xb2>
    229c:	4bb3      	ldr	r3, [pc, #716]	; (256c <__aeabi_dsub+0x344>)
    229e:	429e      	cmp	r6, r3
    22a0:	d048      	beq.n	2334 <__aeabi_dsub+0x10c>
    22a2:	2380      	movs	r3, #128	; 0x80
    22a4:	041b      	lsls	r3, r3, #16
    22a6:	4319      	orrs	r1, r3
    22a8:	2d38      	cmp	r5, #56	; 0x38
    22aa:	dd00      	ble.n	22ae <__aeabi_dsub+0x86>
    22ac:	e119      	b.n	24e2 <__aeabi_dsub+0x2ba>
    22ae:	2d1f      	cmp	r5, #31
    22b0:	dd00      	ble.n	22b4 <__aeabi_dsub+0x8c>
    22b2:	e14c      	b.n	254e <__aeabi_dsub+0x326>
    22b4:	2320      	movs	r3, #32
    22b6:	000f      	movs	r7, r1
    22b8:	1b5b      	subs	r3, r3, r5
    22ba:	0010      	movs	r0, r2
    22bc:	409a      	lsls	r2, r3
    22be:	409f      	lsls	r7, r3
    22c0:	40e8      	lsrs	r0, r5
    22c2:	1e53      	subs	r3, r2, #1
    22c4:	419a      	sbcs	r2, r3
    22c6:	40e9      	lsrs	r1, r5
    22c8:	4307      	orrs	r7, r0
    22ca:	4317      	orrs	r7, r2
    22cc:	4653      	mov	r3, sl
    22ce:	1bdf      	subs	r7, r3, r7
    22d0:	1a61      	subs	r1, r4, r1
    22d2:	45ba      	cmp	sl, r7
    22d4:	41a4      	sbcs	r4, r4
    22d6:	4264      	negs	r4, r4
    22d8:	1b0c      	subs	r4, r1, r4
    22da:	0223      	lsls	r3, r4, #8
    22dc:	d400      	bmi.n	22e0 <__aeabi_dsub+0xb8>
    22de:	e0c5      	b.n	246c <__aeabi_dsub+0x244>
    22e0:	0264      	lsls	r4, r4, #9
    22e2:	0a65      	lsrs	r5, r4, #9
    22e4:	2d00      	cmp	r5, #0
    22e6:	d100      	bne.n	22ea <__aeabi_dsub+0xc2>
    22e8:	e0f6      	b.n	24d8 <__aeabi_dsub+0x2b0>
    22ea:	0028      	movs	r0, r5
    22ec:	f000 fb1e 	bl	292c <__clzsi2>
    22f0:	0003      	movs	r3, r0
    22f2:	3b08      	subs	r3, #8
    22f4:	2b1f      	cmp	r3, #31
    22f6:	dd00      	ble.n	22fa <__aeabi_dsub+0xd2>
    22f8:	e0e9      	b.n	24ce <__aeabi_dsub+0x2a6>
    22fa:	2220      	movs	r2, #32
    22fc:	003c      	movs	r4, r7
    22fe:	1ad2      	subs	r2, r2, r3
    2300:	409d      	lsls	r5, r3
    2302:	40d4      	lsrs	r4, r2
    2304:	409f      	lsls	r7, r3
    2306:	4325      	orrs	r5, r4
    2308:	429e      	cmp	r6, r3
    230a:	dd00      	ble.n	230e <__aeabi_dsub+0xe6>
    230c:	e0db      	b.n	24c6 <__aeabi_dsub+0x29e>
    230e:	1b9e      	subs	r6, r3, r6
    2310:	1c73      	adds	r3, r6, #1
    2312:	2b1f      	cmp	r3, #31
    2314:	dd00      	ble.n	2318 <__aeabi_dsub+0xf0>
    2316:	e10a      	b.n	252e <__aeabi_dsub+0x306>
    2318:	2220      	movs	r2, #32
    231a:	0038      	movs	r0, r7
    231c:	1ad2      	subs	r2, r2, r3
    231e:	0029      	movs	r1, r5
    2320:	4097      	lsls	r7, r2
    2322:	002c      	movs	r4, r5
    2324:	4091      	lsls	r1, r2
    2326:	40d8      	lsrs	r0, r3
    2328:	1e7a      	subs	r2, r7, #1
    232a:	4197      	sbcs	r7, r2
    232c:	40dc      	lsrs	r4, r3
    232e:	2600      	movs	r6, #0
    2330:	4301      	orrs	r1, r0
    2332:	430f      	orrs	r7, r1
    2334:	077b      	lsls	r3, r7, #29
    2336:	d009      	beq.n	234c <__aeabi_dsub+0x124>
    2338:	230f      	movs	r3, #15
    233a:	403b      	ands	r3, r7
    233c:	2b04      	cmp	r3, #4
    233e:	d005      	beq.n	234c <__aeabi_dsub+0x124>
    2340:	1d3b      	adds	r3, r7, #4
    2342:	42bb      	cmp	r3, r7
    2344:	41bf      	sbcs	r7, r7
    2346:	427f      	negs	r7, r7
    2348:	19e4      	adds	r4, r4, r7
    234a:	001f      	movs	r7, r3
    234c:	0223      	lsls	r3, r4, #8
    234e:	d525      	bpl.n	239c <__aeabi_dsub+0x174>
    2350:	4b86      	ldr	r3, [pc, #536]	; (256c <__aeabi_dsub+0x344>)
    2352:	3601      	adds	r6, #1
    2354:	429e      	cmp	r6, r3
    2356:	d100      	bne.n	235a <__aeabi_dsub+0x132>
    2358:	e0af      	b.n	24ba <__aeabi_dsub+0x292>
    235a:	4b85      	ldr	r3, [pc, #532]	; (2570 <__aeabi_dsub+0x348>)
    235c:	2501      	movs	r5, #1
    235e:	401c      	ands	r4, r3
    2360:	4643      	mov	r3, r8
    2362:	0762      	lsls	r2, r4, #29
    2364:	08ff      	lsrs	r7, r7, #3
    2366:	0264      	lsls	r4, r4, #9
    2368:	0576      	lsls	r6, r6, #21
    236a:	4317      	orrs	r7, r2
    236c:	0b24      	lsrs	r4, r4, #12
    236e:	0d76      	lsrs	r6, r6, #21
    2370:	401d      	ands	r5, r3
    2372:	2100      	movs	r1, #0
    2374:	0324      	lsls	r4, r4, #12
    2376:	0b23      	lsrs	r3, r4, #12
    2378:	0d0c      	lsrs	r4, r1, #20
    237a:	4a7e      	ldr	r2, [pc, #504]	; (2574 <__aeabi_dsub+0x34c>)
    237c:	0524      	lsls	r4, r4, #20
    237e:	431c      	orrs	r4, r3
    2380:	4014      	ands	r4, r2
    2382:	0533      	lsls	r3, r6, #20
    2384:	4323      	orrs	r3, r4
    2386:	005b      	lsls	r3, r3, #1
    2388:	07ed      	lsls	r5, r5, #31
    238a:	085b      	lsrs	r3, r3, #1
    238c:	432b      	orrs	r3, r5
    238e:	0038      	movs	r0, r7
    2390:	0019      	movs	r1, r3
    2392:	bc1c      	pop	{r2, r3, r4}
    2394:	4690      	mov	r8, r2
    2396:	4699      	mov	r9, r3
    2398:	46a2      	mov	sl, r4
    239a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    239c:	2501      	movs	r5, #1
    239e:	4643      	mov	r3, r8
    23a0:	0762      	lsls	r2, r4, #29
    23a2:	08ff      	lsrs	r7, r7, #3
    23a4:	4317      	orrs	r7, r2
    23a6:	08e4      	lsrs	r4, r4, #3
    23a8:	401d      	ands	r5, r3
    23aa:	4b70      	ldr	r3, [pc, #448]	; (256c <__aeabi_dsub+0x344>)
    23ac:	429e      	cmp	r6, r3
    23ae:	d036      	beq.n	241e <__aeabi_dsub+0x1f6>
    23b0:	0324      	lsls	r4, r4, #12
    23b2:	0576      	lsls	r6, r6, #21
    23b4:	0b24      	lsrs	r4, r4, #12
    23b6:	0d76      	lsrs	r6, r6, #21
    23b8:	e7db      	b.n	2372 <__aeabi_dsub+0x14a>
    23ba:	4663      	mov	r3, ip
    23bc:	1af3      	subs	r3, r6, r3
    23be:	2b00      	cmp	r3, #0
    23c0:	dc00      	bgt.n	23c4 <__aeabi_dsub+0x19c>
    23c2:	e094      	b.n	24ee <__aeabi_dsub+0x2c6>
    23c4:	4660      	mov	r0, ip
    23c6:	2800      	cmp	r0, #0
    23c8:	d035      	beq.n	2436 <__aeabi_dsub+0x20e>
    23ca:	4868      	ldr	r0, [pc, #416]	; (256c <__aeabi_dsub+0x344>)
    23cc:	4286      	cmp	r6, r0
    23ce:	d0b1      	beq.n	2334 <__aeabi_dsub+0x10c>
    23d0:	2780      	movs	r7, #128	; 0x80
    23d2:	043f      	lsls	r7, r7, #16
    23d4:	4339      	orrs	r1, r7
    23d6:	2b38      	cmp	r3, #56	; 0x38
    23d8:	dc00      	bgt.n	23dc <__aeabi_dsub+0x1b4>
    23da:	e0fd      	b.n	25d8 <__aeabi_dsub+0x3b0>
    23dc:	430a      	orrs	r2, r1
    23de:	0017      	movs	r7, r2
    23e0:	2100      	movs	r1, #0
    23e2:	1e7a      	subs	r2, r7, #1
    23e4:	4197      	sbcs	r7, r2
    23e6:	4457      	add	r7, sl
    23e8:	4557      	cmp	r7, sl
    23ea:	4180      	sbcs	r0, r0
    23ec:	1909      	adds	r1, r1, r4
    23ee:	4244      	negs	r4, r0
    23f0:	190c      	adds	r4, r1, r4
    23f2:	0223      	lsls	r3, r4, #8
    23f4:	d53a      	bpl.n	246c <__aeabi_dsub+0x244>
    23f6:	4b5d      	ldr	r3, [pc, #372]	; (256c <__aeabi_dsub+0x344>)
    23f8:	3601      	adds	r6, #1
    23fa:	429e      	cmp	r6, r3
    23fc:	d100      	bne.n	2400 <__aeabi_dsub+0x1d8>
    23fe:	e14b      	b.n	2698 <__aeabi_dsub+0x470>
    2400:	2201      	movs	r2, #1
    2402:	4b5b      	ldr	r3, [pc, #364]	; (2570 <__aeabi_dsub+0x348>)
    2404:	401c      	ands	r4, r3
    2406:	087b      	lsrs	r3, r7, #1
    2408:	4017      	ands	r7, r2
    240a:	431f      	orrs	r7, r3
    240c:	07e2      	lsls	r2, r4, #31
    240e:	4317      	orrs	r7, r2
    2410:	0864      	lsrs	r4, r4, #1
    2412:	e78f      	b.n	2334 <__aeabi_dsub+0x10c>
    2414:	0008      	movs	r0, r1
    2416:	4310      	orrs	r0, r2
    2418:	d000      	beq.n	241c <__aeabi_dsub+0x1f4>
    241a:	e724      	b.n	2266 <__aeabi_dsub+0x3e>
    241c:	e721      	b.n	2262 <__aeabi_dsub+0x3a>
    241e:	0023      	movs	r3, r4
    2420:	433b      	orrs	r3, r7
    2422:	d100      	bne.n	2426 <__aeabi_dsub+0x1fe>
    2424:	e1b9      	b.n	279a <__aeabi_dsub+0x572>
    2426:	2280      	movs	r2, #128	; 0x80
    2428:	0312      	lsls	r2, r2, #12
    242a:	4314      	orrs	r4, r2
    242c:	0324      	lsls	r4, r4, #12
    242e:	0b24      	lsrs	r4, r4, #12
    2430:	e79f      	b.n	2372 <__aeabi_dsub+0x14a>
    2432:	002e      	movs	r6, r5
    2434:	e77e      	b.n	2334 <__aeabi_dsub+0x10c>
    2436:	0008      	movs	r0, r1
    2438:	4310      	orrs	r0, r2
    243a:	d100      	bne.n	243e <__aeabi_dsub+0x216>
    243c:	e0ca      	b.n	25d4 <__aeabi_dsub+0x3ac>
    243e:	1e58      	subs	r0, r3, #1
    2440:	4684      	mov	ip, r0
    2442:	2800      	cmp	r0, #0
    2444:	d000      	beq.n	2448 <__aeabi_dsub+0x220>
    2446:	e0e7      	b.n	2618 <__aeabi_dsub+0x3f0>
    2448:	4452      	add	r2, sl
    244a:	4552      	cmp	r2, sl
    244c:	4180      	sbcs	r0, r0
    244e:	1864      	adds	r4, r4, r1
    2450:	4240      	negs	r0, r0
    2452:	1824      	adds	r4, r4, r0
    2454:	0017      	movs	r7, r2
    2456:	2601      	movs	r6, #1
    2458:	0223      	lsls	r3, r4, #8
    245a:	d507      	bpl.n	246c <__aeabi_dsub+0x244>
    245c:	2602      	movs	r6, #2
    245e:	e7cf      	b.n	2400 <__aeabi_dsub+0x1d8>
    2460:	4664      	mov	r4, ip
    2462:	432c      	orrs	r4, r5
    2464:	d100      	bne.n	2468 <__aeabi_dsub+0x240>
    2466:	e1b3      	b.n	27d0 <__aeabi_dsub+0x5a8>
    2468:	002c      	movs	r4, r5
    246a:	4667      	mov	r7, ip
    246c:	077b      	lsls	r3, r7, #29
    246e:	d000      	beq.n	2472 <__aeabi_dsub+0x24a>
    2470:	e762      	b.n	2338 <__aeabi_dsub+0x110>
    2472:	0763      	lsls	r3, r4, #29
    2474:	08ff      	lsrs	r7, r7, #3
    2476:	431f      	orrs	r7, r3
    2478:	2501      	movs	r5, #1
    247a:	4643      	mov	r3, r8
    247c:	08e4      	lsrs	r4, r4, #3
    247e:	401d      	ands	r5, r3
    2480:	e793      	b.n	23aa <__aeabi_dsub+0x182>
    2482:	2d00      	cmp	r5, #0
    2484:	d178      	bne.n	2578 <__aeabi_dsub+0x350>
    2486:	1c75      	adds	r5, r6, #1
    2488:	056d      	lsls	r5, r5, #21
    248a:	0d6d      	lsrs	r5, r5, #21
    248c:	2d01      	cmp	r5, #1
    248e:	dc00      	bgt.n	2492 <__aeabi_dsub+0x26a>
    2490:	e0f2      	b.n	2678 <__aeabi_dsub+0x450>
    2492:	4650      	mov	r0, sl
    2494:	1a80      	subs	r0, r0, r2
    2496:	4582      	cmp	sl, r0
    2498:	41bf      	sbcs	r7, r7
    249a:	1a65      	subs	r5, r4, r1
    249c:	427f      	negs	r7, r7
    249e:	1bed      	subs	r5, r5, r7
    24a0:	4684      	mov	ip, r0
    24a2:	0228      	lsls	r0, r5, #8
    24a4:	d400      	bmi.n	24a8 <__aeabi_dsub+0x280>
    24a6:	e08c      	b.n	25c2 <__aeabi_dsub+0x39a>
    24a8:	4650      	mov	r0, sl
    24aa:	1a17      	subs	r7, r2, r0
    24ac:	42ba      	cmp	r2, r7
    24ae:	4192      	sbcs	r2, r2
    24b0:	1b0c      	subs	r4, r1, r4
    24b2:	4255      	negs	r5, r2
    24b4:	1b65      	subs	r5, r4, r5
    24b6:	4698      	mov	r8, r3
    24b8:	e714      	b.n	22e4 <__aeabi_dsub+0xbc>
    24ba:	2501      	movs	r5, #1
    24bc:	4643      	mov	r3, r8
    24be:	2400      	movs	r4, #0
    24c0:	401d      	ands	r5, r3
    24c2:	2700      	movs	r7, #0
    24c4:	e755      	b.n	2372 <__aeabi_dsub+0x14a>
    24c6:	4c2a      	ldr	r4, [pc, #168]	; (2570 <__aeabi_dsub+0x348>)
    24c8:	1af6      	subs	r6, r6, r3
    24ca:	402c      	ands	r4, r5
    24cc:	e732      	b.n	2334 <__aeabi_dsub+0x10c>
    24ce:	003d      	movs	r5, r7
    24d0:	3828      	subs	r0, #40	; 0x28
    24d2:	4085      	lsls	r5, r0
    24d4:	2700      	movs	r7, #0
    24d6:	e717      	b.n	2308 <__aeabi_dsub+0xe0>
    24d8:	0038      	movs	r0, r7
    24da:	f000 fa27 	bl	292c <__clzsi2>
    24de:	3020      	adds	r0, #32
    24e0:	e706      	b.n	22f0 <__aeabi_dsub+0xc8>
    24e2:	430a      	orrs	r2, r1
    24e4:	0017      	movs	r7, r2
    24e6:	2100      	movs	r1, #0
    24e8:	1e7a      	subs	r2, r7, #1
    24ea:	4197      	sbcs	r7, r2
    24ec:	e6ee      	b.n	22cc <__aeabi_dsub+0xa4>
    24ee:	2b00      	cmp	r3, #0
    24f0:	d000      	beq.n	24f4 <__aeabi_dsub+0x2cc>
    24f2:	e0e5      	b.n	26c0 <__aeabi_dsub+0x498>
    24f4:	1c73      	adds	r3, r6, #1
    24f6:	469c      	mov	ip, r3
    24f8:	055b      	lsls	r3, r3, #21
    24fa:	0d5b      	lsrs	r3, r3, #21
    24fc:	2b01      	cmp	r3, #1
    24fe:	dc00      	bgt.n	2502 <__aeabi_dsub+0x2da>
    2500:	e09f      	b.n	2642 <__aeabi_dsub+0x41a>
    2502:	4b1a      	ldr	r3, [pc, #104]	; (256c <__aeabi_dsub+0x344>)
    2504:	459c      	cmp	ip, r3
    2506:	d100      	bne.n	250a <__aeabi_dsub+0x2e2>
    2508:	e0c5      	b.n	2696 <__aeabi_dsub+0x46e>
    250a:	4452      	add	r2, sl
    250c:	4552      	cmp	r2, sl
    250e:	4180      	sbcs	r0, r0
    2510:	1864      	adds	r4, r4, r1
    2512:	4240      	negs	r0, r0
    2514:	1824      	adds	r4, r4, r0
    2516:	07e7      	lsls	r7, r4, #31
    2518:	0852      	lsrs	r2, r2, #1
    251a:	4317      	orrs	r7, r2
    251c:	0864      	lsrs	r4, r4, #1
    251e:	4666      	mov	r6, ip
    2520:	e708      	b.n	2334 <__aeabi_dsub+0x10c>
    2522:	4812      	ldr	r0, [pc, #72]	; (256c <__aeabi_dsub+0x344>)
    2524:	4285      	cmp	r5, r0
    2526:	d100      	bne.n	252a <__aeabi_dsub+0x302>
    2528:	e085      	b.n	2636 <__aeabi_dsub+0x40e>
    252a:	001d      	movs	r5, r3
    252c:	e6bc      	b.n	22a8 <__aeabi_dsub+0x80>
    252e:	0029      	movs	r1, r5
    2530:	3e1f      	subs	r6, #31
    2532:	40f1      	lsrs	r1, r6
    2534:	2b20      	cmp	r3, #32
    2536:	d100      	bne.n	253a <__aeabi_dsub+0x312>
    2538:	e07f      	b.n	263a <__aeabi_dsub+0x412>
    253a:	2240      	movs	r2, #64	; 0x40
    253c:	1ad3      	subs	r3, r2, r3
    253e:	409d      	lsls	r5, r3
    2540:	432f      	orrs	r7, r5
    2542:	1e7d      	subs	r5, r7, #1
    2544:	41af      	sbcs	r7, r5
    2546:	2400      	movs	r4, #0
    2548:	430f      	orrs	r7, r1
    254a:	2600      	movs	r6, #0
    254c:	e78e      	b.n	246c <__aeabi_dsub+0x244>
    254e:	002b      	movs	r3, r5
    2550:	000f      	movs	r7, r1
    2552:	3b20      	subs	r3, #32
    2554:	40df      	lsrs	r7, r3
    2556:	2d20      	cmp	r5, #32
    2558:	d071      	beq.n	263e <__aeabi_dsub+0x416>
    255a:	2340      	movs	r3, #64	; 0x40
    255c:	1b5d      	subs	r5, r3, r5
    255e:	40a9      	lsls	r1, r5
    2560:	430a      	orrs	r2, r1
    2562:	1e51      	subs	r1, r2, #1
    2564:	418a      	sbcs	r2, r1
    2566:	2100      	movs	r1, #0
    2568:	4317      	orrs	r7, r2
    256a:	e6af      	b.n	22cc <__aeabi_dsub+0xa4>
    256c:	000007ff 	.word	0x000007ff
    2570:	ff7fffff 	.word	0xff7fffff
    2574:	800fffff 	.word	0x800fffff
    2578:	2e00      	cmp	r6, #0
    257a:	d03e      	beq.n	25fa <__aeabi_dsub+0x3d2>
    257c:	4eb3      	ldr	r6, [pc, #716]	; (284c <__aeabi_dsub+0x624>)
    257e:	45b4      	cmp	ip, r6
    2580:	d045      	beq.n	260e <__aeabi_dsub+0x3e6>
    2582:	2680      	movs	r6, #128	; 0x80
    2584:	0436      	lsls	r6, r6, #16
    2586:	426d      	negs	r5, r5
    2588:	4334      	orrs	r4, r6
    258a:	2d38      	cmp	r5, #56	; 0x38
    258c:	dd00      	ble.n	2590 <__aeabi_dsub+0x368>
    258e:	e0a8      	b.n	26e2 <__aeabi_dsub+0x4ba>
    2590:	2d1f      	cmp	r5, #31
    2592:	dd00      	ble.n	2596 <__aeabi_dsub+0x36e>
    2594:	e11f      	b.n	27d6 <__aeabi_dsub+0x5ae>
    2596:	2620      	movs	r6, #32
    2598:	0027      	movs	r7, r4
    259a:	4650      	mov	r0, sl
    259c:	1b76      	subs	r6, r6, r5
    259e:	40b7      	lsls	r7, r6
    25a0:	40e8      	lsrs	r0, r5
    25a2:	4307      	orrs	r7, r0
    25a4:	4650      	mov	r0, sl
    25a6:	40b0      	lsls	r0, r6
    25a8:	1e46      	subs	r6, r0, #1
    25aa:	41b0      	sbcs	r0, r6
    25ac:	40ec      	lsrs	r4, r5
    25ae:	4338      	orrs	r0, r7
    25b0:	1a17      	subs	r7, r2, r0
    25b2:	42ba      	cmp	r2, r7
    25b4:	4192      	sbcs	r2, r2
    25b6:	1b0c      	subs	r4, r1, r4
    25b8:	4252      	negs	r2, r2
    25ba:	1aa4      	subs	r4, r4, r2
    25bc:	4666      	mov	r6, ip
    25be:	4698      	mov	r8, r3
    25c0:	e68b      	b.n	22da <__aeabi_dsub+0xb2>
    25c2:	4664      	mov	r4, ip
    25c4:	4667      	mov	r7, ip
    25c6:	432c      	orrs	r4, r5
    25c8:	d000      	beq.n	25cc <__aeabi_dsub+0x3a4>
    25ca:	e68b      	b.n	22e4 <__aeabi_dsub+0xbc>
    25cc:	2500      	movs	r5, #0
    25ce:	2600      	movs	r6, #0
    25d0:	2700      	movs	r7, #0
    25d2:	e6ea      	b.n	23aa <__aeabi_dsub+0x182>
    25d4:	001e      	movs	r6, r3
    25d6:	e6ad      	b.n	2334 <__aeabi_dsub+0x10c>
    25d8:	2b1f      	cmp	r3, #31
    25da:	dc60      	bgt.n	269e <__aeabi_dsub+0x476>
    25dc:	2720      	movs	r7, #32
    25de:	1af8      	subs	r0, r7, r3
    25e0:	000f      	movs	r7, r1
    25e2:	4684      	mov	ip, r0
    25e4:	4087      	lsls	r7, r0
    25e6:	0010      	movs	r0, r2
    25e8:	40d8      	lsrs	r0, r3
    25ea:	4307      	orrs	r7, r0
    25ec:	4660      	mov	r0, ip
    25ee:	4082      	lsls	r2, r0
    25f0:	1e50      	subs	r0, r2, #1
    25f2:	4182      	sbcs	r2, r0
    25f4:	40d9      	lsrs	r1, r3
    25f6:	4317      	orrs	r7, r2
    25f8:	e6f5      	b.n	23e6 <__aeabi_dsub+0x1be>
    25fa:	0026      	movs	r6, r4
    25fc:	4650      	mov	r0, sl
    25fe:	4306      	orrs	r6, r0
    2600:	d005      	beq.n	260e <__aeabi_dsub+0x3e6>
    2602:	43ed      	mvns	r5, r5
    2604:	2d00      	cmp	r5, #0
    2606:	d0d3      	beq.n	25b0 <__aeabi_dsub+0x388>
    2608:	4e90      	ldr	r6, [pc, #576]	; (284c <__aeabi_dsub+0x624>)
    260a:	45b4      	cmp	ip, r6
    260c:	d1bd      	bne.n	258a <__aeabi_dsub+0x362>
    260e:	000c      	movs	r4, r1
    2610:	0017      	movs	r7, r2
    2612:	4666      	mov	r6, ip
    2614:	4698      	mov	r8, r3
    2616:	e68d      	b.n	2334 <__aeabi_dsub+0x10c>
    2618:	488c      	ldr	r0, [pc, #560]	; (284c <__aeabi_dsub+0x624>)
    261a:	4283      	cmp	r3, r0
    261c:	d00b      	beq.n	2636 <__aeabi_dsub+0x40e>
    261e:	4663      	mov	r3, ip
    2620:	e6d9      	b.n	23d6 <__aeabi_dsub+0x1ae>
    2622:	2d00      	cmp	r5, #0
    2624:	d000      	beq.n	2628 <__aeabi_dsub+0x400>
    2626:	e096      	b.n	2756 <__aeabi_dsub+0x52e>
    2628:	0008      	movs	r0, r1
    262a:	4310      	orrs	r0, r2
    262c:	d100      	bne.n	2630 <__aeabi_dsub+0x408>
    262e:	e0e2      	b.n	27f6 <__aeabi_dsub+0x5ce>
    2630:	000c      	movs	r4, r1
    2632:	0017      	movs	r7, r2
    2634:	4698      	mov	r8, r3
    2636:	4e85      	ldr	r6, [pc, #532]	; (284c <__aeabi_dsub+0x624>)
    2638:	e67c      	b.n	2334 <__aeabi_dsub+0x10c>
    263a:	2500      	movs	r5, #0
    263c:	e780      	b.n	2540 <__aeabi_dsub+0x318>
    263e:	2100      	movs	r1, #0
    2640:	e78e      	b.n	2560 <__aeabi_dsub+0x338>
    2642:	0023      	movs	r3, r4
    2644:	4650      	mov	r0, sl
    2646:	4303      	orrs	r3, r0
    2648:	2e00      	cmp	r6, #0
    264a:	d000      	beq.n	264e <__aeabi_dsub+0x426>
    264c:	e0a8      	b.n	27a0 <__aeabi_dsub+0x578>
    264e:	2b00      	cmp	r3, #0
    2650:	d100      	bne.n	2654 <__aeabi_dsub+0x42c>
    2652:	e0de      	b.n	2812 <__aeabi_dsub+0x5ea>
    2654:	000b      	movs	r3, r1
    2656:	4313      	orrs	r3, r2
    2658:	d100      	bne.n	265c <__aeabi_dsub+0x434>
    265a:	e66b      	b.n	2334 <__aeabi_dsub+0x10c>
    265c:	4452      	add	r2, sl
    265e:	4552      	cmp	r2, sl
    2660:	4180      	sbcs	r0, r0
    2662:	1864      	adds	r4, r4, r1
    2664:	4240      	negs	r0, r0
    2666:	1824      	adds	r4, r4, r0
    2668:	0017      	movs	r7, r2
    266a:	0223      	lsls	r3, r4, #8
    266c:	d400      	bmi.n	2670 <__aeabi_dsub+0x448>
    266e:	e6fd      	b.n	246c <__aeabi_dsub+0x244>
    2670:	4b77      	ldr	r3, [pc, #476]	; (2850 <__aeabi_dsub+0x628>)
    2672:	4666      	mov	r6, ip
    2674:	401c      	ands	r4, r3
    2676:	e65d      	b.n	2334 <__aeabi_dsub+0x10c>
    2678:	0025      	movs	r5, r4
    267a:	4650      	mov	r0, sl
    267c:	4305      	orrs	r5, r0
    267e:	2e00      	cmp	r6, #0
    2680:	d1cf      	bne.n	2622 <__aeabi_dsub+0x3fa>
    2682:	2d00      	cmp	r5, #0
    2684:	d14f      	bne.n	2726 <__aeabi_dsub+0x4fe>
    2686:	000c      	movs	r4, r1
    2688:	4314      	orrs	r4, r2
    268a:	d100      	bne.n	268e <__aeabi_dsub+0x466>
    268c:	e0a0      	b.n	27d0 <__aeabi_dsub+0x5a8>
    268e:	000c      	movs	r4, r1
    2690:	0017      	movs	r7, r2
    2692:	4698      	mov	r8, r3
    2694:	e64e      	b.n	2334 <__aeabi_dsub+0x10c>
    2696:	4666      	mov	r6, ip
    2698:	2400      	movs	r4, #0
    269a:	2700      	movs	r7, #0
    269c:	e685      	b.n	23aa <__aeabi_dsub+0x182>
    269e:	001f      	movs	r7, r3
    26a0:	0008      	movs	r0, r1
    26a2:	3f20      	subs	r7, #32
    26a4:	40f8      	lsrs	r0, r7
    26a6:	0007      	movs	r7, r0
    26a8:	2b20      	cmp	r3, #32
    26aa:	d100      	bne.n	26ae <__aeabi_dsub+0x486>
    26ac:	e08e      	b.n	27cc <__aeabi_dsub+0x5a4>
    26ae:	2040      	movs	r0, #64	; 0x40
    26b0:	1ac3      	subs	r3, r0, r3
    26b2:	4099      	lsls	r1, r3
    26b4:	430a      	orrs	r2, r1
    26b6:	1e51      	subs	r1, r2, #1
    26b8:	418a      	sbcs	r2, r1
    26ba:	2100      	movs	r1, #0
    26bc:	4317      	orrs	r7, r2
    26be:	e692      	b.n	23e6 <__aeabi_dsub+0x1be>
    26c0:	2e00      	cmp	r6, #0
    26c2:	d114      	bne.n	26ee <__aeabi_dsub+0x4c6>
    26c4:	0026      	movs	r6, r4
    26c6:	4650      	mov	r0, sl
    26c8:	4306      	orrs	r6, r0
    26ca:	d062      	beq.n	2792 <__aeabi_dsub+0x56a>
    26cc:	43db      	mvns	r3, r3
    26ce:	2b00      	cmp	r3, #0
    26d0:	d15c      	bne.n	278c <__aeabi_dsub+0x564>
    26d2:	1887      	adds	r7, r0, r2
    26d4:	4297      	cmp	r7, r2
    26d6:	4192      	sbcs	r2, r2
    26d8:	1864      	adds	r4, r4, r1
    26da:	4252      	negs	r2, r2
    26dc:	18a4      	adds	r4, r4, r2
    26de:	4666      	mov	r6, ip
    26e0:	e687      	b.n	23f2 <__aeabi_dsub+0x1ca>
    26e2:	4650      	mov	r0, sl
    26e4:	4320      	orrs	r0, r4
    26e6:	1e44      	subs	r4, r0, #1
    26e8:	41a0      	sbcs	r0, r4
    26ea:	2400      	movs	r4, #0
    26ec:	e760      	b.n	25b0 <__aeabi_dsub+0x388>
    26ee:	4e57      	ldr	r6, [pc, #348]	; (284c <__aeabi_dsub+0x624>)
    26f0:	45b4      	cmp	ip, r6
    26f2:	d04e      	beq.n	2792 <__aeabi_dsub+0x56a>
    26f4:	2680      	movs	r6, #128	; 0x80
    26f6:	0436      	lsls	r6, r6, #16
    26f8:	425b      	negs	r3, r3
    26fa:	4334      	orrs	r4, r6
    26fc:	2b38      	cmp	r3, #56	; 0x38
    26fe:	dd00      	ble.n	2702 <__aeabi_dsub+0x4da>
    2700:	e07f      	b.n	2802 <__aeabi_dsub+0x5da>
    2702:	2b1f      	cmp	r3, #31
    2704:	dd00      	ble.n	2708 <__aeabi_dsub+0x4e0>
    2706:	e08b      	b.n	2820 <__aeabi_dsub+0x5f8>
    2708:	2620      	movs	r6, #32
    270a:	0027      	movs	r7, r4
    270c:	4650      	mov	r0, sl
    270e:	1af6      	subs	r6, r6, r3
    2710:	40b7      	lsls	r7, r6
    2712:	40d8      	lsrs	r0, r3
    2714:	4307      	orrs	r7, r0
    2716:	4650      	mov	r0, sl
    2718:	40b0      	lsls	r0, r6
    271a:	1e46      	subs	r6, r0, #1
    271c:	41b0      	sbcs	r0, r6
    271e:	4307      	orrs	r7, r0
    2720:	40dc      	lsrs	r4, r3
    2722:	18bf      	adds	r7, r7, r2
    2724:	e7d6      	b.n	26d4 <__aeabi_dsub+0x4ac>
    2726:	000d      	movs	r5, r1
    2728:	4315      	orrs	r5, r2
    272a:	d100      	bne.n	272e <__aeabi_dsub+0x506>
    272c:	e602      	b.n	2334 <__aeabi_dsub+0x10c>
    272e:	4650      	mov	r0, sl
    2730:	1a80      	subs	r0, r0, r2
    2732:	4582      	cmp	sl, r0
    2734:	41bf      	sbcs	r7, r7
    2736:	1a65      	subs	r5, r4, r1
    2738:	427f      	negs	r7, r7
    273a:	1bed      	subs	r5, r5, r7
    273c:	4684      	mov	ip, r0
    273e:	0228      	lsls	r0, r5, #8
    2740:	d400      	bmi.n	2744 <__aeabi_dsub+0x51c>
    2742:	e68d      	b.n	2460 <__aeabi_dsub+0x238>
    2744:	4650      	mov	r0, sl
    2746:	1a17      	subs	r7, r2, r0
    2748:	42ba      	cmp	r2, r7
    274a:	4192      	sbcs	r2, r2
    274c:	1b0c      	subs	r4, r1, r4
    274e:	4252      	negs	r2, r2
    2750:	1aa4      	subs	r4, r4, r2
    2752:	4698      	mov	r8, r3
    2754:	e5ee      	b.n	2334 <__aeabi_dsub+0x10c>
    2756:	000d      	movs	r5, r1
    2758:	4315      	orrs	r5, r2
    275a:	d100      	bne.n	275e <__aeabi_dsub+0x536>
    275c:	e76b      	b.n	2636 <__aeabi_dsub+0x40e>
    275e:	4650      	mov	r0, sl
    2760:	0767      	lsls	r7, r4, #29
    2762:	08c0      	lsrs	r0, r0, #3
    2764:	4307      	orrs	r7, r0
    2766:	2080      	movs	r0, #128	; 0x80
    2768:	08e4      	lsrs	r4, r4, #3
    276a:	0300      	lsls	r0, r0, #12
    276c:	4204      	tst	r4, r0
    276e:	d007      	beq.n	2780 <__aeabi_dsub+0x558>
    2770:	08cd      	lsrs	r5, r1, #3
    2772:	4205      	tst	r5, r0
    2774:	d104      	bne.n	2780 <__aeabi_dsub+0x558>
    2776:	002c      	movs	r4, r5
    2778:	4698      	mov	r8, r3
    277a:	08d7      	lsrs	r7, r2, #3
    277c:	0749      	lsls	r1, r1, #29
    277e:	430f      	orrs	r7, r1
    2780:	0f7b      	lsrs	r3, r7, #29
    2782:	00e4      	lsls	r4, r4, #3
    2784:	431c      	orrs	r4, r3
    2786:	00ff      	lsls	r7, r7, #3
    2788:	4e30      	ldr	r6, [pc, #192]	; (284c <__aeabi_dsub+0x624>)
    278a:	e5d3      	b.n	2334 <__aeabi_dsub+0x10c>
    278c:	4e2f      	ldr	r6, [pc, #188]	; (284c <__aeabi_dsub+0x624>)
    278e:	45b4      	cmp	ip, r6
    2790:	d1b4      	bne.n	26fc <__aeabi_dsub+0x4d4>
    2792:	000c      	movs	r4, r1
    2794:	0017      	movs	r7, r2
    2796:	4666      	mov	r6, ip
    2798:	e5cc      	b.n	2334 <__aeabi_dsub+0x10c>
    279a:	2700      	movs	r7, #0
    279c:	2400      	movs	r4, #0
    279e:	e5e8      	b.n	2372 <__aeabi_dsub+0x14a>
    27a0:	2b00      	cmp	r3, #0
    27a2:	d039      	beq.n	2818 <__aeabi_dsub+0x5f0>
    27a4:	000b      	movs	r3, r1
    27a6:	4313      	orrs	r3, r2
    27a8:	d100      	bne.n	27ac <__aeabi_dsub+0x584>
    27aa:	e744      	b.n	2636 <__aeabi_dsub+0x40e>
    27ac:	08c0      	lsrs	r0, r0, #3
    27ae:	0767      	lsls	r7, r4, #29
    27b0:	4307      	orrs	r7, r0
    27b2:	2080      	movs	r0, #128	; 0x80
    27b4:	08e4      	lsrs	r4, r4, #3
    27b6:	0300      	lsls	r0, r0, #12
    27b8:	4204      	tst	r4, r0
    27ba:	d0e1      	beq.n	2780 <__aeabi_dsub+0x558>
    27bc:	08cb      	lsrs	r3, r1, #3
    27be:	4203      	tst	r3, r0
    27c0:	d1de      	bne.n	2780 <__aeabi_dsub+0x558>
    27c2:	08d7      	lsrs	r7, r2, #3
    27c4:	0749      	lsls	r1, r1, #29
    27c6:	430f      	orrs	r7, r1
    27c8:	001c      	movs	r4, r3
    27ca:	e7d9      	b.n	2780 <__aeabi_dsub+0x558>
    27cc:	2100      	movs	r1, #0
    27ce:	e771      	b.n	26b4 <__aeabi_dsub+0x48c>
    27d0:	2500      	movs	r5, #0
    27d2:	2700      	movs	r7, #0
    27d4:	e5e9      	b.n	23aa <__aeabi_dsub+0x182>
    27d6:	002e      	movs	r6, r5
    27d8:	0027      	movs	r7, r4
    27da:	3e20      	subs	r6, #32
    27dc:	40f7      	lsrs	r7, r6
    27de:	2d20      	cmp	r5, #32
    27e0:	d02f      	beq.n	2842 <__aeabi_dsub+0x61a>
    27e2:	2640      	movs	r6, #64	; 0x40
    27e4:	1b75      	subs	r5, r6, r5
    27e6:	40ac      	lsls	r4, r5
    27e8:	4650      	mov	r0, sl
    27ea:	4320      	orrs	r0, r4
    27ec:	1e44      	subs	r4, r0, #1
    27ee:	41a0      	sbcs	r0, r4
    27f0:	2400      	movs	r4, #0
    27f2:	4338      	orrs	r0, r7
    27f4:	e6dc      	b.n	25b0 <__aeabi_dsub+0x388>
    27f6:	2480      	movs	r4, #128	; 0x80
    27f8:	2500      	movs	r5, #0
    27fa:	0324      	lsls	r4, r4, #12
    27fc:	4e13      	ldr	r6, [pc, #76]	; (284c <__aeabi_dsub+0x624>)
    27fe:	2700      	movs	r7, #0
    2800:	e5d3      	b.n	23aa <__aeabi_dsub+0x182>
    2802:	4650      	mov	r0, sl
    2804:	4320      	orrs	r0, r4
    2806:	0007      	movs	r7, r0
    2808:	1e78      	subs	r0, r7, #1
    280a:	4187      	sbcs	r7, r0
    280c:	2400      	movs	r4, #0
    280e:	18bf      	adds	r7, r7, r2
    2810:	e760      	b.n	26d4 <__aeabi_dsub+0x4ac>
    2812:	000c      	movs	r4, r1
    2814:	0017      	movs	r7, r2
    2816:	e58d      	b.n	2334 <__aeabi_dsub+0x10c>
    2818:	000c      	movs	r4, r1
    281a:	0017      	movs	r7, r2
    281c:	4e0b      	ldr	r6, [pc, #44]	; (284c <__aeabi_dsub+0x624>)
    281e:	e589      	b.n	2334 <__aeabi_dsub+0x10c>
    2820:	001e      	movs	r6, r3
    2822:	0027      	movs	r7, r4
    2824:	3e20      	subs	r6, #32
    2826:	40f7      	lsrs	r7, r6
    2828:	2b20      	cmp	r3, #32
    282a:	d00c      	beq.n	2846 <__aeabi_dsub+0x61e>
    282c:	2640      	movs	r6, #64	; 0x40
    282e:	1af3      	subs	r3, r6, r3
    2830:	409c      	lsls	r4, r3
    2832:	4650      	mov	r0, sl
    2834:	4320      	orrs	r0, r4
    2836:	1e44      	subs	r4, r0, #1
    2838:	41a0      	sbcs	r0, r4
    283a:	4307      	orrs	r7, r0
    283c:	2400      	movs	r4, #0
    283e:	18bf      	adds	r7, r7, r2
    2840:	e748      	b.n	26d4 <__aeabi_dsub+0x4ac>
    2842:	2400      	movs	r4, #0
    2844:	e7d0      	b.n	27e8 <__aeabi_dsub+0x5c0>
    2846:	2400      	movs	r4, #0
    2848:	e7f3      	b.n	2832 <__aeabi_dsub+0x60a>
    284a:	46c0      	nop			; (mov r8, r8)
    284c:	000007ff 	.word	0x000007ff
    2850:	ff7fffff 	.word	0xff7fffff

00002854 <__aeabi_d2iz>:
    2854:	b530      	push	{r4, r5, lr}
    2856:	4d13      	ldr	r5, [pc, #76]	; (28a4 <__aeabi_d2iz+0x50>)
    2858:	030a      	lsls	r2, r1, #12
    285a:	004b      	lsls	r3, r1, #1
    285c:	0b12      	lsrs	r2, r2, #12
    285e:	0d5b      	lsrs	r3, r3, #21
    2860:	0fc9      	lsrs	r1, r1, #31
    2862:	2400      	movs	r4, #0
    2864:	42ab      	cmp	r3, r5
    2866:	dd10      	ble.n	288a <__aeabi_d2iz+0x36>
    2868:	4c0f      	ldr	r4, [pc, #60]	; (28a8 <__aeabi_d2iz+0x54>)
    286a:	42a3      	cmp	r3, r4
    286c:	dc0f      	bgt.n	288e <__aeabi_d2iz+0x3a>
    286e:	2480      	movs	r4, #128	; 0x80
    2870:	4d0e      	ldr	r5, [pc, #56]	; (28ac <__aeabi_d2iz+0x58>)
    2872:	0364      	lsls	r4, r4, #13
    2874:	4322      	orrs	r2, r4
    2876:	1aed      	subs	r5, r5, r3
    2878:	2d1f      	cmp	r5, #31
    287a:	dd0b      	ble.n	2894 <__aeabi_d2iz+0x40>
    287c:	480c      	ldr	r0, [pc, #48]	; (28b0 <__aeabi_d2iz+0x5c>)
    287e:	1ac3      	subs	r3, r0, r3
    2880:	40da      	lsrs	r2, r3
    2882:	4254      	negs	r4, r2
    2884:	2900      	cmp	r1, #0
    2886:	d100      	bne.n	288a <__aeabi_d2iz+0x36>
    2888:	0014      	movs	r4, r2
    288a:	0020      	movs	r0, r4
    288c:	bd30      	pop	{r4, r5, pc}
    288e:	4b09      	ldr	r3, [pc, #36]	; (28b4 <__aeabi_d2iz+0x60>)
    2890:	18cc      	adds	r4, r1, r3
    2892:	e7fa      	b.n	288a <__aeabi_d2iz+0x36>
    2894:	4c08      	ldr	r4, [pc, #32]	; (28b8 <__aeabi_d2iz+0x64>)
    2896:	40e8      	lsrs	r0, r5
    2898:	46a4      	mov	ip, r4
    289a:	4463      	add	r3, ip
    289c:	409a      	lsls	r2, r3
    289e:	4302      	orrs	r2, r0
    28a0:	e7ef      	b.n	2882 <__aeabi_d2iz+0x2e>
    28a2:	46c0      	nop			; (mov r8, r8)
    28a4:	000003fe 	.word	0x000003fe
    28a8:	0000041d 	.word	0x0000041d
    28ac:	00000433 	.word	0x00000433
    28b0:	00000413 	.word	0x00000413
    28b4:	7fffffff 	.word	0x7fffffff
    28b8:	fffffbed 	.word	0xfffffbed

000028bc <__aeabi_ui2d>:
    28bc:	b510      	push	{r4, lr}
    28be:	1e04      	subs	r4, r0, #0
    28c0:	d028      	beq.n	2914 <__aeabi_ui2d+0x58>
    28c2:	f000 f833 	bl	292c <__clzsi2>
    28c6:	4b15      	ldr	r3, [pc, #84]	; (291c <__aeabi_ui2d+0x60>)
    28c8:	4a15      	ldr	r2, [pc, #84]	; (2920 <__aeabi_ui2d+0x64>)
    28ca:	1a1b      	subs	r3, r3, r0
    28cc:	1ad2      	subs	r2, r2, r3
    28ce:	2a1f      	cmp	r2, #31
    28d0:	dd15      	ble.n	28fe <__aeabi_ui2d+0x42>
    28d2:	4a14      	ldr	r2, [pc, #80]	; (2924 <__aeabi_ui2d+0x68>)
    28d4:	1ad2      	subs	r2, r2, r3
    28d6:	4094      	lsls	r4, r2
    28d8:	2200      	movs	r2, #0
    28da:	0324      	lsls	r4, r4, #12
    28dc:	055b      	lsls	r3, r3, #21
    28de:	0b24      	lsrs	r4, r4, #12
    28e0:	0d5b      	lsrs	r3, r3, #21
    28e2:	2100      	movs	r1, #0
    28e4:	0010      	movs	r0, r2
    28e6:	0324      	lsls	r4, r4, #12
    28e8:	0d0a      	lsrs	r2, r1, #20
    28ea:	0b24      	lsrs	r4, r4, #12
    28ec:	0512      	lsls	r2, r2, #20
    28ee:	4322      	orrs	r2, r4
    28f0:	4c0d      	ldr	r4, [pc, #52]	; (2928 <__aeabi_ui2d+0x6c>)
    28f2:	051b      	lsls	r3, r3, #20
    28f4:	4022      	ands	r2, r4
    28f6:	4313      	orrs	r3, r2
    28f8:	005b      	lsls	r3, r3, #1
    28fa:	0859      	lsrs	r1, r3, #1
    28fc:	bd10      	pop	{r4, pc}
    28fe:	0021      	movs	r1, r4
    2900:	4091      	lsls	r1, r2
    2902:	000a      	movs	r2, r1
    2904:	210b      	movs	r1, #11
    2906:	1a08      	subs	r0, r1, r0
    2908:	40c4      	lsrs	r4, r0
    290a:	055b      	lsls	r3, r3, #21
    290c:	0324      	lsls	r4, r4, #12
    290e:	0b24      	lsrs	r4, r4, #12
    2910:	0d5b      	lsrs	r3, r3, #21
    2912:	e7e6      	b.n	28e2 <__aeabi_ui2d+0x26>
    2914:	2300      	movs	r3, #0
    2916:	2400      	movs	r4, #0
    2918:	2200      	movs	r2, #0
    291a:	e7e2      	b.n	28e2 <__aeabi_ui2d+0x26>
    291c:	0000041e 	.word	0x0000041e
    2920:	00000433 	.word	0x00000433
    2924:	00000413 	.word	0x00000413
    2928:	800fffff 	.word	0x800fffff

0000292c <__clzsi2>:
    292c:	211c      	movs	r1, #28
    292e:	2301      	movs	r3, #1
    2930:	041b      	lsls	r3, r3, #16
    2932:	4298      	cmp	r0, r3
    2934:	d301      	bcc.n	293a <__clzsi2+0xe>
    2936:	0c00      	lsrs	r0, r0, #16
    2938:	3910      	subs	r1, #16
    293a:	0a1b      	lsrs	r3, r3, #8
    293c:	4298      	cmp	r0, r3
    293e:	d301      	bcc.n	2944 <__clzsi2+0x18>
    2940:	0a00      	lsrs	r0, r0, #8
    2942:	3908      	subs	r1, #8
    2944:	091b      	lsrs	r3, r3, #4
    2946:	4298      	cmp	r0, r3
    2948:	d301      	bcc.n	294e <__clzsi2+0x22>
    294a:	0900      	lsrs	r0, r0, #4
    294c:	3904      	subs	r1, #4
    294e:	a202      	add	r2, pc, #8	; (adr r2, 2958 <__clzsi2+0x2c>)
    2950:	5c10      	ldrb	r0, [r2, r0]
    2952:	1840      	adds	r0, r0, r1
    2954:	4770      	bx	lr
    2956:	46c0      	nop			; (mov r8, r8)
    2958:	02020304 	.word	0x02020304
    295c:	01010101 	.word	0x01010101
	...

00002968 <__libc_init_array>:
    2968:	b570      	push	{r4, r5, r6, lr}
    296a:	2600      	movs	r6, #0
    296c:	4d0c      	ldr	r5, [pc, #48]	; (29a0 <__libc_init_array+0x38>)
    296e:	4c0d      	ldr	r4, [pc, #52]	; (29a4 <__libc_init_array+0x3c>)
    2970:	1b64      	subs	r4, r4, r5
    2972:	10a4      	asrs	r4, r4, #2
    2974:	42a6      	cmp	r6, r4
    2976:	d109      	bne.n	298c <__libc_init_array+0x24>
    2978:	2600      	movs	r6, #0
    297a:	f000 f87b 	bl	2a74 <_init>
    297e:	4d0a      	ldr	r5, [pc, #40]	; (29a8 <__libc_init_array+0x40>)
    2980:	4c0a      	ldr	r4, [pc, #40]	; (29ac <__libc_init_array+0x44>)
    2982:	1b64      	subs	r4, r4, r5
    2984:	10a4      	asrs	r4, r4, #2
    2986:	42a6      	cmp	r6, r4
    2988:	d105      	bne.n	2996 <__libc_init_array+0x2e>
    298a:	bd70      	pop	{r4, r5, r6, pc}
    298c:	00b3      	lsls	r3, r6, #2
    298e:	58eb      	ldr	r3, [r5, r3]
    2990:	4798      	blx	r3
    2992:	3601      	adds	r6, #1
    2994:	e7ee      	b.n	2974 <__libc_init_array+0xc>
    2996:	00b3      	lsls	r3, r6, #2
    2998:	58eb      	ldr	r3, [r5, r3]
    299a:	4798      	blx	r3
    299c:	3601      	adds	r6, #1
    299e:	e7f2      	b.n	2986 <__libc_init_array+0x1e>
    29a0:	00002a80 	.word	0x00002a80
    29a4:	00002a80 	.word	0x00002a80
    29a8:	00002a80 	.word	0x00002a80
    29ac:	00002a84 	.word	0x00002a84
    29b0:	42000400 	.word	0x42000400
    29b4:	42000800 	.word	0x42000800
    29b8:	42000c00 	.word	0x42000c00
    29bc:	42001000 	.word	0x42001000
    29c0:	42001400 	.word	0x42001400
    29c4:	42001800 	.word	0x42001800
    29c8:	00000a0a 	.word	0x00000a0a
    29cc:	00000a06 	.word	0x00000a06
    29d0:	00000a06 	.word	0x00000a06
    29d4:	00000a38 	.word	0x00000a38
    29d8:	00000a38 	.word	0x00000a38
    29dc:	00000a22 	.word	0x00000a22
    29e0:	00000a10 	.word	0x00000a10
    29e4:	00000a28 	.word	0x00000a28
    29e8:	000a0012 	.word	0x000a0012
    29ec:	20000004 	.word	0x20000004
    29f0:	00000000 	.word	0x00000000
    29f4:	000018b8 	.word	0x000018b8
    29f8:	0000189a 	.word	0x0000189a
    29fc:	00001854 	.word	0x00001854
    2a00:	00001772 	.word	0x00001772
    2a04:	00001854 	.word	0x00001854
    2a08:	0000188c 	.word	0x0000188c
    2a0c:	00001854 	.word	0x00001854
    2a10:	00001772 	.word	0x00001772
    2a14:	0000189a 	.word	0x0000189a
    2a18:	0000189a 	.word	0x0000189a
    2a1c:	0000188c 	.word	0x0000188c
    2a20:	00001772 	.word	0x00001772
    2a24:	0000176a 	.word	0x0000176a
    2a28:	0000176a 	.word	0x0000176a
    2a2c:	0000176a 	.word	0x0000176a
    2a30:	00001ad0 	.word	0x00001ad0
    2a34:	00001f18 	.word	0x00001f18
    2a38:	00001dd8 	.word	0x00001dd8
    2a3c:	00001dd8 	.word	0x00001dd8
    2a40:	00001dd4 	.word	0x00001dd4
    2a44:	00001ef0 	.word	0x00001ef0
    2a48:	00001ef0 	.word	0x00001ef0
    2a4c:	00001ee2 	.word	0x00001ee2
    2a50:	00001dd4 	.word	0x00001dd4
    2a54:	00001ef0 	.word	0x00001ef0
    2a58:	00001ee2 	.word	0x00001ee2
    2a5c:	00001ef0 	.word	0x00001ef0
    2a60:	00001dd4 	.word	0x00001dd4
    2a64:	00001ef8 	.word	0x00001ef8
    2a68:	00001ef8 	.word	0x00001ef8
    2a6c:	00001ef8 	.word	0x00001ef8
    2a70:	000020fc 	.word	0x000020fc

00002a74 <_init>:
    2a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a76:	46c0      	nop			; (mov r8, r8)
    2a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2a7a:	bc08      	pop	{r3}
    2a7c:	469e      	mov	lr, r3
    2a7e:	4770      	bx	lr

00002a80 <__init_array_start>:
    2a80:	000000e5 	.word	0x000000e5

00002a84 <_fini>:
    2a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a86:	46c0      	nop			; (mov r8, r8)
    2a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2a8a:	bc08      	pop	{r3}
    2a8c:	469e      	mov	lr, r3
    2a8e:	4770      	bx	lr

00002a90 <__fini_array_start>:
    2a90:	000000bd 	.word	0x000000bd
