
I2C_QUICK_START_MASTER_INTERRUPT1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d74  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000014  20000000  00002d74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ac  20000014  00002d88  00020014  2**2
                  ALLOC
  3 .stack        00002000  200000c0  00002e34  00020014  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001be89  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000291e  00000000  00000000  0003bf1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000408  00000000  00000000  0003e83c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000003b0  00000000  00000000  0003ec44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0001d95d  00000000  00000000  0003eff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000973f  00000000  00000000  0005c951  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0009e211  00000000  00000000  00066090  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000b44  00000000  00000000  001042a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003cc7  00000000  00000000  00104de8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c0 20 00 20 85 10 00 00 81 10 00 00 81 10 00 00     . . ............
	...
      2c:	81 10 00 00 00 00 00 00 00 00 00 00 81 10 00 00     ................
      3c:	81 10 00 00 81 10 00 00 81 10 00 00 81 10 00 00     ................
      4c:	81 10 00 00 81 10 00 00 81 10 00 00 81 10 00 00     ................
      5c:	81 10 00 00 81 10 00 00 1d 0c 00 00 2d 0c 00 00     ............-...
      6c:	3d 0c 00 00 4d 0c 00 00 5d 0c 00 00 6d 0c 00 00     =...M...]...m...
      7c:	81 10 00 00 81 10 00 00 81 10 00 00 81 10 00 00     ................
      8c:	81 10 00 00 81 10 00 00 81 10 00 00 81 10 00 00     ................
      9c:	81 10 00 00 81 10 00 00 81 10 00 00 81 10 00 00     ................
      ac:	81 10 00 00 81 10 00 00 81 10 00 00 81 10 00 00     ................

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	20000014 	.word	0x20000014
      dc:	00000000 	.word	0x00000000
      e0:	00002d74 	.word	0x00002d74

000000e4 <frame_dummy>:
      e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e6:	b510      	push	{r4, lr}
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd10      	pop	{r4, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	20000018 	.word	0x20000018
     110:	00002d74 	.word	0x00002d74
     114:	00002d74 	.word	0x00002d74
     118:	00000000 	.word	0x00000000

0000011c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     11c:	4b0c      	ldr	r3, [pc, #48]	; (150 <cpu_irq_enter_critical+0x34>)
     11e:	681b      	ldr	r3, [r3, #0]
     120:	2b00      	cmp	r3, #0
     122:	d106      	bne.n	132 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     124:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     128:	2b00      	cmp	r3, #0
     12a:	d007      	beq.n	13c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     12c:	2200      	movs	r2, #0
     12e:	4b09      	ldr	r3, [pc, #36]	; (154 <cpu_irq_enter_critical+0x38>)
     130:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     132:	4a07      	ldr	r2, [pc, #28]	; (150 <cpu_irq_enter_critical+0x34>)
     134:	6813      	ldr	r3, [r2, #0]
     136:	3301      	adds	r3, #1
     138:	6013      	str	r3, [r2, #0]
}
     13a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     13c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     13e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     142:	2200      	movs	r2, #0
     144:	4b04      	ldr	r3, [pc, #16]	; (158 <cpu_irq_enter_critical+0x3c>)
     146:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     148:	3201      	adds	r2, #1
     14a:	4b02      	ldr	r3, [pc, #8]	; (154 <cpu_irq_enter_critical+0x38>)
     14c:	701a      	strb	r2, [r3, #0]
     14e:	e7f0      	b.n	132 <cpu_irq_enter_critical+0x16>
     150:	20000030 	.word	0x20000030
     154:	20000034 	.word	0x20000034
     158:	20000000 	.word	0x20000000

0000015c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     15c:	4b08      	ldr	r3, [pc, #32]	; (180 <cpu_irq_leave_critical+0x24>)
     15e:	681a      	ldr	r2, [r3, #0]
     160:	3a01      	subs	r2, #1
     162:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     164:	681b      	ldr	r3, [r3, #0]
     166:	2b00      	cmp	r3, #0
     168:	d109      	bne.n	17e <cpu_irq_leave_critical+0x22>
     16a:	4b06      	ldr	r3, [pc, #24]	; (184 <cpu_irq_leave_critical+0x28>)
     16c:	781b      	ldrb	r3, [r3, #0]
     16e:	2b00      	cmp	r3, #0
     170:	d005      	beq.n	17e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     172:	2201      	movs	r2, #1
     174:	4b04      	ldr	r3, [pc, #16]	; (188 <cpu_irq_leave_critical+0x2c>)
     176:	701a      	strb	r2, [r3, #0]
     178:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     17c:	b662      	cpsie	i
	}
}
     17e:	4770      	bx	lr
     180:	20000030 	.word	0x20000030
     184:	20000034 	.word	0x20000034
     188:	20000000 	.word	0x20000000

0000018c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     18c:	b5f0      	push	{r4, r5, r6, r7, lr}
     18e:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     190:	ac01      	add	r4, sp, #4
     192:	2501      	movs	r5, #1
     194:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     196:	2700      	movs	r7, #0
     198:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     19a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     19c:	0021      	movs	r1, r4
     19e:	200f      	movs	r0, #15
     1a0:	4e06      	ldr	r6, [pc, #24]	; (1bc <system_board_init+0x30>)
     1a2:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     1a4:	2280      	movs	r2, #128	; 0x80
     1a6:	0212      	lsls	r2, r2, #8
     1a8:	2382      	movs	r3, #130	; 0x82
     1aa:	05db      	lsls	r3, r3, #23
     1ac:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     1ae:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     1b0:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     1b2:	0021      	movs	r1, r4
     1b4:	201c      	movs	r0, #28
     1b6:	47b0      	blx	r6
}
     1b8:	b003      	add	sp, #12
     1ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1bc:	000001c1 	.word	0x000001c1

000001c0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     1c0:	b500      	push	{lr}
     1c2:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     1c4:	ab01      	add	r3, sp, #4
     1c6:	2280      	movs	r2, #128	; 0x80
     1c8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     1ca:	780a      	ldrb	r2, [r1, #0]
     1cc:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     1ce:	784a      	ldrb	r2, [r1, #1]
     1d0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     1d2:	788a      	ldrb	r2, [r1, #2]
     1d4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     1d6:	0019      	movs	r1, r3
     1d8:	4b01      	ldr	r3, [pc, #4]	; (1e0 <port_pin_set_config+0x20>)
     1da:	4798      	blx	r3
}
     1dc:	b003      	add	sp, #12
     1de:	bd00      	pop	{pc}
     1e0:	00001025 	.word	0x00001025

000001e4 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
     1e6:	46d6      	mov	lr, sl
     1e8:	464f      	mov	r7, r9
     1ea:	4646      	mov	r6, r8
     1ec:	b5c0      	push	{r6, r7, lr}
     1ee:	b08a      	sub	sp, #40	; 0x28
     1f0:	0006      	movs	r6, r0
     1f2:	000f      	movs	r7, r1
     1f4:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     1f6:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     1f8:	0008      	movs	r0, r1
     1fa:	4ba2      	ldr	r3, [pc, #648]	; (484 <i2c_master_init+0x2a0>)
     1fc:	4798      	blx	r3
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#elif (SAMC21)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
     1fe:	1c45      	adds	r5, r0, #1
	if (sercom_index == 5) {
     200:	2805      	cmp	r0, #5
     202:	d01e      	beq.n	242 <i2c_master_init+0x5e>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     204:	3013      	adds	r0, #19
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     206:	4aa0      	ldr	r2, [pc, #640]	; (488 <i2c_master_init+0x2a4>)
     208:	69d1      	ldr	r1, [r2, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     20a:	2301      	movs	r3, #1
     20c:	40ab      	lsls	r3, r5
     20e:	430b      	orrs	r3, r1
     210:	61d3      	str	r3, [r2, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     212:	a909      	add	r1, sp, #36	; 0x24
     214:	7b23      	ldrb	r3, [r4, #12]
     216:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     218:	b2c5      	uxtb	r5, r0
     21a:	0028      	movs	r0, r5
     21c:	4b9b      	ldr	r3, [pc, #620]	; (48c <i2c_master_init+0x2a8>)
     21e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     220:	0028      	movs	r0, r5
     222:	4b9b      	ldr	r3, [pc, #620]	; (490 <i2c_master_init+0x2ac>)
     224:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     226:	7b20      	ldrb	r0, [r4, #12]
     228:	2100      	movs	r1, #0
     22a:	4b9a      	ldr	r3, [pc, #616]	; (494 <i2c_master_init+0x2b0>)
     22c:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     22e:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
     230:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     232:	079b      	lsls	r3, r3, #30
     234:	d507      	bpl.n	246 <i2c_master_init+0x62>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     236:	b00a      	add	sp, #40	; 0x28
     238:	bc1c      	pop	{r2, r3, r4}
     23a:	4690      	mov	r8, r2
     23c:	4699      	mov	r9, r3
     23e:	46a2      	mov	sl, r4
     240:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index   = SERCOM5_GCLK_ID_CORE;
     242:	2019      	movs	r0, #25
     244:	e7df      	b.n	206 <i2c_master_init+0x22>
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     246:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
     248:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     24a:	07db      	lsls	r3, r3, #31
     24c:	d4f3      	bmi.n	236 <i2c_master_init+0x52>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     24e:	6830      	ldr	r0, [r6, #0]
     250:	4b8c      	ldr	r3, [pc, #560]	; (484 <i2c_master_init+0x2a0>)
     252:	4699      	mov	r9, r3
     254:	4798      	blx	r3
     256:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     258:	498f      	ldr	r1, [pc, #572]	; (498 <i2c_master_init+0x2b4>)
     25a:	4b90      	ldr	r3, [pc, #576]	; (49c <i2c_master_init+0x2b8>)
     25c:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     25e:	00ad      	lsls	r5, r5, #2
     260:	4b8f      	ldr	r3, [pc, #572]	; (4a0 <i2c_master_init+0x2bc>)
     262:	50ee      	str	r6, [r5, r3]
	module->registered_callback = 0;
     264:	2300      	movs	r3, #0
     266:	7633      	strb	r3, [r6, #24]
	module->enabled_callback = 0;
     268:	7673      	strb	r3, [r6, #25]
	module->buffer_length = 0;
     26a:	2500      	movs	r5, #0
     26c:	8373      	strh	r3, [r6, #26]
	module->buffer_remaining = 0;
     26e:	83b3      	strh	r3, [r6, #28]
	module->status = STATUS_OK;
     270:	2225      	movs	r2, #37	; 0x25
     272:	54b5      	strb	r5, [r6, r2]
	module->buffer = NULL;
     274:	6233      	str	r3, [r6, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     276:	3314      	adds	r3, #20
     278:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     27a:	6833      	ldr	r3, [r6, #0]
     27c:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     27e:	0018      	movs	r0, r3
     280:	47c8      	blx	r9
     282:	4681      	mov	r9, r0
     284:	2380      	movs	r3, #128	; 0x80
     286:	aa08      	add	r2, sp, #32
     288:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     28a:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     28c:	2301      	movs	r3, #1
     28e:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     290:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     292:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
     294:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     296:	2800      	cmp	r0, #0
     298:	d100      	bne.n	29c <i2c_master_init+0xb8>
     29a:	e0af      	b.n	3fc <i2c_master_init+0x218>
	pin_conf.mux_position = pad0 & 0xFFFF;
     29c:	ab08      	add	r3, sp, #32
     29e:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     2a0:	2302      	movs	r3, #2
     2a2:	aa08      	add	r2, sp, #32
     2a4:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     2a6:	0c00      	lsrs	r0, r0, #16
     2a8:	b2c0      	uxtb	r0, r0
     2aa:	0011      	movs	r1, r2
     2ac:	4b7d      	ldr	r3, [pc, #500]	; (4a4 <i2c_master_init+0x2c0>)
     2ae:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     2b0:	2f00      	cmp	r7, #0
     2b2:	d100      	bne.n	2b6 <i2c_master_init+0xd2>
     2b4:	e0a7      	b.n	406 <i2c_master_init+0x222>
	pin_conf.mux_position = pad1 & 0xFFFF;
     2b6:	ab08      	add	r3, sp, #32
     2b8:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     2ba:	2302      	movs	r3, #2
     2bc:	aa08      	add	r2, sp, #32
     2be:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     2c0:	0c3f      	lsrs	r7, r7, #16
     2c2:	b2f8      	uxtb	r0, r7
     2c4:	0011      	movs	r1, r2
     2c6:	4b77      	ldr	r3, [pc, #476]	; (4a4 <i2c_master_init+0x2c0>)
     2c8:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     2ca:	8aa3      	ldrh	r3, [r4, #20]
     2cc:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
     2ce:	8ae3      	ldrh	r3, [r4, #22]
     2d0:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     2d2:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     2d4:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     2d6:	2b00      	cmp	r3, #0
     2d8:	d104      	bne.n	2e4 <i2c_master_init+0x100>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     2da:	4b73      	ldr	r3, [pc, #460]	; (4a8 <i2c_master_init+0x2c4>)
     2dc:	789b      	ldrb	r3, [r3, #2]
     2de:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     2e0:	0fdb      	lsrs	r3, r3, #31
     2e2:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     2e4:	68a1      	ldr	r1, [r4, #8]
     2e6:	6923      	ldr	r3, [r4, #16]
     2e8:	430b      	orrs	r3, r1
     2ea:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     2ec:	2224      	movs	r2, #36	; 0x24
     2ee:	5ca2      	ldrb	r2, [r4, r2]
     2f0:	2a00      	cmp	r2, #0
     2f2:	d002      	beq.n	2fa <i2c_master_init+0x116>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     2f4:	2280      	movs	r2, #128	; 0x80
     2f6:	05d2      	lsls	r2, r2, #23
     2f8:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     2fa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     2fc:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     2fe:	222c      	movs	r2, #44	; 0x2c
     300:	5ca2      	ldrb	r2, [r4, r2]
     302:	2a00      	cmp	r2, #0
     304:	d103      	bne.n	30e <i2c_master_init+0x12a>
     306:	2280      	movs	r2, #128	; 0x80
     308:	0492      	lsls	r2, r2, #18
     30a:	4291      	cmp	r1, r2
     30c:	d102      	bne.n	314 <i2c_master_init+0x130>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     30e:	2280      	movs	r2, #128	; 0x80
     310:	0512      	lsls	r2, r2, #20
     312:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     314:	222d      	movs	r2, #45	; 0x2d
     316:	5ca2      	ldrb	r2, [r4, r2]
     318:	2a00      	cmp	r2, #0
     31a:	d002      	beq.n	322 <i2c_master_init+0x13e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     31c:	2280      	movs	r2, #128	; 0x80
     31e:	0412      	lsls	r2, r2, #16
     320:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     322:	222e      	movs	r2, #46	; 0x2e
     324:	5ca2      	ldrb	r2, [r4, r2]
     326:	2a00      	cmp	r2, #0
     328:	d002      	beq.n	330 <i2c_master_init+0x14c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     32a:	2280      	movs	r2, #128	; 0x80
     32c:	03d2      	lsls	r2, r2, #15
     32e:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     330:	4642      	mov	r2, r8
     332:	6812      	ldr	r2, [r2, #0]
     334:	4313      	orrs	r3, r2
     336:	4642      	mov	r2, r8
     338:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     33a:	2380      	movs	r3, #128	; 0x80
     33c:	005b      	lsls	r3, r3, #1
     33e:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     340:	464d      	mov	r5, r9
     342:	3513      	adds	r5, #19
     344:	b2e8      	uxtb	r0, r5
     346:	4b59      	ldr	r3, [pc, #356]	; (4ac <i2c_master_init+0x2c8>)
     348:	4798      	blx	r3
     34a:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     34c:	23fa      	movs	r3, #250	; 0xfa
     34e:	009b      	lsls	r3, r3, #2
     350:	6822      	ldr	r2, [r4, #0]
     352:	435a      	muls	r2, r3
     354:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     356:	6863      	ldr	r3, [r4, #4]
     358:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
     35a:	4d55      	ldr	r5, [pc, #340]	; (4b0 <i2c_master_init+0x2cc>)
     35c:	47a8      	blx	r5
     35e:	9000      	str	r0, [sp, #0]
     360:	9101      	str	r1, [sp, #4]
     362:	464b      	mov	r3, r9
     364:	0058      	lsls	r0, r3, #1
     366:	47a8      	blx	r5
     368:	9002      	str	r0, [sp, #8]
     36a:	9103      	str	r1, [sp, #12]
     36c:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     36e:	47a8      	blx	r5
     370:	9004      	str	r0, [sp, #16]
     372:	9105      	str	r1, [sp, #20]
     374:	4f4f      	ldr	r7, [pc, #316]	; (4b4 <i2c_master_init+0x2d0>)
     376:	4a50      	ldr	r2, [pc, #320]	; (4b8 <i2c_master_init+0x2d4>)
     378:	4b50      	ldr	r3, [pc, #320]	; (4bc <i2c_master_init+0x2d8>)
     37a:	9800      	ldr	r0, [sp, #0]
     37c:	9901      	ldr	r1, [sp, #4]
     37e:	47b8      	blx	r7
     380:	0002      	movs	r2, r0
     382:	000b      	movs	r3, r1
     384:	9804      	ldr	r0, [sp, #16]
     386:	9905      	ldr	r1, [sp, #20]
     388:	47b8      	blx	r7
     38a:	4e4d      	ldr	r6, [pc, #308]	; (4c0 <i2c_master_init+0x2dc>)
     38c:	2200      	movs	r2, #0
     38e:	4b4d      	ldr	r3, [pc, #308]	; (4c4 <i2c_master_init+0x2e0>)
     390:	47b0      	blx	r6
     392:	9004      	str	r0, [sp, #16]
     394:	9105      	str	r1, [sp, #20]
     396:	4648      	mov	r0, r9
     398:	47a8      	blx	r5
     39a:	0002      	movs	r2, r0
     39c:	000b      	movs	r3, r1
     39e:	9804      	ldr	r0, [sp, #16]
     3a0:	9905      	ldr	r1, [sp, #20]
     3a2:	47b8      	blx	r7
     3a4:	0002      	movs	r2, r0
     3a6:	000b      	movs	r3, r1
     3a8:	4d47      	ldr	r5, [pc, #284]	; (4c8 <i2c_master_init+0x2e4>)
     3aa:	9800      	ldr	r0, [sp, #0]
     3ac:	9901      	ldr	r1, [sp, #4]
     3ae:	47a8      	blx	r5
     3b0:	9a02      	ldr	r2, [sp, #8]
     3b2:	9b03      	ldr	r3, [sp, #12]
     3b4:	47b0      	blx	r6
     3b6:	2200      	movs	r2, #0
     3b8:	4b44      	ldr	r3, [pc, #272]	; (4cc <i2c_master_init+0x2e8>)
     3ba:	47a8      	blx	r5
     3bc:	9a02      	ldr	r2, [sp, #8]
     3be:	9b03      	ldr	r3, [sp, #12]
     3c0:	4d43      	ldr	r5, [pc, #268]	; (4d0 <i2c_master_init+0x2ec>)
     3c2:	47a8      	blx	r5
     3c4:	4b43      	ldr	r3, [pc, #268]	; (4d4 <i2c_master_init+0x2f0>)
     3c6:	4798      	blx	r3
     3c8:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     3ca:	2380      	movs	r3, #128	; 0x80
     3cc:	049b      	lsls	r3, r3, #18
     3ce:	68a2      	ldr	r2, [r4, #8]
     3d0:	429a      	cmp	r2, r3
     3d2:	d01e      	beq.n	412 <i2c_master_init+0x22e>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     3d4:	0003      	movs	r3, r0
     3d6:	2040      	movs	r0, #64	; 0x40
     3d8:	2dff      	cmp	r5, #255	; 0xff
     3da:	d900      	bls.n	3de <i2c_master_init+0x1fa>
     3dc:	e72b      	b.n	236 <i2c_master_init+0x52>
	int32_t tmp_baudlow_hs = 0;
     3de:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
     3e0:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     3e2:	25ff      	movs	r5, #255	; 0xff
     3e4:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     3e6:	0624      	lsls	r4, r4, #24
     3e8:	4325      	orrs	r5, r4
     3ea:	0400      	lsls	r0, r0, #16
     3ec:	23ff      	movs	r3, #255	; 0xff
     3ee:	041b      	lsls	r3, r3, #16
     3f0:	4018      	ands	r0, r3
     3f2:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     3f4:	4643      	mov	r3, r8
     3f6:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
     3f8:	2000      	movs	r0, #0
     3fa:	e71c      	b.n	236 <i2c_master_init+0x52>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     3fc:	2100      	movs	r1, #0
     3fe:	4640      	mov	r0, r8
     400:	4b35      	ldr	r3, [pc, #212]	; (4d8 <i2c_master_init+0x2f4>)
     402:	4798      	blx	r3
     404:	e74a      	b.n	29c <i2c_master_init+0xb8>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     406:	2101      	movs	r1, #1
     408:	4640      	mov	r0, r8
     40a:	4b33      	ldr	r3, [pc, #204]	; (4d8 <i2c_master_init+0x2f4>)
     40c:	4798      	blx	r3
     40e:	0007      	movs	r7, r0
     410:	e751      	b.n	2b6 <i2c_master_init+0xd2>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     412:	26fa      	movs	r6, #250	; 0xfa
     414:	00b6      	lsls	r6, r6, #2
     416:	4653      	mov	r3, sl
     418:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     41a:	9800      	ldr	r0, [sp, #0]
     41c:	9901      	ldr	r1, [sp, #4]
     41e:	0002      	movs	r2, r0
     420:	000b      	movs	r3, r1
     422:	4c27      	ldr	r4, [pc, #156]	; (4c0 <i2c_master_init+0x2dc>)
     424:	47a0      	blx	r4
     426:	9000      	str	r0, [sp, #0]
     428:	9101      	str	r1, [sp, #4]
     42a:	0030      	movs	r0, r6
     42c:	4b20      	ldr	r3, [pc, #128]	; (4b0 <i2c_master_init+0x2cc>)
     42e:	4798      	blx	r3
     430:	2200      	movs	r2, #0
     432:	4b2a      	ldr	r3, [pc, #168]	; (4dc <i2c_master_init+0x2f8>)
     434:	47b8      	blx	r7
     436:	0002      	movs	r2, r0
     438:	000b      	movs	r3, r1
     43a:	9800      	ldr	r0, [sp, #0]
     43c:	9901      	ldr	r1, [sp, #4]
     43e:	4c24      	ldr	r4, [pc, #144]	; (4d0 <i2c_master_init+0x2ec>)
     440:	47a0      	blx	r4
     442:	2200      	movs	r2, #0
     444:	4b21      	ldr	r3, [pc, #132]	; (4cc <i2c_master_init+0x2e8>)
     446:	4c20      	ldr	r4, [pc, #128]	; (4c8 <i2c_master_init+0x2e4>)
     448:	47a0      	blx	r4
     44a:	4b22      	ldr	r3, [pc, #136]	; (4d4 <i2c_master_init+0x2f0>)
     44c:	4798      	blx	r3
     44e:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
     450:	d00c      	beq.n	46c <i2c_master_init+0x288>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     452:	0031      	movs	r1, r6
     454:	9807      	ldr	r0, [sp, #28]
     456:	4b22      	ldr	r3, [pc, #136]	; (4e0 <i2c_master_init+0x2fc>)
     458:	4798      	blx	r3
     45a:	3802      	subs	r0, #2
     45c:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     45e:	002b      	movs	r3, r5
     460:	2dff      	cmp	r5, #255	; 0xff
     462:	d80c      	bhi.n	47e <i2c_master_init+0x29a>
     464:	28ff      	cmp	r0, #255	; 0xff
     466:	d9bc      	bls.n	3e2 <i2c_master_init+0x1fe>
     468:	2040      	movs	r0, #64	; 0x40
     46a:	e6e4      	b.n	236 <i2c_master_init+0x52>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     46c:	0071      	lsls	r1, r6, #1
     46e:	1e48      	subs	r0, r1, #1
     470:	9b07      	ldr	r3, [sp, #28]
     472:	469c      	mov	ip, r3
     474:	4460      	add	r0, ip
     476:	4b1a      	ldr	r3, [pc, #104]	; (4e0 <i2c_master_init+0x2fc>)
     478:	4798      	blx	r3
     47a:	3801      	subs	r0, #1
     47c:	e7ef      	b.n	45e <i2c_master_init+0x27a>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     47e:	2040      	movs	r0, #64	; 0x40
     480:	e6d9      	b.n	236 <i2c_master_init+0x52>
     482:	46c0      	nop			; (mov r8, r8)
     484:	00000b75 	.word	0x00000b75
     488:	40000800 	.word	0x40000800
     48c:	00000f29 	.word	0x00000f29
     490:	00000eb9 	.word	0x00000eb9
     494:	000009ad 	.word	0x000009ad
     498:	000007c1 	.word	0x000007c1
     49c:	00000bb1 	.word	0x00000bb1
     4a0:	20000068 	.word	0x20000068
     4a4:	00001025 	.word	0x00001025
     4a8:	41002000 	.word	0x41002000
     4ac:	00000f4d 	.word	0x00000f4d
     4b0:	00002ba9 	.word	0x00002ba9
     4b4:	00002015 	.word	0x00002015
     4b8:	e826d695 	.word	0xe826d695
     4bc:	3e112e0b 	.word	0x3e112e0b
     4c0:	0000138d 	.word	0x0000138d
     4c4:	40240000 	.word	0x40240000
     4c8:	00002515 	.word	0x00002515
     4cc:	3ff00000 	.word	0x3ff00000
     4d0:	000019ad 	.word	0x000019ad
     4d4:	00002b41 	.word	0x00002b41
     4d8:	000009f9 	.word	0x000009f9
     4dc:	40080000 	.word	0x40080000
     4e0:	00001275 	.word	0x00001275

000004e4 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     4e4:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     4e6:	7e1a      	ldrb	r2, [r3, #24]
     4e8:	0792      	lsls	r2, r2, #30
     4ea:	d507      	bpl.n	4fc <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     4ec:	2202      	movs	r2, #2
     4ee:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     4f0:	8b5b      	ldrh	r3, [r3, #26]
     4f2:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     4f4:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     4f6:	17db      	asrs	r3, r3, #31
     4f8:	4018      	ands	r0, r3
}
     4fa:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     4fc:	8b5a      	ldrh	r2, [r3, #26]
     4fe:	0752      	lsls	r2, r2, #29
     500:	d506      	bpl.n	510 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     502:	6859      	ldr	r1, [r3, #4]
     504:	22c0      	movs	r2, #192	; 0xc0
     506:	0292      	lsls	r2, r2, #10
     508:	430a      	orrs	r2, r1
     50a:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     50c:	2018      	movs	r0, #24
     50e:	e7f4      	b.n	4fa <_i2c_master_address_response+0x16>
	return STATUS_OK;
     510:	2000      	movs	r0, #0
     512:	e7f2      	b.n	4fa <_i2c_master_address_response+0x16>

00000514 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     514:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     516:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     518:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     51a:	2401      	movs	r4, #1
     51c:	2502      	movs	r5, #2
     51e:	7e11      	ldrb	r1, [r2, #24]
     520:	4221      	tst	r1, r4
     522:	d10b      	bne.n	53c <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     524:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     526:	4229      	tst	r1, r5
     528:	d106      	bne.n	538 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     52a:	3301      	adds	r3, #1
     52c:	b29b      	uxth	r3, r3
     52e:	8901      	ldrh	r1, [r0, #8]
     530:	4299      	cmp	r1, r3
     532:	d8f4      	bhi.n	51e <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     534:	2012      	movs	r0, #18
     536:	e002      	b.n	53e <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     538:	2000      	movs	r0, #0
     53a:	e000      	b.n	53e <_i2c_master_wait_for_bus+0x2a>
     53c:	2000      	movs	r0, #0
}
     53e:	bd30      	pop	{r4, r5, pc}

00000540 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     540:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     542:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     544:	6862      	ldr	r2, [r4, #4]
     546:	2380      	movs	r3, #128	; 0x80
     548:	02db      	lsls	r3, r3, #11
     54a:	4313      	orrs	r3, r2
     54c:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     54e:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     550:	4b02      	ldr	r3, [pc, #8]	; (55c <_i2c_master_send_hs_master_code+0x1c>)
     552:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     554:	2301      	movs	r3, #1
     556:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     558:	bd10      	pop	{r4, pc}
     55a:	46c0      	nop			; (mov r8, r8)
     55c:	00000515 	.word	0x00000515

00000560 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     560:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     562:	2207      	movs	r2, #7
     564:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     566:	421a      	tst	r2, r3
     568:	d1fc      	bne.n	564 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     56a:	4770      	bx	lr

0000056c <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     56c:	b570      	push	{r4, r5, r6, lr}
     56e:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     570:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     572:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     574:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     576:	8b83      	ldrh	r3, [r0, #28]
     578:	1aed      	subs	r5, r5, r3
     57a:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     57c:	8b83      	ldrh	r3, [r0, #28]
     57e:	3b01      	subs	r3, #1
     580:	b29b      	uxth	r3, r3
     582:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
     584:	0113      	lsls	r3, r2, #4
     586:	d51d      	bpl.n	5c4 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
     588:	7ac3      	ldrb	r3, [r0, #11]
     58a:	2b00      	cmp	r3, #0
     58c:	d003      	beq.n	596 <_i2c_master_read+0x2a>
     58e:	8b83      	ldrh	r3, [r0, #28]
     590:	b29b      	uxth	r3, r3
     592:	2b01      	cmp	r3, #1
     594:	d010      	beq.n	5b8 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
     596:	8ba3      	ldrh	r3, [r4, #28]
     598:	b29b      	uxth	r3, r3
     59a:	2b00      	cmp	r3, #0
     59c:	d102      	bne.n	5a4 <_i2c_master_read+0x38>
		if (module->send_stop) {
     59e:	7aa3      	ldrb	r3, [r4, #10]
     5a0:	2b00      	cmp	r3, #0
     5a2:	d11c      	bne.n	5de <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     5a4:	0020      	movs	r0, r4
     5a6:	4b12      	ldr	r3, [pc, #72]	; (5f0 <_i2c_master_read+0x84>)
     5a8:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     5aa:	6a23      	ldr	r3, [r4, #32]
     5ac:	195d      	adds	r5, r3, r5
     5ae:	2328      	movs	r3, #40	; 0x28
     5b0:	5cf3      	ldrb	r3, [r6, r3]
     5b2:	b2db      	uxtb	r3, r3
     5b4:	702b      	strb	r3, [r5, #0]
}
     5b6:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     5b8:	6872      	ldr	r2, [r6, #4]
     5ba:	2380      	movs	r3, #128	; 0x80
     5bc:	02db      	lsls	r3, r3, #11
     5be:	4313      	orrs	r3, r2
     5c0:	6073      	str	r3, [r6, #4]
     5c2:	e7e8      	b.n	596 <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
     5c4:	7ac3      	ldrb	r3, [r0, #11]
     5c6:	2b00      	cmp	r3, #0
     5c8:	d0e5      	beq.n	596 <_i2c_master_read+0x2a>
     5ca:	8b83      	ldrh	r3, [r0, #28]
     5cc:	b29b      	uxth	r3, r3
     5ce:	2b00      	cmp	r3, #0
     5d0:	d1e1      	bne.n	596 <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     5d2:	6872      	ldr	r2, [r6, #4]
     5d4:	2380      	movs	r3, #128	; 0x80
     5d6:	02db      	lsls	r3, r3, #11
     5d8:	4313      	orrs	r3, r2
     5da:	6073      	str	r3, [r6, #4]
     5dc:	e7db      	b.n	596 <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
     5de:	0020      	movs	r0, r4
     5e0:	4b03      	ldr	r3, [pc, #12]	; (5f0 <_i2c_master_read+0x84>)
     5e2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     5e4:	6872      	ldr	r2, [r6, #4]
     5e6:	23c0      	movs	r3, #192	; 0xc0
     5e8:	029b      	lsls	r3, r3, #10
     5ea:	4313      	orrs	r3, r2
     5ec:	6073      	str	r3, [r6, #4]
     5ee:	e7d9      	b.n	5a4 <_i2c_master_read+0x38>
     5f0:	00000561 	.word	0x00000561

000005f4 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     5f4:	b570      	push	{r4, r5, r6, lr}
     5f6:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     5f8:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     5fa:	8b6b      	ldrh	r3, [r5, #26]
     5fc:	075b      	lsls	r3, r3, #29
     5fe:	d503      	bpl.n	608 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     600:	221e      	movs	r2, #30
     602:	2325      	movs	r3, #37	; 0x25
     604:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     606:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     608:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     60a:	8b83      	ldrh	r3, [r0, #28]
     60c:	1af6      	subs	r6, r6, r3
     60e:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     610:	8b83      	ldrh	r3, [r0, #28]
     612:	3b01      	subs	r3, #1
     614:	b29b      	uxth	r3, r3
     616:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     618:	4b04      	ldr	r3, [pc, #16]	; (62c <_i2c_master_write+0x38>)
     61a:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     61c:	6a23      	ldr	r3, [r4, #32]
     61e:	199e      	adds	r6, r3, r6
     620:	7833      	ldrb	r3, [r6, #0]
     622:	b2db      	uxtb	r3, r3
     624:	2228      	movs	r2, #40	; 0x28
     626:	54ab      	strb	r3, [r5, r2]
     628:	e7ed      	b.n	606 <_i2c_master_write+0x12>
     62a:	46c0      	nop			; (mov r8, r8)
     62c:	00000561 	.word	0x00000561

00000630 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     630:	b570      	push	{r4, r5, r6, lr}
     632:	0005      	movs	r5, r0
     634:	000c      	movs	r4, r1
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     636:	6806      	ldr	r6, [r0, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
     638:	7a4b      	ldrb	r3, [r1, #9]
     63a:	2b00      	cmp	r3, #0
     63c:	d11a      	bne.n	674 <_i2c_master_write_packet+0x44>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     63e:	6873      	ldr	r3, [r6, #4]
     640:	4a13      	ldr	r2, [pc, #76]	; (690 <_i2c_master_write_packet+0x60>)
     642:	4013      	ands	r3, r2
     644:	6073      	str	r3, [r6, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
     646:	6863      	ldr	r3, [r4, #4]
     648:	622b      	str	r3, [r5, #32]
	module->buffer_remaining   = packet->data_length;
     64a:	8863      	ldrh	r3, [r4, #2]
     64c:	83ab      	strh	r3, [r5, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
     64e:	2200      	movs	r2, #0
     650:	2324      	movs	r3, #36	; 0x24
     652:	54ea      	strb	r2, [r5, r3]
	module->status             = STATUS_BUSY;
     654:	3205      	adds	r2, #5
     656:	3301      	adds	r3, #1
     658:	54ea      	strb	r2, [r5, r3]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
     65a:	3b22      	subs	r3, #34	; 0x22
     65c:	75b3      	strb	r3, [r6, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
     65e:	7a23      	ldrb	r3, [r4, #8]
     660:	2b00      	cmp	r3, #0
     662:	d10b      	bne.n	67c <_i2c_master_write_packet+0x4c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     664:	8823      	ldrh	r3, [r4, #0]
     666:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     668:	7a62      	ldrb	r2, [r4, #9]
     66a:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     66c:	4313      	orrs	r3, r2
     66e:	6273      	str	r3, [r6, #36]	; 0x24
	}

	return STATUS_OK;
}
     670:	2000      	movs	r0, #0
     672:	bd70      	pop	{r4, r5, r6, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     674:	7a89      	ldrb	r1, [r1, #10]
     676:	4b07      	ldr	r3, [pc, #28]	; (694 <_i2c_master_write_packet+0x64>)
     678:	4798      	blx	r3
     67a:	e7e0      	b.n	63e <_i2c_master_write_packet+0xe>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     67c:	8823      	ldrh	r3, [r4, #0]
     67e:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     680:	7a62      	ldrb	r2, [r4, #9]
     682:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     684:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     686:	2280      	movs	r2, #128	; 0x80
     688:	0212      	lsls	r2, r2, #8
     68a:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     68c:	6273      	str	r3, [r6, #36]	; 0x24
     68e:	e7ef      	b.n	670 <_i2c_master_write_packet+0x40>
     690:	fffbffff 	.word	0xfffbffff
     694:	00000541 	.word	0x00000541

00000698 <_i2c_master_read_packet>:
{
     698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     69a:	0005      	movs	r5, r0
     69c:	000c      	movs	r4, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     69e:	6806      	ldr	r6, [r0, #0]
	module->buffer             = packet->data;
     6a0:	684b      	ldr	r3, [r1, #4]
     6a2:	6203      	str	r3, [r0, #32]
	module->buffer_remaining   = packet->data_length;
     6a4:	884b      	ldrh	r3, [r1, #2]
     6a6:	8383      	strh	r3, [r0, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
     6a8:	2201      	movs	r2, #1
     6aa:	2324      	movs	r3, #36	; 0x24
     6ac:	54c2      	strb	r2, [r0, r3]
	module->status             = STATUS_BUSY;
     6ae:	3204      	adds	r2, #4
     6b0:	3301      	adds	r3, #1
     6b2:	54c2      	strb	r2, [r0, r3]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     6b4:	6837      	ldr	r7, [r6, #0]
     6b6:	013f      	lsls	r7, r7, #4
     6b8:	0fff      	lsrs	r7, r7, #31
	if (packet->high_speed) {
     6ba:	7a4b      	ldrb	r3, [r1, #9]
     6bc:	2b00      	cmp	r3, #0
     6be:	d117      	bne.n	6f0 <_i2c_master_read_packet+0x58>
	if ((sclsm_flag) && (packet->data_length == 1)) {
     6c0:	2f00      	cmp	r7, #0
     6c2:	d002      	beq.n	6ca <_i2c_master_read_packet+0x32>
     6c4:	8863      	ldrh	r3, [r4, #2]
     6c6:	2b01      	cmp	r3, #1
     6c8:	d016      	beq.n	6f8 <_i2c_master_read_packet+0x60>
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     6ca:	6873      	ldr	r3, [r6, #4]
     6cc:	4a20      	ldr	r2, [pc, #128]	; (750 <_i2c_master_read_packet+0xb8>)
     6ce:	4013      	ands	r3, r2
     6d0:	6073      	str	r3, [r6, #4]
	if (packet->ten_bit_address) {
     6d2:	7a23      	ldrb	r3, [r4, #8]
     6d4:	2b00      	cmp	r3, #0
     6d6:	d115      	bne.n	704 <_i2c_master_read_packet+0x6c>
		i2c_module->INTENSET.reg =
     6d8:	2303      	movs	r3, #3
     6da:	75b3      	strb	r3, [r6, #22]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     6dc:	8823      	ldrh	r3, [r4, #0]
     6de:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     6e0:	7a62      	ldrb	r2, [r4, #9]
     6e2:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     6e4:	4313      	orrs	r3, r2
     6e6:	2201      	movs	r2, #1
     6e8:	4313      	orrs	r3, r2
     6ea:	6273      	str	r3, [r6, #36]	; 0x24
	return STATUS_OK;
     6ec:	2000      	movs	r0, #0
}
     6ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     6f0:	7a89      	ldrb	r1, [r1, #10]
     6f2:	4b18      	ldr	r3, [pc, #96]	; (754 <_i2c_master_read_packet+0xbc>)
     6f4:	4798      	blx	r3
     6f6:	e7e3      	b.n	6c0 <_i2c_master_read_packet+0x28>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     6f8:	6872      	ldr	r2, [r6, #4]
     6fa:	2380      	movs	r3, #128	; 0x80
     6fc:	02db      	lsls	r3, r3, #11
     6fe:	4313      	orrs	r3, r2
     700:	6073      	str	r3, [r6, #4]
     702:	e7e6      	b.n	6d2 <_i2c_master_read_packet+0x3a>
		i2c_module->ADDR.reg = (packet->address << 1) |
     704:	8823      	ldrh	r3, [r4, #0]
     706:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     708:	7a62      	ldrb	r2, [r4, #9]
     70a:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     70c:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     70e:	2280      	movs	r2, #128	; 0x80
     710:	0212      	lsls	r2, r2, #8
     712:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     714:	6273      	str	r3, [r6, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     716:	0028      	movs	r0, r5
     718:	4b0f      	ldr	r3, [pc, #60]	; (758 <_i2c_master_read_packet+0xc0>)
     71a:	4798      	blx	r3
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     71c:	6873      	ldr	r3, [r6, #4]
     71e:	4a0c      	ldr	r2, [pc, #48]	; (750 <_i2c_master_read_packet+0xb8>)
     720:	4013      	ands	r3, r2
     722:	6073      	str	r3, [r6, #4]
		if (tmp_status == STATUS_OK) {
     724:	2800      	cmp	r0, #0
     726:	d1e2      	bne.n	6ee <_i2c_master_read_packet+0x56>
			tmp_status = _i2c_master_address_response(module);
     728:	0028      	movs	r0, r5
     72a:	4b0c      	ldr	r3, [pc, #48]	; (75c <_i2c_master_read_packet+0xc4>)
     72c:	4798      	blx	r3
		if (tmp_status == STATUS_OK) {
     72e:	2800      	cmp	r0, #0
     730:	d1dd      	bne.n	6ee <_i2c_master_read_packet+0x56>
			i2c_module->INTENSET.reg =
     732:	2303      	movs	r3, #3
     734:	75b3      	strb	r3, [r6, #22]
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     736:	8823      	ldrh	r3, [r4, #0]
     738:	0a1b      	lsrs	r3, r3, #8
     73a:	2278      	movs	r2, #120	; 0x78
     73c:	4313      	orrs	r3, r2
     73e:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     740:	7a62      	ldrb	r2, [r4, #9]
     742:	0392      	lsls	r2, r2, #14
     744:	2101      	movs	r1, #1
     746:	430a      	orrs	r2, r1
     748:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     74a:	6273      	str	r3, [r6, #36]	; 0x24
     74c:	e7cf      	b.n	6ee <_i2c_master_read_packet+0x56>
     74e:	46c0      	nop			; (mov r8, r8)
     750:	fffbffff 	.word	0xfffbffff
     754:	00000541 	.word	0x00000541
     758:	00000515 	.word	0x00000515
     75c:	000004e5 	.word	0x000004e5

00000760 <i2c_master_register_callback>:
	module->callbacks[callback_type] = callback;
     760:	1c93      	adds	r3, r2, #2
     762:	009b      	lsls	r3, r3, #2
     764:	18c3      	adds	r3, r0, r3
     766:	6059      	str	r1, [r3, #4]
	module->registered_callback |= (1 << callback_type);
     768:	7e03      	ldrb	r3, [r0, #24]
     76a:	2101      	movs	r1, #1
     76c:	4091      	lsls	r1, r2
     76e:	430b      	orrs	r3, r1
     770:	b2db      	uxtb	r3, r3
     772:	7603      	strb	r3, [r0, #24]
}
     774:	4770      	bx	lr
	...

00000778 <i2c_master_read_packet_job>:
{
     778:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
     77a:	8b83      	ldrh	r3, [r0, #28]
     77c:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     77e:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     780:	2b00      	cmp	r3, #0
     782:	d001      	beq.n	788 <i2c_master_read_packet_job+0x10>
}
     784:	0010      	movs	r0, r2
     786:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     788:	3301      	adds	r3, #1
     78a:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     78c:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     78e:	4b02      	ldr	r3, [pc, #8]	; (798 <i2c_master_read_packet_job+0x20>)
     790:	4798      	blx	r3
     792:	0002      	movs	r2, r0
     794:	e7f6      	b.n	784 <i2c_master_read_packet_job+0xc>
     796:	46c0      	nop			; (mov r8, r8)
     798:	00000699 	.word	0x00000699

0000079c <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     79c:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
     79e:	8b83      	ldrh	r3, [r0, #28]
     7a0:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     7a2:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     7a4:	2b00      	cmp	r3, #0
     7a6:	d001      	beq.n	7ac <i2c_master_write_packet_job+0x10>
	/* Make sure we send STOP at end*/
	module->send_stop = true;
	module->send_nack = true;
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
}
     7a8:	0010      	movs	r0, r2
     7aa:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     7ac:	3301      	adds	r3, #1
     7ae:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     7b0:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
     7b2:	4b02      	ldr	r3, [pc, #8]	; (7bc <i2c_master_write_packet_job+0x20>)
     7b4:	4798      	blx	r3
     7b6:	0002      	movs	r2, r0
     7b8:	e7f6      	b.n	7a8 <i2c_master_write_packet_job+0xc>
     7ba:	46c0      	nop			; (mov r8, r8)
     7bc:	00000631 	.word	0x00000631

000007c0 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     7c0:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     7c2:	0080      	lsls	r0, r0, #2
     7c4:	4b75      	ldr	r3, [pc, #468]	; (99c <_i2c_master_interrupt_handler+0x1dc>)
     7c6:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     7c8:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     7ca:	682b      	ldr	r3, [r5, #0]
     7cc:	011b      	lsls	r3, r3, #4
     7ce:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     7d0:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
     7d2:	7e26      	ldrb	r6, [r4, #24]
     7d4:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     7d6:	8b63      	ldrh	r3, [r4, #26]
     7d8:	b29b      	uxth	r3, r3
     7da:	2b00      	cmp	r3, #0
     7dc:	d103      	bne.n	7e6 <_i2c_master_interrupt_handler+0x26>
     7de:	8ba3      	ldrh	r3, [r4, #28]
     7e0:	b29b      	uxth	r3, r3
     7e2:	2b00      	cmp	r3, #0
     7e4:	d123      	bne.n	82e <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     7e6:	8b63      	ldrh	r3, [r4, #26]
     7e8:	b29b      	uxth	r3, r3
     7ea:	2b00      	cmp	r3, #0
     7ec:	d008      	beq.n	800 <_i2c_master_interrupt_handler+0x40>
     7ee:	8ba3      	ldrh	r3, [r4, #28]
     7f0:	b29b      	uxth	r3, r3
     7f2:	2b00      	cmp	r3, #0
     7f4:	d104      	bne.n	800 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
     7f6:	3325      	adds	r3, #37	; 0x25
     7f8:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     7fa:	2b05      	cmp	r3, #5
     7fc:	d100      	bne.n	800 <_i2c_master_interrupt_handler+0x40>
     7fe:	e06d      	b.n	8dc <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     800:	8b63      	ldrh	r3, [r4, #26]
     802:	b29b      	uxth	r3, r3
     804:	2b00      	cmp	r3, #0
     806:	d024      	beq.n	852 <_i2c_master_interrupt_handler+0x92>
     808:	8ba3      	ldrh	r3, [r4, #28]
     80a:	b29b      	uxth	r3, r3
     80c:	2b00      	cmp	r3, #0
     80e:	d020      	beq.n	852 <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     810:	8b6b      	ldrh	r3, [r5, #26]
     812:	069b      	lsls	r3, r3, #26
     814:	d500      	bpl.n	818 <_i2c_master_interrupt_handler+0x58>
     816:	e081      	b.n	91c <_i2c_master_interrupt_handler+0x15c>
     818:	2a00      	cmp	r2, #0
     81a:	d004      	beq.n	826 <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     81c:	8ba3      	ldrh	r3, [r4, #28]
     81e:	b29b      	uxth	r3, r3
     820:	2b01      	cmp	r3, #1
     822:	d100      	bne.n	826 <_i2c_master_interrupt_handler+0x66>
     824:	e07a      	b.n	91c <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
     826:	2241      	movs	r2, #65	; 0x41
     828:	2325      	movs	r3, #37	; 0x25
     82a:	54e2      	strb	r2, [r4, r3]
     82c:	e011      	b.n	852 <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     82e:	7e2b      	ldrb	r3, [r5, #24]
     830:	07db      	lsls	r3, r3, #31
     832:	d507      	bpl.n	844 <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     834:	2301      	movs	r3, #1
     836:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     838:	8b6b      	ldrh	r3, [r5, #26]
     83a:	079b      	lsls	r3, r3, #30
     83c:	d52e      	bpl.n	89c <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
     83e:	2241      	movs	r2, #65	; 0x41
     840:	2325      	movs	r3, #37	; 0x25
     842:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
     844:	8ba3      	ldrh	r3, [r4, #28]
     846:	b29b      	uxth	r3, r3
     848:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     84a:	2325      	movs	r3, #37	; 0x25
     84c:	5ce3      	ldrb	r3, [r4, r3]
     84e:	2b05      	cmp	r3, #5
     850:	d038      	beq.n	8c4 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     852:	8b63      	ldrh	r3, [r4, #26]
     854:	b29b      	uxth	r3, r3
     856:	2b00      	cmp	r3, #0
     858:	d007      	beq.n	86a <_i2c_master_interrupt_handler+0xaa>
     85a:	8ba3      	ldrh	r3, [r4, #28]
     85c:	b29b      	uxth	r3, r3
     85e:	2b00      	cmp	r3, #0
     860:	d103      	bne.n	86a <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
     862:	3325      	adds	r3, #37	; 0x25
     864:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     866:	2b05      	cmp	r3, #5
     868:	d064      	beq.n	934 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     86a:	2325      	movs	r3, #37	; 0x25
     86c:	5ce3      	ldrb	r3, [r4, r3]
     86e:	2b05      	cmp	r3, #5
     870:	d013      	beq.n	89a <_i2c_master_interrupt_handler+0xda>
     872:	2325      	movs	r3, #37	; 0x25
     874:	5ce3      	ldrb	r3, [r4, r3]
     876:	2b00      	cmp	r3, #0
     878:	d00f      	beq.n	89a <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     87a:	2303      	movs	r3, #3
     87c:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     87e:	2300      	movs	r3, #0
     880:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     882:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     884:	3325      	adds	r3, #37	; 0x25
     886:	5ce3      	ldrb	r3, [r4, r3]
     888:	2b41      	cmp	r3, #65	; 0x41
     88a:	d003      	beq.n	894 <_i2c_master_interrupt_handler+0xd4>
     88c:	7aa3      	ldrb	r3, [r4, #10]
     88e:	2b00      	cmp	r3, #0
     890:	d000      	beq.n	894 <_i2c_master_interrupt_handler+0xd4>
     892:	e075      	b.n	980 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     894:	0773      	lsls	r3, r6, #29
     896:	d500      	bpl.n	89a <_i2c_master_interrupt_handler+0xda>
     898:	e07b      	b.n	992 <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
     89a:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     89c:	8b6b      	ldrh	r3, [r5, #26]
     89e:	075b      	lsls	r3, r3, #29
     8a0:	d5d0      	bpl.n	844 <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     8a2:	2218      	movs	r2, #24
     8a4:	2325      	movs	r3, #37	; 0x25
     8a6:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
     8a8:	2300      	movs	r3, #0
     8aa:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
     8ac:	7aa3      	ldrb	r3, [r4, #10]
     8ae:	2b00      	cmp	r3, #0
     8b0:	d0c8      	beq.n	844 <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
     8b2:	0020      	movs	r0, r4
     8b4:	4b3a      	ldr	r3, [pc, #232]	; (9a0 <_i2c_master_interrupt_handler+0x1e0>)
     8b6:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     8b8:	686a      	ldr	r2, [r5, #4]
     8ba:	23c0      	movs	r3, #192	; 0xc0
     8bc:	029b      	lsls	r3, r3, #10
     8be:	4313      	orrs	r3, r2
     8c0:	606b      	str	r3, [r5, #4]
     8c2:	e7bf      	b.n	844 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     8c4:	331f      	adds	r3, #31
     8c6:	5ce3      	ldrb	r3, [r4, r3]
     8c8:	2b00      	cmp	r3, #0
     8ca:	d003      	beq.n	8d4 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
     8cc:	0020      	movs	r0, r4
     8ce:	4b35      	ldr	r3, [pc, #212]	; (9a4 <_i2c_master_interrupt_handler+0x1e4>)
     8d0:	4798      	blx	r3
     8d2:	e7be      	b.n	852 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
     8d4:	0020      	movs	r0, r4
     8d6:	4b34      	ldr	r3, [pc, #208]	; (9a8 <_i2c_master_interrupt_handler+0x1e8>)
     8d8:	4798      	blx	r3
     8da:	e7ba      	b.n	852 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     8dc:	331f      	adds	r3, #31
     8de:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     8e0:	2b00      	cmp	r3, #0
     8e2:	d000      	beq.n	8e6 <_i2c_master_interrupt_handler+0x126>
     8e4:	e78c      	b.n	800 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
     8e6:	3303      	adds	r3, #3
     8e8:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     8ea:	2300      	movs	r3, #0
     8ec:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     8ee:	3325      	adds	r3, #37	; 0x25
     8f0:	2200      	movs	r2, #0
     8f2:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
     8f4:	7aa3      	ldrb	r3, [r4, #10]
     8f6:	2b00      	cmp	r3, #0
     8f8:	d107      	bne.n	90a <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     8fa:	2301      	movs	r3, #1
     8fc:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     8fe:	07f3      	lsls	r3, r6, #31
     900:	d5a7      	bpl.n	852 <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     902:	68e3      	ldr	r3, [r4, #12]
     904:	0020      	movs	r0, r4
     906:	4798      	blx	r3
     908:	e7a3      	b.n	852 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
     90a:	0020      	movs	r0, r4
     90c:	4b24      	ldr	r3, [pc, #144]	; (9a0 <_i2c_master_interrupt_handler+0x1e0>)
     90e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     910:	686a      	ldr	r2, [r5, #4]
     912:	23c0      	movs	r3, #192	; 0xc0
     914:	029b      	lsls	r3, r3, #10
     916:	4313      	orrs	r3, r2
     918:	606b      	str	r3, [r5, #4]
     91a:	e7f0      	b.n	8fe <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     91c:	2324      	movs	r3, #36	; 0x24
     91e:	5ce3      	ldrb	r3, [r4, r3]
     920:	2b00      	cmp	r3, #0
     922:	d103      	bne.n	92c <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
     924:	0020      	movs	r0, r4
     926:	4b20      	ldr	r3, [pc, #128]	; (9a8 <_i2c_master_interrupt_handler+0x1e8>)
     928:	4798      	blx	r3
     92a:	e792      	b.n	852 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
     92c:	0020      	movs	r0, r4
     92e:	4b1d      	ldr	r3, [pc, #116]	; (9a4 <_i2c_master_interrupt_handler+0x1e4>)
     930:	4798      	blx	r3
     932:	e78e      	b.n	852 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     934:	331f      	adds	r3, #31
     936:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     938:	2b01      	cmp	r3, #1
     93a:	d196      	bne.n	86a <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     93c:	7e2b      	ldrb	r3, [r5, #24]
     93e:	079b      	lsls	r3, r3, #30
     940:	d501      	bpl.n	946 <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     942:	2302      	movs	r3, #2
     944:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
     946:	2303      	movs	r3, #3
     948:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     94a:	2300      	movs	r3, #0
     94c:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     94e:	3325      	adds	r3, #37	; 0x25
     950:	2200      	movs	r2, #0
     952:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     954:	07b3      	lsls	r3, r6, #30
     956:	d503      	bpl.n	960 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     958:	2324      	movs	r3, #36	; 0x24
     95a:	5ce3      	ldrb	r3, [r4, r3]
     95c:	2b01      	cmp	r3, #1
     95e:	d00b      	beq.n	978 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     960:	07f3      	lsls	r3, r6, #31
     962:	d400      	bmi.n	966 <_i2c_master_interrupt_handler+0x1a6>
     964:	e781      	b.n	86a <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     966:	2324      	movs	r3, #36	; 0x24
     968:	5ce3      	ldrb	r3, [r4, r3]
     96a:	2b00      	cmp	r3, #0
     96c:	d000      	beq.n	970 <_i2c_master_interrupt_handler+0x1b0>
     96e:	e77c      	b.n	86a <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     970:	68e3      	ldr	r3, [r4, #12]
     972:	0020      	movs	r0, r4
     974:	4798      	blx	r3
     976:	e778      	b.n	86a <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     978:	6923      	ldr	r3, [r4, #16]
     97a:	0020      	movs	r0, r4
     97c:	4798      	blx	r3
     97e:	e774      	b.n	86a <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
     980:	0020      	movs	r0, r4
     982:	4b07      	ldr	r3, [pc, #28]	; (9a0 <_i2c_master_interrupt_handler+0x1e0>)
     984:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     986:	686a      	ldr	r2, [r5, #4]
     988:	23e0      	movs	r3, #224	; 0xe0
     98a:	02db      	lsls	r3, r3, #11
     98c:	4313      	orrs	r3, r2
     98e:	606b      	str	r3, [r5, #4]
     990:	e780      	b.n	894 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     992:	6963      	ldr	r3, [r4, #20]
     994:	0020      	movs	r0, r4
     996:	4798      	blx	r3
}
     998:	e77f      	b.n	89a <_i2c_master_interrupt_handler+0xda>
     99a:	46c0      	nop			; (mov r8, r8)
     99c:	20000068 	.word	0x20000068
     9a0:	00000561 	.word	0x00000561
     9a4:	0000056d 	.word	0x0000056d
     9a8:	000005f5 	.word	0x000005f5

000009ac <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     9ac:	b510      	push	{r4, lr}
     9ae:	b082      	sub	sp, #8
     9b0:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     9b2:	4b0e      	ldr	r3, [pc, #56]	; (9ec <sercom_set_gclk_generator+0x40>)
     9b4:	781b      	ldrb	r3, [r3, #0]
     9b6:	2b00      	cmp	r3, #0
     9b8:	d007      	beq.n	9ca <sercom_set_gclk_generator+0x1e>
     9ba:	2900      	cmp	r1, #0
     9bc:	d105      	bne.n	9ca <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     9be:	4b0b      	ldr	r3, [pc, #44]	; (9ec <sercom_set_gclk_generator+0x40>)
     9c0:	785b      	ldrb	r3, [r3, #1]
     9c2:	4283      	cmp	r3, r0
     9c4:	d010      	beq.n	9e8 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     9c6:	201d      	movs	r0, #29
     9c8:	e00c      	b.n	9e4 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     9ca:	a901      	add	r1, sp, #4
     9cc:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     9ce:	2012      	movs	r0, #18
     9d0:	4b07      	ldr	r3, [pc, #28]	; (9f0 <sercom_set_gclk_generator+0x44>)
     9d2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     9d4:	2012      	movs	r0, #18
     9d6:	4b07      	ldr	r3, [pc, #28]	; (9f4 <sercom_set_gclk_generator+0x48>)
     9d8:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     9da:	4b04      	ldr	r3, [pc, #16]	; (9ec <sercom_set_gclk_generator+0x40>)
     9dc:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     9de:	2201      	movs	r2, #1
     9e0:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     9e2:	2000      	movs	r0, #0
}
     9e4:	b002      	add	sp, #8
     9e6:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     9e8:	2000      	movs	r0, #0
     9ea:	e7fb      	b.n	9e4 <sercom_set_gclk_generator+0x38>
     9ec:	20000038 	.word	0x20000038
     9f0:	00000f29 	.word	0x00000f29
     9f4:	00000eb9 	.word	0x00000eb9

000009f8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     9f8:	4b40      	ldr	r3, [pc, #256]	; (afc <_sercom_get_default_pad+0x104>)
     9fa:	4298      	cmp	r0, r3
     9fc:	d031      	beq.n	a62 <_sercom_get_default_pad+0x6a>
     9fe:	d90a      	bls.n	a16 <_sercom_get_default_pad+0x1e>
     a00:	4b3f      	ldr	r3, [pc, #252]	; (b00 <_sercom_get_default_pad+0x108>)
     a02:	4298      	cmp	r0, r3
     a04:	d04d      	beq.n	aa2 <_sercom_get_default_pad+0xaa>
     a06:	4b3f      	ldr	r3, [pc, #252]	; (b04 <_sercom_get_default_pad+0x10c>)
     a08:	4298      	cmp	r0, r3
     a0a:	d05a      	beq.n	ac2 <_sercom_get_default_pad+0xca>
     a0c:	4b3e      	ldr	r3, [pc, #248]	; (b08 <_sercom_get_default_pad+0x110>)
     a0e:	4298      	cmp	r0, r3
     a10:	d037      	beq.n	a82 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     a12:	2000      	movs	r0, #0
}
     a14:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     a16:	4b3d      	ldr	r3, [pc, #244]	; (b0c <_sercom_get_default_pad+0x114>)
     a18:	4298      	cmp	r0, r3
     a1a:	d00c      	beq.n	a36 <_sercom_get_default_pad+0x3e>
     a1c:	4b3c      	ldr	r3, [pc, #240]	; (b10 <_sercom_get_default_pad+0x118>)
     a1e:	4298      	cmp	r0, r3
     a20:	d1f7      	bne.n	a12 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a22:	2901      	cmp	r1, #1
     a24:	d017      	beq.n	a56 <_sercom_get_default_pad+0x5e>
     a26:	2900      	cmp	r1, #0
     a28:	d05d      	beq.n	ae6 <_sercom_get_default_pad+0xee>
     a2a:	2902      	cmp	r1, #2
     a2c:	d015      	beq.n	a5a <_sercom_get_default_pad+0x62>
     a2e:	2903      	cmp	r1, #3
     a30:	d015      	beq.n	a5e <_sercom_get_default_pad+0x66>
	return 0;
     a32:	2000      	movs	r0, #0
     a34:	e7ee      	b.n	a14 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a36:	2901      	cmp	r1, #1
     a38:	d007      	beq.n	a4a <_sercom_get_default_pad+0x52>
     a3a:	2900      	cmp	r1, #0
     a3c:	d051      	beq.n	ae2 <_sercom_get_default_pad+0xea>
     a3e:	2902      	cmp	r1, #2
     a40:	d005      	beq.n	a4e <_sercom_get_default_pad+0x56>
     a42:	2903      	cmp	r1, #3
     a44:	d005      	beq.n	a52 <_sercom_get_default_pad+0x5a>
	return 0;
     a46:	2000      	movs	r0, #0
     a48:	e7e4      	b.n	a14 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a4a:	4832      	ldr	r0, [pc, #200]	; (b14 <_sercom_get_default_pad+0x11c>)
     a4c:	e7e2      	b.n	a14 <_sercom_get_default_pad+0x1c>
     a4e:	4832      	ldr	r0, [pc, #200]	; (b18 <_sercom_get_default_pad+0x120>)
     a50:	e7e0      	b.n	a14 <_sercom_get_default_pad+0x1c>
     a52:	4832      	ldr	r0, [pc, #200]	; (b1c <_sercom_get_default_pad+0x124>)
     a54:	e7de      	b.n	a14 <_sercom_get_default_pad+0x1c>
     a56:	4832      	ldr	r0, [pc, #200]	; (b20 <_sercom_get_default_pad+0x128>)
     a58:	e7dc      	b.n	a14 <_sercom_get_default_pad+0x1c>
     a5a:	4832      	ldr	r0, [pc, #200]	; (b24 <_sercom_get_default_pad+0x12c>)
     a5c:	e7da      	b.n	a14 <_sercom_get_default_pad+0x1c>
     a5e:	4832      	ldr	r0, [pc, #200]	; (b28 <_sercom_get_default_pad+0x130>)
     a60:	e7d8      	b.n	a14 <_sercom_get_default_pad+0x1c>
     a62:	2901      	cmp	r1, #1
     a64:	d007      	beq.n	a76 <_sercom_get_default_pad+0x7e>
     a66:	2900      	cmp	r1, #0
     a68:	d03f      	beq.n	aea <_sercom_get_default_pad+0xf2>
     a6a:	2902      	cmp	r1, #2
     a6c:	d005      	beq.n	a7a <_sercom_get_default_pad+0x82>
     a6e:	2903      	cmp	r1, #3
     a70:	d005      	beq.n	a7e <_sercom_get_default_pad+0x86>
	return 0;
     a72:	2000      	movs	r0, #0
     a74:	e7ce      	b.n	a14 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a76:	482d      	ldr	r0, [pc, #180]	; (b2c <_sercom_get_default_pad+0x134>)
     a78:	e7cc      	b.n	a14 <_sercom_get_default_pad+0x1c>
     a7a:	482d      	ldr	r0, [pc, #180]	; (b30 <_sercom_get_default_pad+0x138>)
     a7c:	e7ca      	b.n	a14 <_sercom_get_default_pad+0x1c>
     a7e:	482d      	ldr	r0, [pc, #180]	; (b34 <_sercom_get_default_pad+0x13c>)
     a80:	e7c8      	b.n	a14 <_sercom_get_default_pad+0x1c>
     a82:	2901      	cmp	r1, #1
     a84:	d007      	beq.n	a96 <_sercom_get_default_pad+0x9e>
     a86:	2900      	cmp	r1, #0
     a88:	d031      	beq.n	aee <_sercom_get_default_pad+0xf6>
     a8a:	2902      	cmp	r1, #2
     a8c:	d005      	beq.n	a9a <_sercom_get_default_pad+0xa2>
     a8e:	2903      	cmp	r1, #3
     a90:	d005      	beq.n	a9e <_sercom_get_default_pad+0xa6>
	return 0;
     a92:	2000      	movs	r0, #0
     a94:	e7be      	b.n	a14 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a96:	4828      	ldr	r0, [pc, #160]	; (b38 <_sercom_get_default_pad+0x140>)
     a98:	e7bc      	b.n	a14 <_sercom_get_default_pad+0x1c>
     a9a:	4828      	ldr	r0, [pc, #160]	; (b3c <_sercom_get_default_pad+0x144>)
     a9c:	e7ba      	b.n	a14 <_sercom_get_default_pad+0x1c>
     a9e:	4828      	ldr	r0, [pc, #160]	; (b40 <_sercom_get_default_pad+0x148>)
     aa0:	e7b8      	b.n	a14 <_sercom_get_default_pad+0x1c>
     aa2:	2901      	cmp	r1, #1
     aa4:	d007      	beq.n	ab6 <_sercom_get_default_pad+0xbe>
     aa6:	2900      	cmp	r1, #0
     aa8:	d023      	beq.n	af2 <_sercom_get_default_pad+0xfa>
     aaa:	2902      	cmp	r1, #2
     aac:	d005      	beq.n	aba <_sercom_get_default_pad+0xc2>
     aae:	2903      	cmp	r1, #3
     ab0:	d005      	beq.n	abe <_sercom_get_default_pad+0xc6>
	return 0;
     ab2:	2000      	movs	r0, #0
     ab4:	e7ae      	b.n	a14 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ab6:	4823      	ldr	r0, [pc, #140]	; (b44 <_sercom_get_default_pad+0x14c>)
     ab8:	e7ac      	b.n	a14 <_sercom_get_default_pad+0x1c>
     aba:	4823      	ldr	r0, [pc, #140]	; (b48 <_sercom_get_default_pad+0x150>)
     abc:	e7aa      	b.n	a14 <_sercom_get_default_pad+0x1c>
     abe:	4823      	ldr	r0, [pc, #140]	; (b4c <_sercom_get_default_pad+0x154>)
     ac0:	e7a8      	b.n	a14 <_sercom_get_default_pad+0x1c>
     ac2:	2901      	cmp	r1, #1
     ac4:	d007      	beq.n	ad6 <_sercom_get_default_pad+0xde>
     ac6:	2900      	cmp	r1, #0
     ac8:	d015      	beq.n	af6 <_sercom_get_default_pad+0xfe>
     aca:	2902      	cmp	r1, #2
     acc:	d005      	beq.n	ada <_sercom_get_default_pad+0xe2>
     ace:	2903      	cmp	r1, #3
     ad0:	d005      	beq.n	ade <_sercom_get_default_pad+0xe6>
	return 0;
     ad2:	2000      	movs	r0, #0
     ad4:	e79e      	b.n	a14 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ad6:	481e      	ldr	r0, [pc, #120]	; (b50 <_sercom_get_default_pad+0x158>)
     ad8:	e79c      	b.n	a14 <_sercom_get_default_pad+0x1c>
     ada:	481e      	ldr	r0, [pc, #120]	; (b54 <_sercom_get_default_pad+0x15c>)
     adc:	e79a      	b.n	a14 <_sercom_get_default_pad+0x1c>
     ade:	481e      	ldr	r0, [pc, #120]	; (b58 <_sercom_get_default_pad+0x160>)
     ae0:	e798      	b.n	a14 <_sercom_get_default_pad+0x1c>
     ae2:	481e      	ldr	r0, [pc, #120]	; (b5c <_sercom_get_default_pad+0x164>)
     ae4:	e796      	b.n	a14 <_sercom_get_default_pad+0x1c>
     ae6:	481e      	ldr	r0, [pc, #120]	; (b60 <_sercom_get_default_pad+0x168>)
     ae8:	e794      	b.n	a14 <_sercom_get_default_pad+0x1c>
     aea:	481e      	ldr	r0, [pc, #120]	; (b64 <_sercom_get_default_pad+0x16c>)
     aec:	e792      	b.n	a14 <_sercom_get_default_pad+0x1c>
     aee:	481e      	ldr	r0, [pc, #120]	; (b68 <_sercom_get_default_pad+0x170>)
     af0:	e790      	b.n	a14 <_sercom_get_default_pad+0x1c>
     af2:	481e      	ldr	r0, [pc, #120]	; (b6c <_sercom_get_default_pad+0x174>)
     af4:	e78e      	b.n	a14 <_sercom_get_default_pad+0x1c>
     af6:	481e      	ldr	r0, [pc, #120]	; (b70 <_sercom_get_default_pad+0x178>)
     af8:	e78c      	b.n	a14 <_sercom_get_default_pad+0x1c>
     afa:	46c0      	nop			; (mov r8, r8)
     afc:	42000c00 	.word	0x42000c00
     b00:	42001400 	.word	0x42001400
     b04:	42001800 	.word	0x42001800
     b08:	42001000 	.word	0x42001000
     b0c:	42000400 	.word	0x42000400
     b10:	42000800 	.word	0x42000800
     b14:	00050003 	.word	0x00050003
     b18:	00060003 	.word	0x00060003
     b1c:	00070003 	.word	0x00070003
     b20:	00110002 	.word	0x00110002
     b24:	00120002 	.word	0x00120002
     b28:	00130002 	.word	0x00130002
     b2c:	000d0002 	.word	0x000d0002
     b30:	000e0002 	.word	0x000e0002
     b34:	000f0002 	.word	0x000f0002
     b38:	00170002 	.word	0x00170002
     b3c:	00180002 	.word	0x00180002
     b40:	00190002 	.word	0x00190002
     b44:	00290003 	.word	0x00290003
     b48:	002a0003 	.word	0x002a0003
     b4c:	002b0003 	.word	0x002b0003
     b50:	00230003 	.word	0x00230003
     b54:	00200003 	.word	0x00200003
     b58:	00210003 	.word	0x00210003
     b5c:	00040003 	.word	0x00040003
     b60:	00100002 	.word	0x00100002
     b64:	000c0002 	.word	0x000c0002
     b68:	00160002 	.word	0x00160002
     b6c:	00280003 	.word	0x00280003
     b70:	00220003 	.word	0x00220003

00000b74 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     b74:	b530      	push	{r4, r5, lr}
     b76:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     b78:	4b0b      	ldr	r3, [pc, #44]	; (ba8 <_sercom_get_sercom_inst_index+0x34>)
     b7a:	466a      	mov	r2, sp
     b7c:	cb32      	ldmia	r3!, {r1, r4, r5}
     b7e:	c232      	stmia	r2!, {r1, r4, r5}
     b80:	cb32      	ldmia	r3!, {r1, r4, r5}
     b82:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     b84:	9b00      	ldr	r3, [sp, #0]
     b86:	4283      	cmp	r3, r0
     b88:	d00b      	beq.n	ba2 <_sercom_get_sercom_inst_index+0x2e>
     b8a:	2301      	movs	r3, #1
     b8c:	009a      	lsls	r2, r3, #2
     b8e:	4669      	mov	r1, sp
     b90:	5852      	ldr	r2, [r2, r1]
     b92:	4282      	cmp	r2, r0
     b94:	d006      	beq.n	ba4 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     b96:	3301      	adds	r3, #1
     b98:	2b06      	cmp	r3, #6
     b9a:	d1f7      	bne.n	b8c <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     b9c:	2000      	movs	r0, #0
}
     b9e:	b007      	add	sp, #28
     ba0:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     ba2:	2300      	movs	r3, #0
			return i;
     ba4:	b2d8      	uxtb	r0, r3
     ba6:	e7fa      	b.n	b9e <_sercom_get_sercom_inst_index+0x2a>
     ba8:	00002c9c 	.word	0x00002c9c

00000bac <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     bac:	4770      	bx	lr
	...

00000bb0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     bb2:	4b0a      	ldr	r3, [pc, #40]	; (bdc <_sercom_set_handler+0x2c>)
     bb4:	781b      	ldrb	r3, [r3, #0]
     bb6:	2b00      	cmp	r3, #0
     bb8:	d10c      	bne.n	bd4 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     bba:	4f09      	ldr	r7, [pc, #36]	; (be0 <_sercom_set_handler+0x30>)
     bbc:	4e09      	ldr	r6, [pc, #36]	; (be4 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     bbe:	4d0a      	ldr	r5, [pc, #40]	; (be8 <_sercom_set_handler+0x38>)
     bc0:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     bc2:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     bc4:	195a      	adds	r2, r3, r5
     bc6:	6014      	str	r4, [r2, #0]
     bc8:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     bca:	2b18      	cmp	r3, #24
     bcc:	d1f9      	bne.n	bc2 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     bce:	2201      	movs	r2, #1
     bd0:	4b02      	ldr	r3, [pc, #8]	; (bdc <_sercom_set_handler+0x2c>)
     bd2:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     bd4:	0080      	lsls	r0, r0, #2
     bd6:	4b02      	ldr	r3, [pc, #8]	; (be0 <_sercom_set_handler+0x30>)
     bd8:	50c1      	str	r1, [r0, r3]
}
     bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bdc:	2000003a 	.word	0x2000003a
     be0:	2000003c 	.word	0x2000003c
     be4:	00000bad 	.word	0x00000bad
     be8:	20000068 	.word	0x20000068

00000bec <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     bec:	b500      	push	{lr}
     bee:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     bf0:	2309      	movs	r3, #9
     bf2:	466a      	mov	r2, sp
     bf4:	7013      	strb	r3, [r2, #0]
     bf6:	3301      	adds	r3, #1
     bf8:	7053      	strb	r3, [r2, #1]
     bfa:	3301      	adds	r3, #1
     bfc:	7093      	strb	r3, [r2, #2]
     bfe:	3301      	adds	r3, #1
     c00:	70d3      	strb	r3, [r2, #3]
     c02:	3301      	adds	r3, #1
     c04:	7113      	strb	r3, [r2, #4]
     c06:	3301      	adds	r3, #1
     c08:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     c0a:	4b03      	ldr	r3, [pc, #12]	; (c18 <_sercom_get_interrupt_vector+0x2c>)
     c0c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     c0e:	466b      	mov	r3, sp
     c10:	5618      	ldrsb	r0, [r3, r0]
}
     c12:	b003      	add	sp, #12
     c14:	bd00      	pop	{pc}
     c16:	46c0      	nop			; (mov r8, r8)
     c18:	00000b75 	.word	0x00000b75

00000c1c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     c1c:	b510      	push	{r4, lr}
     c1e:	4b02      	ldr	r3, [pc, #8]	; (c28 <SERCOM0_Handler+0xc>)
     c20:	681b      	ldr	r3, [r3, #0]
     c22:	2000      	movs	r0, #0
     c24:	4798      	blx	r3
     c26:	bd10      	pop	{r4, pc}
     c28:	2000003c 	.word	0x2000003c

00000c2c <SERCOM1_Handler>:
     c2c:	b510      	push	{r4, lr}
     c2e:	4b02      	ldr	r3, [pc, #8]	; (c38 <SERCOM1_Handler+0xc>)
     c30:	685b      	ldr	r3, [r3, #4]
     c32:	2001      	movs	r0, #1
     c34:	4798      	blx	r3
     c36:	bd10      	pop	{r4, pc}
     c38:	2000003c 	.word	0x2000003c

00000c3c <SERCOM2_Handler>:
     c3c:	b510      	push	{r4, lr}
     c3e:	4b02      	ldr	r3, [pc, #8]	; (c48 <SERCOM2_Handler+0xc>)
     c40:	689b      	ldr	r3, [r3, #8]
     c42:	2002      	movs	r0, #2
     c44:	4798      	blx	r3
     c46:	bd10      	pop	{r4, pc}
     c48:	2000003c 	.word	0x2000003c

00000c4c <SERCOM3_Handler>:
     c4c:	b510      	push	{r4, lr}
     c4e:	4b02      	ldr	r3, [pc, #8]	; (c58 <SERCOM3_Handler+0xc>)
     c50:	68db      	ldr	r3, [r3, #12]
     c52:	2003      	movs	r0, #3
     c54:	4798      	blx	r3
     c56:	bd10      	pop	{r4, pc}
     c58:	2000003c 	.word	0x2000003c

00000c5c <SERCOM4_Handler>:
     c5c:	b510      	push	{r4, lr}
     c5e:	4b02      	ldr	r3, [pc, #8]	; (c68 <SERCOM4_Handler+0xc>)
     c60:	691b      	ldr	r3, [r3, #16]
     c62:	2004      	movs	r0, #4
     c64:	4798      	blx	r3
     c66:	bd10      	pop	{r4, pc}
     c68:	2000003c 	.word	0x2000003c

00000c6c <SERCOM5_Handler>:
     c6c:	b510      	push	{r4, lr}
     c6e:	4b02      	ldr	r3, [pc, #8]	; (c78 <SERCOM5_Handler+0xc>)
     c70:	695b      	ldr	r3, [r3, #20]
     c72:	2005      	movs	r0, #5
     c74:	4798      	blx	r3
     c76:	bd10      	pop	{r4, pc}
     c78:	2000003c 	.word	0x2000003c

00000c7c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     c7c:	b510      	push	{r4, lr}
	switch (clock_source) {
     c7e:	2807      	cmp	r0, #7
     c80:	d803      	bhi.n	c8a <system_clock_source_get_hz+0xe>
     c82:	0080      	lsls	r0, r0, #2
     c84:	4b0f      	ldr	r3, [pc, #60]	; (cc4 <system_clock_source_get_hz+0x48>)
     c86:	581b      	ldr	r3, [r3, r0]
     c88:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
     c8a:	2000      	movs	r0, #0
     c8c:	e018      	b.n	cc0 <system_clock_source_get_hz+0x44>
		return _system_clock_inst.xosc.frequency;
     c8e:	4b0e      	ldr	r3, [pc, #56]	; (cc8 <system_clock_source_get_hz+0x4c>)
     c90:	6858      	ldr	r0, [r3, #4]
     c92:	e015      	b.n	cc0 <system_clock_source_get_hz+0x44>
		return 48000000UL / (OSCCTRL->OSC48MDIV.bit.DIV + 1);
     c94:	4b0d      	ldr	r3, [pc, #52]	; (ccc <system_clock_source_get_hz+0x50>)
     c96:	7d59      	ldrb	r1, [r3, #21]
     c98:	0709      	lsls	r1, r1, #28
     c9a:	0f09      	lsrs	r1, r1, #28
     c9c:	3101      	adds	r1, #1
     c9e:	480c      	ldr	r0, [pc, #48]	; (cd0 <system_clock_source_get_hz+0x54>)
     ca0:	4b0c      	ldr	r3, [pc, #48]	; (cd4 <system_clock_source_get_hz+0x58>)
     ca2:	4798      	blx	r3
     ca4:	e00c      	b.n	cc0 <system_clock_source_get_hz+0x44>
		return _system_clock_inst.xosc32k.frequency;
     ca6:	4b08      	ldr	r3, [pc, #32]	; (cc8 <system_clock_source_get_hz+0x4c>)
     ca8:	6898      	ldr	r0, [r3, #8]
     caa:	e009      	b.n	cc0 <system_clock_source_get_hz+0x44>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
     cac:	4b07      	ldr	r3, [pc, #28]	; (ccc <system_clock_source_get_hz+0x50>)
     cae:	7f1b      	ldrb	r3, [r3, #28]
			return 0;
     cb0:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
     cb2:	079b      	lsls	r3, r3, #30
     cb4:	d504      	bpl.n	cc0 <system_clock_source_get_hz+0x44>
		return _system_clock_inst.dpll.frequency;
     cb6:	4b04      	ldr	r3, [pc, #16]	; (cc8 <system_clock_source_get_hz+0x4c>)
     cb8:	6818      	ldr	r0, [r3, #0]
     cba:	e001      	b.n	cc0 <system_clock_source_get_hz+0x44>
		return 32768UL;
     cbc:	2080      	movs	r0, #128	; 0x80
     cbe:	0200      	lsls	r0, r0, #8
	}
}
     cc0:	bd10      	pop	{r4, pc}
     cc2:	46c0      	nop			; (mov r8, r8)
     cc4:	00002cb4 	.word	0x00002cb4
     cc8:	20000054 	.word	0x20000054
     ccc:	40001000 	.word	0x40001000
     cd0:	02dc6c00 	.word	0x02dc6c00
     cd4:	00001275 	.word	0x00001275

00000cd8 <system_clock_init>:
 * \note OSC48M is always enabled and if the user selects other clocks for GCLK generators,
 * the OSC48M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC48M.
 */
void system_clock_init(void)
{
     cd8:	b500      	push	{lr}
     cda:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BODVDDRDY | SUPC_INTFLAG_BODVDDDET;
     cdc:	2203      	movs	r2, #3
     cde:	4b10      	ldr	r3, [pc, #64]	; (d20 <system_clock_init+0x48>)
     ce0:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     ce2:	4a10      	ldr	r2, [pc, #64]	; (d24 <system_clock_init+0x4c>)
     ce4:	6853      	ldr	r3, [r2, #4]
     ce6:	211e      	movs	r1, #30
     ce8:	438b      	bics	r3, r1
     cea:	6053      	str	r3, [r2, #4]
	system_clock_source_osc32k_set_config(&osc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC48M */
	OSCCTRL->OSC48MCTRL.reg |= (CONF_CLOCK_OSC48M_ON_DEMAND << OSCCTRL_OSC48MCTRL_ONDEMAND_Pos)
     cec:	4a0e      	ldr	r2, [pc, #56]	; (d28 <system_clock_init+0x50>)
     cee:	7d13      	ldrb	r3, [r2, #20]
     cf0:	3162      	adds	r1, #98	; 0x62
     cf2:	430b      	orrs	r3, r1
     cf4:	7513      	strb	r3, [r2, #20]
		while(OSCCTRL->OSC48MSYNCBUSY.reg) ;
	}

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     cf6:	4b0d      	ldr	r3, [pc, #52]	; (d2c <system_clock_init+0x54>)
     cf8:	4798      	blx	r3
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
     cfa:	2301      	movs	r3, #1
     cfc:	4a0c      	ldr	r2, [pc, #48]	; (d30 <system_clock_init+0x58>)
     cfe:	7113      	strb	r3, [r2, #4]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     d00:	a901      	add	r1, sp, #4
     d02:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
     d04:	2300      	movs	r3, #0
     d06:	704b      	strb	r3, [r1, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
     d08:	2206      	movs	r2, #6
     d0a:	700a      	strb	r2, [r1, #0]
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
     d0c:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
     d0e:	724b      	strb	r3, [r1, #9]
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     d10:	2000      	movs	r0, #0
     d12:	4b08      	ldr	r3, [pc, #32]	; (d34 <system_clock_init+0x5c>)
     d14:	4798      	blx	r3
     d16:	2000      	movs	r0, #0
     d18:	4b07      	ldr	r3, [pc, #28]	; (d38 <system_clock_init+0x60>)
     d1a:	4798      	blx	r3
#endif

}
     d1c:	b005      	add	sp, #20
     d1e:	bd00      	pop	{pc}
     d20:	40001800 	.word	0x40001800
     d24:	41004000 	.word	0x41004000
     d28:	40001000 	.word	0x40001000
     d2c:	00000d3d 	.word	0x00000d3d
     d30:	40000800 	.word	0x40000800
     d34:	00000d61 	.word	0x00000d61
     d38:	00000e0d 	.word	0x00000e0d

00000d3c <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
     d3c:	4a06      	ldr	r2, [pc, #24]	; (d58 <system_gclk_init+0x1c>)
     d3e:	6953      	ldr	r3, [r2, #20]
     d40:	2180      	movs	r1, #128	; 0x80
     d42:	430b      	orrs	r3, r1
     d44:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
     d46:	2201      	movs	r2, #1
     d48:	4b04      	ldr	r3, [pc, #16]	; (d5c <system_gclk_init+0x20>)
     d4a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
     d4c:	0019      	movs	r1, r3
     d4e:	780b      	ldrb	r3, [r1, #0]
     d50:	4213      	tst	r3, r2
     d52:	d1fc      	bne.n	d4e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     d54:	4770      	bx	lr
     d56:	46c0      	nop			; (mov r8, r8)
     d58:	40000800 	.word	0x40000800
     d5c:	40001c00 	.word	0x40001c00

00000d60 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     d60:	b570      	push	{r4, r5, r6, lr}
     d62:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
     d64:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     d66:	784b      	ldrb	r3, [r1, #1]
     d68:	2b00      	cmp	r3, #0
     d6a:	d002      	beq.n	d72 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     d6c:	2380      	movs	r3, #128	; 0x80
     d6e:	00db      	lsls	r3, r3, #3
     d70:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     d72:	7a4b      	ldrb	r3, [r1, #9]
     d74:	2b00      	cmp	r3, #0
     d76:	d002      	beq.n	d7e <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     d78:	2380      	movs	r3, #128	; 0x80
     d7a:	011b      	lsls	r3, r3, #4
     d7c:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     d7e:	6848      	ldr	r0, [r1, #4]
     d80:	2801      	cmp	r0, #1
     d82:	d90f      	bls.n	da4 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     d84:	1e43      	subs	r3, r0, #1
     d86:	4218      	tst	r0, r3
     d88:	d131      	bne.n	dee <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     d8a:	2802      	cmp	r0, #2
     d8c:	d92d      	bls.n	dea <system_gclk_gen_set_config+0x8a>
     d8e:	2302      	movs	r3, #2
     d90:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     d92:	3201      	adds	r2, #1
						mask <<= 1) {
     d94:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     d96:	4298      	cmp	r0, r3
     d98:	d8fb      	bhi.n	d92 <system_gclk_gen_set_config+0x32>
     d9a:	2380      	movs	r3, #128	; 0x80
     d9c:	015b      	lsls	r3, r3, #5
     d9e:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
     da0:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     da2:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     da4:	7a0b      	ldrb	r3, [r1, #8]
     da6:	2b00      	cmp	r3, #0
     da8:	d002      	beq.n	db0 <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     daa:	2380      	movs	r3, #128	; 0x80
     dac:	019b      	lsls	r3, r3, #6
     dae:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     db0:	2604      	movs	r6, #4
     db2:	40a6      	lsls	r6, r4
     db4:	4911      	ldr	r1, [pc, #68]	; (dfc <system_gclk_gen_set_config+0x9c>)
     db6:	4a12      	ldr	r2, [pc, #72]	; (e00 <system_gclk_gen_set_config+0xa0>)
     db8:	684b      	ldr	r3, [r1, #4]
     dba:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
     dbc:	421e      	tst	r6, r3
     dbe:	d1fb      	bne.n	db8 <system_gclk_gen_set_config+0x58>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     dc0:	4b10      	ldr	r3, [pc, #64]	; (e04 <system_gclk_gen_set_config+0xa4>)
     dc2:	4798      	blx	r3
     dc4:	00a4      	lsls	r4, r4, #2
     dc6:	4b0d      	ldr	r3, [pc, #52]	; (dfc <system_gclk_gen_set_config+0x9c>)
     dc8:	469c      	mov	ip, r3
     dca:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
     dcc:	6a22      	ldr	r2, [r4, #32]
     dce:	2380      	movs	r3, #128	; 0x80
     dd0:	005b      	lsls	r3, r3, #1
     dd2:	401a      	ands	r2, r3
     dd4:	432a      	orrs	r2, r5
     dd6:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     dd8:	4661      	mov	r1, ip
     dda:	4a09      	ldr	r2, [pc, #36]	; (e00 <system_gclk_gen_set_config+0xa0>)
     ddc:	684b      	ldr	r3, [r1, #4]
     dde:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
     de0:	421e      	tst	r6, r3
     de2:	d1fb      	bne.n	ddc <system_gclk_gen_set_config+0x7c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     de4:	4b08      	ldr	r3, [pc, #32]	; (e08 <system_gclk_gen_set_config+0xa8>)
     de6:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
     de8:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
     dea:	2200      	movs	r2, #0
     dec:	e7d5      	b.n	d9a <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
     dee:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     df0:	2380      	movs	r3, #128	; 0x80
     df2:	009b      	lsls	r3, r3, #2
     df4:	4318      	orrs	r0, r3
     df6:	4305      	orrs	r5, r0
     df8:	e7d4      	b.n	da4 <system_gclk_gen_set_config+0x44>
     dfa:	46c0      	nop			; (mov r8, r8)
     dfc:	40001c00 	.word	0x40001c00
     e00:	000007fc 	.word	0x000007fc
     e04:	0000011d 	.word	0x0000011d
     e08:	0000015d 	.word	0x0000015d

00000e0c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     e0c:	b510      	push	{r4, lr}
     e0e:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     e10:	2204      	movs	r2, #4
     e12:	4082      	lsls	r2, r0
     e14:	4809      	ldr	r0, [pc, #36]	; (e3c <system_gclk_gen_enable+0x30>)
     e16:	490a      	ldr	r1, [pc, #40]	; (e40 <system_gclk_gen_enable+0x34>)
     e18:	6843      	ldr	r3, [r0, #4]
     e1a:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
     e1c:	421a      	tst	r2, r3
     e1e:	d1fb      	bne.n	e18 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
     e20:	4b08      	ldr	r3, [pc, #32]	; (e44 <system_gclk_gen_enable+0x38>)
     e22:	4798      	blx	r3
     e24:	00a4      	lsls	r4, r4, #2
     e26:	4b05      	ldr	r3, [pc, #20]	; (e3c <system_gclk_gen_enable+0x30>)
     e28:	469c      	mov	ip, r3
     e2a:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
     e2c:	6a22      	ldr	r2, [r4, #32]
     e2e:	2380      	movs	r3, #128	; 0x80
     e30:	005b      	lsls	r3, r3, #1
     e32:	4313      	orrs	r3, r2
     e34:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
     e36:	4b04      	ldr	r3, [pc, #16]	; (e48 <system_gclk_gen_enable+0x3c>)
     e38:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     e3a:	bd10      	pop	{r4, pc}
     e3c:	40001c00 	.word	0x40001c00
     e40:	000007fc 	.word	0x000007fc
     e44:	0000011d 	.word	0x0000011d
     e48:	0000015d 	.word	0x0000015d

00000e4c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e4e:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
     e50:	2204      	movs	r2, #4
     e52:	4082      	lsls	r2, r0
     e54:	4812      	ldr	r0, [pc, #72]	; (ea0 <system_gclk_gen_get_hz+0x54>)
     e56:	4913      	ldr	r1, [pc, #76]	; (ea4 <system_gclk_gen_get_hz+0x58>)
     e58:	6843      	ldr	r3, [r0, #4]
     e5a:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
     e5c:	421a      	tst	r2, r3
     e5e:	d1fb      	bne.n	e58 <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
     e60:	4b11      	ldr	r3, [pc, #68]	; (ea8 <system_gclk_gen_get_hz+0x5c>)
     e62:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
     e64:	4f0e      	ldr	r7, [pc, #56]	; (ea0 <system_gclk_gen_get_hz+0x54>)
     e66:	3408      	adds	r4, #8
     e68:	00a4      	lsls	r4, r4, #2
     e6a:	59e0      	ldr	r0, [r4, r7]
     e6c:	0740      	lsls	r0, r0, #29
     e6e:	0f40      	lsrs	r0, r0, #29
	uint32_t gen_input_hz = system_clock_source_get_hz(
     e70:	4b0e      	ldr	r3, [pc, #56]	; (eac <system_gclk_gen_get_hz+0x60>)
     e72:	4798      	blx	r3
     e74:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
     e76:	59e5      	ldr	r5, [r4, r7]
     e78:	04ed      	lsls	r5, r5, #19
     e7a:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
     e7c:	59e4      	ldr	r4, [r4, r7]
     e7e:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
     e80:	4b0b      	ldr	r3, [pc, #44]	; (eb0 <system_gclk_gen_get_hz+0x64>)
     e82:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
     e84:	2d00      	cmp	r5, #0
     e86:	d107      	bne.n	e98 <system_gclk_gen_get_hz+0x4c>
     e88:	2c01      	cmp	r4, #1
     e8a:	d907      	bls.n	e9c <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
     e8c:	0021      	movs	r1, r4
     e8e:	0030      	movs	r0, r6
     e90:	4b08      	ldr	r3, [pc, #32]	; (eb4 <system_gclk_gen_get_hz+0x68>)
     e92:	4798      	blx	r3
     e94:	0006      	movs	r6, r0
     e96:	e001      	b.n	e9c <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
     e98:	3401      	adds	r4, #1
     e9a:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
     e9c:	0030      	movs	r0, r6
     e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     ea0:	40001c00 	.word	0x40001c00
     ea4:	000007fc 	.word	0x000007fc
     ea8:	0000011d 	.word	0x0000011d
     eac:	00000c7d 	.word	0x00000c7d
     eb0:	0000015d 	.word	0x0000015d
     eb4:	00001275 	.word	0x00001275

00000eb8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
     eb8:	b510      	push	{r4, lr}
     eba:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     ebc:	4b09      	ldr	r3, [pc, #36]	; (ee4 <system_gclk_chan_enable+0x2c>)
     ebe:	4798      	blx	r3
     ec0:	00a0      	lsls	r0, r4, #2
     ec2:	4b09      	ldr	r3, [pc, #36]	; (ee8 <system_gclk_chan_enable+0x30>)
     ec4:	469c      	mov	ip, r3
     ec6:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
     ec8:	2280      	movs	r2, #128	; 0x80
     eca:	5883      	ldr	r3, [r0, r2]
     ecc:	2140      	movs	r1, #64	; 0x40
     ece:	430b      	orrs	r3, r1
     ed0:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
     ed2:	3140      	adds	r1, #64	; 0x40
     ed4:	3a40      	subs	r2, #64	; 0x40
     ed6:	5843      	ldr	r3, [r0, r1]
     ed8:	421a      	tst	r2, r3
     eda:	d0fc      	beq.n	ed6 <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
     edc:	4b03      	ldr	r3, [pc, #12]	; (eec <system_gclk_chan_enable+0x34>)
     ede:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
     ee0:	bd10      	pop	{r4, pc}
     ee2:	46c0      	nop			; (mov r8, r8)
     ee4:	0000011d 	.word	0x0000011d
     ee8:	40001c00 	.word	0x40001c00
     eec:	0000015d 	.word	0x0000015d

00000ef0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
     ef0:	b510      	push	{r4, lr}
     ef2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     ef4:	4b09      	ldr	r3, [pc, #36]	; (f1c <system_gclk_chan_disable+0x2c>)
     ef6:	4798      	blx	r3
     ef8:	00a0      	lsls	r0, r4, #2
     efa:	4b09      	ldr	r3, [pc, #36]	; (f20 <system_gclk_chan_disable+0x30>)
     efc:	469c      	mov	ip, r3
     efe:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
     f00:	2280      	movs	r2, #128	; 0x80
     f02:	5883      	ldr	r3, [r0, r2]
     f04:	2140      	movs	r1, #64	; 0x40
     f06:	438b      	bics	r3, r1
     f08:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
     f0a:	3140      	adds	r1, #64	; 0x40
     f0c:	3a40      	subs	r2, #64	; 0x40
     f0e:	5843      	ldr	r3, [r0, r1]
     f10:	421a      	tst	r2, r3
     f12:	d1fc      	bne.n	f0e <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
     f14:	4b03      	ldr	r3, [pc, #12]	; (f24 <system_gclk_chan_disable+0x34>)
     f16:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
     f18:	bd10      	pop	{r4, pc}
     f1a:	46c0      	nop			; (mov r8, r8)
     f1c:	0000011d 	.word	0x0000011d
     f20:	40001c00 	.word	0x40001c00
     f24:	0000015d 	.word	0x0000015d

00000f28 <system_gclk_chan_set_config>:
{
     f28:	b570      	push	{r4, r5, r6, lr}
     f2a:	0004      	movs	r4, r0
     f2c:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
     f2e:	4b05      	ldr	r3, [pc, #20]	; (f44 <system_gclk_chan_set_config+0x1c>)
     f30:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
     f32:	782a      	ldrb	r2, [r5, #0]
     f34:	230f      	movs	r3, #15
     f36:	4013      	ands	r3, r2
     f38:	3420      	adds	r4, #32
     f3a:	00a4      	lsls	r4, r4, #2
     f3c:	4a02      	ldr	r2, [pc, #8]	; (f48 <system_gclk_chan_set_config+0x20>)
     f3e:	50a3      	str	r3, [r4, r2]
}
     f40:	bd70      	pop	{r4, r5, r6, pc}
     f42:	46c0      	nop			; (mov r8, r8)
     f44:	00000ef1 	.word	0x00000ef1
     f48:	40001c00 	.word	0x40001c00

00000f4c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
     f4c:	b510      	push	{r4, lr}
     f4e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     f50:	4b06      	ldr	r3, [pc, #24]	; (f6c <system_gclk_chan_get_hz+0x20>)
     f52:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
     f54:	3420      	adds	r4, #32
     f56:	00a4      	lsls	r4, r4, #2
     f58:	4b05      	ldr	r3, [pc, #20]	; (f70 <system_gclk_chan_get_hz+0x24>)
     f5a:	58e4      	ldr	r4, [r4, r3]
     f5c:	0724      	lsls	r4, r4, #28
     f5e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
     f60:	4b04      	ldr	r3, [pc, #16]	; (f74 <system_gclk_chan_get_hz+0x28>)
     f62:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
     f64:	0020      	movs	r0, r4
     f66:	4b04      	ldr	r3, [pc, #16]	; (f78 <system_gclk_chan_get_hz+0x2c>)
     f68:	4798      	blx	r3
}
     f6a:	bd10      	pop	{r4, pc}
     f6c:	0000011d 	.word	0x0000011d
     f70:	40001c00 	.word	0x40001c00
     f74:	0000015d 	.word	0x0000015d
     f78:	00000e4d 	.word	0x00000e4d

00000f7c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
     f7c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
     f7e:	78d3      	ldrb	r3, [r2, #3]
     f80:	2b00      	cmp	r3, #0
     f82:	d135      	bne.n	ff0 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
     f84:	7813      	ldrb	r3, [r2, #0]
     f86:	2b80      	cmp	r3, #128	; 0x80
     f88:	d029      	beq.n	fde <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
     f8a:	061b      	lsls	r3, r3, #24
     f8c:	2480      	movs	r4, #128	; 0x80
     f8e:	0264      	lsls	r4, r4, #9
     f90:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
     f92:	7854      	ldrb	r4, [r2, #1]
     f94:	2502      	movs	r5, #2
     f96:	43ac      	bics	r4, r5
     f98:	d106      	bne.n	fa8 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
     f9a:	7894      	ldrb	r4, [r2, #2]
     f9c:	2c00      	cmp	r4, #0
     f9e:	d120      	bne.n	fe2 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
     fa0:	2480      	movs	r4, #128	; 0x80
     fa2:	02a4      	lsls	r4, r4, #10
     fa4:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
     fa6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     fa8:	7854      	ldrb	r4, [r2, #1]
     faa:	3c01      	subs	r4, #1
     fac:	2c01      	cmp	r4, #1
     fae:	d91c      	bls.n	fea <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     fb0:	040d      	lsls	r5, r1, #16
     fb2:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     fb4:	24a0      	movs	r4, #160	; 0xa0
     fb6:	05e4      	lsls	r4, r4, #23
     fb8:	432c      	orrs	r4, r5
     fba:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     fbc:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
     fbe:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     fc0:	24d0      	movs	r4, #208	; 0xd0
     fc2:	0624      	lsls	r4, r4, #24
     fc4:	432c      	orrs	r4, r5
     fc6:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     fc8:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
     fca:	78d4      	ldrb	r4, [r2, #3]
     fcc:	2c00      	cmp	r4, #0
     fce:	d122      	bne.n	1016 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
     fd0:	035b      	lsls	r3, r3, #13
     fd2:	d51c      	bpl.n	100e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
     fd4:	7893      	ldrb	r3, [r2, #2]
     fd6:	2b01      	cmp	r3, #1
     fd8:	d01e      	beq.n	1018 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
     fda:	6141      	str	r1, [r0, #20]
     fdc:	e017      	b.n	100e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
     fde:	2300      	movs	r3, #0
     fe0:	e7d7      	b.n	f92 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
     fe2:	24c0      	movs	r4, #192	; 0xc0
     fe4:	02e4      	lsls	r4, r4, #11
     fe6:	4323      	orrs	r3, r4
     fe8:	e7dd      	b.n	fa6 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
     fea:	4c0d      	ldr	r4, [pc, #52]	; (1020 <_system_pinmux_config+0xa4>)
     fec:	4023      	ands	r3, r4
     fee:	e7df      	b.n	fb0 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
     ff0:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     ff2:	040c      	lsls	r4, r1, #16
     ff4:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     ff6:	23a0      	movs	r3, #160	; 0xa0
     ff8:	05db      	lsls	r3, r3, #23
     ffa:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     ffc:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
     ffe:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1000:	23d0      	movs	r3, #208	; 0xd0
    1002:	061b      	lsls	r3, r3, #24
    1004:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1006:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1008:	78d3      	ldrb	r3, [r2, #3]
    100a:	2b00      	cmp	r3, #0
    100c:	d103      	bne.n	1016 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    100e:	7853      	ldrb	r3, [r2, #1]
    1010:	3b01      	subs	r3, #1
    1012:	2b01      	cmp	r3, #1
    1014:	d902      	bls.n	101c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1016:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1018:	6181      	str	r1, [r0, #24]
    101a:	e7f8      	b.n	100e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    101c:	6081      	str	r1, [r0, #8]
}
    101e:	e7fa      	b.n	1016 <_system_pinmux_config+0x9a>
    1020:	fffbffff 	.word	0xfffbffff

00001024 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1024:	b510      	push	{r4, lr}
    1026:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1028:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    102a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    102c:	2900      	cmp	r1, #0
    102e:	d105      	bne.n	103c <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    1030:	0943      	lsrs	r3, r0, #5
    1032:	01db      	lsls	r3, r3, #7
    1034:	2182      	movs	r1, #130	; 0x82
    1036:	05c9      	lsls	r1, r1, #23
    1038:	468c      	mov	ip, r1
    103a:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    103c:	241f      	movs	r4, #31
    103e:	4020      	ands	r0, r4
    1040:	2101      	movs	r1, #1
    1042:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1044:	0018      	movs	r0, r3
    1046:	4b01      	ldr	r3, [pc, #4]	; (104c <system_pinmux_pin_set_config+0x28>)
    1048:	4798      	blx	r3
}
    104a:	bd10      	pop	{r4, pc}
    104c:	00000f7d 	.word	0x00000f7d

00001050 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1050:	4770      	bx	lr
	...

00001054 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1054:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1056:	4b05      	ldr	r3, [pc, #20]	; (106c <system_init+0x18>)
    1058:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    105a:	4b05      	ldr	r3, [pc, #20]	; (1070 <system_init+0x1c>)
    105c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    105e:	4b05      	ldr	r3, [pc, #20]	; (1074 <system_init+0x20>)
    1060:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1062:	4b05      	ldr	r3, [pc, #20]	; (1078 <system_init+0x24>)
    1064:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1066:	4b05      	ldr	r3, [pc, #20]	; (107c <system_init+0x28>)
    1068:	4798      	blx	r3
}
    106a:	bd10      	pop	{r4, pc}
    106c:	00000cd9 	.word	0x00000cd9
    1070:	0000018d 	.word	0x0000018d
    1074:	00001051 	.word	0x00001051
    1078:	00001051 	.word	0x00001051
    107c:	00001051 	.word	0x00001051

00001080 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1080:	e7fe      	b.n	1080 <Dummy_Handler>
	...

00001084 <Reset_Handler>:
{
    1084:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    1086:	4a17      	ldr	r2, [pc, #92]	; (10e4 <Reset_Handler+0x60>)
    1088:	4b17      	ldr	r3, [pc, #92]	; (10e8 <Reset_Handler+0x64>)
    108a:	429a      	cmp	r2, r3
    108c:	d011      	beq.n	10b2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    108e:	001a      	movs	r2, r3
    1090:	4b16      	ldr	r3, [pc, #88]	; (10ec <Reset_Handler+0x68>)
    1092:	429a      	cmp	r2, r3
    1094:	d20d      	bcs.n	10b2 <Reset_Handler+0x2e>
    1096:	4a16      	ldr	r2, [pc, #88]	; (10f0 <Reset_Handler+0x6c>)
    1098:	3303      	adds	r3, #3
    109a:	1a9b      	subs	r3, r3, r2
    109c:	089b      	lsrs	r3, r3, #2
    109e:	3301      	adds	r3, #1
    10a0:	009b      	lsls	r3, r3, #2
    10a2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    10a4:	4810      	ldr	r0, [pc, #64]	; (10e8 <Reset_Handler+0x64>)
    10a6:	490f      	ldr	r1, [pc, #60]	; (10e4 <Reset_Handler+0x60>)
    10a8:	588c      	ldr	r4, [r1, r2]
    10aa:	5084      	str	r4, [r0, r2]
    10ac:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    10ae:	429a      	cmp	r2, r3
    10b0:	d1fa      	bne.n	10a8 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    10b2:	4a10      	ldr	r2, [pc, #64]	; (10f4 <Reset_Handler+0x70>)
    10b4:	4b10      	ldr	r3, [pc, #64]	; (10f8 <Reset_Handler+0x74>)
    10b6:	429a      	cmp	r2, r3
    10b8:	d20a      	bcs.n	10d0 <Reset_Handler+0x4c>
    10ba:	43d3      	mvns	r3, r2
    10bc:	490e      	ldr	r1, [pc, #56]	; (10f8 <Reset_Handler+0x74>)
    10be:	185b      	adds	r3, r3, r1
    10c0:	2103      	movs	r1, #3
    10c2:	438b      	bics	r3, r1
    10c4:	3304      	adds	r3, #4
    10c6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    10c8:	2100      	movs	r1, #0
    10ca:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    10cc:	4293      	cmp	r3, r2
    10ce:	d1fc      	bne.n	10ca <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    10d0:	4a0a      	ldr	r2, [pc, #40]	; (10fc <Reset_Handler+0x78>)
    10d2:	21ff      	movs	r1, #255	; 0xff
    10d4:	4b0a      	ldr	r3, [pc, #40]	; (1100 <Reset_Handler+0x7c>)
    10d6:	438b      	bics	r3, r1
    10d8:	6093      	str	r3, [r2, #8]
        __libc_init_array();
    10da:	4b0a      	ldr	r3, [pc, #40]	; (1104 <Reset_Handler+0x80>)
    10dc:	4798      	blx	r3
        main();
    10de:	4b0a      	ldr	r3, [pc, #40]	; (1108 <Reset_Handler+0x84>)
    10e0:	4798      	blx	r3
    10e2:	e7fe      	b.n	10e2 <Reset_Handler+0x5e>
    10e4:	00002d74 	.word	0x00002d74
    10e8:	20000000 	.word	0x20000000
    10ec:	20000014 	.word	0x20000014
    10f0:	20000004 	.word	0x20000004
    10f4:	20000014 	.word	0x20000014
    10f8:	200000c0 	.word	0x200000c0
    10fc:	e000ed00 	.word	0xe000ed00
    1100:	00000000 	.word	0x00000000
    1104:	00002c55 	.word	0x00002c55
    1108:	000011f1 	.word	0x000011f1

0000110c <i2c_write_complete_callback>:
//! [dev_inst]

//! [callback_func]
void i2c_write_complete_callback(
		struct i2c_master_module *const module)
{
    110c:	b510      	push	{r4, lr}
	/* Initiate new packet read */
	//! [read_next]
	i2c_master_read_packet_job(&i2c_master_instance,&rd_packet);
    110e:	4902      	ldr	r1, [pc, #8]	; (1118 <i2c_write_complete_callback+0xc>)
    1110:	4802      	ldr	r0, [pc, #8]	; (111c <i2c_write_complete_callback+0x10>)
    1112:	4b03      	ldr	r3, [pc, #12]	; (1120 <i2c_write_complete_callback+0x14>)
    1114:	4798      	blx	r3
	//! [read_next]
}
    1116:	bd10      	pop	{r4, pc}
    1118:	200000b4 	.word	0x200000b4
    111c:	2000008c 	.word	0x2000008c
    1120:	00000779 	.word	0x00000779

00001124 <configure_i2c>:
//! [callback_func]

//! [initialize_i2c]
void configure_i2c(void)
{
    1124:	b530      	push	{r4, r5, lr}
    1126:	b08f      	sub	sp, #60	; 0x3c
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    1128:	ab01      	add	r3, sp, #4
    112a:	2264      	movs	r2, #100	; 0x64
    112c:	9201      	str	r2, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    112e:	4a21      	ldr	r2, [pc, #132]	; (11b4 <configure_i2c+0x90>)
    1130:	9202      	str	r2, [sp, #8]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    1132:	2200      	movs	r2, #0
    1134:	9203      	str	r2, [sp, #12]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    1136:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    1138:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    113a:	2180      	movs	r1, #128	; 0x80
    113c:	0389      	lsls	r1, r1, #14
    113e:	9105      	str	r1, [sp, #20]
	config->buffer_timeout   = 65535;
    1140:	2101      	movs	r1, #1
    1142:	4249      	negs	r1, r1
    1144:	82d9      	strh	r1, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    1146:	8299      	strh	r1, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    1148:	9208      	str	r2, [sp, #32]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    114a:	9209      	str	r2, [sp, #36]	; 0x24
	config->scl_low_timeout  = false;
    114c:	3125      	adds	r1, #37	; 0x25
    114e:	545a      	strb	r2, [r3, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    1150:	920b      	str	r2, [sp, #44]	; 0x2c
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    1152:	3108      	adds	r1, #8
    1154:	545a      	strb	r2, [r3, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    1156:	3101      	adds	r1, #1
    1158:	545a      	strb	r2, [r3, r1]
	config->master_scl_low_extend_timeout  = false;
    115a:	3101      	adds	r1, #1
    115c:	545a      	strb	r2, [r3, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    115e:	32d7      	adds	r2, #215	; 0xd7
    1160:	861a      	strh	r2, [r3, #48]	; 0x30
#endif
	//! [conf_change]

	/* Initialize and enable device with config */
	//! [init_module]
	while(i2c_master_init(&i2c_master_instance, CONF_I2C_MASTER_MODULE, &config_i2c_master)     \
    1162:	4d15      	ldr	r5, [pc, #84]	; (11b8 <configure_i2c+0x94>)
    1164:	4c15      	ldr	r4, [pc, #84]	; (11bc <configure_i2c+0x98>)
    1166:	aa01      	add	r2, sp, #4
    1168:	4915      	ldr	r1, [pc, #84]	; (11c0 <configure_i2c+0x9c>)
    116a:	0028      	movs	r0, r5
    116c:	47a0      	blx	r4
    116e:	2800      	cmp	r0, #0
    1170:	d1f9      	bne.n	1166 <configure_i2c+0x42>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1172:	4b11      	ldr	r3, [pc, #68]	; (11b8 <configure_i2c+0x94>)
    1174:	681c      	ldr	r4, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1176:	2207      	movs	r2, #7
    1178:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    117a:	421a      	tst	r2, r3
    117c:	d1fc      	bne.n	1178 <configure_i2c+0x54>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    117e:	6823      	ldr	r3, [r4, #0]
    1180:	2202      	movs	r2, #2
    1182:	4313      	orrs	r3, r2
    1184:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1186:	4d0c      	ldr	r5, [pc, #48]	; (11b8 <configure_i2c+0x94>)
    1188:	6828      	ldr	r0, [r5, #0]
    118a:	4b0e      	ldr	r3, [pc, #56]	; (11c4 <configure_i2c+0xa0>)
    118c:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    118e:	231f      	movs	r3, #31
    1190:	4018      	ands	r0, r3
    1192:	3b1e      	subs	r3, #30
    1194:	4083      	lsls	r3, r0
    1196:	4a0c      	ldr	r2, [pc, #48]	; (11c8 <configure_i2c+0xa4>)
    1198:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    119a:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    119c:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    119e:	2110      	movs	r1, #16
    11a0:	8b62      	ldrh	r2, [r4, #26]
    11a2:	420a      	tst	r2, r1
    11a4:	d104      	bne.n	11b0 <configure_i2c+0x8c>
		timeout_counter++;
    11a6:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    11a8:	4283      	cmp	r3, r0
    11aa:	d3f9      	bcc.n	11a0 <configure_i2c+0x7c>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    11ac:	2310      	movs	r3, #16
    11ae:	8363      	strh	r3, [r4, #26]
	//! [init_module]

	//! [enable_module]
	i2c_master_enable(&i2c_master_instance);
	//! [enable_module]
}
    11b0:	b00f      	add	sp, #60	; 0x3c
    11b2:	bd30      	pop	{r4, r5, pc}
    11b4:	00000d48 	.word	0x00000d48
    11b8:	2000008c 	.word	0x2000008c
    11bc:	000001e5 	.word	0x000001e5
    11c0:	42000c00 	.word	0x42000c00
    11c4:	00000bed 	.word	0x00000bed
    11c8:	e000e100 	.word	0xe000e100

000011cc <configure_i2c_callbacks>:
//! [initialize_i2c]

//! [setup_callback]
void configure_i2c_callbacks(void)
{
    11cc:	b510      	push	{r4, lr}
	/* Register callback function. */
	//! [callback_reg]
	i2c_master_register_callback(&i2c_master_instance, i2c_write_complete_callback,
    11ce:	4c05      	ldr	r4, [pc, #20]	; (11e4 <configure_i2c_callbacks+0x18>)
    11d0:	2200      	movs	r2, #0
    11d2:	4905      	ldr	r1, [pc, #20]	; (11e8 <configure_i2c_callbacks+0x1c>)
    11d4:	0020      	movs	r0, r4
    11d6:	4b05      	ldr	r3, [pc, #20]	; (11ec <configure_i2c_callbacks+0x20>)
    11d8:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    11da:	7e63      	ldrb	r3, [r4, #25]
    11dc:	2201      	movs	r2, #1
    11de:	4313      	orrs	r3, r2
    11e0:	7663      	strb	r3, [r4, #25]
	//! [callback_reg]
	//! [callback_en]
	i2c_master_enable_callback(&i2c_master_instance,
			I2C_MASTER_CALLBACK_WRITE_COMPLETE);
	//! [callback_en]
}
    11e2:	bd10      	pop	{r4, pc}
    11e4:	2000008c 	.word	0x2000008c
    11e8:	0000110d 	.word	0x0000110d
    11ec:	00000761 	.word	0x00000761

000011f0 <main>:
//! [setup_callback]

int main(void)
{
    11f0:	b570      	push	{r4, r5, r6, lr}
	system_init();
    11f2:	4b16      	ldr	r3, [pc, #88]	; (124c <main+0x5c>)
    11f4:	4798      	blx	r3

	//! [run_initialize_i2c]
	/* Configure device and enable. */
	//! [config]
	configure_i2c();
    11f6:	4b16      	ldr	r3, [pc, #88]	; (1250 <main+0x60>)
    11f8:	4798      	blx	r3
	//! [config]
	/* Configure callbacks and enable. */
	//! [config_callback]
	configure_i2c_callbacks();
    11fa:	4b16      	ldr	r3, [pc, #88]	; (1254 <main+0x64>)
    11fc:	4798      	blx	r3
	//! [config_callback]
	//! [run_initialize_i2c]

	/* Init i2c packet. */
	//! [write_packet]
	wr_packet.address     = SLAVE_ADDRESS;
    11fe:	4b16      	ldr	r3, [pc, #88]	; (1258 <main+0x68>)
    1200:	2112      	movs	r1, #18
    1202:	8019      	strh	r1, [r3, #0]
	wr_packet.data_length = DATA_LENGTH;
    1204:	2208      	movs	r2, #8
    1206:	805a      	strh	r2, [r3, #2]
	wr_packet.data        = wr_buffer;
    1208:	4814      	ldr	r0, [pc, #80]	; (125c <main+0x6c>)
    120a:	6058      	str	r0, [r3, #4]
	//! [write_packet]
	//! [read_packet]
	rd_packet.address     = SLAVE_ADDRESS;
    120c:	4b14      	ldr	r3, [pc, #80]	; (1260 <main+0x70>)
    120e:	8019      	strh	r1, [r3, #0]
	rd_packet.data_length = DATA_LENGTH;
    1210:	805a      	strh	r2, [r3, #2]
	rd_packet.data        = rd_buffer;
    1212:	4a14      	ldr	r2, [pc, #80]	; (1264 <main+0x74>)
    1214:	605a      	str	r2, [r3, #4]
	return (port_base->IN.reg & pin_mask);
    1216:	2582      	movs	r5, #130	; 0x82
    1218:	05ed      	lsls	r5, r5, #23
    121a:	2480      	movs	r4, #128	; 0x80
    121c:	0564      	lsls	r4, r4, #21
		  	while (!port_pin_get_input_level(BUTTON_0_PIN)) {
		  		/* Waiting for button steady */	
		  	}
			/* Send every other packet with reversed data */
			//! [revert_order]
			if (wr_packet.data[0] == 0x00) {
    121e:	4e0e      	ldr	r6, [pc, #56]	; (1258 <main+0x68>)
    1220:	e006      	b.n	1230 <main+0x40>
				wr_packet.data = &wr_buffer_reversed[0];
			} else {
				wr_packet.data = &wr_buffer[0];
    1222:	4a0e      	ldr	r2, [pc, #56]	; (125c <main+0x6c>)
    1224:	4b0c      	ldr	r3, [pc, #48]	; (1258 <main+0x68>)
    1226:	605a      	str	r2, [r3, #4]
			}
			//! [revert_order]
			//! [write_packet]
			i2c_master_write_packet_job(&i2c_master_instance, &wr_packet);
    1228:	490b      	ldr	r1, [pc, #44]	; (1258 <main+0x68>)
    122a:	480f      	ldr	r0, [pc, #60]	; (1268 <main+0x78>)
    122c:	4b0f      	ldr	r3, [pc, #60]	; (126c <main+0x7c>)
    122e:	4798      	blx	r3
    1230:	6a2b      	ldr	r3, [r5, #32]
		if (!port_pin_get_input_level(BUTTON_0_PIN)) {
    1232:	4223      	tst	r3, r4
    1234:	d1fc      	bne.n	1230 <main+0x40>
    1236:	6a2b      	ldr	r3, [r5, #32]
		  	while (!port_pin_get_input_level(BUTTON_0_PIN)) {
    1238:	4223      	tst	r3, r4
    123a:	d0fc      	beq.n	1236 <main+0x46>
			if (wr_packet.data[0] == 0x00) {
    123c:	6873      	ldr	r3, [r6, #4]
    123e:	781b      	ldrb	r3, [r3, #0]
    1240:	2b00      	cmp	r3, #0
    1242:	d1ee      	bne.n	1222 <main+0x32>
				wr_packet.data = &wr_buffer_reversed[0];
    1244:	4a0a      	ldr	r2, [pc, #40]	; (1270 <main+0x80>)
    1246:	4b04      	ldr	r3, [pc, #16]	; (1258 <main+0x68>)
    1248:	605a      	str	r2, [r3, #4]
    124a:	e7ed      	b.n	1228 <main+0x38>
    124c:	00001055 	.word	0x00001055
    1250:	00001125 	.word	0x00001125
    1254:	000011cd 	.word	0x000011cd
    1258:	20000080 	.word	0x20000080
    125c:	20000004 	.word	0x20000004
    1260:	200000b4 	.word	0x200000b4
    1264:	20000060 	.word	0x20000060
    1268:	2000008c 	.word	0x2000008c
    126c:	0000079d 	.word	0x0000079d
    1270:	2000000c 	.word	0x2000000c

00001274 <__udivsi3>:
    1274:	2200      	movs	r2, #0
    1276:	0843      	lsrs	r3, r0, #1
    1278:	428b      	cmp	r3, r1
    127a:	d374      	bcc.n	1366 <__udivsi3+0xf2>
    127c:	0903      	lsrs	r3, r0, #4
    127e:	428b      	cmp	r3, r1
    1280:	d35f      	bcc.n	1342 <__udivsi3+0xce>
    1282:	0a03      	lsrs	r3, r0, #8
    1284:	428b      	cmp	r3, r1
    1286:	d344      	bcc.n	1312 <__udivsi3+0x9e>
    1288:	0b03      	lsrs	r3, r0, #12
    128a:	428b      	cmp	r3, r1
    128c:	d328      	bcc.n	12e0 <__udivsi3+0x6c>
    128e:	0c03      	lsrs	r3, r0, #16
    1290:	428b      	cmp	r3, r1
    1292:	d30d      	bcc.n	12b0 <__udivsi3+0x3c>
    1294:	22ff      	movs	r2, #255	; 0xff
    1296:	0209      	lsls	r1, r1, #8
    1298:	ba12      	rev	r2, r2
    129a:	0c03      	lsrs	r3, r0, #16
    129c:	428b      	cmp	r3, r1
    129e:	d302      	bcc.n	12a6 <__udivsi3+0x32>
    12a0:	1212      	asrs	r2, r2, #8
    12a2:	0209      	lsls	r1, r1, #8
    12a4:	d065      	beq.n	1372 <__udivsi3+0xfe>
    12a6:	0b03      	lsrs	r3, r0, #12
    12a8:	428b      	cmp	r3, r1
    12aa:	d319      	bcc.n	12e0 <__udivsi3+0x6c>
    12ac:	e000      	b.n	12b0 <__udivsi3+0x3c>
    12ae:	0a09      	lsrs	r1, r1, #8
    12b0:	0bc3      	lsrs	r3, r0, #15
    12b2:	428b      	cmp	r3, r1
    12b4:	d301      	bcc.n	12ba <__udivsi3+0x46>
    12b6:	03cb      	lsls	r3, r1, #15
    12b8:	1ac0      	subs	r0, r0, r3
    12ba:	4152      	adcs	r2, r2
    12bc:	0b83      	lsrs	r3, r0, #14
    12be:	428b      	cmp	r3, r1
    12c0:	d301      	bcc.n	12c6 <__udivsi3+0x52>
    12c2:	038b      	lsls	r3, r1, #14
    12c4:	1ac0      	subs	r0, r0, r3
    12c6:	4152      	adcs	r2, r2
    12c8:	0b43      	lsrs	r3, r0, #13
    12ca:	428b      	cmp	r3, r1
    12cc:	d301      	bcc.n	12d2 <__udivsi3+0x5e>
    12ce:	034b      	lsls	r3, r1, #13
    12d0:	1ac0      	subs	r0, r0, r3
    12d2:	4152      	adcs	r2, r2
    12d4:	0b03      	lsrs	r3, r0, #12
    12d6:	428b      	cmp	r3, r1
    12d8:	d301      	bcc.n	12de <__udivsi3+0x6a>
    12da:	030b      	lsls	r3, r1, #12
    12dc:	1ac0      	subs	r0, r0, r3
    12de:	4152      	adcs	r2, r2
    12e0:	0ac3      	lsrs	r3, r0, #11
    12e2:	428b      	cmp	r3, r1
    12e4:	d301      	bcc.n	12ea <__udivsi3+0x76>
    12e6:	02cb      	lsls	r3, r1, #11
    12e8:	1ac0      	subs	r0, r0, r3
    12ea:	4152      	adcs	r2, r2
    12ec:	0a83      	lsrs	r3, r0, #10
    12ee:	428b      	cmp	r3, r1
    12f0:	d301      	bcc.n	12f6 <__udivsi3+0x82>
    12f2:	028b      	lsls	r3, r1, #10
    12f4:	1ac0      	subs	r0, r0, r3
    12f6:	4152      	adcs	r2, r2
    12f8:	0a43      	lsrs	r3, r0, #9
    12fa:	428b      	cmp	r3, r1
    12fc:	d301      	bcc.n	1302 <__udivsi3+0x8e>
    12fe:	024b      	lsls	r3, r1, #9
    1300:	1ac0      	subs	r0, r0, r3
    1302:	4152      	adcs	r2, r2
    1304:	0a03      	lsrs	r3, r0, #8
    1306:	428b      	cmp	r3, r1
    1308:	d301      	bcc.n	130e <__udivsi3+0x9a>
    130a:	020b      	lsls	r3, r1, #8
    130c:	1ac0      	subs	r0, r0, r3
    130e:	4152      	adcs	r2, r2
    1310:	d2cd      	bcs.n	12ae <__udivsi3+0x3a>
    1312:	09c3      	lsrs	r3, r0, #7
    1314:	428b      	cmp	r3, r1
    1316:	d301      	bcc.n	131c <__udivsi3+0xa8>
    1318:	01cb      	lsls	r3, r1, #7
    131a:	1ac0      	subs	r0, r0, r3
    131c:	4152      	adcs	r2, r2
    131e:	0983      	lsrs	r3, r0, #6
    1320:	428b      	cmp	r3, r1
    1322:	d301      	bcc.n	1328 <__udivsi3+0xb4>
    1324:	018b      	lsls	r3, r1, #6
    1326:	1ac0      	subs	r0, r0, r3
    1328:	4152      	adcs	r2, r2
    132a:	0943      	lsrs	r3, r0, #5
    132c:	428b      	cmp	r3, r1
    132e:	d301      	bcc.n	1334 <__udivsi3+0xc0>
    1330:	014b      	lsls	r3, r1, #5
    1332:	1ac0      	subs	r0, r0, r3
    1334:	4152      	adcs	r2, r2
    1336:	0903      	lsrs	r3, r0, #4
    1338:	428b      	cmp	r3, r1
    133a:	d301      	bcc.n	1340 <__udivsi3+0xcc>
    133c:	010b      	lsls	r3, r1, #4
    133e:	1ac0      	subs	r0, r0, r3
    1340:	4152      	adcs	r2, r2
    1342:	08c3      	lsrs	r3, r0, #3
    1344:	428b      	cmp	r3, r1
    1346:	d301      	bcc.n	134c <__udivsi3+0xd8>
    1348:	00cb      	lsls	r3, r1, #3
    134a:	1ac0      	subs	r0, r0, r3
    134c:	4152      	adcs	r2, r2
    134e:	0883      	lsrs	r3, r0, #2
    1350:	428b      	cmp	r3, r1
    1352:	d301      	bcc.n	1358 <__udivsi3+0xe4>
    1354:	008b      	lsls	r3, r1, #2
    1356:	1ac0      	subs	r0, r0, r3
    1358:	4152      	adcs	r2, r2
    135a:	0843      	lsrs	r3, r0, #1
    135c:	428b      	cmp	r3, r1
    135e:	d301      	bcc.n	1364 <__udivsi3+0xf0>
    1360:	004b      	lsls	r3, r1, #1
    1362:	1ac0      	subs	r0, r0, r3
    1364:	4152      	adcs	r2, r2
    1366:	1a41      	subs	r1, r0, r1
    1368:	d200      	bcs.n	136c <__udivsi3+0xf8>
    136a:	4601      	mov	r1, r0
    136c:	4152      	adcs	r2, r2
    136e:	4610      	mov	r0, r2
    1370:	4770      	bx	lr
    1372:	e7ff      	b.n	1374 <__udivsi3+0x100>
    1374:	b501      	push	{r0, lr}
    1376:	2000      	movs	r0, #0
    1378:	f000 f806 	bl	1388 <__aeabi_idiv0>
    137c:	bd02      	pop	{r1, pc}
    137e:	46c0      	nop			; (mov r8, r8)

00001380 <__aeabi_uidivmod>:
    1380:	2900      	cmp	r1, #0
    1382:	d0f7      	beq.n	1374 <__udivsi3+0x100>
    1384:	e776      	b.n	1274 <__udivsi3>
    1386:	4770      	bx	lr

00001388 <__aeabi_idiv0>:
    1388:	4770      	bx	lr
    138a:	46c0      	nop			; (mov r8, r8)

0000138c <__aeabi_dadd>:
    138c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    138e:	4645      	mov	r5, r8
    1390:	46de      	mov	lr, fp
    1392:	4657      	mov	r7, sl
    1394:	464e      	mov	r6, r9
    1396:	030c      	lsls	r4, r1, #12
    1398:	b5e0      	push	{r5, r6, r7, lr}
    139a:	004e      	lsls	r6, r1, #1
    139c:	0fc9      	lsrs	r1, r1, #31
    139e:	4688      	mov	r8, r1
    13a0:	000d      	movs	r5, r1
    13a2:	0a61      	lsrs	r1, r4, #9
    13a4:	0f44      	lsrs	r4, r0, #29
    13a6:	430c      	orrs	r4, r1
    13a8:	00c7      	lsls	r7, r0, #3
    13aa:	0319      	lsls	r1, r3, #12
    13ac:	0058      	lsls	r0, r3, #1
    13ae:	0fdb      	lsrs	r3, r3, #31
    13b0:	469b      	mov	fp, r3
    13b2:	0a4b      	lsrs	r3, r1, #9
    13b4:	0f51      	lsrs	r1, r2, #29
    13b6:	430b      	orrs	r3, r1
    13b8:	0d76      	lsrs	r6, r6, #21
    13ba:	0d40      	lsrs	r0, r0, #21
    13bc:	0019      	movs	r1, r3
    13be:	00d2      	lsls	r2, r2, #3
    13c0:	45d8      	cmp	r8, fp
    13c2:	d100      	bne.n	13c6 <__aeabi_dadd+0x3a>
    13c4:	e0ae      	b.n	1524 <__aeabi_dadd+0x198>
    13c6:	1a35      	subs	r5, r6, r0
    13c8:	2d00      	cmp	r5, #0
    13ca:	dc00      	bgt.n	13ce <__aeabi_dadd+0x42>
    13cc:	e0f6      	b.n	15bc <__aeabi_dadd+0x230>
    13ce:	2800      	cmp	r0, #0
    13d0:	d10f      	bne.n	13f2 <__aeabi_dadd+0x66>
    13d2:	4313      	orrs	r3, r2
    13d4:	d100      	bne.n	13d8 <__aeabi_dadd+0x4c>
    13d6:	e0db      	b.n	1590 <__aeabi_dadd+0x204>
    13d8:	1e6b      	subs	r3, r5, #1
    13da:	2b00      	cmp	r3, #0
    13dc:	d000      	beq.n	13e0 <__aeabi_dadd+0x54>
    13de:	e137      	b.n	1650 <__aeabi_dadd+0x2c4>
    13e0:	1aba      	subs	r2, r7, r2
    13e2:	4297      	cmp	r7, r2
    13e4:	41bf      	sbcs	r7, r7
    13e6:	1a64      	subs	r4, r4, r1
    13e8:	427f      	negs	r7, r7
    13ea:	1be4      	subs	r4, r4, r7
    13ec:	2601      	movs	r6, #1
    13ee:	0017      	movs	r7, r2
    13f0:	e024      	b.n	143c <__aeabi_dadd+0xb0>
    13f2:	4bc6      	ldr	r3, [pc, #792]	; (170c <__aeabi_dadd+0x380>)
    13f4:	429e      	cmp	r6, r3
    13f6:	d04d      	beq.n	1494 <__aeabi_dadd+0x108>
    13f8:	2380      	movs	r3, #128	; 0x80
    13fa:	041b      	lsls	r3, r3, #16
    13fc:	4319      	orrs	r1, r3
    13fe:	2d38      	cmp	r5, #56	; 0x38
    1400:	dd00      	ble.n	1404 <__aeabi_dadd+0x78>
    1402:	e107      	b.n	1614 <__aeabi_dadd+0x288>
    1404:	2d1f      	cmp	r5, #31
    1406:	dd00      	ble.n	140a <__aeabi_dadd+0x7e>
    1408:	e138      	b.n	167c <__aeabi_dadd+0x2f0>
    140a:	2020      	movs	r0, #32
    140c:	1b43      	subs	r3, r0, r5
    140e:	469a      	mov	sl, r3
    1410:	000b      	movs	r3, r1
    1412:	4650      	mov	r0, sl
    1414:	4083      	lsls	r3, r0
    1416:	4699      	mov	r9, r3
    1418:	0013      	movs	r3, r2
    141a:	4648      	mov	r0, r9
    141c:	40eb      	lsrs	r3, r5
    141e:	4318      	orrs	r0, r3
    1420:	0003      	movs	r3, r0
    1422:	4650      	mov	r0, sl
    1424:	4082      	lsls	r2, r0
    1426:	1e50      	subs	r0, r2, #1
    1428:	4182      	sbcs	r2, r0
    142a:	40e9      	lsrs	r1, r5
    142c:	431a      	orrs	r2, r3
    142e:	1aba      	subs	r2, r7, r2
    1430:	1a61      	subs	r1, r4, r1
    1432:	4297      	cmp	r7, r2
    1434:	41a4      	sbcs	r4, r4
    1436:	0017      	movs	r7, r2
    1438:	4264      	negs	r4, r4
    143a:	1b0c      	subs	r4, r1, r4
    143c:	0223      	lsls	r3, r4, #8
    143e:	d562      	bpl.n	1506 <__aeabi_dadd+0x17a>
    1440:	0264      	lsls	r4, r4, #9
    1442:	0a65      	lsrs	r5, r4, #9
    1444:	2d00      	cmp	r5, #0
    1446:	d100      	bne.n	144a <__aeabi_dadd+0xbe>
    1448:	e0df      	b.n	160a <__aeabi_dadd+0x27e>
    144a:	0028      	movs	r0, r5
    144c:	f001 fbe4 	bl	2c18 <__clzsi2>
    1450:	0003      	movs	r3, r0
    1452:	3b08      	subs	r3, #8
    1454:	2b1f      	cmp	r3, #31
    1456:	dd00      	ble.n	145a <__aeabi_dadd+0xce>
    1458:	e0d2      	b.n	1600 <__aeabi_dadd+0x274>
    145a:	2220      	movs	r2, #32
    145c:	003c      	movs	r4, r7
    145e:	1ad2      	subs	r2, r2, r3
    1460:	409d      	lsls	r5, r3
    1462:	40d4      	lsrs	r4, r2
    1464:	409f      	lsls	r7, r3
    1466:	4325      	orrs	r5, r4
    1468:	429e      	cmp	r6, r3
    146a:	dd00      	ble.n	146e <__aeabi_dadd+0xe2>
    146c:	e0c4      	b.n	15f8 <__aeabi_dadd+0x26c>
    146e:	1b9e      	subs	r6, r3, r6
    1470:	1c73      	adds	r3, r6, #1
    1472:	2b1f      	cmp	r3, #31
    1474:	dd00      	ble.n	1478 <__aeabi_dadd+0xec>
    1476:	e0f1      	b.n	165c <__aeabi_dadd+0x2d0>
    1478:	2220      	movs	r2, #32
    147a:	0038      	movs	r0, r7
    147c:	0029      	movs	r1, r5
    147e:	1ad2      	subs	r2, r2, r3
    1480:	40d8      	lsrs	r0, r3
    1482:	4091      	lsls	r1, r2
    1484:	4097      	lsls	r7, r2
    1486:	002c      	movs	r4, r5
    1488:	4301      	orrs	r1, r0
    148a:	1e78      	subs	r0, r7, #1
    148c:	4187      	sbcs	r7, r0
    148e:	40dc      	lsrs	r4, r3
    1490:	2600      	movs	r6, #0
    1492:	430f      	orrs	r7, r1
    1494:	077b      	lsls	r3, r7, #29
    1496:	d009      	beq.n	14ac <__aeabi_dadd+0x120>
    1498:	230f      	movs	r3, #15
    149a:	403b      	ands	r3, r7
    149c:	2b04      	cmp	r3, #4
    149e:	d005      	beq.n	14ac <__aeabi_dadd+0x120>
    14a0:	1d3b      	adds	r3, r7, #4
    14a2:	42bb      	cmp	r3, r7
    14a4:	41bf      	sbcs	r7, r7
    14a6:	427f      	negs	r7, r7
    14a8:	19e4      	adds	r4, r4, r7
    14aa:	001f      	movs	r7, r3
    14ac:	0223      	lsls	r3, r4, #8
    14ae:	d52c      	bpl.n	150a <__aeabi_dadd+0x17e>
    14b0:	4b96      	ldr	r3, [pc, #600]	; (170c <__aeabi_dadd+0x380>)
    14b2:	3601      	adds	r6, #1
    14b4:	429e      	cmp	r6, r3
    14b6:	d100      	bne.n	14ba <__aeabi_dadd+0x12e>
    14b8:	e09a      	b.n	15f0 <__aeabi_dadd+0x264>
    14ba:	4645      	mov	r5, r8
    14bc:	4b94      	ldr	r3, [pc, #592]	; (1710 <__aeabi_dadd+0x384>)
    14be:	08ff      	lsrs	r7, r7, #3
    14c0:	401c      	ands	r4, r3
    14c2:	0760      	lsls	r0, r4, #29
    14c4:	0576      	lsls	r6, r6, #21
    14c6:	0264      	lsls	r4, r4, #9
    14c8:	4307      	orrs	r7, r0
    14ca:	0b24      	lsrs	r4, r4, #12
    14cc:	0d76      	lsrs	r6, r6, #21
    14ce:	2100      	movs	r1, #0
    14d0:	0324      	lsls	r4, r4, #12
    14d2:	0b23      	lsrs	r3, r4, #12
    14d4:	0d0c      	lsrs	r4, r1, #20
    14d6:	4a8f      	ldr	r2, [pc, #572]	; (1714 <__aeabi_dadd+0x388>)
    14d8:	0524      	lsls	r4, r4, #20
    14da:	431c      	orrs	r4, r3
    14dc:	4014      	ands	r4, r2
    14de:	0533      	lsls	r3, r6, #20
    14e0:	4323      	orrs	r3, r4
    14e2:	005b      	lsls	r3, r3, #1
    14e4:	07ed      	lsls	r5, r5, #31
    14e6:	085b      	lsrs	r3, r3, #1
    14e8:	432b      	orrs	r3, r5
    14ea:	0038      	movs	r0, r7
    14ec:	0019      	movs	r1, r3
    14ee:	bc3c      	pop	{r2, r3, r4, r5}
    14f0:	4690      	mov	r8, r2
    14f2:	4699      	mov	r9, r3
    14f4:	46a2      	mov	sl, r4
    14f6:	46ab      	mov	fp, r5
    14f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    14fa:	4664      	mov	r4, ip
    14fc:	4304      	orrs	r4, r0
    14fe:	d100      	bne.n	1502 <__aeabi_dadd+0x176>
    1500:	e211      	b.n	1926 <__aeabi_dadd+0x59a>
    1502:	0004      	movs	r4, r0
    1504:	4667      	mov	r7, ip
    1506:	077b      	lsls	r3, r7, #29
    1508:	d1c6      	bne.n	1498 <__aeabi_dadd+0x10c>
    150a:	4645      	mov	r5, r8
    150c:	0760      	lsls	r0, r4, #29
    150e:	08ff      	lsrs	r7, r7, #3
    1510:	4307      	orrs	r7, r0
    1512:	08e4      	lsrs	r4, r4, #3
    1514:	4b7d      	ldr	r3, [pc, #500]	; (170c <__aeabi_dadd+0x380>)
    1516:	429e      	cmp	r6, r3
    1518:	d030      	beq.n	157c <__aeabi_dadd+0x1f0>
    151a:	0324      	lsls	r4, r4, #12
    151c:	0576      	lsls	r6, r6, #21
    151e:	0b24      	lsrs	r4, r4, #12
    1520:	0d76      	lsrs	r6, r6, #21
    1522:	e7d4      	b.n	14ce <__aeabi_dadd+0x142>
    1524:	1a33      	subs	r3, r6, r0
    1526:	469a      	mov	sl, r3
    1528:	2b00      	cmp	r3, #0
    152a:	dd78      	ble.n	161e <__aeabi_dadd+0x292>
    152c:	2800      	cmp	r0, #0
    152e:	d031      	beq.n	1594 <__aeabi_dadd+0x208>
    1530:	4876      	ldr	r0, [pc, #472]	; (170c <__aeabi_dadd+0x380>)
    1532:	4286      	cmp	r6, r0
    1534:	d0ae      	beq.n	1494 <__aeabi_dadd+0x108>
    1536:	2080      	movs	r0, #128	; 0x80
    1538:	0400      	lsls	r0, r0, #16
    153a:	4301      	orrs	r1, r0
    153c:	4653      	mov	r3, sl
    153e:	2b38      	cmp	r3, #56	; 0x38
    1540:	dc00      	bgt.n	1544 <__aeabi_dadd+0x1b8>
    1542:	e0e9      	b.n	1718 <__aeabi_dadd+0x38c>
    1544:	430a      	orrs	r2, r1
    1546:	1e51      	subs	r1, r2, #1
    1548:	418a      	sbcs	r2, r1
    154a:	2100      	movs	r1, #0
    154c:	19d2      	adds	r2, r2, r7
    154e:	42ba      	cmp	r2, r7
    1550:	41bf      	sbcs	r7, r7
    1552:	1909      	adds	r1, r1, r4
    1554:	427c      	negs	r4, r7
    1556:	0017      	movs	r7, r2
    1558:	190c      	adds	r4, r1, r4
    155a:	0223      	lsls	r3, r4, #8
    155c:	d5d3      	bpl.n	1506 <__aeabi_dadd+0x17a>
    155e:	4b6b      	ldr	r3, [pc, #428]	; (170c <__aeabi_dadd+0x380>)
    1560:	3601      	adds	r6, #1
    1562:	429e      	cmp	r6, r3
    1564:	d100      	bne.n	1568 <__aeabi_dadd+0x1dc>
    1566:	e13a      	b.n	17de <__aeabi_dadd+0x452>
    1568:	2001      	movs	r0, #1
    156a:	4b69      	ldr	r3, [pc, #420]	; (1710 <__aeabi_dadd+0x384>)
    156c:	401c      	ands	r4, r3
    156e:	087b      	lsrs	r3, r7, #1
    1570:	4007      	ands	r7, r0
    1572:	431f      	orrs	r7, r3
    1574:	07e0      	lsls	r0, r4, #31
    1576:	4307      	orrs	r7, r0
    1578:	0864      	lsrs	r4, r4, #1
    157a:	e78b      	b.n	1494 <__aeabi_dadd+0x108>
    157c:	0023      	movs	r3, r4
    157e:	433b      	orrs	r3, r7
    1580:	d100      	bne.n	1584 <__aeabi_dadd+0x1f8>
    1582:	e1cb      	b.n	191c <__aeabi_dadd+0x590>
    1584:	2280      	movs	r2, #128	; 0x80
    1586:	0312      	lsls	r2, r2, #12
    1588:	4314      	orrs	r4, r2
    158a:	0324      	lsls	r4, r4, #12
    158c:	0b24      	lsrs	r4, r4, #12
    158e:	e79e      	b.n	14ce <__aeabi_dadd+0x142>
    1590:	002e      	movs	r6, r5
    1592:	e77f      	b.n	1494 <__aeabi_dadd+0x108>
    1594:	0008      	movs	r0, r1
    1596:	4310      	orrs	r0, r2
    1598:	d100      	bne.n	159c <__aeabi_dadd+0x210>
    159a:	e0b4      	b.n	1706 <__aeabi_dadd+0x37a>
    159c:	1e58      	subs	r0, r3, #1
    159e:	2800      	cmp	r0, #0
    15a0:	d000      	beq.n	15a4 <__aeabi_dadd+0x218>
    15a2:	e0de      	b.n	1762 <__aeabi_dadd+0x3d6>
    15a4:	18ba      	adds	r2, r7, r2
    15a6:	42ba      	cmp	r2, r7
    15a8:	419b      	sbcs	r3, r3
    15aa:	1864      	adds	r4, r4, r1
    15ac:	425b      	negs	r3, r3
    15ae:	18e4      	adds	r4, r4, r3
    15b0:	0017      	movs	r7, r2
    15b2:	2601      	movs	r6, #1
    15b4:	0223      	lsls	r3, r4, #8
    15b6:	d5a6      	bpl.n	1506 <__aeabi_dadd+0x17a>
    15b8:	2602      	movs	r6, #2
    15ba:	e7d5      	b.n	1568 <__aeabi_dadd+0x1dc>
    15bc:	2d00      	cmp	r5, #0
    15be:	d16e      	bne.n	169e <__aeabi_dadd+0x312>
    15c0:	1c70      	adds	r0, r6, #1
    15c2:	0540      	lsls	r0, r0, #21
    15c4:	0d40      	lsrs	r0, r0, #21
    15c6:	2801      	cmp	r0, #1
    15c8:	dc00      	bgt.n	15cc <__aeabi_dadd+0x240>
    15ca:	e0f9      	b.n	17c0 <__aeabi_dadd+0x434>
    15cc:	1ab8      	subs	r0, r7, r2
    15ce:	4684      	mov	ip, r0
    15d0:	4287      	cmp	r7, r0
    15d2:	4180      	sbcs	r0, r0
    15d4:	1ae5      	subs	r5, r4, r3
    15d6:	4240      	negs	r0, r0
    15d8:	1a2d      	subs	r5, r5, r0
    15da:	0228      	lsls	r0, r5, #8
    15dc:	d400      	bmi.n	15e0 <__aeabi_dadd+0x254>
    15de:	e089      	b.n	16f4 <__aeabi_dadd+0x368>
    15e0:	1bd7      	subs	r7, r2, r7
    15e2:	42ba      	cmp	r2, r7
    15e4:	4192      	sbcs	r2, r2
    15e6:	1b1c      	subs	r4, r3, r4
    15e8:	4252      	negs	r2, r2
    15ea:	1aa5      	subs	r5, r4, r2
    15ec:	46d8      	mov	r8, fp
    15ee:	e729      	b.n	1444 <__aeabi_dadd+0xb8>
    15f0:	4645      	mov	r5, r8
    15f2:	2400      	movs	r4, #0
    15f4:	2700      	movs	r7, #0
    15f6:	e76a      	b.n	14ce <__aeabi_dadd+0x142>
    15f8:	4c45      	ldr	r4, [pc, #276]	; (1710 <__aeabi_dadd+0x384>)
    15fa:	1af6      	subs	r6, r6, r3
    15fc:	402c      	ands	r4, r5
    15fe:	e749      	b.n	1494 <__aeabi_dadd+0x108>
    1600:	003d      	movs	r5, r7
    1602:	3828      	subs	r0, #40	; 0x28
    1604:	4085      	lsls	r5, r0
    1606:	2700      	movs	r7, #0
    1608:	e72e      	b.n	1468 <__aeabi_dadd+0xdc>
    160a:	0038      	movs	r0, r7
    160c:	f001 fb04 	bl	2c18 <__clzsi2>
    1610:	3020      	adds	r0, #32
    1612:	e71d      	b.n	1450 <__aeabi_dadd+0xc4>
    1614:	430a      	orrs	r2, r1
    1616:	1e51      	subs	r1, r2, #1
    1618:	418a      	sbcs	r2, r1
    161a:	2100      	movs	r1, #0
    161c:	e707      	b.n	142e <__aeabi_dadd+0xa2>
    161e:	2b00      	cmp	r3, #0
    1620:	d000      	beq.n	1624 <__aeabi_dadd+0x298>
    1622:	e0f3      	b.n	180c <__aeabi_dadd+0x480>
    1624:	1c70      	adds	r0, r6, #1
    1626:	0543      	lsls	r3, r0, #21
    1628:	0d5b      	lsrs	r3, r3, #21
    162a:	2b01      	cmp	r3, #1
    162c:	dc00      	bgt.n	1630 <__aeabi_dadd+0x2a4>
    162e:	e0ad      	b.n	178c <__aeabi_dadd+0x400>
    1630:	4b36      	ldr	r3, [pc, #216]	; (170c <__aeabi_dadd+0x380>)
    1632:	4298      	cmp	r0, r3
    1634:	d100      	bne.n	1638 <__aeabi_dadd+0x2ac>
    1636:	e0d1      	b.n	17dc <__aeabi_dadd+0x450>
    1638:	18ba      	adds	r2, r7, r2
    163a:	42ba      	cmp	r2, r7
    163c:	41bf      	sbcs	r7, r7
    163e:	1864      	adds	r4, r4, r1
    1640:	427f      	negs	r7, r7
    1642:	19e4      	adds	r4, r4, r7
    1644:	07e7      	lsls	r7, r4, #31
    1646:	0852      	lsrs	r2, r2, #1
    1648:	4317      	orrs	r7, r2
    164a:	0864      	lsrs	r4, r4, #1
    164c:	0006      	movs	r6, r0
    164e:	e721      	b.n	1494 <__aeabi_dadd+0x108>
    1650:	482e      	ldr	r0, [pc, #184]	; (170c <__aeabi_dadd+0x380>)
    1652:	4285      	cmp	r5, r0
    1654:	d100      	bne.n	1658 <__aeabi_dadd+0x2cc>
    1656:	e093      	b.n	1780 <__aeabi_dadd+0x3f4>
    1658:	001d      	movs	r5, r3
    165a:	e6d0      	b.n	13fe <__aeabi_dadd+0x72>
    165c:	0029      	movs	r1, r5
    165e:	3e1f      	subs	r6, #31
    1660:	40f1      	lsrs	r1, r6
    1662:	2b20      	cmp	r3, #32
    1664:	d100      	bne.n	1668 <__aeabi_dadd+0x2dc>
    1666:	e08d      	b.n	1784 <__aeabi_dadd+0x3f8>
    1668:	2240      	movs	r2, #64	; 0x40
    166a:	1ad3      	subs	r3, r2, r3
    166c:	409d      	lsls	r5, r3
    166e:	432f      	orrs	r7, r5
    1670:	1e7d      	subs	r5, r7, #1
    1672:	41af      	sbcs	r7, r5
    1674:	2400      	movs	r4, #0
    1676:	430f      	orrs	r7, r1
    1678:	2600      	movs	r6, #0
    167a:	e744      	b.n	1506 <__aeabi_dadd+0x17a>
    167c:	002b      	movs	r3, r5
    167e:	0008      	movs	r0, r1
    1680:	3b20      	subs	r3, #32
    1682:	40d8      	lsrs	r0, r3
    1684:	0003      	movs	r3, r0
    1686:	2d20      	cmp	r5, #32
    1688:	d100      	bne.n	168c <__aeabi_dadd+0x300>
    168a:	e07d      	b.n	1788 <__aeabi_dadd+0x3fc>
    168c:	2040      	movs	r0, #64	; 0x40
    168e:	1b45      	subs	r5, r0, r5
    1690:	40a9      	lsls	r1, r5
    1692:	430a      	orrs	r2, r1
    1694:	1e51      	subs	r1, r2, #1
    1696:	418a      	sbcs	r2, r1
    1698:	2100      	movs	r1, #0
    169a:	431a      	orrs	r2, r3
    169c:	e6c7      	b.n	142e <__aeabi_dadd+0xa2>
    169e:	2e00      	cmp	r6, #0
    16a0:	d050      	beq.n	1744 <__aeabi_dadd+0x3b8>
    16a2:	4e1a      	ldr	r6, [pc, #104]	; (170c <__aeabi_dadd+0x380>)
    16a4:	42b0      	cmp	r0, r6
    16a6:	d057      	beq.n	1758 <__aeabi_dadd+0x3cc>
    16a8:	2680      	movs	r6, #128	; 0x80
    16aa:	426b      	negs	r3, r5
    16ac:	4699      	mov	r9, r3
    16ae:	0436      	lsls	r6, r6, #16
    16b0:	4334      	orrs	r4, r6
    16b2:	464b      	mov	r3, r9
    16b4:	2b38      	cmp	r3, #56	; 0x38
    16b6:	dd00      	ble.n	16ba <__aeabi_dadd+0x32e>
    16b8:	e0d6      	b.n	1868 <__aeabi_dadd+0x4dc>
    16ba:	2b1f      	cmp	r3, #31
    16bc:	dd00      	ble.n	16c0 <__aeabi_dadd+0x334>
    16be:	e135      	b.n	192c <__aeabi_dadd+0x5a0>
    16c0:	2620      	movs	r6, #32
    16c2:	1af5      	subs	r5, r6, r3
    16c4:	0026      	movs	r6, r4
    16c6:	40ae      	lsls	r6, r5
    16c8:	46b2      	mov	sl, r6
    16ca:	003e      	movs	r6, r7
    16cc:	40de      	lsrs	r6, r3
    16ce:	46ac      	mov	ip, r5
    16d0:	0035      	movs	r5, r6
    16d2:	4656      	mov	r6, sl
    16d4:	432e      	orrs	r6, r5
    16d6:	4665      	mov	r5, ip
    16d8:	40af      	lsls	r7, r5
    16da:	1e7d      	subs	r5, r7, #1
    16dc:	41af      	sbcs	r7, r5
    16de:	40dc      	lsrs	r4, r3
    16e0:	4337      	orrs	r7, r6
    16e2:	1bd7      	subs	r7, r2, r7
    16e4:	42ba      	cmp	r2, r7
    16e6:	4192      	sbcs	r2, r2
    16e8:	1b0c      	subs	r4, r1, r4
    16ea:	4252      	negs	r2, r2
    16ec:	1aa4      	subs	r4, r4, r2
    16ee:	0006      	movs	r6, r0
    16f0:	46d8      	mov	r8, fp
    16f2:	e6a3      	b.n	143c <__aeabi_dadd+0xb0>
    16f4:	4664      	mov	r4, ip
    16f6:	4667      	mov	r7, ip
    16f8:	432c      	orrs	r4, r5
    16fa:	d000      	beq.n	16fe <__aeabi_dadd+0x372>
    16fc:	e6a2      	b.n	1444 <__aeabi_dadd+0xb8>
    16fe:	2500      	movs	r5, #0
    1700:	2600      	movs	r6, #0
    1702:	2700      	movs	r7, #0
    1704:	e706      	b.n	1514 <__aeabi_dadd+0x188>
    1706:	001e      	movs	r6, r3
    1708:	e6c4      	b.n	1494 <__aeabi_dadd+0x108>
    170a:	46c0      	nop			; (mov r8, r8)
    170c:	000007ff 	.word	0x000007ff
    1710:	ff7fffff 	.word	0xff7fffff
    1714:	800fffff 	.word	0x800fffff
    1718:	2b1f      	cmp	r3, #31
    171a:	dc63      	bgt.n	17e4 <__aeabi_dadd+0x458>
    171c:	2020      	movs	r0, #32
    171e:	1ac3      	subs	r3, r0, r3
    1720:	0008      	movs	r0, r1
    1722:	4098      	lsls	r0, r3
    1724:	469c      	mov	ip, r3
    1726:	4683      	mov	fp, r0
    1728:	4653      	mov	r3, sl
    172a:	0010      	movs	r0, r2
    172c:	40d8      	lsrs	r0, r3
    172e:	0003      	movs	r3, r0
    1730:	4658      	mov	r0, fp
    1732:	4318      	orrs	r0, r3
    1734:	4663      	mov	r3, ip
    1736:	409a      	lsls	r2, r3
    1738:	1e53      	subs	r3, r2, #1
    173a:	419a      	sbcs	r2, r3
    173c:	4653      	mov	r3, sl
    173e:	4302      	orrs	r2, r0
    1740:	40d9      	lsrs	r1, r3
    1742:	e703      	b.n	154c <__aeabi_dadd+0x1c0>
    1744:	0026      	movs	r6, r4
    1746:	433e      	orrs	r6, r7
    1748:	d006      	beq.n	1758 <__aeabi_dadd+0x3cc>
    174a:	43eb      	mvns	r3, r5
    174c:	4699      	mov	r9, r3
    174e:	2b00      	cmp	r3, #0
    1750:	d0c7      	beq.n	16e2 <__aeabi_dadd+0x356>
    1752:	4e94      	ldr	r6, [pc, #592]	; (19a4 <__aeabi_dadd+0x618>)
    1754:	42b0      	cmp	r0, r6
    1756:	d1ac      	bne.n	16b2 <__aeabi_dadd+0x326>
    1758:	000c      	movs	r4, r1
    175a:	0017      	movs	r7, r2
    175c:	0006      	movs	r6, r0
    175e:	46d8      	mov	r8, fp
    1760:	e698      	b.n	1494 <__aeabi_dadd+0x108>
    1762:	4b90      	ldr	r3, [pc, #576]	; (19a4 <__aeabi_dadd+0x618>)
    1764:	459a      	cmp	sl, r3
    1766:	d00b      	beq.n	1780 <__aeabi_dadd+0x3f4>
    1768:	4682      	mov	sl, r0
    176a:	e6e7      	b.n	153c <__aeabi_dadd+0x1b0>
    176c:	2800      	cmp	r0, #0
    176e:	d000      	beq.n	1772 <__aeabi_dadd+0x3e6>
    1770:	e09e      	b.n	18b0 <__aeabi_dadd+0x524>
    1772:	0018      	movs	r0, r3
    1774:	4310      	orrs	r0, r2
    1776:	d100      	bne.n	177a <__aeabi_dadd+0x3ee>
    1778:	e0e9      	b.n	194e <__aeabi_dadd+0x5c2>
    177a:	001c      	movs	r4, r3
    177c:	0017      	movs	r7, r2
    177e:	46d8      	mov	r8, fp
    1780:	4e88      	ldr	r6, [pc, #544]	; (19a4 <__aeabi_dadd+0x618>)
    1782:	e687      	b.n	1494 <__aeabi_dadd+0x108>
    1784:	2500      	movs	r5, #0
    1786:	e772      	b.n	166e <__aeabi_dadd+0x2e2>
    1788:	2100      	movs	r1, #0
    178a:	e782      	b.n	1692 <__aeabi_dadd+0x306>
    178c:	0023      	movs	r3, r4
    178e:	433b      	orrs	r3, r7
    1790:	2e00      	cmp	r6, #0
    1792:	d000      	beq.n	1796 <__aeabi_dadd+0x40a>
    1794:	e0ab      	b.n	18ee <__aeabi_dadd+0x562>
    1796:	2b00      	cmp	r3, #0
    1798:	d100      	bne.n	179c <__aeabi_dadd+0x410>
    179a:	e0e7      	b.n	196c <__aeabi_dadd+0x5e0>
    179c:	000b      	movs	r3, r1
    179e:	4313      	orrs	r3, r2
    17a0:	d100      	bne.n	17a4 <__aeabi_dadd+0x418>
    17a2:	e677      	b.n	1494 <__aeabi_dadd+0x108>
    17a4:	18ba      	adds	r2, r7, r2
    17a6:	42ba      	cmp	r2, r7
    17a8:	41bf      	sbcs	r7, r7
    17aa:	1864      	adds	r4, r4, r1
    17ac:	427f      	negs	r7, r7
    17ae:	19e4      	adds	r4, r4, r7
    17b0:	0223      	lsls	r3, r4, #8
    17b2:	d400      	bmi.n	17b6 <__aeabi_dadd+0x42a>
    17b4:	e0f2      	b.n	199c <__aeabi_dadd+0x610>
    17b6:	4b7c      	ldr	r3, [pc, #496]	; (19a8 <__aeabi_dadd+0x61c>)
    17b8:	0017      	movs	r7, r2
    17ba:	401c      	ands	r4, r3
    17bc:	0006      	movs	r6, r0
    17be:	e669      	b.n	1494 <__aeabi_dadd+0x108>
    17c0:	0020      	movs	r0, r4
    17c2:	4338      	orrs	r0, r7
    17c4:	2e00      	cmp	r6, #0
    17c6:	d1d1      	bne.n	176c <__aeabi_dadd+0x3e0>
    17c8:	2800      	cmp	r0, #0
    17ca:	d15b      	bne.n	1884 <__aeabi_dadd+0x4f8>
    17cc:	001c      	movs	r4, r3
    17ce:	4314      	orrs	r4, r2
    17d0:	d100      	bne.n	17d4 <__aeabi_dadd+0x448>
    17d2:	e0a8      	b.n	1926 <__aeabi_dadd+0x59a>
    17d4:	001c      	movs	r4, r3
    17d6:	0017      	movs	r7, r2
    17d8:	46d8      	mov	r8, fp
    17da:	e65b      	b.n	1494 <__aeabi_dadd+0x108>
    17dc:	0006      	movs	r6, r0
    17de:	2400      	movs	r4, #0
    17e0:	2700      	movs	r7, #0
    17e2:	e697      	b.n	1514 <__aeabi_dadd+0x188>
    17e4:	4650      	mov	r0, sl
    17e6:	000b      	movs	r3, r1
    17e8:	3820      	subs	r0, #32
    17ea:	40c3      	lsrs	r3, r0
    17ec:	4699      	mov	r9, r3
    17ee:	4653      	mov	r3, sl
    17f0:	2b20      	cmp	r3, #32
    17f2:	d100      	bne.n	17f6 <__aeabi_dadd+0x46a>
    17f4:	e095      	b.n	1922 <__aeabi_dadd+0x596>
    17f6:	2340      	movs	r3, #64	; 0x40
    17f8:	4650      	mov	r0, sl
    17fa:	1a1b      	subs	r3, r3, r0
    17fc:	4099      	lsls	r1, r3
    17fe:	430a      	orrs	r2, r1
    1800:	1e51      	subs	r1, r2, #1
    1802:	418a      	sbcs	r2, r1
    1804:	464b      	mov	r3, r9
    1806:	2100      	movs	r1, #0
    1808:	431a      	orrs	r2, r3
    180a:	e69f      	b.n	154c <__aeabi_dadd+0x1c0>
    180c:	2e00      	cmp	r6, #0
    180e:	d130      	bne.n	1872 <__aeabi_dadd+0x4e6>
    1810:	0026      	movs	r6, r4
    1812:	433e      	orrs	r6, r7
    1814:	d067      	beq.n	18e6 <__aeabi_dadd+0x55a>
    1816:	43db      	mvns	r3, r3
    1818:	469a      	mov	sl, r3
    181a:	2b00      	cmp	r3, #0
    181c:	d01c      	beq.n	1858 <__aeabi_dadd+0x4cc>
    181e:	4e61      	ldr	r6, [pc, #388]	; (19a4 <__aeabi_dadd+0x618>)
    1820:	42b0      	cmp	r0, r6
    1822:	d060      	beq.n	18e6 <__aeabi_dadd+0x55a>
    1824:	4653      	mov	r3, sl
    1826:	2b38      	cmp	r3, #56	; 0x38
    1828:	dd00      	ble.n	182c <__aeabi_dadd+0x4a0>
    182a:	e096      	b.n	195a <__aeabi_dadd+0x5ce>
    182c:	2b1f      	cmp	r3, #31
    182e:	dd00      	ble.n	1832 <__aeabi_dadd+0x4a6>
    1830:	e09f      	b.n	1972 <__aeabi_dadd+0x5e6>
    1832:	2620      	movs	r6, #32
    1834:	1af3      	subs	r3, r6, r3
    1836:	0026      	movs	r6, r4
    1838:	409e      	lsls	r6, r3
    183a:	469c      	mov	ip, r3
    183c:	46b3      	mov	fp, r6
    183e:	4653      	mov	r3, sl
    1840:	003e      	movs	r6, r7
    1842:	40de      	lsrs	r6, r3
    1844:	0033      	movs	r3, r6
    1846:	465e      	mov	r6, fp
    1848:	431e      	orrs	r6, r3
    184a:	4663      	mov	r3, ip
    184c:	409f      	lsls	r7, r3
    184e:	1e7b      	subs	r3, r7, #1
    1850:	419f      	sbcs	r7, r3
    1852:	4653      	mov	r3, sl
    1854:	40dc      	lsrs	r4, r3
    1856:	4337      	orrs	r7, r6
    1858:	18bf      	adds	r7, r7, r2
    185a:	4297      	cmp	r7, r2
    185c:	4192      	sbcs	r2, r2
    185e:	1864      	adds	r4, r4, r1
    1860:	4252      	negs	r2, r2
    1862:	18a4      	adds	r4, r4, r2
    1864:	0006      	movs	r6, r0
    1866:	e678      	b.n	155a <__aeabi_dadd+0x1ce>
    1868:	4327      	orrs	r7, r4
    186a:	1e7c      	subs	r4, r7, #1
    186c:	41a7      	sbcs	r7, r4
    186e:	2400      	movs	r4, #0
    1870:	e737      	b.n	16e2 <__aeabi_dadd+0x356>
    1872:	4e4c      	ldr	r6, [pc, #304]	; (19a4 <__aeabi_dadd+0x618>)
    1874:	42b0      	cmp	r0, r6
    1876:	d036      	beq.n	18e6 <__aeabi_dadd+0x55a>
    1878:	2680      	movs	r6, #128	; 0x80
    187a:	425b      	negs	r3, r3
    187c:	0436      	lsls	r6, r6, #16
    187e:	469a      	mov	sl, r3
    1880:	4334      	orrs	r4, r6
    1882:	e7cf      	b.n	1824 <__aeabi_dadd+0x498>
    1884:	0018      	movs	r0, r3
    1886:	4310      	orrs	r0, r2
    1888:	d100      	bne.n	188c <__aeabi_dadd+0x500>
    188a:	e603      	b.n	1494 <__aeabi_dadd+0x108>
    188c:	1ab8      	subs	r0, r7, r2
    188e:	4684      	mov	ip, r0
    1890:	4567      	cmp	r7, ip
    1892:	41ad      	sbcs	r5, r5
    1894:	1ae0      	subs	r0, r4, r3
    1896:	426d      	negs	r5, r5
    1898:	1b40      	subs	r0, r0, r5
    189a:	0205      	lsls	r5, r0, #8
    189c:	d400      	bmi.n	18a0 <__aeabi_dadd+0x514>
    189e:	e62c      	b.n	14fa <__aeabi_dadd+0x16e>
    18a0:	1bd7      	subs	r7, r2, r7
    18a2:	42ba      	cmp	r2, r7
    18a4:	4192      	sbcs	r2, r2
    18a6:	1b1c      	subs	r4, r3, r4
    18a8:	4252      	negs	r2, r2
    18aa:	1aa4      	subs	r4, r4, r2
    18ac:	46d8      	mov	r8, fp
    18ae:	e5f1      	b.n	1494 <__aeabi_dadd+0x108>
    18b0:	0018      	movs	r0, r3
    18b2:	4310      	orrs	r0, r2
    18b4:	d100      	bne.n	18b8 <__aeabi_dadd+0x52c>
    18b6:	e763      	b.n	1780 <__aeabi_dadd+0x3f4>
    18b8:	08f8      	lsrs	r0, r7, #3
    18ba:	0767      	lsls	r7, r4, #29
    18bc:	4307      	orrs	r7, r0
    18be:	2080      	movs	r0, #128	; 0x80
    18c0:	08e4      	lsrs	r4, r4, #3
    18c2:	0300      	lsls	r0, r0, #12
    18c4:	4204      	tst	r4, r0
    18c6:	d008      	beq.n	18da <__aeabi_dadd+0x54e>
    18c8:	08dd      	lsrs	r5, r3, #3
    18ca:	4205      	tst	r5, r0
    18cc:	d105      	bne.n	18da <__aeabi_dadd+0x54e>
    18ce:	08d2      	lsrs	r2, r2, #3
    18d0:	0759      	lsls	r1, r3, #29
    18d2:	4311      	orrs	r1, r2
    18d4:	000f      	movs	r7, r1
    18d6:	002c      	movs	r4, r5
    18d8:	46d8      	mov	r8, fp
    18da:	0f7b      	lsrs	r3, r7, #29
    18dc:	00e4      	lsls	r4, r4, #3
    18de:	431c      	orrs	r4, r3
    18e0:	00ff      	lsls	r7, r7, #3
    18e2:	4e30      	ldr	r6, [pc, #192]	; (19a4 <__aeabi_dadd+0x618>)
    18e4:	e5d6      	b.n	1494 <__aeabi_dadd+0x108>
    18e6:	000c      	movs	r4, r1
    18e8:	0017      	movs	r7, r2
    18ea:	0006      	movs	r6, r0
    18ec:	e5d2      	b.n	1494 <__aeabi_dadd+0x108>
    18ee:	2b00      	cmp	r3, #0
    18f0:	d038      	beq.n	1964 <__aeabi_dadd+0x5d8>
    18f2:	000b      	movs	r3, r1
    18f4:	4313      	orrs	r3, r2
    18f6:	d100      	bne.n	18fa <__aeabi_dadd+0x56e>
    18f8:	e742      	b.n	1780 <__aeabi_dadd+0x3f4>
    18fa:	08f8      	lsrs	r0, r7, #3
    18fc:	0767      	lsls	r7, r4, #29
    18fe:	4307      	orrs	r7, r0
    1900:	2080      	movs	r0, #128	; 0x80
    1902:	08e4      	lsrs	r4, r4, #3
    1904:	0300      	lsls	r0, r0, #12
    1906:	4204      	tst	r4, r0
    1908:	d0e7      	beq.n	18da <__aeabi_dadd+0x54e>
    190a:	08cb      	lsrs	r3, r1, #3
    190c:	4203      	tst	r3, r0
    190e:	d1e4      	bne.n	18da <__aeabi_dadd+0x54e>
    1910:	08d2      	lsrs	r2, r2, #3
    1912:	0749      	lsls	r1, r1, #29
    1914:	4311      	orrs	r1, r2
    1916:	000f      	movs	r7, r1
    1918:	001c      	movs	r4, r3
    191a:	e7de      	b.n	18da <__aeabi_dadd+0x54e>
    191c:	2700      	movs	r7, #0
    191e:	2400      	movs	r4, #0
    1920:	e5d5      	b.n	14ce <__aeabi_dadd+0x142>
    1922:	2100      	movs	r1, #0
    1924:	e76b      	b.n	17fe <__aeabi_dadd+0x472>
    1926:	2500      	movs	r5, #0
    1928:	2700      	movs	r7, #0
    192a:	e5f3      	b.n	1514 <__aeabi_dadd+0x188>
    192c:	464e      	mov	r6, r9
    192e:	0025      	movs	r5, r4
    1930:	3e20      	subs	r6, #32
    1932:	40f5      	lsrs	r5, r6
    1934:	464b      	mov	r3, r9
    1936:	002e      	movs	r6, r5
    1938:	2b20      	cmp	r3, #32
    193a:	d02d      	beq.n	1998 <__aeabi_dadd+0x60c>
    193c:	2540      	movs	r5, #64	; 0x40
    193e:	1aed      	subs	r5, r5, r3
    1940:	40ac      	lsls	r4, r5
    1942:	4327      	orrs	r7, r4
    1944:	1e7c      	subs	r4, r7, #1
    1946:	41a7      	sbcs	r7, r4
    1948:	2400      	movs	r4, #0
    194a:	4337      	orrs	r7, r6
    194c:	e6c9      	b.n	16e2 <__aeabi_dadd+0x356>
    194e:	2480      	movs	r4, #128	; 0x80
    1950:	2500      	movs	r5, #0
    1952:	0324      	lsls	r4, r4, #12
    1954:	4e13      	ldr	r6, [pc, #76]	; (19a4 <__aeabi_dadd+0x618>)
    1956:	2700      	movs	r7, #0
    1958:	e5dc      	b.n	1514 <__aeabi_dadd+0x188>
    195a:	4327      	orrs	r7, r4
    195c:	1e7c      	subs	r4, r7, #1
    195e:	41a7      	sbcs	r7, r4
    1960:	2400      	movs	r4, #0
    1962:	e779      	b.n	1858 <__aeabi_dadd+0x4cc>
    1964:	000c      	movs	r4, r1
    1966:	0017      	movs	r7, r2
    1968:	4e0e      	ldr	r6, [pc, #56]	; (19a4 <__aeabi_dadd+0x618>)
    196a:	e593      	b.n	1494 <__aeabi_dadd+0x108>
    196c:	000c      	movs	r4, r1
    196e:	0017      	movs	r7, r2
    1970:	e590      	b.n	1494 <__aeabi_dadd+0x108>
    1972:	4656      	mov	r6, sl
    1974:	0023      	movs	r3, r4
    1976:	3e20      	subs	r6, #32
    1978:	40f3      	lsrs	r3, r6
    197a:	4699      	mov	r9, r3
    197c:	4653      	mov	r3, sl
    197e:	2b20      	cmp	r3, #32
    1980:	d00e      	beq.n	19a0 <__aeabi_dadd+0x614>
    1982:	2340      	movs	r3, #64	; 0x40
    1984:	4656      	mov	r6, sl
    1986:	1b9b      	subs	r3, r3, r6
    1988:	409c      	lsls	r4, r3
    198a:	4327      	orrs	r7, r4
    198c:	1e7c      	subs	r4, r7, #1
    198e:	41a7      	sbcs	r7, r4
    1990:	464b      	mov	r3, r9
    1992:	2400      	movs	r4, #0
    1994:	431f      	orrs	r7, r3
    1996:	e75f      	b.n	1858 <__aeabi_dadd+0x4cc>
    1998:	2400      	movs	r4, #0
    199a:	e7d2      	b.n	1942 <__aeabi_dadd+0x5b6>
    199c:	0017      	movs	r7, r2
    199e:	e5b2      	b.n	1506 <__aeabi_dadd+0x17a>
    19a0:	2400      	movs	r4, #0
    19a2:	e7f2      	b.n	198a <__aeabi_dadd+0x5fe>
    19a4:	000007ff 	.word	0x000007ff
    19a8:	ff7fffff 	.word	0xff7fffff

000019ac <__aeabi_ddiv>:
    19ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    19ae:	4657      	mov	r7, sl
    19b0:	4645      	mov	r5, r8
    19b2:	46de      	mov	lr, fp
    19b4:	464e      	mov	r6, r9
    19b6:	b5e0      	push	{r5, r6, r7, lr}
    19b8:	004c      	lsls	r4, r1, #1
    19ba:	030e      	lsls	r6, r1, #12
    19bc:	b087      	sub	sp, #28
    19be:	4683      	mov	fp, r0
    19c0:	4692      	mov	sl, r2
    19c2:	001d      	movs	r5, r3
    19c4:	4680      	mov	r8, r0
    19c6:	0b36      	lsrs	r6, r6, #12
    19c8:	0d64      	lsrs	r4, r4, #21
    19ca:	0fcf      	lsrs	r7, r1, #31
    19cc:	2c00      	cmp	r4, #0
    19ce:	d04f      	beq.n	1a70 <__aeabi_ddiv+0xc4>
    19d0:	4b6f      	ldr	r3, [pc, #444]	; (1b90 <__aeabi_ddiv+0x1e4>)
    19d2:	429c      	cmp	r4, r3
    19d4:	d035      	beq.n	1a42 <__aeabi_ddiv+0x96>
    19d6:	2380      	movs	r3, #128	; 0x80
    19d8:	0f42      	lsrs	r2, r0, #29
    19da:	041b      	lsls	r3, r3, #16
    19dc:	00f6      	lsls	r6, r6, #3
    19de:	4313      	orrs	r3, r2
    19e0:	4333      	orrs	r3, r6
    19e2:	4699      	mov	r9, r3
    19e4:	00c3      	lsls	r3, r0, #3
    19e6:	4698      	mov	r8, r3
    19e8:	4b6a      	ldr	r3, [pc, #424]	; (1b94 <__aeabi_ddiv+0x1e8>)
    19ea:	2600      	movs	r6, #0
    19ec:	469c      	mov	ip, r3
    19ee:	2300      	movs	r3, #0
    19f0:	4464      	add	r4, ip
    19f2:	9303      	str	r3, [sp, #12]
    19f4:	032b      	lsls	r3, r5, #12
    19f6:	0b1b      	lsrs	r3, r3, #12
    19f8:	469b      	mov	fp, r3
    19fa:	006b      	lsls	r3, r5, #1
    19fc:	0fed      	lsrs	r5, r5, #31
    19fe:	4650      	mov	r0, sl
    1a00:	0d5b      	lsrs	r3, r3, #21
    1a02:	9501      	str	r5, [sp, #4]
    1a04:	d05e      	beq.n	1ac4 <__aeabi_ddiv+0x118>
    1a06:	4a62      	ldr	r2, [pc, #392]	; (1b90 <__aeabi_ddiv+0x1e4>)
    1a08:	4293      	cmp	r3, r2
    1a0a:	d053      	beq.n	1ab4 <__aeabi_ddiv+0x108>
    1a0c:	465a      	mov	r2, fp
    1a0e:	00d1      	lsls	r1, r2, #3
    1a10:	2280      	movs	r2, #128	; 0x80
    1a12:	0f40      	lsrs	r0, r0, #29
    1a14:	0412      	lsls	r2, r2, #16
    1a16:	4302      	orrs	r2, r0
    1a18:	430a      	orrs	r2, r1
    1a1a:	4693      	mov	fp, r2
    1a1c:	4652      	mov	r2, sl
    1a1e:	00d1      	lsls	r1, r2, #3
    1a20:	4a5c      	ldr	r2, [pc, #368]	; (1b94 <__aeabi_ddiv+0x1e8>)
    1a22:	4694      	mov	ip, r2
    1a24:	2200      	movs	r2, #0
    1a26:	4463      	add	r3, ip
    1a28:	0038      	movs	r0, r7
    1a2a:	4068      	eors	r0, r5
    1a2c:	4684      	mov	ip, r0
    1a2e:	9002      	str	r0, [sp, #8]
    1a30:	1ae4      	subs	r4, r4, r3
    1a32:	4316      	orrs	r6, r2
    1a34:	2e0f      	cmp	r6, #15
    1a36:	d900      	bls.n	1a3a <__aeabi_ddiv+0x8e>
    1a38:	e0b4      	b.n	1ba4 <__aeabi_ddiv+0x1f8>
    1a3a:	4b57      	ldr	r3, [pc, #348]	; (1b98 <__aeabi_ddiv+0x1ec>)
    1a3c:	00b6      	lsls	r6, r6, #2
    1a3e:	599b      	ldr	r3, [r3, r6]
    1a40:	469f      	mov	pc, r3
    1a42:	0003      	movs	r3, r0
    1a44:	4333      	orrs	r3, r6
    1a46:	4699      	mov	r9, r3
    1a48:	d16c      	bne.n	1b24 <__aeabi_ddiv+0x178>
    1a4a:	2300      	movs	r3, #0
    1a4c:	4698      	mov	r8, r3
    1a4e:	3302      	adds	r3, #2
    1a50:	2608      	movs	r6, #8
    1a52:	9303      	str	r3, [sp, #12]
    1a54:	e7ce      	b.n	19f4 <__aeabi_ddiv+0x48>
    1a56:	46cb      	mov	fp, r9
    1a58:	4641      	mov	r1, r8
    1a5a:	9a03      	ldr	r2, [sp, #12]
    1a5c:	9701      	str	r7, [sp, #4]
    1a5e:	2a02      	cmp	r2, #2
    1a60:	d165      	bne.n	1b2e <__aeabi_ddiv+0x182>
    1a62:	9b01      	ldr	r3, [sp, #4]
    1a64:	4c4a      	ldr	r4, [pc, #296]	; (1b90 <__aeabi_ddiv+0x1e4>)
    1a66:	469c      	mov	ip, r3
    1a68:	2300      	movs	r3, #0
    1a6a:	2200      	movs	r2, #0
    1a6c:	4698      	mov	r8, r3
    1a6e:	e06b      	b.n	1b48 <__aeabi_ddiv+0x19c>
    1a70:	0003      	movs	r3, r0
    1a72:	4333      	orrs	r3, r6
    1a74:	4699      	mov	r9, r3
    1a76:	d04e      	beq.n	1b16 <__aeabi_ddiv+0x16a>
    1a78:	2e00      	cmp	r6, #0
    1a7a:	d100      	bne.n	1a7e <__aeabi_ddiv+0xd2>
    1a7c:	e1bc      	b.n	1df8 <__aeabi_ddiv+0x44c>
    1a7e:	0030      	movs	r0, r6
    1a80:	f001 f8ca 	bl	2c18 <__clzsi2>
    1a84:	0003      	movs	r3, r0
    1a86:	3b0b      	subs	r3, #11
    1a88:	2b1c      	cmp	r3, #28
    1a8a:	dd00      	ble.n	1a8e <__aeabi_ddiv+0xe2>
    1a8c:	e1ac      	b.n	1de8 <__aeabi_ddiv+0x43c>
    1a8e:	221d      	movs	r2, #29
    1a90:	1ad3      	subs	r3, r2, r3
    1a92:	465a      	mov	r2, fp
    1a94:	0001      	movs	r1, r0
    1a96:	40da      	lsrs	r2, r3
    1a98:	3908      	subs	r1, #8
    1a9a:	408e      	lsls	r6, r1
    1a9c:	0013      	movs	r3, r2
    1a9e:	4333      	orrs	r3, r6
    1aa0:	4699      	mov	r9, r3
    1aa2:	465b      	mov	r3, fp
    1aa4:	408b      	lsls	r3, r1
    1aa6:	4698      	mov	r8, r3
    1aa8:	2300      	movs	r3, #0
    1aaa:	4c3c      	ldr	r4, [pc, #240]	; (1b9c <__aeabi_ddiv+0x1f0>)
    1aac:	2600      	movs	r6, #0
    1aae:	1a24      	subs	r4, r4, r0
    1ab0:	9303      	str	r3, [sp, #12]
    1ab2:	e79f      	b.n	19f4 <__aeabi_ddiv+0x48>
    1ab4:	4651      	mov	r1, sl
    1ab6:	465a      	mov	r2, fp
    1ab8:	4311      	orrs	r1, r2
    1aba:	d129      	bne.n	1b10 <__aeabi_ddiv+0x164>
    1abc:	2200      	movs	r2, #0
    1abe:	4693      	mov	fp, r2
    1ac0:	3202      	adds	r2, #2
    1ac2:	e7b1      	b.n	1a28 <__aeabi_ddiv+0x7c>
    1ac4:	4659      	mov	r1, fp
    1ac6:	4301      	orrs	r1, r0
    1ac8:	d01e      	beq.n	1b08 <__aeabi_ddiv+0x15c>
    1aca:	465b      	mov	r3, fp
    1acc:	2b00      	cmp	r3, #0
    1ace:	d100      	bne.n	1ad2 <__aeabi_ddiv+0x126>
    1ad0:	e19e      	b.n	1e10 <__aeabi_ddiv+0x464>
    1ad2:	4658      	mov	r0, fp
    1ad4:	f001 f8a0 	bl	2c18 <__clzsi2>
    1ad8:	0003      	movs	r3, r0
    1ada:	3b0b      	subs	r3, #11
    1adc:	2b1c      	cmp	r3, #28
    1ade:	dd00      	ble.n	1ae2 <__aeabi_ddiv+0x136>
    1ae0:	e18f      	b.n	1e02 <__aeabi_ddiv+0x456>
    1ae2:	0002      	movs	r2, r0
    1ae4:	4659      	mov	r1, fp
    1ae6:	3a08      	subs	r2, #8
    1ae8:	4091      	lsls	r1, r2
    1aea:	468b      	mov	fp, r1
    1aec:	211d      	movs	r1, #29
    1aee:	1acb      	subs	r3, r1, r3
    1af0:	4651      	mov	r1, sl
    1af2:	40d9      	lsrs	r1, r3
    1af4:	000b      	movs	r3, r1
    1af6:	4659      	mov	r1, fp
    1af8:	430b      	orrs	r3, r1
    1afa:	4651      	mov	r1, sl
    1afc:	469b      	mov	fp, r3
    1afe:	4091      	lsls	r1, r2
    1b00:	4b26      	ldr	r3, [pc, #152]	; (1b9c <__aeabi_ddiv+0x1f0>)
    1b02:	2200      	movs	r2, #0
    1b04:	1a1b      	subs	r3, r3, r0
    1b06:	e78f      	b.n	1a28 <__aeabi_ddiv+0x7c>
    1b08:	2300      	movs	r3, #0
    1b0a:	2201      	movs	r2, #1
    1b0c:	469b      	mov	fp, r3
    1b0e:	e78b      	b.n	1a28 <__aeabi_ddiv+0x7c>
    1b10:	4651      	mov	r1, sl
    1b12:	2203      	movs	r2, #3
    1b14:	e788      	b.n	1a28 <__aeabi_ddiv+0x7c>
    1b16:	2300      	movs	r3, #0
    1b18:	4698      	mov	r8, r3
    1b1a:	3301      	adds	r3, #1
    1b1c:	2604      	movs	r6, #4
    1b1e:	2400      	movs	r4, #0
    1b20:	9303      	str	r3, [sp, #12]
    1b22:	e767      	b.n	19f4 <__aeabi_ddiv+0x48>
    1b24:	2303      	movs	r3, #3
    1b26:	46b1      	mov	r9, r6
    1b28:	9303      	str	r3, [sp, #12]
    1b2a:	260c      	movs	r6, #12
    1b2c:	e762      	b.n	19f4 <__aeabi_ddiv+0x48>
    1b2e:	2a03      	cmp	r2, #3
    1b30:	d100      	bne.n	1b34 <__aeabi_ddiv+0x188>
    1b32:	e25c      	b.n	1fee <__aeabi_ddiv+0x642>
    1b34:	9b01      	ldr	r3, [sp, #4]
    1b36:	2a01      	cmp	r2, #1
    1b38:	d000      	beq.n	1b3c <__aeabi_ddiv+0x190>
    1b3a:	e1e4      	b.n	1f06 <__aeabi_ddiv+0x55a>
    1b3c:	4013      	ands	r3, r2
    1b3e:	469c      	mov	ip, r3
    1b40:	2300      	movs	r3, #0
    1b42:	2400      	movs	r4, #0
    1b44:	2200      	movs	r2, #0
    1b46:	4698      	mov	r8, r3
    1b48:	2100      	movs	r1, #0
    1b4a:	0312      	lsls	r2, r2, #12
    1b4c:	0b13      	lsrs	r3, r2, #12
    1b4e:	0d0a      	lsrs	r2, r1, #20
    1b50:	0512      	lsls	r2, r2, #20
    1b52:	431a      	orrs	r2, r3
    1b54:	0523      	lsls	r3, r4, #20
    1b56:	4c12      	ldr	r4, [pc, #72]	; (1ba0 <__aeabi_ddiv+0x1f4>)
    1b58:	4640      	mov	r0, r8
    1b5a:	4022      	ands	r2, r4
    1b5c:	4313      	orrs	r3, r2
    1b5e:	4662      	mov	r2, ip
    1b60:	005b      	lsls	r3, r3, #1
    1b62:	07d2      	lsls	r2, r2, #31
    1b64:	085b      	lsrs	r3, r3, #1
    1b66:	4313      	orrs	r3, r2
    1b68:	0019      	movs	r1, r3
    1b6a:	b007      	add	sp, #28
    1b6c:	bc3c      	pop	{r2, r3, r4, r5}
    1b6e:	4690      	mov	r8, r2
    1b70:	4699      	mov	r9, r3
    1b72:	46a2      	mov	sl, r4
    1b74:	46ab      	mov	fp, r5
    1b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b78:	2300      	movs	r3, #0
    1b7a:	2280      	movs	r2, #128	; 0x80
    1b7c:	469c      	mov	ip, r3
    1b7e:	0312      	lsls	r2, r2, #12
    1b80:	4698      	mov	r8, r3
    1b82:	4c03      	ldr	r4, [pc, #12]	; (1b90 <__aeabi_ddiv+0x1e4>)
    1b84:	e7e0      	b.n	1b48 <__aeabi_ddiv+0x19c>
    1b86:	2300      	movs	r3, #0
    1b88:	4c01      	ldr	r4, [pc, #4]	; (1b90 <__aeabi_ddiv+0x1e4>)
    1b8a:	2200      	movs	r2, #0
    1b8c:	4698      	mov	r8, r3
    1b8e:	e7db      	b.n	1b48 <__aeabi_ddiv+0x19c>
    1b90:	000007ff 	.word	0x000007ff
    1b94:	fffffc01 	.word	0xfffffc01
    1b98:	00002cd4 	.word	0x00002cd4
    1b9c:	fffffc0d 	.word	0xfffffc0d
    1ba0:	800fffff 	.word	0x800fffff
    1ba4:	45d9      	cmp	r9, fp
    1ba6:	d900      	bls.n	1baa <__aeabi_ddiv+0x1fe>
    1ba8:	e139      	b.n	1e1e <__aeabi_ddiv+0x472>
    1baa:	d100      	bne.n	1bae <__aeabi_ddiv+0x202>
    1bac:	e134      	b.n	1e18 <__aeabi_ddiv+0x46c>
    1bae:	2300      	movs	r3, #0
    1bb0:	4646      	mov	r6, r8
    1bb2:	464d      	mov	r5, r9
    1bb4:	469a      	mov	sl, r3
    1bb6:	3c01      	subs	r4, #1
    1bb8:	465b      	mov	r3, fp
    1bba:	0e0a      	lsrs	r2, r1, #24
    1bbc:	021b      	lsls	r3, r3, #8
    1bbe:	431a      	orrs	r2, r3
    1bc0:	020b      	lsls	r3, r1, #8
    1bc2:	0c17      	lsrs	r7, r2, #16
    1bc4:	9303      	str	r3, [sp, #12]
    1bc6:	0413      	lsls	r3, r2, #16
    1bc8:	0c1b      	lsrs	r3, r3, #16
    1bca:	0039      	movs	r1, r7
    1bcc:	0028      	movs	r0, r5
    1bce:	4690      	mov	r8, r2
    1bd0:	9301      	str	r3, [sp, #4]
    1bd2:	f7ff fb4f 	bl	1274 <__udivsi3>
    1bd6:	0002      	movs	r2, r0
    1bd8:	9b01      	ldr	r3, [sp, #4]
    1bda:	4683      	mov	fp, r0
    1bdc:	435a      	muls	r2, r3
    1bde:	0028      	movs	r0, r5
    1be0:	0039      	movs	r1, r7
    1be2:	4691      	mov	r9, r2
    1be4:	f7ff fbcc 	bl	1380 <__aeabi_uidivmod>
    1be8:	0c35      	lsrs	r5, r6, #16
    1bea:	0409      	lsls	r1, r1, #16
    1bec:	430d      	orrs	r5, r1
    1bee:	45a9      	cmp	r9, r5
    1bf0:	d90d      	bls.n	1c0e <__aeabi_ddiv+0x262>
    1bf2:	465b      	mov	r3, fp
    1bf4:	4445      	add	r5, r8
    1bf6:	3b01      	subs	r3, #1
    1bf8:	45a8      	cmp	r8, r5
    1bfa:	d900      	bls.n	1bfe <__aeabi_ddiv+0x252>
    1bfc:	e13a      	b.n	1e74 <__aeabi_ddiv+0x4c8>
    1bfe:	45a9      	cmp	r9, r5
    1c00:	d800      	bhi.n	1c04 <__aeabi_ddiv+0x258>
    1c02:	e137      	b.n	1e74 <__aeabi_ddiv+0x4c8>
    1c04:	2302      	movs	r3, #2
    1c06:	425b      	negs	r3, r3
    1c08:	469c      	mov	ip, r3
    1c0a:	4445      	add	r5, r8
    1c0c:	44e3      	add	fp, ip
    1c0e:	464b      	mov	r3, r9
    1c10:	1aeb      	subs	r3, r5, r3
    1c12:	0039      	movs	r1, r7
    1c14:	0018      	movs	r0, r3
    1c16:	9304      	str	r3, [sp, #16]
    1c18:	f7ff fb2c 	bl	1274 <__udivsi3>
    1c1c:	9b01      	ldr	r3, [sp, #4]
    1c1e:	0005      	movs	r5, r0
    1c20:	4343      	muls	r3, r0
    1c22:	0039      	movs	r1, r7
    1c24:	9804      	ldr	r0, [sp, #16]
    1c26:	4699      	mov	r9, r3
    1c28:	f7ff fbaa 	bl	1380 <__aeabi_uidivmod>
    1c2c:	0433      	lsls	r3, r6, #16
    1c2e:	0409      	lsls	r1, r1, #16
    1c30:	0c1b      	lsrs	r3, r3, #16
    1c32:	430b      	orrs	r3, r1
    1c34:	4599      	cmp	r9, r3
    1c36:	d909      	bls.n	1c4c <__aeabi_ddiv+0x2a0>
    1c38:	4443      	add	r3, r8
    1c3a:	1e6a      	subs	r2, r5, #1
    1c3c:	4598      	cmp	r8, r3
    1c3e:	d900      	bls.n	1c42 <__aeabi_ddiv+0x296>
    1c40:	e11a      	b.n	1e78 <__aeabi_ddiv+0x4cc>
    1c42:	4599      	cmp	r9, r3
    1c44:	d800      	bhi.n	1c48 <__aeabi_ddiv+0x29c>
    1c46:	e117      	b.n	1e78 <__aeabi_ddiv+0x4cc>
    1c48:	3d02      	subs	r5, #2
    1c4a:	4443      	add	r3, r8
    1c4c:	464a      	mov	r2, r9
    1c4e:	1a9b      	subs	r3, r3, r2
    1c50:	465a      	mov	r2, fp
    1c52:	0412      	lsls	r2, r2, #16
    1c54:	432a      	orrs	r2, r5
    1c56:	9903      	ldr	r1, [sp, #12]
    1c58:	4693      	mov	fp, r2
    1c5a:	0c10      	lsrs	r0, r2, #16
    1c5c:	0c0a      	lsrs	r2, r1, #16
    1c5e:	4691      	mov	r9, r2
    1c60:	0409      	lsls	r1, r1, #16
    1c62:	465a      	mov	r2, fp
    1c64:	0c09      	lsrs	r1, r1, #16
    1c66:	464e      	mov	r6, r9
    1c68:	000d      	movs	r5, r1
    1c6a:	0412      	lsls	r2, r2, #16
    1c6c:	0c12      	lsrs	r2, r2, #16
    1c6e:	4345      	muls	r5, r0
    1c70:	9105      	str	r1, [sp, #20]
    1c72:	4351      	muls	r1, r2
    1c74:	4372      	muls	r2, r6
    1c76:	4370      	muls	r0, r6
    1c78:	1952      	adds	r2, r2, r5
    1c7a:	0c0e      	lsrs	r6, r1, #16
    1c7c:	18b2      	adds	r2, r6, r2
    1c7e:	4295      	cmp	r5, r2
    1c80:	d903      	bls.n	1c8a <__aeabi_ddiv+0x2de>
    1c82:	2580      	movs	r5, #128	; 0x80
    1c84:	026d      	lsls	r5, r5, #9
    1c86:	46ac      	mov	ip, r5
    1c88:	4460      	add	r0, ip
    1c8a:	0c15      	lsrs	r5, r2, #16
    1c8c:	0409      	lsls	r1, r1, #16
    1c8e:	0412      	lsls	r2, r2, #16
    1c90:	0c09      	lsrs	r1, r1, #16
    1c92:	1828      	adds	r0, r5, r0
    1c94:	1852      	adds	r2, r2, r1
    1c96:	4283      	cmp	r3, r0
    1c98:	d200      	bcs.n	1c9c <__aeabi_ddiv+0x2f0>
    1c9a:	e0ce      	b.n	1e3a <__aeabi_ddiv+0x48e>
    1c9c:	d100      	bne.n	1ca0 <__aeabi_ddiv+0x2f4>
    1c9e:	e0c8      	b.n	1e32 <__aeabi_ddiv+0x486>
    1ca0:	1a1d      	subs	r5, r3, r0
    1ca2:	4653      	mov	r3, sl
    1ca4:	1a9e      	subs	r6, r3, r2
    1ca6:	45b2      	cmp	sl, r6
    1ca8:	4192      	sbcs	r2, r2
    1caa:	4252      	negs	r2, r2
    1cac:	1aab      	subs	r3, r5, r2
    1cae:	469a      	mov	sl, r3
    1cb0:	4598      	cmp	r8, r3
    1cb2:	d100      	bne.n	1cb6 <__aeabi_ddiv+0x30a>
    1cb4:	e117      	b.n	1ee6 <__aeabi_ddiv+0x53a>
    1cb6:	0039      	movs	r1, r7
    1cb8:	0018      	movs	r0, r3
    1cba:	f7ff fadb 	bl	1274 <__udivsi3>
    1cbe:	9b01      	ldr	r3, [sp, #4]
    1cc0:	0005      	movs	r5, r0
    1cc2:	4343      	muls	r3, r0
    1cc4:	0039      	movs	r1, r7
    1cc6:	4650      	mov	r0, sl
    1cc8:	9304      	str	r3, [sp, #16]
    1cca:	f7ff fb59 	bl	1380 <__aeabi_uidivmod>
    1cce:	9804      	ldr	r0, [sp, #16]
    1cd0:	040b      	lsls	r3, r1, #16
    1cd2:	0c31      	lsrs	r1, r6, #16
    1cd4:	4319      	orrs	r1, r3
    1cd6:	4288      	cmp	r0, r1
    1cd8:	d909      	bls.n	1cee <__aeabi_ddiv+0x342>
    1cda:	4441      	add	r1, r8
    1cdc:	1e6b      	subs	r3, r5, #1
    1cde:	4588      	cmp	r8, r1
    1ce0:	d900      	bls.n	1ce4 <__aeabi_ddiv+0x338>
    1ce2:	e107      	b.n	1ef4 <__aeabi_ddiv+0x548>
    1ce4:	4288      	cmp	r0, r1
    1ce6:	d800      	bhi.n	1cea <__aeabi_ddiv+0x33e>
    1ce8:	e104      	b.n	1ef4 <__aeabi_ddiv+0x548>
    1cea:	3d02      	subs	r5, #2
    1cec:	4441      	add	r1, r8
    1cee:	9b04      	ldr	r3, [sp, #16]
    1cf0:	1acb      	subs	r3, r1, r3
    1cf2:	0018      	movs	r0, r3
    1cf4:	0039      	movs	r1, r7
    1cf6:	9304      	str	r3, [sp, #16]
    1cf8:	f7ff fabc 	bl	1274 <__udivsi3>
    1cfc:	9b01      	ldr	r3, [sp, #4]
    1cfe:	4682      	mov	sl, r0
    1d00:	4343      	muls	r3, r0
    1d02:	0039      	movs	r1, r7
    1d04:	9804      	ldr	r0, [sp, #16]
    1d06:	9301      	str	r3, [sp, #4]
    1d08:	f7ff fb3a 	bl	1380 <__aeabi_uidivmod>
    1d0c:	9801      	ldr	r0, [sp, #4]
    1d0e:	040b      	lsls	r3, r1, #16
    1d10:	0431      	lsls	r1, r6, #16
    1d12:	0c09      	lsrs	r1, r1, #16
    1d14:	4319      	orrs	r1, r3
    1d16:	4288      	cmp	r0, r1
    1d18:	d90d      	bls.n	1d36 <__aeabi_ddiv+0x38a>
    1d1a:	4653      	mov	r3, sl
    1d1c:	4441      	add	r1, r8
    1d1e:	3b01      	subs	r3, #1
    1d20:	4588      	cmp	r8, r1
    1d22:	d900      	bls.n	1d26 <__aeabi_ddiv+0x37a>
    1d24:	e0e8      	b.n	1ef8 <__aeabi_ddiv+0x54c>
    1d26:	4288      	cmp	r0, r1
    1d28:	d800      	bhi.n	1d2c <__aeabi_ddiv+0x380>
    1d2a:	e0e5      	b.n	1ef8 <__aeabi_ddiv+0x54c>
    1d2c:	2302      	movs	r3, #2
    1d2e:	425b      	negs	r3, r3
    1d30:	469c      	mov	ip, r3
    1d32:	4441      	add	r1, r8
    1d34:	44e2      	add	sl, ip
    1d36:	9b01      	ldr	r3, [sp, #4]
    1d38:	042d      	lsls	r5, r5, #16
    1d3a:	1ace      	subs	r6, r1, r3
    1d3c:	4651      	mov	r1, sl
    1d3e:	4329      	orrs	r1, r5
    1d40:	9d05      	ldr	r5, [sp, #20]
    1d42:	464f      	mov	r7, r9
    1d44:	002a      	movs	r2, r5
    1d46:	040b      	lsls	r3, r1, #16
    1d48:	0c08      	lsrs	r0, r1, #16
    1d4a:	0c1b      	lsrs	r3, r3, #16
    1d4c:	435a      	muls	r2, r3
    1d4e:	4345      	muls	r5, r0
    1d50:	437b      	muls	r3, r7
    1d52:	4378      	muls	r0, r7
    1d54:	195b      	adds	r3, r3, r5
    1d56:	0c17      	lsrs	r7, r2, #16
    1d58:	18fb      	adds	r3, r7, r3
    1d5a:	429d      	cmp	r5, r3
    1d5c:	d903      	bls.n	1d66 <__aeabi_ddiv+0x3ba>
    1d5e:	2580      	movs	r5, #128	; 0x80
    1d60:	026d      	lsls	r5, r5, #9
    1d62:	46ac      	mov	ip, r5
    1d64:	4460      	add	r0, ip
    1d66:	0c1d      	lsrs	r5, r3, #16
    1d68:	0412      	lsls	r2, r2, #16
    1d6a:	041b      	lsls	r3, r3, #16
    1d6c:	0c12      	lsrs	r2, r2, #16
    1d6e:	1828      	adds	r0, r5, r0
    1d70:	189b      	adds	r3, r3, r2
    1d72:	4286      	cmp	r6, r0
    1d74:	d200      	bcs.n	1d78 <__aeabi_ddiv+0x3cc>
    1d76:	e093      	b.n	1ea0 <__aeabi_ddiv+0x4f4>
    1d78:	d100      	bne.n	1d7c <__aeabi_ddiv+0x3d0>
    1d7a:	e08e      	b.n	1e9a <__aeabi_ddiv+0x4ee>
    1d7c:	2301      	movs	r3, #1
    1d7e:	4319      	orrs	r1, r3
    1d80:	4ba0      	ldr	r3, [pc, #640]	; (2004 <STACK_SIZE+0x4>)
    1d82:	18e3      	adds	r3, r4, r3
    1d84:	2b00      	cmp	r3, #0
    1d86:	dc00      	bgt.n	1d8a <__aeabi_ddiv+0x3de>
    1d88:	e099      	b.n	1ebe <__aeabi_ddiv+0x512>
    1d8a:	074a      	lsls	r2, r1, #29
    1d8c:	d000      	beq.n	1d90 <__aeabi_ddiv+0x3e4>
    1d8e:	e09e      	b.n	1ece <__aeabi_ddiv+0x522>
    1d90:	465a      	mov	r2, fp
    1d92:	01d2      	lsls	r2, r2, #7
    1d94:	d506      	bpl.n	1da4 <__aeabi_ddiv+0x3f8>
    1d96:	465a      	mov	r2, fp
    1d98:	4b9b      	ldr	r3, [pc, #620]	; (2008 <STACK_SIZE+0x8>)
    1d9a:	401a      	ands	r2, r3
    1d9c:	2380      	movs	r3, #128	; 0x80
    1d9e:	4693      	mov	fp, r2
    1da0:	00db      	lsls	r3, r3, #3
    1da2:	18e3      	adds	r3, r4, r3
    1da4:	4a99      	ldr	r2, [pc, #612]	; (200c <STACK_SIZE+0xc>)
    1da6:	4293      	cmp	r3, r2
    1da8:	dd68      	ble.n	1e7c <__aeabi_ddiv+0x4d0>
    1daa:	2301      	movs	r3, #1
    1dac:	9a02      	ldr	r2, [sp, #8]
    1dae:	4c98      	ldr	r4, [pc, #608]	; (2010 <STACK_SIZE+0x10>)
    1db0:	401a      	ands	r2, r3
    1db2:	2300      	movs	r3, #0
    1db4:	4694      	mov	ip, r2
    1db6:	4698      	mov	r8, r3
    1db8:	2200      	movs	r2, #0
    1dba:	e6c5      	b.n	1b48 <__aeabi_ddiv+0x19c>
    1dbc:	2280      	movs	r2, #128	; 0x80
    1dbe:	464b      	mov	r3, r9
    1dc0:	0312      	lsls	r2, r2, #12
    1dc2:	4213      	tst	r3, r2
    1dc4:	d00a      	beq.n	1ddc <__aeabi_ddiv+0x430>
    1dc6:	465b      	mov	r3, fp
    1dc8:	4213      	tst	r3, r2
    1dca:	d106      	bne.n	1dda <__aeabi_ddiv+0x42e>
    1dcc:	431a      	orrs	r2, r3
    1dce:	0312      	lsls	r2, r2, #12
    1dd0:	0b12      	lsrs	r2, r2, #12
    1dd2:	46ac      	mov	ip, r5
    1dd4:	4688      	mov	r8, r1
    1dd6:	4c8e      	ldr	r4, [pc, #568]	; (2010 <STACK_SIZE+0x10>)
    1dd8:	e6b6      	b.n	1b48 <__aeabi_ddiv+0x19c>
    1dda:	464b      	mov	r3, r9
    1ddc:	431a      	orrs	r2, r3
    1dde:	0312      	lsls	r2, r2, #12
    1de0:	0b12      	lsrs	r2, r2, #12
    1de2:	46bc      	mov	ip, r7
    1de4:	4c8a      	ldr	r4, [pc, #552]	; (2010 <STACK_SIZE+0x10>)
    1de6:	e6af      	b.n	1b48 <__aeabi_ddiv+0x19c>
    1de8:	0003      	movs	r3, r0
    1dea:	465a      	mov	r2, fp
    1dec:	3b28      	subs	r3, #40	; 0x28
    1dee:	409a      	lsls	r2, r3
    1df0:	2300      	movs	r3, #0
    1df2:	4691      	mov	r9, r2
    1df4:	4698      	mov	r8, r3
    1df6:	e657      	b.n	1aa8 <__aeabi_ddiv+0xfc>
    1df8:	4658      	mov	r0, fp
    1dfa:	f000 ff0d 	bl	2c18 <__clzsi2>
    1dfe:	3020      	adds	r0, #32
    1e00:	e640      	b.n	1a84 <__aeabi_ddiv+0xd8>
    1e02:	0003      	movs	r3, r0
    1e04:	4652      	mov	r2, sl
    1e06:	3b28      	subs	r3, #40	; 0x28
    1e08:	409a      	lsls	r2, r3
    1e0a:	2100      	movs	r1, #0
    1e0c:	4693      	mov	fp, r2
    1e0e:	e677      	b.n	1b00 <__aeabi_ddiv+0x154>
    1e10:	f000 ff02 	bl	2c18 <__clzsi2>
    1e14:	3020      	adds	r0, #32
    1e16:	e65f      	b.n	1ad8 <__aeabi_ddiv+0x12c>
    1e18:	4588      	cmp	r8, r1
    1e1a:	d200      	bcs.n	1e1e <__aeabi_ddiv+0x472>
    1e1c:	e6c7      	b.n	1bae <__aeabi_ddiv+0x202>
    1e1e:	464b      	mov	r3, r9
    1e20:	07de      	lsls	r6, r3, #31
    1e22:	085d      	lsrs	r5, r3, #1
    1e24:	4643      	mov	r3, r8
    1e26:	085b      	lsrs	r3, r3, #1
    1e28:	431e      	orrs	r6, r3
    1e2a:	4643      	mov	r3, r8
    1e2c:	07db      	lsls	r3, r3, #31
    1e2e:	469a      	mov	sl, r3
    1e30:	e6c2      	b.n	1bb8 <__aeabi_ddiv+0x20c>
    1e32:	2500      	movs	r5, #0
    1e34:	4592      	cmp	sl, r2
    1e36:	d300      	bcc.n	1e3a <__aeabi_ddiv+0x48e>
    1e38:	e733      	b.n	1ca2 <__aeabi_ddiv+0x2f6>
    1e3a:	9e03      	ldr	r6, [sp, #12]
    1e3c:	4659      	mov	r1, fp
    1e3e:	46b4      	mov	ip, r6
    1e40:	44e2      	add	sl, ip
    1e42:	45b2      	cmp	sl, r6
    1e44:	41ad      	sbcs	r5, r5
    1e46:	426d      	negs	r5, r5
    1e48:	4445      	add	r5, r8
    1e4a:	18eb      	adds	r3, r5, r3
    1e4c:	3901      	subs	r1, #1
    1e4e:	4598      	cmp	r8, r3
    1e50:	d207      	bcs.n	1e62 <__aeabi_ddiv+0x4b6>
    1e52:	4298      	cmp	r0, r3
    1e54:	d900      	bls.n	1e58 <__aeabi_ddiv+0x4ac>
    1e56:	e07f      	b.n	1f58 <__aeabi_ddiv+0x5ac>
    1e58:	d100      	bne.n	1e5c <__aeabi_ddiv+0x4b0>
    1e5a:	e0bc      	b.n	1fd6 <__aeabi_ddiv+0x62a>
    1e5c:	1a1d      	subs	r5, r3, r0
    1e5e:	468b      	mov	fp, r1
    1e60:	e71f      	b.n	1ca2 <__aeabi_ddiv+0x2f6>
    1e62:	4598      	cmp	r8, r3
    1e64:	d1fa      	bne.n	1e5c <__aeabi_ddiv+0x4b0>
    1e66:	9d03      	ldr	r5, [sp, #12]
    1e68:	4555      	cmp	r5, sl
    1e6a:	d9f2      	bls.n	1e52 <__aeabi_ddiv+0x4a6>
    1e6c:	4643      	mov	r3, r8
    1e6e:	468b      	mov	fp, r1
    1e70:	1a1d      	subs	r5, r3, r0
    1e72:	e716      	b.n	1ca2 <__aeabi_ddiv+0x2f6>
    1e74:	469b      	mov	fp, r3
    1e76:	e6ca      	b.n	1c0e <__aeabi_ddiv+0x262>
    1e78:	0015      	movs	r5, r2
    1e7a:	e6e7      	b.n	1c4c <__aeabi_ddiv+0x2a0>
    1e7c:	465a      	mov	r2, fp
    1e7e:	08c9      	lsrs	r1, r1, #3
    1e80:	0752      	lsls	r2, r2, #29
    1e82:	430a      	orrs	r2, r1
    1e84:	055b      	lsls	r3, r3, #21
    1e86:	4690      	mov	r8, r2
    1e88:	0d5c      	lsrs	r4, r3, #21
    1e8a:	465a      	mov	r2, fp
    1e8c:	2301      	movs	r3, #1
    1e8e:	9902      	ldr	r1, [sp, #8]
    1e90:	0252      	lsls	r2, r2, #9
    1e92:	4019      	ands	r1, r3
    1e94:	0b12      	lsrs	r2, r2, #12
    1e96:	468c      	mov	ip, r1
    1e98:	e656      	b.n	1b48 <__aeabi_ddiv+0x19c>
    1e9a:	2b00      	cmp	r3, #0
    1e9c:	d100      	bne.n	1ea0 <__aeabi_ddiv+0x4f4>
    1e9e:	e76f      	b.n	1d80 <__aeabi_ddiv+0x3d4>
    1ea0:	4446      	add	r6, r8
    1ea2:	1e4a      	subs	r2, r1, #1
    1ea4:	45b0      	cmp	r8, r6
    1ea6:	d929      	bls.n	1efc <__aeabi_ddiv+0x550>
    1ea8:	0011      	movs	r1, r2
    1eaa:	4286      	cmp	r6, r0
    1eac:	d000      	beq.n	1eb0 <__aeabi_ddiv+0x504>
    1eae:	e765      	b.n	1d7c <__aeabi_ddiv+0x3d0>
    1eb0:	9a03      	ldr	r2, [sp, #12]
    1eb2:	4293      	cmp	r3, r2
    1eb4:	d000      	beq.n	1eb8 <__aeabi_ddiv+0x50c>
    1eb6:	e761      	b.n	1d7c <__aeabi_ddiv+0x3d0>
    1eb8:	e762      	b.n	1d80 <__aeabi_ddiv+0x3d4>
    1eba:	2101      	movs	r1, #1
    1ebc:	4249      	negs	r1, r1
    1ebe:	2001      	movs	r0, #1
    1ec0:	1ac2      	subs	r2, r0, r3
    1ec2:	2a38      	cmp	r2, #56	; 0x38
    1ec4:	dd21      	ble.n	1f0a <__aeabi_ddiv+0x55e>
    1ec6:	9b02      	ldr	r3, [sp, #8]
    1ec8:	4003      	ands	r3, r0
    1eca:	469c      	mov	ip, r3
    1ecc:	e638      	b.n	1b40 <__aeabi_ddiv+0x194>
    1ece:	220f      	movs	r2, #15
    1ed0:	400a      	ands	r2, r1
    1ed2:	2a04      	cmp	r2, #4
    1ed4:	d100      	bne.n	1ed8 <__aeabi_ddiv+0x52c>
    1ed6:	e75b      	b.n	1d90 <__aeabi_ddiv+0x3e4>
    1ed8:	000a      	movs	r2, r1
    1eda:	1d11      	adds	r1, r2, #4
    1edc:	4291      	cmp	r1, r2
    1ede:	4192      	sbcs	r2, r2
    1ee0:	4252      	negs	r2, r2
    1ee2:	4493      	add	fp, r2
    1ee4:	e754      	b.n	1d90 <__aeabi_ddiv+0x3e4>
    1ee6:	4b47      	ldr	r3, [pc, #284]	; (2004 <STACK_SIZE+0x4>)
    1ee8:	18e3      	adds	r3, r4, r3
    1eea:	2b00      	cmp	r3, #0
    1eec:	dde5      	ble.n	1eba <__aeabi_ddiv+0x50e>
    1eee:	2201      	movs	r2, #1
    1ef0:	4252      	negs	r2, r2
    1ef2:	e7f2      	b.n	1eda <__aeabi_ddiv+0x52e>
    1ef4:	001d      	movs	r5, r3
    1ef6:	e6fa      	b.n	1cee <__aeabi_ddiv+0x342>
    1ef8:	469a      	mov	sl, r3
    1efa:	e71c      	b.n	1d36 <__aeabi_ddiv+0x38a>
    1efc:	42b0      	cmp	r0, r6
    1efe:	d839      	bhi.n	1f74 <__aeabi_ddiv+0x5c8>
    1f00:	d06e      	beq.n	1fe0 <__aeabi_ddiv+0x634>
    1f02:	0011      	movs	r1, r2
    1f04:	e73a      	b.n	1d7c <__aeabi_ddiv+0x3d0>
    1f06:	9302      	str	r3, [sp, #8]
    1f08:	e73a      	b.n	1d80 <__aeabi_ddiv+0x3d4>
    1f0a:	2a1f      	cmp	r2, #31
    1f0c:	dc3c      	bgt.n	1f88 <__aeabi_ddiv+0x5dc>
    1f0e:	2320      	movs	r3, #32
    1f10:	1a9b      	subs	r3, r3, r2
    1f12:	000c      	movs	r4, r1
    1f14:	4658      	mov	r0, fp
    1f16:	4099      	lsls	r1, r3
    1f18:	4098      	lsls	r0, r3
    1f1a:	1e4b      	subs	r3, r1, #1
    1f1c:	4199      	sbcs	r1, r3
    1f1e:	465b      	mov	r3, fp
    1f20:	40d4      	lsrs	r4, r2
    1f22:	40d3      	lsrs	r3, r2
    1f24:	4320      	orrs	r0, r4
    1f26:	4308      	orrs	r0, r1
    1f28:	001a      	movs	r2, r3
    1f2a:	0743      	lsls	r3, r0, #29
    1f2c:	d009      	beq.n	1f42 <__aeabi_ddiv+0x596>
    1f2e:	230f      	movs	r3, #15
    1f30:	4003      	ands	r3, r0
    1f32:	2b04      	cmp	r3, #4
    1f34:	d005      	beq.n	1f42 <__aeabi_ddiv+0x596>
    1f36:	0001      	movs	r1, r0
    1f38:	1d08      	adds	r0, r1, #4
    1f3a:	4288      	cmp	r0, r1
    1f3c:	419b      	sbcs	r3, r3
    1f3e:	425b      	negs	r3, r3
    1f40:	18d2      	adds	r2, r2, r3
    1f42:	0213      	lsls	r3, r2, #8
    1f44:	d53a      	bpl.n	1fbc <__aeabi_ddiv+0x610>
    1f46:	2301      	movs	r3, #1
    1f48:	9a02      	ldr	r2, [sp, #8]
    1f4a:	2401      	movs	r4, #1
    1f4c:	401a      	ands	r2, r3
    1f4e:	2300      	movs	r3, #0
    1f50:	4694      	mov	ip, r2
    1f52:	4698      	mov	r8, r3
    1f54:	2200      	movs	r2, #0
    1f56:	e5f7      	b.n	1b48 <__aeabi_ddiv+0x19c>
    1f58:	2102      	movs	r1, #2
    1f5a:	4249      	negs	r1, r1
    1f5c:	468c      	mov	ip, r1
    1f5e:	9d03      	ldr	r5, [sp, #12]
    1f60:	44e3      	add	fp, ip
    1f62:	46ac      	mov	ip, r5
    1f64:	44e2      	add	sl, ip
    1f66:	45aa      	cmp	sl, r5
    1f68:	41ad      	sbcs	r5, r5
    1f6a:	426d      	negs	r5, r5
    1f6c:	4445      	add	r5, r8
    1f6e:	18ed      	adds	r5, r5, r3
    1f70:	1a2d      	subs	r5, r5, r0
    1f72:	e696      	b.n	1ca2 <__aeabi_ddiv+0x2f6>
    1f74:	1e8a      	subs	r2, r1, #2
    1f76:	9903      	ldr	r1, [sp, #12]
    1f78:	004d      	lsls	r5, r1, #1
    1f7a:	428d      	cmp	r5, r1
    1f7c:	4189      	sbcs	r1, r1
    1f7e:	4249      	negs	r1, r1
    1f80:	4441      	add	r1, r8
    1f82:	1876      	adds	r6, r6, r1
    1f84:	9503      	str	r5, [sp, #12]
    1f86:	e78f      	b.n	1ea8 <__aeabi_ddiv+0x4fc>
    1f88:	201f      	movs	r0, #31
    1f8a:	4240      	negs	r0, r0
    1f8c:	1ac3      	subs	r3, r0, r3
    1f8e:	4658      	mov	r0, fp
    1f90:	40d8      	lsrs	r0, r3
    1f92:	0003      	movs	r3, r0
    1f94:	2a20      	cmp	r2, #32
    1f96:	d028      	beq.n	1fea <__aeabi_ddiv+0x63e>
    1f98:	2040      	movs	r0, #64	; 0x40
    1f9a:	465d      	mov	r5, fp
    1f9c:	1a82      	subs	r2, r0, r2
    1f9e:	4095      	lsls	r5, r2
    1fa0:	4329      	orrs	r1, r5
    1fa2:	1e4a      	subs	r2, r1, #1
    1fa4:	4191      	sbcs	r1, r2
    1fa6:	4319      	orrs	r1, r3
    1fa8:	2307      	movs	r3, #7
    1faa:	2200      	movs	r2, #0
    1fac:	400b      	ands	r3, r1
    1fae:	d009      	beq.n	1fc4 <__aeabi_ddiv+0x618>
    1fb0:	230f      	movs	r3, #15
    1fb2:	2200      	movs	r2, #0
    1fb4:	400b      	ands	r3, r1
    1fb6:	0008      	movs	r0, r1
    1fb8:	2b04      	cmp	r3, #4
    1fba:	d1bd      	bne.n	1f38 <__aeabi_ddiv+0x58c>
    1fbc:	0001      	movs	r1, r0
    1fbe:	0753      	lsls	r3, r2, #29
    1fc0:	0252      	lsls	r2, r2, #9
    1fc2:	0b12      	lsrs	r2, r2, #12
    1fc4:	08c9      	lsrs	r1, r1, #3
    1fc6:	4319      	orrs	r1, r3
    1fc8:	2301      	movs	r3, #1
    1fca:	4688      	mov	r8, r1
    1fcc:	9902      	ldr	r1, [sp, #8]
    1fce:	2400      	movs	r4, #0
    1fd0:	4019      	ands	r1, r3
    1fd2:	468c      	mov	ip, r1
    1fd4:	e5b8      	b.n	1b48 <__aeabi_ddiv+0x19c>
    1fd6:	4552      	cmp	r2, sl
    1fd8:	d8be      	bhi.n	1f58 <__aeabi_ddiv+0x5ac>
    1fda:	468b      	mov	fp, r1
    1fdc:	2500      	movs	r5, #0
    1fde:	e660      	b.n	1ca2 <__aeabi_ddiv+0x2f6>
    1fe0:	9d03      	ldr	r5, [sp, #12]
    1fe2:	429d      	cmp	r5, r3
    1fe4:	d3c6      	bcc.n	1f74 <__aeabi_ddiv+0x5c8>
    1fe6:	0011      	movs	r1, r2
    1fe8:	e762      	b.n	1eb0 <__aeabi_ddiv+0x504>
    1fea:	2500      	movs	r5, #0
    1fec:	e7d8      	b.n	1fa0 <__aeabi_ddiv+0x5f4>
    1fee:	2280      	movs	r2, #128	; 0x80
    1ff0:	465b      	mov	r3, fp
    1ff2:	0312      	lsls	r2, r2, #12
    1ff4:	431a      	orrs	r2, r3
    1ff6:	9b01      	ldr	r3, [sp, #4]
    1ff8:	0312      	lsls	r2, r2, #12
    1ffa:	0b12      	lsrs	r2, r2, #12
    1ffc:	469c      	mov	ip, r3
    1ffe:	4688      	mov	r8, r1
    2000:	4c03      	ldr	r4, [pc, #12]	; (2010 <STACK_SIZE+0x10>)
    2002:	e5a1      	b.n	1b48 <__aeabi_ddiv+0x19c>
    2004:	000003ff 	.word	0x000003ff
    2008:	feffffff 	.word	0xfeffffff
    200c:	000007fe 	.word	0x000007fe
    2010:	000007ff 	.word	0x000007ff

00002014 <__aeabi_dmul>:
    2014:	b5f0      	push	{r4, r5, r6, r7, lr}
    2016:	4657      	mov	r7, sl
    2018:	4645      	mov	r5, r8
    201a:	46de      	mov	lr, fp
    201c:	464e      	mov	r6, r9
    201e:	b5e0      	push	{r5, r6, r7, lr}
    2020:	030c      	lsls	r4, r1, #12
    2022:	4698      	mov	r8, r3
    2024:	004e      	lsls	r6, r1, #1
    2026:	0b23      	lsrs	r3, r4, #12
    2028:	b087      	sub	sp, #28
    202a:	0007      	movs	r7, r0
    202c:	4692      	mov	sl, r2
    202e:	469b      	mov	fp, r3
    2030:	0d76      	lsrs	r6, r6, #21
    2032:	0fcd      	lsrs	r5, r1, #31
    2034:	2e00      	cmp	r6, #0
    2036:	d06b      	beq.n	2110 <__aeabi_dmul+0xfc>
    2038:	4b6d      	ldr	r3, [pc, #436]	; (21f0 <__aeabi_dmul+0x1dc>)
    203a:	429e      	cmp	r6, r3
    203c:	d035      	beq.n	20aa <__aeabi_dmul+0x96>
    203e:	2480      	movs	r4, #128	; 0x80
    2040:	465b      	mov	r3, fp
    2042:	0f42      	lsrs	r2, r0, #29
    2044:	0424      	lsls	r4, r4, #16
    2046:	00db      	lsls	r3, r3, #3
    2048:	4314      	orrs	r4, r2
    204a:	431c      	orrs	r4, r3
    204c:	00c3      	lsls	r3, r0, #3
    204e:	4699      	mov	r9, r3
    2050:	4b68      	ldr	r3, [pc, #416]	; (21f4 <__aeabi_dmul+0x1e0>)
    2052:	46a3      	mov	fp, r4
    2054:	469c      	mov	ip, r3
    2056:	2300      	movs	r3, #0
    2058:	2700      	movs	r7, #0
    205a:	4466      	add	r6, ip
    205c:	9302      	str	r3, [sp, #8]
    205e:	4643      	mov	r3, r8
    2060:	031c      	lsls	r4, r3, #12
    2062:	005a      	lsls	r2, r3, #1
    2064:	0fdb      	lsrs	r3, r3, #31
    2066:	4650      	mov	r0, sl
    2068:	0b24      	lsrs	r4, r4, #12
    206a:	0d52      	lsrs	r2, r2, #21
    206c:	4698      	mov	r8, r3
    206e:	d100      	bne.n	2072 <__aeabi_dmul+0x5e>
    2070:	e076      	b.n	2160 <__aeabi_dmul+0x14c>
    2072:	4b5f      	ldr	r3, [pc, #380]	; (21f0 <__aeabi_dmul+0x1dc>)
    2074:	429a      	cmp	r2, r3
    2076:	d06d      	beq.n	2154 <__aeabi_dmul+0x140>
    2078:	2380      	movs	r3, #128	; 0x80
    207a:	0f41      	lsrs	r1, r0, #29
    207c:	041b      	lsls	r3, r3, #16
    207e:	430b      	orrs	r3, r1
    2080:	495c      	ldr	r1, [pc, #368]	; (21f4 <__aeabi_dmul+0x1e0>)
    2082:	00e4      	lsls	r4, r4, #3
    2084:	468c      	mov	ip, r1
    2086:	431c      	orrs	r4, r3
    2088:	00c3      	lsls	r3, r0, #3
    208a:	2000      	movs	r0, #0
    208c:	4462      	add	r2, ip
    208e:	4641      	mov	r1, r8
    2090:	18b6      	adds	r6, r6, r2
    2092:	4069      	eors	r1, r5
    2094:	1c72      	adds	r2, r6, #1
    2096:	9101      	str	r1, [sp, #4]
    2098:	4694      	mov	ip, r2
    209a:	4307      	orrs	r7, r0
    209c:	2f0f      	cmp	r7, #15
    209e:	d900      	bls.n	20a2 <__aeabi_dmul+0x8e>
    20a0:	e0b0      	b.n	2204 <__aeabi_dmul+0x1f0>
    20a2:	4a55      	ldr	r2, [pc, #340]	; (21f8 <__aeabi_dmul+0x1e4>)
    20a4:	00bf      	lsls	r7, r7, #2
    20a6:	59d2      	ldr	r2, [r2, r7]
    20a8:	4697      	mov	pc, r2
    20aa:	465b      	mov	r3, fp
    20ac:	4303      	orrs	r3, r0
    20ae:	4699      	mov	r9, r3
    20b0:	d000      	beq.n	20b4 <__aeabi_dmul+0xa0>
    20b2:	e087      	b.n	21c4 <__aeabi_dmul+0x1b0>
    20b4:	2300      	movs	r3, #0
    20b6:	469b      	mov	fp, r3
    20b8:	3302      	adds	r3, #2
    20ba:	2708      	movs	r7, #8
    20bc:	9302      	str	r3, [sp, #8]
    20be:	e7ce      	b.n	205e <__aeabi_dmul+0x4a>
    20c0:	4642      	mov	r2, r8
    20c2:	9201      	str	r2, [sp, #4]
    20c4:	2802      	cmp	r0, #2
    20c6:	d067      	beq.n	2198 <__aeabi_dmul+0x184>
    20c8:	2803      	cmp	r0, #3
    20ca:	d100      	bne.n	20ce <__aeabi_dmul+0xba>
    20cc:	e20e      	b.n	24ec <__aeabi_dmul+0x4d8>
    20ce:	2801      	cmp	r0, #1
    20d0:	d000      	beq.n	20d4 <__aeabi_dmul+0xc0>
    20d2:	e162      	b.n	239a <__aeabi_dmul+0x386>
    20d4:	2300      	movs	r3, #0
    20d6:	2400      	movs	r4, #0
    20d8:	2200      	movs	r2, #0
    20da:	4699      	mov	r9, r3
    20dc:	9901      	ldr	r1, [sp, #4]
    20de:	4001      	ands	r1, r0
    20e0:	b2cd      	uxtb	r5, r1
    20e2:	2100      	movs	r1, #0
    20e4:	0312      	lsls	r2, r2, #12
    20e6:	0d0b      	lsrs	r3, r1, #20
    20e8:	0b12      	lsrs	r2, r2, #12
    20ea:	051b      	lsls	r3, r3, #20
    20ec:	4313      	orrs	r3, r2
    20ee:	4a43      	ldr	r2, [pc, #268]	; (21fc <__aeabi_dmul+0x1e8>)
    20f0:	0524      	lsls	r4, r4, #20
    20f2:	4013      	ands	r3, r2
    20f4:	431c      	orrs	r4, r3
    20f6:	0064      	lsls	r4, r4, #1
    20f8:	07ed      	lsls	r5, r5, #31
    20fa:	0864      	lsrs	r4, r4, #1
    20fc:	432c      	orrs	r4, r5
    20fe:	4648      	mov	r0, r9
    2100:	0021      	movs	r1, r4
    2102:	b007      	add	sp, #28
    2104:	bc3c      	pop	{r2, r3, r4, r5}
    2106:	4690      	mov	r8, r2
    2108:	4699      	mov	r9, r3
    210a:	46a2      	mov	sl, r4
    210c:	46ab      	mov	fp, r5
    210e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2110:	4303      	orrs	r3, r0
    2112:	4699      	mov	r9, r3
    2114:	d04f      	beq.n	21b6 <__aeabi_dmul+0x1a2>
    2116:	465b      	mov	r3, fp
    2118:	2b00      	cmp	r3, #0
    211a:	d100      	bne.n	211e <__aeabi_dmul+0x10a>
    211c:	e189      	b.n	2432 <__aeabi_dmul+0x41e>
    211e:	4658      	mov	r0, fp
    2120:	f000 fd7a 	bl	2c18 <__clzsi2>
    2124:	0003      	movs	r3, r0
    2126:	3b0b      	subs	r3, #11
    2128:	2b1c      	cmp	r3, #28
    212a:	dd00      	ble.n	212e <__aeabi_dmul+0x11a>
    212c:	e17a      	b.n	2424 <__aeabi_dmul+0x410>
    212e:	221d      	movs	r2, #29
    2130:	1ad3      	subs	r3, r2, r3
    2132:	003a      	movs	r2, r7
    2134:	0001      	movs	r1, r0
    2136:	465c      	mov	r4, fp
    2138:	40da      	lsrs	r2, r3
    213a:	3908      	subs	r1, #8
    213c:	408c      	lsls	r4, r1
    213e:	0013      	movs	r3, r2
    2140:	408f      	lsls	r7, r1
    2142:	4323      	orrs	r3, r4
    2144:	469b      	mov	fp, r3
    2146:	46b9      	mov	r9, r7
    2148:	2300      	movs	r3, #0
    214a:	4e2d      	ldr	r6, [pc, #180]	; (2200 <__aeabi_dmul+0x1ec>)
    214c:	2700      	movs	r7, #0
    214e:	1a36      	subs	r6, r6, r0
    2150:	9302      	str	r3, [sp, #8]
    2152:	e784      	b.n	205e <__aeabi_dmul+0x4a>
    2154:	4653      	mov	r3, sl
    2156:	4323      	orrs	r3, r4
    2158:	d12a      	bne.n	21b0 <__aeabi_dmul+0x19c>
    215a:	2400      	movs	r4, #0
    215c:	2002      	movs	r0, #2
    215e:	e796      	b.n	208e <__aeabi_dmul+0x7a>
    2160:	4653      	mov	r3, sl
    2162:	4323      	orrs	r3, r4
    2164:	d020      	beq.n	21a8 <__aeabi_dmul+0x194>
    2166:	2c00      	cmp	r4, #0
    2168:	d100      	bne.n	216c <__aeabi_dmul+0x158>
    216a:	e157      	b.n	241c <__aeabi_dmul+0x408>
    216c:	0020      	movs	r0, r4
    216e:	f000 fd53 	bl	2c18 <__clzsi2>
    2172:	0003      	movs	r3, r0
    2174:	3b0b      	subs	r3, #11
    2176:	2b1c      	cmp	r3, #28
    2178:	dd00      	ble.n	217c <__aeabi_dmul+0x168>
    217a:	e149      	b.n	2410 <__aeabi_dmul+0x3fc>
    217c:	211d      	movs	r1, #29
    217e:	1acb      	subs	r3, r1, r3
    2180:	4651      	mov	r1, sl
    2182:	0002      	movs	r2, r0
    2184:	40d9      	lsrs	r1, r3
    2186:	4653      	mov	r3, sl
    2188:	3a08      	subs	r2, #8
    218a:	4094      	lsls	r4, r2
    218c:	4093      	lsls	r3, r2
    218e:	430c      	orrs	r4, r1
    2190:	4a1b      	ldr	r2, [pc, #108]	; (2200 <__aeabi_dmul+0x1ec>)
    2192:	1a12      	subs	r2, r2, r0
    2194:	2000      	movs	r0, #0
    2196:	e77a      	b.n	208e <__aeabi_dmul+0x7a>
    2198:	2501      	movs	r5, #1
    219a:	9b01      	ldr	r3, [sp, #4]
    219c:	4c14      	ldr	r4, [pc, #80]	; (21f0 <__aeabi_dmul+0x1dc>)
    219e:	401d      	ands	r5, r3
    21a0:	2300      	movs	r3, #0
    21a2:	2200      	movs	r2, #0
    21a4:	4699      	mov	r9, r3
    21a6:	e79c      	b.n	20e2 <__aeabi_dmul+0xce>
    21a8:	2400      	movs	r4, #0
    21aa:	2200      	movs	r2, #0
    21ac:	2001      	movs	r0, #1
    21ae:	e76e      	b.n	208e <__aeabi_dmul+0x7a>
    21b0:	4653      	mov	r3, sl
    21b2:	2003      	movs	r0, #3
    21b4:	e76b      	b.n	208e <__aeabi_dmul+0x7a>
    21b6:	2300      	movs	r3, #0
    21b8:	469b      	mov	fp, r3
    21ba:	3301      	adds	r3, #1
    21bc:	2704      	movs	r7, #4
    21be:	2600      	movs	r6, #0
    21c0:	9302      	str	r3, [sp, #8]
    21c2:	e74c      	b.n	205e <__aeabi_dmul+0x4a>
    21c4:	2303      	movs	r3, #3
    21c6:	4681      	mov	r9, r0
    21c8:	270c      	movs	r7, #12
    21ca:	9302      	str	r3, [sp, #8]
    21cc:	e747      	b.n	205e <__aeabi_dmul+0x4a>
    21ce:	2280      	movs	r2, #128	; 0x80
    21d0:	2300      	movs	r3, #0
    21d2:	2500      	movs	r5, #0
    21d4:	0312      	lsls	r2, r2, #12
    21d6:	4699      	mov	r9, r3
    21d8:	4c05      	ldr	r4, [pc, #20]	; (21f0 <__aeabi_dmul+0x1dc>)
    21da:	e782      	b.n	20e2 <__aeabi_dmul+0xce>
    21dc:	465c      	mov	r4, fp
    21de:	464b      	mov	r3, r9
    21e0:	9802      	ldr	r0, [sp, #8]
    21e2:	e76f      	b.n	20c4 <__aeabi_dmul+0xb0>
    21e4:	465c      	mov	r4, fp
    21e6:	464b      	mov	r3, r9
    21e8:	9501      	str	r5, [sp, #4]
    21ea:	9802      	ldr	r0, [sp, #8]
    21ec:	e76a      	b.n	20c4 <__aeabi_dmul+0xb0>
    21ee:	46c0      	nop			; (mov r8, r8)
    21f0:	000007ff 	.word	0x000007ff
    21f4:	fffffc01 	.word	0xfffffc01
    21f8:	00002d14 	.word	0x00002d14
    21fc:	800fffff 	.word	0x800fffff
    2200:	fffffc0d 	.word	0xfffffc0d
    2204:	464a      	mov	r2, r9
    2206:	4649      	mov	r1, r9
    2208:	0c17      	lsrs	r7, r2, #16
    220a:	0c1a      	lsrs	r2, r3, #16
    220c:	041b      	lsls	r3, r3, #16
    220e:	0c1b      	lsrs	r3, r3, #16
    2210:	0408      	lsls	r0, r1, #16
    2212:	0019      	movs	r1, r3
    2214:	0c00      	lsrs	r0, r0, #16
    2216:	4341      	muls	r1, r0
    2218:	0015      	movs	r5, r2
    221a:	4688      	mov	r8, r1
    221c:	0019      	movs	r1, r3
    221e:	437d      	muls	r5, r7
    2220:	4379      	muls	r1, r7
    2222:	9503      	str	r5, [sp, #12]
    2224:	4689      	mov	r9, r1
    2226:	0029      	movs	r1, r5
    2228:	0015      	movs	r5, r2
    222a:	4345      	muls	r5, r0
    222c:	444d      	add	r5, r9
    222e:	9502      	str	r5, [sp, #8]
    2230:	4645      	mov	r5, r8
    2232:	0c2d      	lsrs	r5, r5, #16
    2234:	46aa      	mov	sl, r5
    2236:	9d02      	ldr	r5, [sp, #8]
    2238:	4455      	add	r5, sl
    223a:	45a9      	cmp	r9, r5
    223c:	d906      	bls.n	224c <__aeabi_dmul+0x238>
    223e:	468a      	mov	sl, r1
    2240:	2180      	movs	r1, #128	; 0x80
    2242:	0249      	lsls	r1, r1, #9
    2244:	4689      	mov	r9, r1
    2246:	44ca      	add	sl, r9
    2248:	4651      	mov	r1, sl
    224a:	9103      	str	r1, [sp, #12]
    224c:	0c29      	lsrs	r1, r5, #16
    224e:	9104      	str	r1, [sp, #16]
    2250:	4641      	mov	r1, r8
    2252:	0409      	lsls	r1, r1, #16
    2254:	042d      	lsls	r5, r5, #16
    2256:	0c09      	lsrs	r1, r1, #16
    2258:	4688      	mov	r8, r1
    225a:	0029      	movs	r1, r5
    225c:	0c25      	lsrs	r5, r4, #16
    225e:	0424      	lsls	r4, r4, #16
    2260:	4441      	add	r1, r8
    2262:	0c24      	lsrs	r4, r4, #16
    2264:	9105      	str	r1, [sp, #20]
    2266:	0021      	movs	r1, r4
    2268:	4341      	muls	r1, r0
    226a:	4688      	mov	r8, r1
    226c:	0021      	movs	r1, r4
    226e:	4379      	muls	r1, r7
    2270:	468a      	mov	sl, r1
    2272:	4368      	muls	r0, r5
    2274:	4641      	mov	r1, r8
    2276:	4450      	add	r0, sl
    2278:	4681      	mov	r9, r0
    227a:	0c08      	lsrs	r0, r1, #16
    227c:	4448      	add	r0, r9
    227e:	436f      	muls	r7, r5
    2280:	4582      	cmp	sl, r0
    2282:	d903      	bls.n	228c <__aeabi_dmul+0x278>
    2284:	2180      	movs	r1, #128	; 0x80
    2286:	0249      	lsls	r1, r1, #9
    2288:	4689      	mov	r9, r1
    228a:	444f      	add	r7, r9
    228c:	0c01      	lsrs	r1, r0, #16
    228e:	4689      	mov	r9, r1
    2290:	0039      	movs	r1, r7
    2292:	4449      	add	r1, r9
    2294:	9102      	str	r1, [sp, #8]
    2296:	4641      	mov	r1, r8
    2298:	040f      	lsls	r7, r1, #16
    229a:	9904      	ldr	r1, [sp, #16]
    229c:	0c3f      	lsrs	r7, r7, #16
    229e:	4688      	mov	r8, r1
    22a0:	0400      	lsls	r0, r0, #16
    22a2:	19c0      	adds	r0, r0, r7
    22a4:	4480      	add	r8, r0
    22a6:	4641      	mov	r1, r8
    22a8:	9104      	str	r1, [sp, #16]
    22aa:	4659      	mov	r1, fp
    22ac:	0c0f      	lsrs	r7, r1, #16
    22ae:	0409      	lsls	r1, r1, #16
    22b0:	0c09      	lsrs	r1, r1, #16
    22b2:	4688      	mov	r8, r1
    22b4:	4359      	muls	r1, r3
    22b6:	468a      	mov	sl, r1
    22b8:	0039      	movs	r1, r7
    22ba:	4351      	muls	r1, r2
    22bc:	4689      	mov	r9, r1
    22be:	4641      	mov	r1, r8
    22c0:	434a      	muls	r2, r1
    22c2:	4651      	mov	r1, sl
    22c4:	0c09      	lsrs	r1, r1, #16
    22c6:	468b      	mov	fp, r1
    22c8:	437b      	muls	r3, r7
    22ca:	18d2      	adds	r2, r2, r3
    22cc:	445a      	add	r2, fp
    22ce:	4293      	cmp	r3, r2
    22d0:	d903      	bls.n	22da <__aeabi_dmul+0x2c6>
    22d2:	2380      	movs	r3, #128	; 0x80
    22d4:	025b      	lsls	r3, r3, #9
    22d6:	469b      	mov	fp, r3
    22d8:	44d9      	add	r9, fp
    22da:	4651      	mov	r1, sl
    22dc:	0409      	lsls	r1, r1, #16
    22de:	0c09      	lsrs	r1, r1, #16
    22e0:	468a      	mov	sl, r1
    22e2:	4641      	mov	r1, r8
    22e4:	4361      	muls	r1, r4
    22e6:	437c      	muls	r4, r7
    22e8:	0c13      	lsrs	r3, r2, #16
    22ea:	0412      	lsls	r2, r2, #16
    22ec:	444b      	add	r3, r9
    22ee:	4452      	add	r2, sl
    22f0:	46a1      	mov	r9, r4
    22f2:	468a      	mov	sl, r1
    22f4:	003c      	movs	r4, r7
    22f6:	4641      	mov	r1, r8
    22f8:	436c      	muls	r4, r5
    22fa:	434d      	muls	r5, r1
    22fc:	4651      	mov	r1, sl
    22fe:	444d      	add	r5, r9
    2300:	0c0f      	lsrs	r7, r1, #16
    2302:	197d      	adds	r5, r7, r5
    2304:	45a9      	cmp	r9, r5
    2306:	d903      	bls.n	2310 <__aeabi_dmul+0x2fc>
    2308:	2180      	movs	r1, #128	; 0x80
    230a:	0249      	lsls	r1, r1, #9
    230c:	4688      	mov	r8, r1
    230e:	4444      	add	r4, r8
    2310:	9f04      	ldr	r7, [sp, #16]
    2312:	9903      	ldr	r1, [sp, #12]
    2314:	46b8      	mov	r8, r7
    2316:	4441      	add	r1, r8
    2318:	468b      	mov	fp, r1
    231a:	4583      	cmp	fp, r0
    231c:	4180      	sbcs	r0, r0
    231e:	4241      	negs	r1, r0
    2320:	4688      	mov	r8, r1
    2322:	4651      	mov	r1, sl
    2324:	0408      	lsls	r0, r1, #16
    2326:	042f      	lsls	r7, r5, #16
    2328:	0c00      	lsrs	r0, r0, #16
    232a:	183f      	adds	r7, r7, r0
    232c:	4658      	mov	r0, fp
    232e:	9902      	ldr	r1, [sp, #8]
    2330:	1810      	adds	r0, r2, r0
    2332:	4689      	mov	r9, r1
    2334:	4290      	cmp	r0, r2
    2336:	4192      	sbcs	r2, r2
    2338:	444f      	add	r7, r9
    233a:	46ba      	mov	sl, r7
    233c:	4252      	negs	r2, r2
    233e:	4699      	mov	r9, r3
    2340:	4693      	mov	fp, r2
    2342:	44c2      	add	sl, r8
    2344:	44d1      	add	r9, sl
    2346:	44cb      	add	fp, r9
    2348:	428f      	cmp	r7, r1
    234a:	41bf      	sbcs	r7, r7
    234c:	45c2      	cmp	sl, r8
    234e:	4189      	sbcs	r1, r1
    2350:	4599      	cmp	r9, r3
    2352:	419b      	sbcs	r3, r3
    2354:	4593      	cmp	fp, r2
    2356:	4192      	sbcs	r2, r2
    2358:	427f      	negs	r7, r7
    235a:	4249      	negs	r1, r1
    235c:	0c2d      	lsrs	r5, r5, #16
    235e:	4252      	negs	r2, r2
    2360:	430f      	orrs	r7, r1
    2362:	425b      	negs	r3, r3
    2364:	4313      	orrs	r3, r2
    2366:	197f      	adds	r7, r7, r5
    2368:	18ff      	adds	r7, r7, r3
    236a:	465b      	mov	r3, fp
    236c:	193c      	adds	r4, r7, r4
    236e:	0ddb      	lsrs	r3, r3, #23
    2370:	9a05      	ldr	r2, [sp, #20]
    2372:	0264      	lsls	r4, r4, #9
    2374:	431c      	orrs	r4, r3
    2376:	0243      	lsls	r3, r0, #9
    2378:	4313      	orrs	r3, r2
    237a:	1e5d      	subs	r5, r3, #1
    237c:	41ab      	sbcs	r3, r5
    237e:	465a      	mov	r2, fp
    2380:	0dc0      	lsrs	r0, r0, #23
    2382:	4303      	orrs	r3, r0
    2384:	0252      	lsls	r2, r2, #9
    2386:	4313      	orrs	r3, r2
    2388:	01e2      	lsls	r2, r4, #7
    238a:	d556      	bpl.n	243a <__aeabi_dmul+0x426>
    238c:	2001      	movs	r0, #1
    238e:	085a      	lsrs	r2, r3, #1
    2390:	4003      	ands	r3, r0
    2392:	4313      	orrs	r3, r2
    2394:	07e2      	lsls	r2, r4, #31
    2396:	4313      	orrs	r3, r2
    2398:	0864      	lsrs	r4, r4, #1
    239a:	485a      	ldr	r0, [pc, #360]	; (2504 <__aeabi_dmul+0x4f0>)
    239c:	4460      	add	r0, ip
    239e:	2800      	cmp	r0, #0
    23a0:	dd4d      	ble.n	243e <__aeabi_dmul+0x42a>
    23a2:	075a      	lsls	r2, r3, #29
    23a4:	d009      	beq.n	23ba <__aeabi_dmul+0x3a6>
    23a6:	220f      	movs	r2, #15
    23a8:	401a      	ands	r2, r3
    23aa:	2a04      	cmp	r2, #4
    23ac:	d005      	beq.n	23ba <__aeabi_dmul+0x3a6>
    23ae:	1d1a      	adds	r2, r3, #4
    23b0:	429a      	cmp	r2, r3
    23b2:	419b      	sbcs	r3, r3
    23b4:	425b      	negs	r3, r3
    23b6:	18e4      	adds	r4, r4, r3
    23b8:	0013      	movs	r3, r2
    23ba:	01e2      	lsls	r2, r4, #7
    23bc:	d504      	bpl.n	23c8 <__aeabi_dmul+0x3b4>
    23be:	2080      	movs	r0, #128	; 0x80
    23c0:	4a51      	ldr	r2, [pc, #324]	; (2508 <__aeabi_dmul+0x4f4>)
    23c2:	00c0      	lsls	r0, r0, #3
    23c4:	4014      	ands	r4, r2
    23c6:	4460      	add	r0, ip
    23c8:	4a50      	ldr	r2, [pc, #320]	; (250c <__aeabi_dmul+0x4f8>)
    23ca:	4290      	cmp	r0, r2
    23cc:	dd00      	ble.n	23d0 <__aeabi_dmul+0x3bc>
    23ce:	e6e3      	b.n	2198 <__aeabi_dmul+0x184>
    23d0:	2501      	movs	r5, #1
    23d2:	08db      	lsrs	r3, r3, #3
    23d4:	0762      	lsls	r2, r4, #29
    23d6:	431a      	orrs	r2, r3
    23d8:	0264      	lsls	r4, r4, #9
    23da:	9b01      	ldr	r3, [sp, #4]
    23dc:	4691      	mov	r9, r2
    23de:	0b22      	lsrs	r2, r4, #12
    23e0:	0544      	lsls	r4, r0, #21
    23e2:	0d64      	lsrs	r4, r4, #21
    23e4:	401d      	ands	r5, r3
    23e6:	e67c      	b.n	20e2 <__aeabi_dmul+0xce>
    23e8:	2280      	movs	r2, #128	; 0x80
    23ea:	4659      	mov	r1, fp
    23ec:	0312      	lsls	r2, r2, #12
    23ee:	4211      	tst	r1, r2
    23f0:	d008      	beq.n	2404 <__aeabi_dmul+0x3f0>
    23f2:	4214      	tst	r4, r2
    23f4:	d106      	bne.n	2404 <__aeabi_dmul+0x3f0>
    23f6:	4322      	orrs	r2, r4
    23f8:	0312      	lsls	r2, r2, #12
    23fa:	0b12      	lsrs	r2, r2, #12
    23fc:	4645      	mov	r5, r8
    23fe:	4699      	mov	r9, r3
    2400:	4c43      	ldr	r4, [pc, #268]	; (2510 <__aeabi_dmul+0x4fc>)
    2402:	e66e      	b.n	20e2 <__aeabi_dmul+0xce>
    2404:	465b      	mov	r3, fp
    2406:	431a      	orrs	r2, r3
    2408:	0312      	lsls	r2, r2, #12
    240a:	0b12      	lsrs	r2, r2, #12
    240c:	4c40      	ldr	r4, [pc, #256]	; (2510 <__aeabi_dmul+0x4fc>)
    240e:	e668      	b.n	20e2 <__aeabi_dmul+0xce>
    2410:	0003      	movs	r3, r0
    2412:	4654      	mov	r4, sl
    2414:	3b28      	subs	r3, #40	; 0x28
    2416:	409c      	lsls	r4, r3
    2418:	2300      	movs	r3, #0
    241a:	e6b9      	b.n	2190 <__aeabi_dmul+0x17c>
    241c:	f000 fbfc 	bl	2c18 <__clzsi2>
    2420:	3020      	adds	r0, #32
    2422:	e6a6      	b.n	2172 <__aeabi_dmul+0x15e>
    2424:	0003      	movs	r3, r0
    2426:	3b28      	subs	r3, #40	; 0x28
    2428:	409f      	lsls	r7, r3
    242a:	2300      	movs	r3, #0
    242c:	46bb      	mov	fp, r7
    242e:	4699      	mov	r9, r3
    2430:	e68a      	b.n	2148 <__aeabi_dmul+0x134>
    2432:	f000 fbf1 	bl	2c18 <__clzsi2>
    2436:	3020      	adds	r0, #32
    2438:	e674      	b.n	2124 <__aeabi_dmul+0x110>
    243a:	46b4      	mov	ip, r6
    243c:	e7ad      	b.n	239a <__aeabi_dmul+0x386>
    243e:	2501      	movs	r5, #1
    2440:	1a2a      	subs	r2, r5, r0
    2442:	2a38      	cmp	r2, #56	; 0x38
    2444:	dd06      	ble.n	2454 <__aeabi_dmul+0x440>
    2446:	9b01      	ldr	r3, [sp, #4]
    2448:	2400      	movs	r4, #0
    244a:	401d      	ands	r5, r3
    244c:	2300      	movs	r3, #0
    244e:	2200      	movs	r2, #0
    2450:	4699      	mov	r9, r3
    2452:	e646      	b.n	20e2 <__aeabi_dmul+0xce>
    2454:	2a1f      	cmp	r2, #31
    2456:	dc21      	bgt.n	249c <__aeabi_dmul+0x488>
    2458:	2520      	movs	r5, #32
    245a:	0020      	movs	r0, r4
    245c:	1aad      	subs	r5, r5, r2
    245e:	001e      	movs	r6, r3
    2460:	40ab      	lsls	r3, r5
    2462:	40a8      	lsls	r0, r5
    2464:	40d6      	lsrs	r6, r2
    2466:	1e5d      	subs	r5, r3, #1
    2468:	41ab      	sbcs	r3, r5
    246a:	4330      	orrs	r0, r6
    246c:	4318      	orrs	r0, r3
    246e:	40d4      	lsrs	r4, r2
    2470:	0743      	lsls	r3, r0, #29
    2472:	d009      	beq.n	2488 <__aeabi_dmul+0x474>
    2474:	230f      	movs	r3, #15
    2476:	4003      	ands	r3, r0
    2478:	2b04      	cmp	r3, #4
    247a:	d005      	beq.n	2488 <__aeabi_dmul+0x474>
    247c:	0003      	movs	r3, r0
    247e:	1d18      	adds	r0, r3, #4
    2480:	4298      	cmp	r0, r3
    2482:	419b      	sbcs	r3, r3
    2484:	425b      	negs	r3, r3
    2486:	18e4      	adds	r4, r4, r3
    2488:	0223      	lsls	r3, r4, #8
    248a:	d521      	bpl.n	24d0 <__aeabi_dmul+0x4bc>
    248c:	2501      	movs	r5, #1
    248e:	9b01      	ldr	r3, [sp, #4]
    2490:	2401      	movs	r4, #1
    2492:	401d      	ands	r5, r3
    2494:	2300      	movs	r3, #0
    2496:	2200      	movs	r2, #0
    2498:	4699      	mov	r9, r3
    249a:	e622      	b.n	20e2 <__aeabi_dmul+0xce>
    249c:	251f      	movs	r5, #31
    249e:	0021      	movs	r1, r4
    24a0:	426d      	negs	r5, r5
    24a2:	1a28      	subs	r0, r5, r0
    24a4:	40c1      	lsrs	r1, r0
    24a6:	0008      	movs	r0, r1
    24a8:	2a20      	cmp	r2, #32
    24aa:	d01d      	beq.n	24e8 <__aeabi_dmul+0x4d4>
    24ac:	355f      	adds	r5, #95	; 0x5f
    24ae:	1aaa      	subs	r2, r5, r2
    24b0:	4094      	lsls	r4, r2
    24b2:	4323      	orrs	r3, r4
    24b4:	1e5c      	subs	r4, r3, #1
    24b6:	41a3      	sbcs	r3, r4
    24b8:	2507      	movs	r5, #7
    24ba:	4303      	orrs	r3, r0
    24bc:	401d      	ands	r5, r3
    24be:	2200      	movs	r2, #0
    24c0:	2d00      	cmp	r5, #0
    24c2:	d009      	beq.n	24d8 <__aeabi_dmul+0x4c4>
    24c4:	220f      	movs	r2, #15
    24c6:	2400      	movs	r4, #0
    24c8:	401a      	ands	r2, r3
    24ca:	0018      	movs	r0, r3
    24cc:	2a04      	cmp	r2, #4
    24ce:	d1d6      	bne.n	247e <__aeabi_dmul+0x46a>
    24d0:	0003      	movs	r3, r0
    24d2:	0765      	lsls	r5, r4, #29
    24d4:	0264      	lsls	r4, r4, #9
    24d6:	0b22      	lsrs	r2, r4, #12
    24d8:	08db      	lsrs	r3, r3, #3
    24da:	432b      	orrs	r3, r5
    24dc:	2501      	movs	r5, #1
    24de:	4699      	mov	r9, r3
    24e0:	9b01      	ldr	r3, [sp, #4]
    24e2:	2400      	movs	r4, #0
    24e4:	401d      	ands	r5, r3
    24e6:	e5fc      	b.n	20e2 <__aeabi_dmul+0xce>
    24e8:	2400      	movs	r4, #0
    24ea:	e7e2      	b.n	24b2 <__aeabi_dmul+0x49e>
    24ec:	2280      	movs	r2, #128	; 0x80
    24ee:	2501      	movs	r5, #1
    24f0:	0312      	lsls	r2, r2, #12
    24f2:	4322      	orrs	r2, r4
    24f4:	9901      	ldr	r1, [sp, #4]
    24f6:	0312      	lsls	r2, r2, #12
    24f8:	0b12      	lsrs	r2, r2, #12
    24fa:	400d      	ands	r5, r1
    24fc:	4699      	mov	r9, r3
    24fe:	4c04      	ldr	r4, [pc, #16]	; (2510 <__aeabi_dmul+0x4fc>)
    2500:	e5ef      	b.n	20e2 <__aeabi_dmul+0xce>
    2502:	46c0      	nop			; (mov r8, r8)
    2504:	000003ff 	.word	0x000003ff
    2508:	feffffff 	.word	0xfeffffff
    250c:	000007fe 	.word	0x000007fe
    2510:	000007ff 	.word	0x000007ff

00002514 <__aeabi_dsub>:
    2514:	b5f0      	push	{r4, r5, r6, r7, lr}
    2516:	4646      	mov	r6, r8
    2518:	46d6      	mov	lr, sl
    251a:	464f      	mov	r7, r9
    251c:	030c      	lsls	r4, r1, #12
    251e:	b5c0      	push	{r6, r7, lr}
    2520:	0fcd      	lsrs	r5, r1, #31
    2522:	004e      	lsls	r6, r1, #1
    2524:	0a61      	lsrs	r1, r4, #9
    2526:	0f44      	lsrs	r4, r0, #29
    2528:	430c      	orrs	r4, r1
    252a:	00c1      	lsls	r1, r0, #3
    252c:	0058      	lsls	r0, r3, #1
    252e:	0d40      	lsrs	r0, r0, #21
    2530:	4684      	mov	ip, r0
    2532:	468a      	mov	sl, r1
    2534:	000f      	movs	r7, r1
    2536:	0319      	lsls	r1, r3, #12
    2538:	0f50      	lsrs	r0, r2, #29
    253a:	0a49      	lsrs	r1, r1, #9
    253c:	4301      	orrs	r1, r0
    253e:	48c6      	ldr	r0, [pc, #792]	; (2858 <__aeabi_dsub+0x344>)
    2540:	0d76      	lsrs	r6, r6, #21
    2542:	46a8      	mov	r8, r5
    2544:	0fdb      	lsrs	r3, r3, #31
    2546:	00d2      	lsls	r2, r2, #3
    2548:	4584      	cmp	ip, r0
    254a:	d100      	bne.n	254e <__aeabi_dsub+0x3a>
    254c:	e0d8      	b.n	2700 <__aeabi_dsub+0x1ec>
    254e:	2001      	movs	r0, #1
    2550:	4043      	eors	r3, r0
    2552:	42ab      	cmp	r3, r5
    2554:	d100      	bne.n	2558 <__aeabi_dsub+0x44>
    2556:	e0a6      	b.n	26a6 <__aeabi_dsub+0x192>
    2558:	4660      	mov	r0, ip
    255a:	1a35      	subs	r5, r6, r0
    255c:	2d00      	cmp	r5, #0
    255e:	dc00      	bgt.n	2562 <__aeabi_dsub+0x4e>
    2560:	e105      	b.n	276e <__aeabi_dsub+0x25a>
    2562:	2800      	cmp	r0, #0
    2564:	d110      	bne.n	2588 <__aeabi_dsub+0x74>
    2566:	000b      	movs	r3, r1
    2568:	4313      	orrs	r3, r2
    256a:	d100      	bne.n	256e <__aeabi_dsub+0x5a>
    256c:	e0d7      	b.n	271e <__aeabi_dsub+0x20a>
    256e:	1e6b      	subs	r3, r5, #1
    2570:	2b00      	cmp	r3, #0
    2572:	d000      	beq.n	2576 <__aeabi_dsub+0x62>
    2574:	e14b      	b.n	280e <__aeabi_dsub+0x2fa>
    2576:	4653      	mov	r3, sl
    2578:	1a9f      	subs	r7, r3, r2
    257a:	45ba      	cmp	sl, r7
    257c:	4180      	sbcs	r0, r0
    257e:	1a64      	subs	r4, r4, r1
    2580:	4240      	negs	r0, r0
    2582:	1a24      	subs	r4, r4, r0
    2584:	2601      	movs	r6, #1
    2586:	e01e      	b.n	25c6 <__aeabi_dsub+0xb2>
    2588:	4bb3      	ldr	r3, [pc, #716]	; (2858 <__aeabi_dsub+0x344>)
    258a:	429e      	cmp	r6, r3
    258c:	d048      	beq.n	2620 <__aeabi_dsub+0x10c>
    258e:	2380      	movs	r3, #128	; 0x80
    2590:	041b      	lsls	r3, r3, #16
    2592:	4319      	orrs	r1, r3
    2594:	2d38      	cmp	r5, #56	; 0x38
    2596:	dd00      	ble.n	259a <__aeabi_dsub+0x86>
    2598:	e119      	b.n	27ce <__aeabi_dsub+0x2ba>
    259a:	2d1f      	cmp	r5, #31
    259c:	dd00      	ble.n	25a0 <__aeabi_dsub+0x8c>
    259e:	e14c      	b.n	283a <__aeabi_dsub+0x326>
    25a0:	2320      	movs	r3, #32
    25a2:	000f      	movs	r7, r1
    25a4:	1b5b      	subs	r3, r3, r5
    25a6:	0010      	movs	r0, r2
    25a8:	409a      	lsls	r2, r3
    25aa:	409f      	lsls	r7, r3
    25ac:	40e8      	lsrs	r0, r5
    25ae:	1e53      	subs	r3, r2, #1
    25b0:	419a      	sbcs	r2, r3
    25b2:	40e9      	lsrs	r1, r5
    25b4:	4307      	orrs	r7, r0
    25b6:	4317      	orrs	r7, r2
    25b8:	4653      	mov	r3, sl
    25ba:	1bdf      	subs	r7, r3, r7
    25bc:	1a61      	subs	r1, r4, r1
    25be:	45ba      	cmp	sl, r7
    25c0:	41a4      	sbcs	r4, r4
    25c2:	4264      	negs	r4, r4
    25c4:	1b0c      	subs	r4, r1, r4
    25c6:	0223      	lsls	r3, r4, #8
    25c8:	d400      	bmi.n	25cc <__aeabi_dsub+0xb8>
    25ca:	e0c5      	b.n	2758 <__aeabi_dsub+0x244>
    25cc:	0264      	lsls	r4, r4, #9
    25ce:	0a65      	lsrs	r5, r4, #9
    25d0:	2d00      	cmp	r5, #0
    25d2:	d100      	bne.n	25d6 <__aeabi_dsub+0xc2>
    25d4:	e0f6      	b.n	27c4 <__aeabi_dsub+0x2b0>
    25d6:	0028      	movs	r0, r5
    25d8:	f000 fb1e 	bl	2c18 <__clzsi2>
    25dc:	0003      	movs	r3, r0
    25de:	3b08      	subs	r3, #8
    25e0:	2b1f      	cmp	r3, #31
    25e2:	dd00      	ble.n	25e6 <__aeabi_dsub+0xd2>
    25e4:	e0e9      	b.n	27ba <__aeabi_dsub+0x2a6>
    25e6:	2220      	movs	r2, #32
    25e8:	003c      	movs	r4, r7
    25ea:	1ad2      	subs	r2, r2, r3
    25ec:	409d      	lsls	r5, r3
    25ee:	40d4      	lsrs	r4, r2
    25f0:	409f      	lsls	r7, r3
    25f2:	4325      	orrs	r5, r4
    25f4:	429e      	cmp	r6, r3
    25f6:	dd00      	ble.n	25fa <__aeabi_dsub+0xe6>
    25f8:	e0db      	b.n	27b2 <__aeabi_dsub+0x29e>
    25fa:	1b9e      	subs	r6, r3, r6
    25fc:	1c73      	adds	r3, r6, #1
    25fe:	2b1f      	cmp	r3, #31
    2600:	dd00      	ble.n	2604 <__aeabi_dsub+0xf0>
    2602:	e10a      	b.n	281a <__aeabi_dsub+0x306>
    2604:	2220      	movs	r2, #32
    2606:	0038      	movs	r0, r7
    2608:	1ad2      	subs	r2, r2, r3
    260a:	0029      	movs	r1, r5
    260c:	4097      	lsls	r7, r2
    260e:	002c      	movs	r4, r5
    2610:	4091      	lsls	r1, r2
    2612:	40d8      	lsrs	r0, r3
    2614:	1e7a      	subs	r2, r7, #1
    2616:	4197      	sbcs	r7, r2
    2618:	40dc      	lsrs	r4, r3
    261a:	2600      	movs	r6, #0
    261c:	4301      	orrs	r1, r0
    261e:	430f      	orrs	r7, r1
    2620:	077b      	lsls	r3, r7, #29
    2622:	d009      	beq.n	2638 <__aeabi_dsub+0x124>
    2624:	230f      	movs	r3, #15
    2626:	403b      	ands	r3, r7
    2628:	2b04      	cmp	r3, #4
    262a:	d005      	beq.n	2638 <__aeabi_dsub+0x124>
    262c:	1d3b      	adds	r3, r7, #4
    262e:	42bb      	cmp	r3, r7
    2630:	41bf      	sbcs	r7, r7
    2632:	427f      	negs	r7, r7
    2634:	19e4      	adds	r4, r4, r7
    2636:	001f      	movs	r7, r3
    2638:	0223      	lsls	r3, r4, #8
    263a:	d525      	bpl.n	2688 <__aeabi_dsub+0x174>
    263c:	4b86      	ldr	r3, [pc, #536]	; (2858 <__aeabi_dsub+0x344>)
    263e:	3601      	adds	r6, #1
    2640:	429e      	cmp	r6, r3
    2642:	d100      	bne.n	2646 <__aeabi_dsub+0x132>
    2644:	e0af      	b.n	27a6 <__aeabi_dsub+0x292>
    2646:	4b85      	ldr	r3, [pc, #532]	; (285c <__aeabi_dsub+0x348>)
    2648:	2501      	movs	r5, #1
    264a:	401c      	ands	r4, r3
    264c:	4643      	mov	r3, r8
    264e:	0762      	lsls	r2, r4, #29
    2650:	08ff      	lsrs	r7, r7, #3
    2652:	0264      	lsls	r4, r4, #9
    2654:	0576      	lsls	r6, r6, #21
    2656:	4317      	orrs	r7, r2
    2658:	0b24      	lsrs	r4, r4, #12
    265a:	0d76      	lsrs	r6, r6, #21
    265c:	401d      	ands	r5, r3
    265e:	2100      	movs	r1, #0
    2660:	0324      	lsls	r4, r4, #12
    2662:	0b23      	lsrs	r3, r4, #12
    2664:	0d0c      	lsrs	r4, r1, #20
    2666:	4a7e      	ldr	r2, [pc, #504]	; (2860 <__aeabi_dsub+0x34c>)
    2668:	0524      	lsls	r4, r4, #20
    266a:	431c      	orrs	r4, r3
    266c:	4014      	ands	r4, r2
    266e:	0533      	lsls	r3, r6, #20
    2670:	4323      	orrs	r3, r4
    2672:	005b      	lsls	r3, r3, #1
    2674:	07ed      	lsls	r5, r5, #31
    2676:	085b      	lsrs	r3, r3, #1
    2678:	432b      	orrs	r3, r5
    267a:	0038      	movs	r0, r7
    267c:	0019      	movs	r1, r3
    267e:	bc1c      	pop	{r2, r3, r4}
    2680:	4690      	mov	r8, r2
    2682:	4699      	mov	r9, r3
    2684:	46a2      	mov	sl, r4
    2686:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2688:	2501      	movs	r5, #1
    268a:	4643      	mov	r3, r8
    268c:	0762      	lsls	r2, r4, #29
    268e:	08ff      	lsrs	r7, r7, #3
    2690:	4317      	orrs	r7, r2
    2692:	08e4      	lsrs	r4, r4, #3
    2694:	401d      	ands	r5, r3
    2696:	4b70      	ldr	r3, [pc, #448]	; (2858 <__aeabi_dsub+0x344>)
    2698:	429e      	cmp	r6, r3
    269a:	d036      	beq.n	270a <__aeabi_dsub+0x1f6>
    269c:	0324      	lsls	r4, r4, #12
    269e:	0576      	lsls	r6, r6, #21
    26a0:	0b24      	lsrs	r4, r4, #12
    26a2:	0d76      	lsrs	r6, r6, #21
    26a4:	e7db      	b.n	265e <__aeabi_dsub+0x14a>
    26a6:	4663      	mov	r3, ip
    26a8:	1af3      	subs	r3, r6, r3
    26aa:	2b00      	cmp	r3, #0
    26ac:	dc00      	bgt.n	26b0 <__aeabi_dsub+0x19c>
    26ae:	e094      	b.n	27da <__aeabi_dsub+0x2c6>
    26b0:	4660      	mov	r0, ip
    26b2:	2800      	cmp	r0, #0
    26b4:	d035      	beq.n	2722 <__aeabi_dsub+0x20e>
    26b6:	4868      	ldr	r0, [pc, #416]	; (2858 <__aeabi_dsub+0x344>)
    26b8:	4286      	cmp	r6, r0
    26ba:	d0b1      	beq.n	2620 <__aeabi_dsub+0x10c>
    26bc:	2780      	movs	r7, #128	; 0x80
    26be:	043f      	lsls	r7, r7, #16
    26c0:	4339      	orrs	r1, r7
    26c2:	2b38      	cmp	r3, #56	; 0x38
    26c4:	dc00      	bgt.n	26c8 <__aeabi_dsub+0x1b4>
    26c6:	e0fd      	b.n	28c4 <__aeabi_dsub+0x3b0>
    26c8:	430a      	orrs	r2, r1
    26ca:	0017      	movs	r7, r2
    26cc:	2100      	movs	r1, #0
    26ce:	1e7a      	subs	r2, r7, #1
    26d0:	4197      	sbcs	r7, r2
    26d2:	4457      	add	r7, sl
    26d4:	4557      	cmp	r7, sl
    26d6:	4180      	sbcs	r0, r0
    26d8:	1909      	adds	r1, r1, r4
    26da:	4244      	negs	r4, r0
    26dc:	190c      	adds	r4, r1, r4
    26de:	0223      	lsls	r3, r4, #8
    26e0:	d53a      	bpl.n	2758 <__aeabi_dsub+0x244>
    26e2:	4b5d      	ldr	r3, [pc, #372]	; (2858 <__aeabi_dsub+0x344>)
    26e4:	3601      	adds	r6, #1
    26e6:	429e      	cmp	r6, r3
    26e8:	d100      	bne.n	26ec <__aeabi_dsub+0x1d8>
    26ea:	e14b      	b.n	2984 <__aeabi_dsub+0x470>
    26ec:	2201      	movs	r2, #1
    26ee:	4b5b      	ldr	r3, [pc, #364]	; (285c <__aeabi_dsub+0x348>)
    26f0:	401c      	ands	r4, r3
    26f2:	087b      	lsrs	r3, r7, #1
    26f4:	4017      	ands	r7, r2
    26f6:	431f      	orrs	r7, r3
    26f8:	07e2      	lsls	r2, r4, #31
    26fa:	4317      	orrs	r7, r2
    26fc:	0864      	lsrs	r4, r4, #1
    26fe:	e78f      	b.n	2620 <__aeabi_dsub+0x10c>
    2700:	0008      	movs	r0, r1
    2702:	4310      	orrs	r0, r2
    2704:	d000      	beq.n	2708 <__aeabi_dsub+0x1f4>
    2706:	e724      	b.n	2552 <__aeabi_dsub+0x3e>
    2708:	e721      	b.n	254e <__aeabi_dsub+0x3a>
    270a:	0023      	movs	r3, r4
    270c:	433b      	orrs	r3, r7
    270e:	d100      	bne.n	2712 <__aeabi_dsub+0x1fe>
    2710:	e1b9      	b.n	2a86 <__aeabi_dsub+0x572>
    2712:	2280      	movs	r2, #128	; 0x80
    2714:	0312      	lsls	r2, r2, #12
    2716:	4314      	orrs	r4, r2
    2718:	0324      	lsls	r4, r4, #12
    271a:	0b24      	lsrs	r4, r4, #12
    271c:	e79f      	b.n	265e <__aeabi_dsub+0x14a>
    271e:	002e      	movs	r6, r5
    2720:	e77e      	b.n	2620 <__aeabi_dsub+0x10c>
    2722:	0008      	movs	r0, r1
    2724:	4310      	orrs	r0, r2
    2726:	d100      	bne.n	272a <__aeabi_dsub+0x216>
    2728:	e0ca      	b.n	28c0 <__aeabi_dsub+0x3ac>
    272a:	1e58      	subs	r0, r3, #1
    272c:	4684      	mov	ip, r0
    272e:	2800      	cmp	r0, #0
    2730:	d000      	beq.n	2734 <__aeabi_dsub+0x220>
    2732:	e0e7      	b.n	2904 <__aeabi_dsub+0x3f0>
    2734:	4452      	add	r2, sl
    2736:	4552      	cmp	r2, sl
    2738:	4180      	sbcs	r0, r0
    273a:	1864      	adds	r4, r4, r1
    273c:	4240      	negs	r0, r0
    273e:	1824      	adds	r4, r4, r0
    2740:	0017      	movs	r7, r2
    2742:	2601      	movs	r6, #1
    2744:	0223      	lsls	r3, r4, #8
    2746:	d507      	bpl.n	2758 <__aeabi_dsub+0x244>
    2748:	2602      	movs	r6, #2
    274a:	e7cf      	b.n	26ec <__aeabi_dsub+0x1d8>
    274c:	4664      	mov	r4, ip
    274e:	432c      	orrs	r4, r5
    2750:	d100      	bne.n	2754 <__aeabi_dsub+0x240>
    2752:	e1b3      	b.n	2abc <__aeabi_dsub+0x5a8>
    2754:	002c      	movs	r4, r5
    2756:	4667      	mov	r7, ip
    2758:	077b      	lsls	r3, r7, #29
    275a:	d000      	beq.n	275e <__aeabi_dsub+0x24a>
    275c:	e762      	b.n	2624 <__aeabi_dsub+0x110>
    275e:	0763      	lsls	r3, r4, #29
    2760:	08ff      	lsrs	r7, r7, #3
    2762:	431f      	orrs	r7, r3
    2764:	2501      	movs	r5, #1
    2766:	4643      	mov	r3, r8
    2768:	08e4      	lsrs	r4, r4, #3
    276a:	401d      	ands	r5, r3
    276c:	e793      	b.n	2696 <__aeabi_dsub+0x182>
    276e:	2d00      	cmp	r5, #0
    2770:	d178      	bne.n	2864 <__aeabi_dsub+0x350>
    2772:	1c75      	adds	r5, r6, #1
    2774:	056d      	lsls	r5, r5, #21
    2776:	0d6d      	lsrs	r5, r5, #21
    2778:	2d01      	cmp	r5, #1
    277a:	dc00      	bgt.n	277e <__aeabi_dsub+0x26a>
    277c:	e0f2      	b.n	2964 <__aeabi_dsub+0x450>
    277e:	4650      	mov	r0, sl
    2780:	1a80      	subs	r0, r0, r2
    2782:	4582      	cmp	sl, r0
    2784:	41bf      	sbcs	r7, r7
    2786:	1a65      	subs	r5, r4, r1
    2788:	427f      	negs	r7, r7
    278a:	1bed      	subs	r5, r5, r7
    278c:	4684      	mov	ip, r0
    278e:	0228      	lsls	r0, r5, #8
    2790:	d400      	bmi.n	2794 <__aeabi_dsub+0x280>
    2792:	e08c      	b.n	28ae <__aeabi_dsub+0x39a>
    2794:	4650      	mov	r0, sl
    2796:	1a17      	subs	r7, r2, r0
    2798:	42ba      	cmp	r2, r7
    279a:	4192      	sbcs	r2, r2
    279c:	1b0c      	subs	r4, r1, r4
    279e:	4255      	negs	r5, r2
    27a0:	1b65      	subs	r5, r4, r5
    27a2:	4698      	mov	r8, r3
    27a4:	e714      	b.n	25d0 <__aeabi_dsub+0xbc>
    27a6:	2501      	movs	r5, #1
    27a8:	4643      	mov	r3, r8
    27aa:	2400      	movs	r4, #0
    27ac:	401d      	ands	r5, r3
    27ae:	2700      	movs	r7, #0
    27b0:	e755      	b.n	265e <__aeabi_dsub+0x14a>
    27b2:	4c2a      	ldr	r4, [pc, #168]	; (285c <__aeabi_dsub+0x348>)
    27b4:	1af6      	subs	r6, r6, r3
    27b6:	402c      	ands	r4, r5
    27b8:	e732      	b.n	2620 <__aeabi_dsub+0x10c>
    27ba:	003d      	movs	r5, r7
    27bc:	3828      	subs	r0, #40	; 0x28
    27be:	4085      	lsls	r5, r0
    27c0:	2700      	movs	r7, #0
    27c2:	e717      	b.n	25f4 <__aeabi_dsub+0xe0>
    27c4:	0038      	movs	r0, r7
    27c6:	f000 fa27 	bl	2c18 <__clzsi2>
    27ca:	3020      	adds	r0, #32
    27cc:	e706      	b.n	25dc <__aeabi_dsub+0xc8>
    27ce:	430a      	orrs	r2, r1
    27d0:	0017      	movs	r7, r2
    27d2:	2100      	movs	r1, #0
    27d4:	1e7a      	subs	r2, r7, #1
    27d6:	4197      	sbcs	r7, r2
    27d8:	e6ee      	b.n	25b8 <__aeabi_dsub+0xa4>
    27da:	2b00      	cmp	r3, #0
    27dc:	d000      	beq.n	27e0 <__aeabi_dsub+0x2cc>
    27de:	e0e5      	b.n	29ac <__aeabi_dsub+0x498>
    27e0:	1c73      	adds	r3, r6, #1
    27e2:	469c      	mov	ip, r3
    27e4:	055b      	lsls	r3, r3, #21
    27e6:	0d5b      	lsrs	r3, r3, #21
    27e8:	2b01      	cmp	r3, #1
    27ea:	dc00      	bgt.n	27ee <__aeabi_dsub+0x2da>
    27ec:	e09f      	b.n	292e <__aeabi_dsub+0x41a>
    27ee:	4b1a      	ldr	r3, [pc, #104]	; (2858 <__aeabi_dsub+0x344>)
    27f0:	459c      	cmp	ip, r3
    27f2:	d100      	bne.n	27f6 <__aeabi_dsub+0x2e2>
    27f4:	e0c5      	b.n	2982 <__aeabi_dsub+0x46e>
    27f6:	4452      	add	r2, sl
    27f8:	4552      	cmp	r2, sl
    27fa:	4180      	sbcs	r0, r0
    27fc:	1864      	adds	r4, r4, r1
    27fe:	4240      	negs	r0, r0
    2800:	1824      	adds	r4, r4, r0
    2802:	07e7      	lsls	r7, r4, #31
    2804:	0852      	lsrs	r2, r2, #1
    2806:	4317      	orrs	r7, r2
    2808:	0864      	lsrs	r4, r4, #1
    280a:	4666      	mov	r6, ip
    280c:	e708      	b.n	2620 <__aeabi_dsub+0x10c>
    280e:	4812      	ldr	r0, [pc, #72]	; (2858 <__aeabi_dsub+0x344>)
    2810:	4285      	cmp	r5, r0
    2812:	d100      	bne.n	2816 <__aeabi_dsub+0x302>
    2814:	e085      	b.n	2922 <__aeabi_dsub+0x40e>
    2816:	001d      	movs	r5, r3
    2818:	e6bc      	b.n	2594 <__aeabi_dsub+0x80>
    281a:	0029      	movs	r1, r5
    281c:	3e1f      	subs	r6, #31
    281e:	40f1      	lsrs	r1, r6
    2820:	2b20      	cmp	r3, #32
    2822:	d100      	bne.n	2826 <__aeabi_dsub+0x312>
    2824:	e07f      	b.n	2926 <__aeabi_dsub+0x412>
    2826:	2240      	movs	r2, #64	; 0x40
    2828:	1ad3      	subs	r3, r2, r3
    282a:	409d      	lsls	r5, r3
    282c:	432f      	orrs	r7, r5
    282e:	1e7d      	subs	r5, r7, #1
    2830:	41af      	sbcs	r7, r5
    2832:	2400      	movs	r4, #0
    2834:	430f      	orrs	r7, r1
    2836:	2600      	movs	r6, #0
    2838:	e78e      	b.n	2758 <__aeabi_dsub+0x244>
    283a:	002b      	movs	r3, r5
    283c:	000f      	movs	r7, r1
    283e:	3b20      	subs	r3, #32
    2840:	40df      	lsrs	r7, r3
    2842:	2d20      	cmp	r5, #32
    2844:	d071      	beq.n	292a <__aeabi_dsub+0x416>
    2846:	2340      	movs	r3, #64	; 0x40
    2848:	1b5d      	subs	r5, r3, r5
    284a:	40a9      	lsls	r1, r5
    284c:	430a      	orrs	r2, r1
    284e:	1e51      	subs	r1, r2, #1
    2850:	418a      	sbcs	r2, r1
    2852:	2100      	movs	r1, #0
    2854:	4317      	orrs	r7, r2
    2856:	e6af      	b.n	25b8 <__aeabi_dsub+0xa4>
    2858:	000007ff 	.word	0x000007ff
    285c:	ff7fffff 	.word	0xff7fffff
    2860:	800fffff 	.word	0x800fffff
    2864:	2e00      	cmp	r6, #0
    2866:	d03e      	beq.n	28e6 <__aeabi_dsub+0x3d2>
    2868:	4eb3      	ldr	r6, [pc, #716]	; (2b38 <__aeabi_dsub+0x624>)
    286a:	45b4      	cmp	ip, r6
    286c:	d045      	beq.n	28fa <__aeabi_dsub+0x3e6>
    286e:	2680      	movs	r6, #128	; 0x80
    2870:	0436      	lsls	r6, r6, #16
    2872:	426d      	negs	r5, r5
    2874:	4334      	orrs	r4, r6
    2876:	2d38      	cmp	r5, #56	; 0x38
    2878:	dd00      	ble.n	287c <__aeabi_dsub+0x368>
    287a:	e0a8      	b.n	29ce <__aeabi_dsub+0x4ba>
    287c:	2d1f      	cmp	r5, #31
    287e:	dd00      	ble.n	2882 <__aeabi_dsub+0x36e>
    2880:	e11f      	b.n	2ac2 <__aeabi_dsub+0x5ae>
    2882:	2620      	movs	r6, #32
    2884:	0027      	movs	r7, r4
    2886:	4650      	mov	r0, sl
    2888:	1b76      	subs	r6, r6, r5
    288a:	40b7      	lsls	r7, r6
    288c:	40e8      	lsrs	r0, r5
    288e:	4307      	orrs	r7, r0
    2890:	4650      	mov	r0, sl
    2892:	40b0      	lsls	r0, r6
    2894:	1e46      	subs	r6, r0, #1
    2896:	41b0      	sbcs	r0, r6
    2898:	40ec      	lsrs	r4, r5
    289a:	4338      	orrs	r0, r7
    289c:	1a17      	subs	r7, r2, r0
    289e:	42ba      	cmp	r2, r7
    28a0:	4192      	sbcs	r2, r2
    28a2:	1b0c      	subs	r4, r1, r4
    28a4:	4252      	negs	r2, r2
    28a6:	1aa4      	subs	r4, r4, r2
    28a8:	4666      	mov	r6, ip
    28aa:	4698      	mov	r8, r3
    28ac:	e68b      	b.n	25c6 <__aeabi_dsub+0xb2>
    28ae:	4664      	mov	r4, ip
    28b0:	4667      	mov	r7, ip
    28b2:	432c      	orrs	r4, r5
    28b4:	d000      	beq.n	28b8 <__aeabi_dsub+0x3a4>
    28b6:	e68b      	b.n	25d0 <__aeabi_dsub+0xbc>
    28b8:	2500      	movs	r5, #0
    28ba:	2600      	movs	r6, #0
    28bc:	2700      	movs	r7, #0
    28be:	e6ea      	b.n	2696 <__aeabi_dsub+0x182>
    28c0:	001e      	movs	r6, r3
    28c2:	e6ad      	b.n	2620 <__aeabi_dsub+0x10c>
    28c4:	2b1f      	cmp	r3, #31
    28c6:	dc60      	bgt.n	298a <__aeabi_dsub+0x476>
    28c8:	2720      	movs	r7, #32
    28ca:	1af8      	subs	r0, r7, r3
    28cc:	000f      	movs	r7, r1
    28ce:	4684      	mov	ip, r0
    28d0:	4087      	lsls	r7, r0
    28d2:	0010      	movs	r0, r2
    28d4:	40d8      	lsrs	r0, r3
    28d6:	4307      	orrs	r7, r0
    28d8:	4660      	mov	r0, ip
    28da:	4082      	lsls	r2, r0
    28dc:	1e50      	subs	r0, r2, #1
    28de:	4182      	sbcs	r2, r0
    28e0:	40d9      	lsrs	r1, r3
    28e2:	4317      	orrs	r7, r2
    28e4:	e6f5      	b.n	26d2 <__aeabi_dsub+0x1be>
    28e6:	0026      	movs	r6, r4
    28e8:	4650      	mov	r0, sl
    28ea:	4306      	orrs	r6, r0
    28ec:	d005      	beq.n	28fa <__aeabi_dsub+0x3e6>
    28ee:	43ed      	mvns	r5, r5
    28f0:	2d00      	cmp	r5, #0
    28f2:	d0d3      	beq.n	289c <__aeabi_dsub+0x388>
    28f4:	4e90      	ldr	r6, [pc, #576]	; (2b38 <__aeabi_dsub+0x624>)
    28f6:	45b4      	cmp	ip, r6
    28f8:	d1bd      	bne.n	2876 <__aeabi_dsub+0x362>
    28fa:	000c      	movs	r4, r1
    28fc:	0017      	movs	r7, r2
    28fe:	4666      	mov	r6, ip
    2900:	4698      	mov	r8, r3
    2902:	e68d      	b.n	2620 <__aeabi_dsub+0x10c>
    2904:	488c      	ldr	r0, [pc, #560]	; (2b38 <__aeabi_dsub+0x624>)
    2906:	4283      	cmp	r3, r0
    2908:	d00b      	beq.n	2922 <__aeabi_dsub+0x40e>
    290a:	4663      	mov	r3, ip
    290c:	e6d9      	b.n	26c2 <__aeabi_dsub+0x1ae>
    290e:	2d00      	cmp	r5, #0
    2910:	d000      	beq.n	2914 <__aeabi_dsub+0x400>
    2912:	e096      	b.n	2a42 <__aeabi_dsub+0x52e>
    2914:	0008      	movs	r0, r1
    2916:	4310      	orrs	r0, r2
    2918:	d100      	bne.n	291c <__aeabi_dsub+0x408>
    291a:	e0e2      	b.n	2ae2 <__aeabi_dsub+0x5ce>
    291c:	000c      	movs	r4, r1
    291e:	0017      	movs	r7, r2
    2920:	4698      	mov	r8, r3
    2922:	4e85      	ldr	r6, [pc, #532]	; (2b38 <__aeabi_dsub+0x624>)
    2924:	e67c      	b.n	2620 <__aeabi_dsub+0x10c>
    2926:	2500      	movs	r5, #0
    2928:	e780      	b.n	282c <__aeabi_dsub+0x318>
    292a:	2100      	movs	r1, #0
    292c:	e78e      	b.n	284c <__aeabi_dsub+0x338>
    292e:	0023      	movs	r3, r4
    2930:	4650      	mov	r0, sl
    2932:	4303      	orrs	r3, r0
    2934:	2e00      	cmp	r6, #0
    2936:	d000      	beq.n	293a <__aeabi_dsub+0x426>
    2938:	e0a8      	b.n	2a8c <__aeabi_dsub+0x578>
    293a:	2b00      	cmp	r3, #0
    293c:	d100      	bne.n	2940 <__aeabi_dsub+0x42c>
    293e:	e0de      	b.n	2afe <__aeabi_dsub+0x5ea>
    2940:	000b      	movs	r3, r1
    2942:	4313      	orrs	r3, r2
    2944:	d100      	bne.n	2948 <__aeabi_dsub+0x434>
    2946:	e66b      	b.n	2620 <__aeabi_dsub+0x10c>
    2948:	4452      	add	r2, sl
    294a:	4552      	cmp	r2, sl
    294c:	4180      	sbcs	r0, r0
    294e:	1864      	adds	r4, r4, r1
    2950:	4240      	negs	r0, r0
    2952:	1824      	adds	r4, r4, r0
    2954:	0017      	movs	r7, r2
    2956:	0223      	lsls	r3, r4, #8
    2958:	d400      	bmi.n	295c <__aeabi_dsub+0x448>
    295a:	e6fd      	b.n	2758 <__aeabi_dsub+0x244>
    295c:	4b77      	ldr	r3, [pc, #476]	; (2b3c <__aeabi_dsub+0x628>)
    295e:	4666      	mov	r6, ip
    2960:	401c      	ands	r4, r3
    2962:	e65d      	b.n	2620 <__aeabi_dsub+0x10c>
    2964:	0025      	movs	r5, r4
    2966:	4650      	mov	r0, sl
    2968:	4305      	orrs	r5, r0
    296a:	2e00      	cmp	r6, #0
    296c:	d1cf      	bne.n	290e <__aeabi_dsub+0x3fa>
    296e:	2d00      	cmp	r5, #0
    2970:	d14f      	bne.n	2a12 <__aeabi_dsub+0x4fe>
    2972:	000c      	movs	r4, r1
    2974:	4314      	orrs	r4, r2
    2976:	d100      	bne.n	297a <__aeabi_dsub+0x466>
    2978:	e0a0      	b.n	2abc <__aeabi_dsub+0x5a8>
    297a:	000c      	movs	r4, r1
    297c:	0017      	movs	r7, r2
    297e:	4698      	mov	r8, r3
    2980:	e64e      	b.n	2620 <__aeabi_dsub+0x10c>
    2982:	4666      	mov	r6, ip
    2984:	2400      	movs	r4, #0
    2986:	2700      	movs	r7, #0
    2988:	e685      	b.n	2696 <__aeabi_dsub+0x182>
    298a:	001f      	movs	r7, r3
    298c:	0008      	movs	r0, r1
    298e:	3f20      	subs	r7, #32
    2990:	40f8      	lsrs	r0, r7
    2992:	0007      	movs	r7, r0
    2994:	2b20      	cmp	r3, #32
    2996:	d100      	bne.n	299a <__aeabi_dsub+0x486>
    2998:	e08e      	b.n	2ab8 <__aeabi_dsub+0x5a4>
    299a:	2040      	movs	r0, #64	; 0x40
    299c:	1ac3      	subs	r3, r0, r3
    299e:	4099      	lsls	r1, r3
    29a0:	430a      	orrs	r2, r1
    29a2:	1e51      	subs	r1, r2, #1
    29a4:	418a      	sbcs	r2, r1
    29a6:	2100      	movs	r1, #0
    29a8:	4317      	orrs	r7, r2
    29aa:	e692      	b.n	26d2 <__aeabi_dsub+0x1be>
    29ac:	2e00      	cmp	r6, #0
    29ae:	d114      	bne.n	29da <__aeabi_dsub+0x4c6>
    29b0:	0026      	movs	r6, r4
    29b2:	4650      	mov	r0, sl
    29b4:	4306      	orrs	r6, r0
    29b6:	d062      	beq.n	2a7e <__aeabi_dsub+0x56a>
    29b8:	43db      	mvns	r3, r3
    29ba:	2b00      	cmp	r3, #0
    29bc:	d15c      	bne.n	2a78 <__aeabi_dsub+0x564>
    29be:	1887      	adds	r7, r0, r2
    29c0:	4297      	cmp	r7, r2
    29c2:	4192      	sbcs	r2, r2
    29c4:	1864      	adds	r4, r4, r1
    29c6:	4252      	negs	r2, r2
    29c8:	18a4      	adds	r4, r4, r2
    29ca:	4666      	mov	r6, ip
    29cc:	e687      	b.n	26de <__aeabi_dsub+0x1ca>
    29ce:	4650      	mov	r0, sl
    29d0:	4320      	orrs	r0, r4
    29d2:	1e44      	subs	r4, r0, #1
    29d4:	41a0      	sbcs	r0, r4
    29d6:	2400      	movs	r4, #0
    29d8:	e760      	b.n	289c <__aeabi_dsub+0x388>
    29da:	4e57      	ldr	r6, [pc, #348]	; (2b38 <__aeabi_dsub+0x624>)
    29dc:	45b4      	cmp	ip, r6
    29de:	d04e      	beq.n	2a7e <__aeabi_dsub+0x56a>
    29e0:	2680      	movs	r6, #128	; 0x80
    29e2:	0436      	lsls	r6, r6, #16
    29e4:	425b      	negs	r3, r3
    29e6:	4334      	orrs	r4, r6
    29e8:	2b38      	cmp	r3, #56	; 0x38
    29ea:	dd00      	ble.n	29ee <__aeabi_dsub+0x4da>
    29ec:	e07f      	b.n	2aee <__aeabi_dsub+0x5da>
    29ee:	2b1f      	cmp	r3, #31
    29f0:	dd00      	ble.n	29f4 <__aeabi_dsub+0x4e0>
    29f2:	e08b      	b.n	2b0c <__aeabi_dsub+0x5f8>
    29f4:	2620      	movs	r6, #32
    29f6:	0027      	movs	r7, r4
    29f8:	4650      	mov	r0, sl
    29fa:	1af6      	subs	r6, r6, r3
    29fc:	40b7      	lsls	r7, r6
    29fe:	40d8      	lsrs	r0, r3
    2a00:	4307      	orrs	r7, r0
    2a02:	4650      	mov	r0, sl
    2a04:	40b0      	lsls	r0, r6
    2a06:	1e46      	subs	r6, r0, #1
    2a08:	41b0      	sbcs	r0, r6
    2a0a:	4307      	orrs	r7, r0
    2a0c:	40dc      	lsrs	r4, r3
    2a0e:	18bf      	adds	r7, r7, r2
    2a10:	e7d6      	b.n	29c0 <__aeabi_dsub+0x4ac>
    2a12:	000d      	movs	r5, r1
    2a14:	4315      	orrs	r5, r2
    2a16:	d100      	bne.n	2a1a <__aeabi_dsub+0x506>
    2a18:	e602      	b.n	2620 <__aeabi_dsub+0x10c>
    2a1a:	4650      	mov	r0, sl
    2a1c:	1a80      	subs	r0, r0, r2
    2a1e:	4582      	cmp	sl, r0
    2a20:	41bf      	sbcs	r7, r7
    2a22:	1a65      	subs	r5, r4, r1
    2a24:	427f      	negs	r7, r7
    2a26:	1bed      	subs	r5, r5, r7
    2a28:	4684      	mov	ip, r0
    2a2a:	0228      	lsls	r0, r5, #8
    2a2c:	d400      	bmi.n	2a30 <__aeabi_dsub+0x51c>
    2a2e:	e68d      	b.n	274c <__aeabi_dsub+0x238>
    2a30:	4650      	mov	r0, sl
    2a32:	1a17      	subs	r7, r2, r0
    2a34:	42ba      	cmp	r2, r7
    2a36:	4192      	sbcs	r2, r2
    2a38:	1b0c      	subs	r4, r1, r4
    2a3a:	4252      	negs	r2, r2
    2a3c:	1aa4      	subs	r4, r4, r2
    2a3e:	4698      	mov	r8, r3
    2a40:	e5ee      	b.n	2620 <__aeabi_dsub+0x10c>
    2a42:	000d      	movs	r5, r1
    2a44:	4315      	orrs	r5, r2
    2a46:	d100      	bne.n	2a4a <__aeabi_dsub+0x536>
    2a48:	e76b      	b.n	2922 <__aeabi_dsub+0x40e>
    2a4a:	4650      	mov	r0, sl
    2a4c:	0767      	lsls	r7, r4, #29
    2a4e:	08c0      	lsrs	r0, r0, #3
    2a50:	4307      	orrs	r7, r0
    2a52:	2080      	movs	r0, #128	; 0x80
    2a54:	08e4      	lsrs	r4, r4, #3
    2a56:	0300      	lsls	r0, r0, #12
    2a58:	4204      	tst	r4, r0
    2a5a:	d007      	beq.n	2a6c <__aeabi_dsub+0x558>
    2a5c:	08cd      	lsrs	r5, r1, #3
    2a5e:	4205      	tst	r5, r0
    2a60:	d104      	bne.n	2a6c <__aeabi_dsub+0x558>
    2a62:	002c      	movs	r4, r5
    2a64:	4698      	mov	r8, r3
    2a66:	08d7      	lsrs	r7, r2, #3
    2a68:	0749      	lsls	r1, r1, #29
    2a6a:	430f      	orrs	r7, r1
    2a6c:	0f7b      	lsrs	r3, r7, #29
    2a6e:	00e4      	lsls	r4, r4, #3
    2a70:	431c      	orrs	r4, r3
    2a72:	00ff      	lsls	r7, r7, #3
    2a74:	4e30      	ldr	r6, [pc, #192]	; (2b38 <__aeabi_dsub+0x624>)
    2a76:	e5d3      	b.n	2620 <__aeabi_dsub+0x10c>
    2a78:	4e2f      	ldr	r6, [pc, #188]	; (2b38 <__aeabi_dsub+0x624>)
    2a7a:	45b4      	cmp	ip, r6
    2a7c:	d1b4      	bne.n	29e8 <__aeabi_dsub+0x4d4>
    2a7e:	000c      	movs	r4, r1
    2a80:	0017      	movs	r7, r2
    2a82:	4666      	mov	r6, ip
    2a84:	e5cc      	b.n	2620 <__aeabi_dsub+0x10c>
    2a86:	2700      	movs	r7, #0
    2a88:	2400      	movs	r4, #0
    2a8a:	e5e8      	b.n	265e <__aeabi_dsub+0x14a>
    2a8c:	2b00      	cmp	r3, #0
    2a8e:	d039      	beq.n	2b04 <__aeabi_dsub+0x5f0>
    2a90:	000b      	movs	r3, r1
    2a92:	4313      	orrs	r3, r2
    2a94:	d100      	bne.n	2a98 <__aeabi_dsub+0x584>
    2a96:	e744      	b.n	2922 <__aeabi_dsub+0x40e>
    2a98:	08c0      	lsrs	r0, r0, #3
    2a9a:	0767      	lsls	r7, r4, #29
    2a9c:	4307      	orrs	r7, r0
    2a9e:	2080      	movs	r0, #128	; 0x80
    2aa0:	08e4      	lsrs	r4, r4, #3
    2aa2:	0300      	lsls	r0, r0, #12
    2aa4:	4204      	tst	r4, r0
    2aa6:	d0e1      	beq.n	2a6c <__aeabi_dsub+0x558>
    2aa8:	08cb      	lsrs	r3, r1, #3
    2aaa:	4203      	tst	r3, r0
    2aac:	d1de      	bne.n	2a6c <__aeabi_dsub+0x558>
    2aae:	08d7      	lsrs	r7, r2, #3
    2ab0:	0749      	lsls	r1, r1, #29
    2ab2:	430f      	orrs	r7, r1
    2ab4:	001c      	movs	r4, r3
    2ab6:	e7d9      	b.n	2a6c <__aeabi_dsub+0x558>
    2ab8:	2100      	movs	r1, #0
    2aba:	e771      	b.n	29a0 <__aeabi_dsub+0x48c>
    2abc:	2500      	movs	r5, #0
    2abe:	2700      	movs	r7, #0
    2ac0:	e5e9      	b.n	2696 <__aeabi_dsub+0x182>
    2ac2:	002e      	movs	r6, r5
    2ac4:	0027      	movs	r7, r4
    2ac6:	3e20      	subs	r6, #32
    2ac8:	40f7      	lsrs	r7, r6
    2aca:	2d20      	cmp	r5, #32
    2acc:	d02f      	beq.n	2b2e <__aeabi_dsub+0x61a>
    2ace:	2640      	movs	r6, #64	; 0x40
    2ad0:	1b75      	subs	r5, r6, r5
    2ad2:	40ac      	lsls	r4, r5
    2ad4:	4650      	mov	r0, sl
    2ad6:	4320      	orrs	r0, r4
    2ad8:	1e44      	subs	r4, r0, #1
    2ada:	41a0      	sbcs	r0, r4
    2adc:	2400      	movs	r4, #0
    2ade:	4338      	orrs	r0, r7
    2ae0:	e6dc      	b.n	289c <__aeabi_dsub+0x388>
    2ae2:	2480      	movs	r4, #128	; 0x80
    2ae4:	2500      	movs	r5, #0
    2ae6:	0324      	lsls	r4, r4, #12
    2ae8:	4e13      	ldr	r6, [pc, #76]	; (2b38 <__aeabi_dsub+0x624>)
    2aea:	2700      	movs	r7, #0
    2aec:	e5d3      	b.n	2696 <__aeabi_dsub+0x182>
    2aee:	4650      	mov	r0, sl
    2af0:	4320      	orrs	r0, r4
    2af2:	0007      	movs	r7, r0
    2af4:	1e78      	subs	r0, r7, #1
    2af6:	4187      	sbcs	r7, r0
    2af8:	2400      	movs	r4, #0
    2afa:	18bf      	adds	r7, r7, r2
    2afc:	e760      	b.n	29c0 <__aeabi_dsub+0x4ac>
    2afe:	000c      	movs	r4, r1
    2b00:	0017      	movs	r7, r2
    2b02:	e58d      	b.n	2620 <__aeabi_dsub+0x10c>
    2b04:	000c      	movs	r4, r1
    2b06:	0017      	movs	r7, r2
    2b08:	4e0b      	ldr	r6, [pc, #44]	; (2b38 <__aeabi_dsub+0x624>)
    2b0a:	e589      	b.n	2620 <__aeabi_dsub+0x10c>
    2b0c:	001e      	movs	r6, r3
    2b0e:	0027      	movs	r7, r4
    2b10:	3e20      	subs	r6, #32
    2b12:	40f7      	lsrs	r7, r6
    2b14:	2b20      	cmp	r3, #32
    2b16:	d00c      	beq.n	2b32 <__aeabi_dsub+0x61e>
    2b18:	2640      	movs	r6, #64	; 0x40
    2b1a:	1af3      	subs	r3, r6, r3
    2b1c:	409c      	lsls	r4, r3
    2b1e:	4650      	mov	r0, sl
    2b20:	4320      	orrs	r0, r4
    2b22:	1e44      	subs	r4, r0, #1
    2b24:	41a0      	sbcs	r0, r4
    2b26:	4307      	orrs	r7, r0
    2b28:	2400      	movs	r4, #0
    2b2a:	18bf      	adds	r7, r7, r2
    2b2c:	e748      	b.n	29c0 <__aeabi_dsub+0x4ac>
    2b2e:	2400      	movs	r4, #0
    2b30:	e7d0      	b.n	2ad4 <__aeabi_dsub+0x5c0>
    2b32:	2400      	movs	r4, #0
    2b34:	e7f3      	b.n	2b1e <__aeabi_dsub+0x60a>
    2b36:	46c0      	nop			; (mov r8, r8)
    2b38:	000007ff 	.word	0x000007ff
    2b3c:	ff7fffff 	.word	0xff7fffff

00002b40 <__aeabi_d2iz>:
    2b40:	b530      	push	{r4, r5, lr}
    2b42:	4d13      	ldr	r5, [pc, #76]	; (2b90 <__aeabi_d2iz+0x50>)
    2b44:	030a      	lsls	r2, r1, #12
    2b46:	004b      	lsls	r3, r1, #1
    2b48:	0b12      	lsrs	r2, r2, #12
    2b4a:	0d5b      	lsrs	r3, r3, #21
    2b4c:	0fc9      	lsrs	r1, r1, #31
    2b4e:	2400      	movs	r4, #0
    2b50:	42ab      	cmp	r3, r5
    2b52:	dd10      	ble.n	2b76 <__aeabi_d2iz+0x36>
    2b54:	4c0f      	ldr	r4, [pc, #60]	; (2b94 <__aeabi_d2iz+0x54>)
    2b56:	42a3      	cmp	r3, r4
    2b58:	dc0f      	bgt.n	2b7a <__aeabi_d2iz+0x3a>
    2b5a:	2480      	movs	r4, #128	; 0x80
    2b5c:	4d0e      	ldr	r5, [pc, #56]	; (2b98 <__aeabi_d2iz+0x58>)
    2b5e:	0364      	lsls	r4, r4, #13
    2b60:	4322      	orrs	r2, r4
    2b62:	1aed      	subs	r5, r5, r3
    2b64:	2d1f      	cmp	r5, #31
    2b66:	dd0b      	ble.n	2b80 <__aeabi_d2iz+0x40>
    2b68:	480c      	ldr	r0, [pc, #48]	; (2b9c <__aeabi_d2iz+0x5c>)
    2b6a:	1ac3      	subs	r3, r0, r3
    2b6c:	40da      	lsrs	r2, r3
    2b6e:	4254      	negs	r4, r2
    2b70:	2900      	cmp	r1, #0
    2b72:	d100      	bne.n	2b76 <__aeabi_d2iz+0x36>
    2b74:	0014      	movs	r4, r2
    2b76:	0020      	movs	r0, r4
    2b78:	bd30      	pop	{r4, r5, pc}
    2b7a:	4b09      	ldr	r3, [pc, #36]	; (2ba0 <__aeabi_d2iz+0x60>)
    2b7c:	18cc      	adds	r4, r1, r3
    2b7e:	e7fa      	b.n	2b76 <__aeabi_d2iz+0x36>
    2b80:	4c08      	ldr	r4, [pc, #32]	; (2ba4 <__aeabi_d2iz+0x64>)
    2b82:	40e8      	lsrs	r0, r5
    2b84:	46a4      	mov	ip, r4
    2b86:	4463      	add	r3, ip
    2b88:	409a      	lsls	r2, r3
    2b8a:	4302      	orrs	r2, r0
    2b8c:	e7ef      	b.n	2b6e <__aeabi_d2iz+0x2e>
    2b8e:	46c0      	nop			; (mov r8, r8)
    2b90:	000003fe 	.word	0x000003fe
    2b94:	0000041d 	.word	0x0000041d
    2b98:	00000433 	.word	0x00000433
    2b9c:	00000413 	.word	0x00000413
    2ba0:	7fffffff 	.word	0x7fffffff
    2ba4:	fffffbed 	.word	0xfffffbed

00002ba8 <__aeabi_ui2d>:
    2ba8:	b510      	push	{r4, lr}
    2baa:	1e04      	subs	r4, r0, #0
    2bac:	d028      	beq.n	2c00 <__aeabi_ui2d+0x58>
    2bae:	f000 f833 	bl	2c18 <__clzsi2>
    2bb2:	4b15      	ldr	r3, [pc, #84]	; (2c08 <__aeabi_ui2d+0x60>)
    2bb4:	4a15      	ldr	r2, [pc, #84]	; (2c0c <__aeabi_ui2d+0x64>)
    2bb6:	1a1b      	subs	r3, r3, r0
    2bb8:	1ad2      	subs	r2, r2, r3
    2bba:	2a1f      	cmp	r2, #31
    2bbc:	dd15      	ble.n	2bea <__aeabi_ui2d+0x42>
    2bbe:	4a14      	ldr	r2, [pc, #80]	; (2c10 <__aeabi_ui2d+0x68>)
    2bc0:	1ad2      	subs	r2, r2, r3
    2bc2:	4094      	lsls	r4, r2
    2bc4:	2200      	movs	r2, #0
    2bc6:	0324      	lsls	r4, r4, #12
    2bc8:	055b      	lsls	r3, r3, #21
    2bca:	0b24      	lsrs	r4, r4, #12
    2bcc:	0d5b      	lsrs	r3, r3, #21
    2bce:	2100      	movs	r1, #0
    2bd0:	0010      	movs	r0, r2
    2bd2:	0324      	lsls	r4, r4, #12
    2bd4:	0d0a      	lsrs	r2, r1, #20
    2bd6:	0b24      	lsrs	r4, r4, #12
    2bd8:	0512      	lsls	r2, r2, #20
    2bda:	4322      	orrs	r2, r4
    2bdc:	4c0d      	ldr	r4, [pc, #52]	; (2c14 <__aeabi_ui2d+0x6c>)
    2bde:	051b      	lsls	r3, r3, #20
    2be0:	4022      	ands	r2, r4
    2be2:	4313      	orrs	r3, r2
    2be4:	005b      	lsls	r3, r3, #1
    2be6:	0859      	lsrs	r1, r3, #1
    2be8:	bd10      	pop	{r4, pc}
    2bea:	0021      	movs	r1, r4
    2bec:	4091      	lsls	r1, r2
    2bee:	000a      	movs	r2, r1
    2bf0:	210b      	movs	r1, #11
    2bf2:	1a08      	subs	r0, r1, r0
    2bf4:	40c4      	lsrs	r4, r0
    2bf6:	055b      	lsls	r3, r3, #21
    2bf8:	0324      	lsls	r4, r4, #12
    2bfa:	0b24      	lsrs	r4, r4, #12
    2bfc:	0d5b      	lsrs	r3, r3, #21
    2bfe:	e7e6      	b.n	2bce <__aeabi_ui2d+0x26>
    2c00:	2300      	movs	r3, #0
    2c02:	2400      	movs	r4, #0
    2c04:	2200      	movs	r2, #0
    2c06:	e7e2      	b.n	2bce <__aeabi_ui2d+0x26>
    2c08:	0000041e 	.word	0x0000041e
    2c0c:	00000433 	.word	0x00000433
    2c10:	00000413 	.word	0x00000413
    2c14:	800fffff 	.word	0x800fffff

00002c18 <__clzsi2>:
    2c18:	211c      	movs	r1, #28
    2c1a:	2301      	movs	r3, #1
    2c1c:	041b      	lsls	r3, r3, #16
    2c1e:	4298      	cmp	r0, r3
    2c20:	d301      	bcc.n	2c26 <__clzsi2+0xe>
    2c22:	0c00      	lsrs	r0, r0, #16
    2c24:	3910      	subs	r1, #16
    2c26:	0a1b      	lsrs	r3, r3, #8
    2c28:	4298      	cmp	r0, r3
    2c2a:	d301      	bcc.n	2c30 <__clzsi2+0x18>
    2c2c:	0a00      	lsrs	r0, r0, #8
    2c2e:	3908      	subs	r1, #8
    2c30:	091b      	lsrs	r3, r3, #4
    2c32:	4298      	cmp	r0, r3
    2c34:	d301      	bcc.n	2c3a <__clzsi2+0x22>
    2c36:	0900      	lsrs	r0, r0, #4
    2c38:	3904      	subs	r1, #4
    2c3a:	a202      	add	r2, pc, #8	; (adr r2, 2c44 <__clzsi2+0x2c>)
    2c3c:	5c10      	ldrb	r0, [r2, r0]
    2c3e:	1840      	adds	r0, r0, r1
    2c40:	4770      	bx	lr
    2c42:	46c0      	nop			; (mov r8, r8)
    2c44:	02020304 	.word	0x02020304
    2c48:	01010101 	.word	0x01010101
	...

00002c54 <__libc_init_array>:
    2c54:	b570      	push	{r4, r5, r6, lr}
    2c56:	2600      	movs	r6, #0
    2c58:	4d0c      	ldr	r5, [pc, #48]	; (2c8c <__libc_init_array+0x38>)
    2c5a:	4c0d      	ldr	r4, [pc, #52]	; (2c90 <__libc_init_array+0x3c>)
    2c5c:	1b64      	subs	r4, r4, r5
    2c5e:	10a4      	asrs	r4, r4, #2
    2c60:	42a6      	cmp	r6, r4
    2c62:	d109      	bne.n	2c78 <__libc_init_array+0x24>
    2c64:	2600      	movs	r6, #0
    2c66:	f000 f875 	bl	2d54 <_init>
    2c6a:	4d0a      	ldr	r5, [pc, #40]	; (2c94 <__libc_init_array+0x40>)
    2c6c:	4c0a      	ldr	r4, [pc, #40]	; (2c98 <__libc_init_array+0x44>)
    2c6e:	1b64      	subs	r4, r4, r5
    2c70:	10a4      	asrs	r4, r4, #2
    2c72:	42a6      	cmp	r6, r4
    2c74:	d105      	bne.n	2c82 <__libc_init_array+0x2e>
    2c76:	bd70      	pop	{r4, r5, r6, pc}
    2c78:	00b3      	lsls	r3, r6, #2
    2c7a:	58eb      	ldr	r3, [r5, r3]
    2c7c:	4798      	blx	r3
    2c7e:	3601      	adds	r6, #1
    2c80:	e7ee      	b.n	2c60 <__libc_init_array+0xc>
    2c82:	00b3      	lsls	r3, r6, #2
    2c84:	58eb      	ldr	r3, [r5, r3]
    2c86:	4798      	blx	r3
    2c88:	3601      	adds	r6, #1
    2c8a:	e7f2      	b.n	2c72 <__libc_init_array+0x1e>
    2c8c:	00002d60 	.word	0x00002d60
    2c90:	00002d60 	.word	0x00002d60
    2c94:	00002d60 	.word	0x00002d60
    2c98:	00002d64 	.word	0x00002d64
    2c9c:	42000400 	.word	0x42000400
    2ca0:	42000800 	.word	0x42000800
    2ca4:	42000c00 	.word	0x42000c00
    2ca8:	42001000 	.word	0x42001000
    2cac:	42001400 	.word	0x42001400
    2cb0:	42001800 	.word	0x42001800
    2cb4:	00000c8e 	.word	0x00000c8e
    2cb8:	00000c8a 	.word	0x00000c8a
    2cbc:	00000c8a 	.word	0x00000c8a
    2cc0:	00000cbc 	.word	0x00000cbc
    2cc4:	00000cbc 	.word	0x00000cbc
    2cc8:	00000ca6 	.word	0x00000ca6
    2ccc:	00000c94 	.word	0x00000c94
    2cd0:	00000cac 	.word	0x00000cac
    2cd4:	00001ba4 	.word	0x00001ba4
    2cd8:	00001b86 	.word	0x00001b86
    2cdc:	00001b40 	.word	0x00001b40
    2ce0:	00001a5e 	.word	0x00001a5e
    2ce4:	00001b40 	.word	0x00001b40
    2ce8:	00001b78 	.word	0x00001b78
    2cec:	00001b40 	.word	0x00001b40
    2cf0:	00001a5e 	.word	0x00001a5e
    2cf4:	00001b86 	.word	0x00001b86
    2cf8:	00001b86 	.word	0x00001b86
    2cfc:	00001b78 	.word	0x00001b78
    2d00:	00001a5e 	.word	0x00001a5e
    2d04:	00001a56 	.word	0x00001a56
    2d08:	00001a56 	.word	0x00001a56
    2d0c:	00001a56 	.word	0x00001a56
    2d10:	00001dbc 	.word	0x00001dbc
    2d14:	00002204 	.word	0x00002204
    2d18:	000020c4 	.word	0x000020c4
    2d1c:	000020c4 	.word	0x000020c4
    2d20:	000020c0 	.word	0x000020c0
    2d24:	000021dc 	.word	0x000021dc
    2d28:	000021dc 	.word	0x000021dc
    2d2c:	000021ce 	.word	0x000021ce
    2d30:	000020c0 	.word	0x000020c0
    2d34:	000021dc 	.word	0x000021dc
    2d38:	000021ce 	.word	0x000021ce
    2d3c:	000021dc 	.word	0x000021dc
    2d40:	000020c0 	.word	0x000020c0
    2d44:	000021e4 	.word	0x000021e4
    2d48:	000021e4 	.word	0x000021e4
    2d4c:	000021e4 	.word	0x000021e4
    2d50:	000023e8 	.word	0x000023e8

00002d54 <_init>:
    2d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d56:	46c0      	nop			; (mov r8, r8)
    2d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2d5a:	bc08      	pop	{r3}
    2d5c:	469e      	mov	lr, r3
    2d5e:	4770      	bx	lr

00002d60 <__init_array_start>:
    2d60:	000000e5 	.word	0x000000e5

00002d64 <_fini>:
    2d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d66:	46c0      	nop			; (mov r8, r8)
    2d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2d6a:	bc08      	pop	{r3}
    2d6c:	469e      	mov	lr, r3
    2d6e:	4770      	bx	lr

00002d70 <__fini_array_start>:
    2d70:	000000bd 	.word	0x000000bd
